<# start.ps1
	.SYNOPSIS
		Initializes and launches the Entropia Dashboard application.

	.DESCRIPTION
		This script serves as the main entry point for the Entropia Dashboard. It performs critical environment checks,
		including Administrator rights verification, ensuring 32-bit execution context, and setting the required PowerShell
		Execution Policy ('Bypass') for the current process. It establishes necessary application paths within the user's
		AppData directory. The script manages the deployment and loading of PowerShell modules (.psm1) and associated
		resources (.dll, .ico) from the source directory or Base64 Content to the AppData directory, respecting defined load 
		order and dependencies. It includes robust fallback mechanisms for module loading, particularly for scenarios where 
		the	script might be running in different environments. Configuration settings are loaded from 'config.ini',
		with defaults applied if the file or specific settings are missing. Finally, it initializes the Windows Forms
		user interface (UI), runs the application message loop to keep the UI responsive, and handles graceful
		shutdown and resource cleanup via the 'finally' block and the Stop-Dashboard function.

	.NOTES
		Author: Immortal / Divine
		Version: 1.1
		Requires: PowerShell 5.1+, .NET Framework 4.5+, Administrator privileges, Bypassed 32-bit PowerShell execution.

		Documentation Standards Followed:
		- Module Level Documentation: Synopsis, Description, Notes.
		- Function Level Documentation: Synopsis, Parameter Descriptions, Output Specifications.
		- Code Organization: Logical grouping using #region / #endregion. Functions organized by workflow.
		- Step Documentation: Code blocks enclosed in '#region Step: Description' / '#endregion Step: Description'.
		- Variable Definitions: Inline comments describing the purpose of significant variables.
		- Error Handling: Comprehensive try/catch/finally blocks with error logging and user notification.

		Execution Policy Note: This script requires and attempts to set the execution policy to 'Bypass' for the *current process*.
		This is necessary for its dynamic module loading and execution features but reduces script execution security restrictions.
		Ensure you understand the implications before running this script in sensitive environments.

		Invoke-Expression Note: One of the fallback module import methods uses Invoke-Expression as a last resort. This cmdlet
		can execute arbitrary code and poses a security risk if the module content is compromised. This method is only used
		if standard Import-Module and safer alternatives fail.
#>

[CmdletBinding()]
param()

#region Detect -Verbose argument when running as EXE/Script
	# If -Verbose is passed as a command-line argument (especially relevant when compiled to EXE),
	# manually set the $VerbosePreference. 
	if ($args -contains '-Verbose') {
		$VerbosePreference = "Continue"
		Write-Verbose "-Verbose argument detected, enabling verbose preference."
	}
#endregion Detect -Verbose argument when running as EXE/Script

# Set execution policy *after* potentially setting $VerbosePreference
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force -ErrorAction Stop


#region Custom Write-Verbose


function Write-Verbose {
	[CmdletBinding()]
	param(
	[Parameter(Mandatory = $true, Position = 0)]
	[string]$Message,
	[string]$ForegroundColor = 'DarkGray'

	)
	
	# Only proceed if verbose output is enabled
	if ($VerbosePreference -eq "Continue") {
		$dateStr = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
		$callStack = Get-PSCallStack
		$caller = if ($callStack.Count -gt 1) { $callStack[1] } else { $callStack[0] }
		
		$callerName = if ($caller.Command) { $caller.Command } else { "Script" }
		
		$bracketedCaller = "[$callerName]"
		$paddedCaller = $bracketedCaller.PadRight(35)
		$prefix = "$dateStr - $paddedCaller - "
		$indentation = " " * $prefix.Length
		
		# Get console width for proper wrapping
        # Consider making this dynamic or configurable if 800 isn't always suitable
		$consoleWidth = if ($Host.UI.RawUI.WindowSize.Width -gt 0) {
			$Host.UI.RawUI.WindowSize.Width # Use actual width if available
		} else {
			800 # Default fallback width if console width can't be determined (e.g., non-interactive)
		}
        # Ensure consoleWidth is an integer for calculations
        try {
            $consoleWidth = [int]$consoleWidth
        } catch {
            $consoleWidth = 800 # Fallback if conversion fails
        }

		# Process message with proper wrapping and indentation
		$lines = $Message -split "`r`n"
		$formattedLines = @()
		
        # Calculate available width for text once
        $availableWidth = $consoleWidth - $prefix.Length - 2 # Subtract 2 for potential padding/margin

		foreach ($line in $lines) {
			# If line is shorter than available width, add it as-is
			if ($line.Length -le $availableWidth) {
				$formattedLines += $line
			} else {
				# For long lines, wrap them with proper word breaks
				$words = $line -split ' '
				$currentLine = ""
				
				foreach ($word in $words) {
					# Check if adding this word would exceed the line length
					if (($currentLine.Length + $word.Length + 1) -le $availableWidth) {
						# Add word with space
						if ($currentLine.Length -gt 0) {
							$currentLine += " $word"
						} else {
							$currentLine = $word
						}
					} else {
						# Line would be too long, add current line to results and start a new one
						if ($currentLine.Length -gt 0) {
							$formattedLines += $currentLine
							$currentLine = $word
						} else {
							# Word itself is too long for a line, add it anyway (might still overflow slightly)
							$formattedLines += $word
							$currentLine = ""
						}
					}
				}
				
				# Add the last line if not empty
				if ($currentLine.Length -gt 0) {
					$formattedLines += $currentLine
				}
			}
		}
		
		# Join lines with proper indentation for wrapped lines
        # Ensure there's at least one line before accessing index 0
        $formattedMessage = ""
        if ($formattedLines.Count -gt 0) {
            $formattedMessage = $formattedLines[0]
            for ($i = 1; $i -lt $formattedLines.Count; $i++) {
                $formattedMessage += "`r`n$indentation$($formattedLines[$i])"
            }
        }
		
		# Set color based on message type (Using a switch statement is slightly cleaner)
        $color = switch ($ForegroundColor.ToLower()) {
            'red'    { [ConsoleColor]::Red }
            'yellow' { [ConsoleColor]::Yellow }
            'green'  { [ConsoleColor]::Green }
            'cyan'   { [ConsoleColor]::Cyan }
            default  { [ConsoleColor]::DarkGray }
        }

		# Output to console with color
		$originalColor = $host.UI.RawUI.ForegroundColor
		try {
			$host.UI.RawUI.ForegroundColor = $color
            # Write to Error stream to ensure it appears like standard Write-Verbose
			[Console]::Error.WriteLine("$prefix$formattedMessage")
		} finally {
			$host.UI.RawUI.ForegroundColor = $originalColor
		}
		
		# Also write to the verbose stream for proper logging/capture
        # This part seems overly complex and might not be necessary if [Console]::Error.WriteLine works reliably.
        # The standard Write-Verbose cmdlet should handle redirection correctly if called properly.
        # Consider simplifying this or ensuring it adds value. For now, keeping as is.
		$wrappedCmdlet = $ExecutionContext.InvokeCommand.GetCommand(
		"Microsoft.PowerShell.Utility\Write-Verbose",
		[System.Management.Automation.CommandTypes]::Cmdlet
		)
		
		# Use steppable pipeline for PowerShell 5.1 compatibility
		$scriptCmd = { & $wrappedCmdlet "$prefix$formattedMessage" }
		$steppablePipeline = $scriptCmd.GetSteppablePipeline()
		$steppablePipeline.Begin($true)
        # Ensure pipeline output is processed/ended if necessary
        # $steppablePipeline.Process($_) # If processing input
        $steppablePipeline.End() # Ensure pipeline completes
	}
}

try {
	Add-Type -AssemblyName System.Windows.Forms, System.Drawing
	Write-Verbose "INFO: Loaded System.Windows.Forms and System.Drawing assembly" # This will now work if -Verbose was passed
} catch {
	# Use the custom Write-Verbose for consistency, it checks $VerbosePreference internally
	Write-Verbose "ERROR: Failed to load required assemblies: $_" -ForegroundColor Red
	throw "Failed to initialize application. Required assemblies could not be loaded: $_"
}

#endregion Custom Write-Verbose

#region Global Configuration

	#region Step: Define Global Configuration Hashtable
		# This main hashtable holds all our settings, states, paths, resources, and module info. It's available everywhere in the script.
		$global:DashboardConfig = @{
			# Paths: Stores important folders and file locations for the app.
			Paths            = @{
				# Source: Folder with the dashboard's source scripts (.ps1, .psm1) and things like .dlls or .icos. Usually in the user's profile.
				Source   = Join-Path $env:USERPROFILE 'Entropia_Dashboard\.main'
				# App: The main app data folder in AppData\Roaming. We put modules, config files, and maybe logs here.
				App      = Join-Path $env:APPDATA 'Entropia_Dashboard\'
				# Modules: Subfolder in the AppData path. Write-Module puts module files (.psm1), libraries (.dll), and icons (.ico) here before loading them.
				Modules  = Join-Path $env:APPDATA 'Entropia_Dashboard\modules'
				# Icon: Full path to the app's icon file (.ico) for the main window. It should end up in the Modules folder.
				Icon     = Join-Path $env:APPDATA 'Entropia_Dashboard\modules\icon.ico'
				# FtoolDLL: Full path to ftool.dll, needed if the optional 'ftool.psm1' module is used. Should also be in the Modules folder.
				FtoolDLL = Join-Path $env:APPDATA 'Entropia_Dashboard\modules\ftool.dll'
				# Config: Full path to the main settings file ('config.ini'). Saves user choices and app settings. Found in the main AppData folder.
				Ini   = Join-Path $env:APPDATA 'Entropia_Dashboard\config.ini'
			}
			# State: Keeps track of what the application is doing right now.
			State            = @{
				# ConfigInitialized: Flag ($true/$false) to check if basic setup (like creating app folders) worked.
				ConfigInitialized = $false
				# UIInitialized: Flag ($true/$false) to see if the main window was set up correctly by 'ui.psm1'.
				UIInitialized     = $false
				# LoginActive: Flag ($true/$false) showing if an auto-login (from 'login.psm1') is running. Prevents doing it twice.
				LoginActive       = $false
				# LaunchActive: Flag ($true/$false) showing if a game launch (from 'launch.psm1') is happening. Prevents double launches.
				LaunchActive      = $false
				# IsRunningAsExe: Flag ($true/$false) figured out at start. True if running as an .exe, not a .ps1 script. Changes how modules load.
				IsRunningAsExe    = $false
			}
			# Resources: Groups for handling things that change, like timers, windows, and shared info.
			Resources        = @{
				# Timers: An ordered list ([ordered]@{...}) holding active timers (System.Windows.Forms.Timer) used by the app or modules. Stopped/cleaned up on exit.
				Timers              = [ordered]@{}
				# FtoolForms: An ordered list ([ordered]@{...}) keeping track of active Ftool windows (from 'ftool.psm1'). Closed/cleaned up on exit.
				FtoolForms          = [ordered]@{}
				# LastEventTimes: A list (@{...}) remembering when named events last happened. Good for slowing down or grouping actions in modules.
				LastEventTimes      = @{}
				# ExtensionData: A general list (@{...}) for modules/extensions to store and share any data needed across the app.
				ExtensionData       = @{}
				# ExtensionTracking: A list (@{...}) for modules/extensions to track things like status flags, process IDs, or other state info.
				ExtensionTracking   = @{}
				# LoadedModuleContent: A list (@{...}) holding the actual text content of loaded .psm1 modules. Mainly for backup loading methods or debugging.
				LoadedModuleContent = @{}
				# LaunchResources: A list (@{...}) for the launch module to store resources specific to launching game clients.
				LaunchResources     = @{}
			}
			# UI: Empty list (@{...}) filled by 'ui.psm1' when the UI starts. Holds references to important UI parts (windows, buttons, grids).
			UI               = @{
				Login        = @{}
			}
			# DefaultConfig: An ordered list ([ordered]@{...}) with default settings. Used by 'ini.psm1' if 'config.ini' is missing or incomplete.
			DefaultConfig    = [ordered]@{
				'LauncherPath' = [ordered]@{ 'LauncherPath' = 'Select_Launcher' } # Default if the game launcher path isn't in config.ini.
				'ProcessName'  = [ordered]@{ 'ProcessName' = 'neuz' }         # Default game process name to watch or use.
				'MaxClients'   = [ordered]@{ 'MaxClients' = '1' }                # Default max number of game clients allowed.
				'Login'        = [ordered]@{ 'Login' = '1,1,1,1,1,1,1,1,1,1' }             # Default list of login settings (format depends on 'login.psm1').
				'Ftool'        = [ordered]@{}                                    # Default empty section for 'ftool.psm1' related settings.
			}
			# Config: An ordered list ([ordered]@{...}) filled by 'ini.psm1' with settings from 'config.ini'. Overwrites defaults.
			Config           = [ordered]@{}
			# ConfigWriteTimer: Might hold a timer used by 'ini.psm1' to delay saving 'config.ini' often. Better performance, less disk activity.
			ConfigWriteTimer = @{}
			# LoadedModules: A list (@{...}) tracking filenames and full paths of modules that were written to AppData and/or loaded. Used for checking dependencies.
			LoadedModules    = @{}
		}
	#endregion Step: Define Global Configuration Hashtable

	#region Step: Define Module Metadata
		# Info about all known app modules: load order, importance (critical?), dependencies, and source file path.
		$global:DashboardConfig.Modules = @{
			# Critical modules: Must have these for the dashboard to work. If they fail, the app won't start.
			'classes.psm1'  = @{ 
				Priority = 'Critical';  
				Order = 1; 
				Dependencies = @();
				FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'classes.psm1');
				Base64Content = '
					
				'
			}
			'ini.psm1'      = @{ 
				Priority = 'Critical';  
				Order = 2; 
				Dependencies = @('classes.psm1');
				FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ini.psm1');
				Base64Content = '
					
				'
			}
			'ui.psm1'       = @{ 
				Priority = 'Critical';  
				Order = 3; 
				Dependencies = @('classes.psm1', 'ini.psm1');
				FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ui.psm1');
				Base64Content = '
					PCMgdWkucHNtMQ0KICAgIC5TWU5PUFNJUw0KICAgICAgICBVc2VyIEludGVyZmFjZSBNYW5hZ2VyIGZvciBFbnRyb3BpYSBEYXNoYm9hcmQuDQogICAgLkRFU0NSSVBUSU9ODQogICAgICAgIFRoaXMgbW9kdWxlIGNyZWF0ZXMgYW5kIG1hbmFnZXMgdGhlIGNvbXBsZXRlIHVzZXIgaW50ZXJmYWNlIGZvciBFbnRyb3BpYSBEYXNoYm9hcmQ6DQogICAgICAgIC0gQnVpbGRzIHRoZSBtYWluIGFwcGxpY2F0aW9uIHdpbmRvdyBhbmQgYWxsIGRpYWxvZyBmb3Jtcw0KICAgICAgICAtIENyZWF0ZXMgaW50ZXJhY3RpdmUgY29udHJvbHMgKGJ1dHRvbnMsIHBhbmVscywgZ3JpZHMsIHRleHQgYm94ZXMpDQogICAgICAgIC0gSGFuZGxlcyB3aW5kb3cgZHJhZ2dpbmcsIHJlc2l6aW5nLCBhbmQgcG9zaXRpb25pbmcNCiAgICAgICAgLSBNYW5hZ2VzIGNsaWVudCBwcm9jZXNzIG1vbml0b3JpbmcgZGlzcGxheQ0KICAgICAgICAtIEltcGxlbWVudHMgc2V0dGluZ3MgbWFuYWdlbWVudCB0aHJvdWdoIHZpc3VhbCBpbnRlcmZhY2UNCiAgICAgICAgLSBNYWludGFpbnMgcmVzcG9uc2l2ZSBsYXlvdXQgYWNyb3NzIGRpZmZlcmVudCBzY3JlZW4gc2l6ZXMNCiAgICAgICAgLSBQcm92aWRlcyBMYXVuY2ggLyBMb2dpbiAvIEZ0b29sIGF1dG9tYXRpb24NCiAgICAuTk9URVMNCiAgICAgICAgQXV0aG9yOiBJbW1vcnRhbCAvIERpdmluZQ0KICAgICAgICBWZXJzaW9uOiAxLjANCiAgICAgICAgUmVxdWlyZXM6IFBvd2VyU2hlbGwgNS4xKywgLk5FVCBGcmFtZXdvcmsgNC41KywgY2xhc3Nlcy5wc20xLCBpbmkucHNtMSwgZGF0YWdyaWQucHNtMQ0KDQogICAgICAgIERvY3VtZW50YXRpb24gU3RhbmRhcmRzIEZvbGxvd2VkOg0KICAgICAgICAtIE1vZHVsZSBMZXZlbCBEb2N1bWVudGF0aW9uOiBTeW5vcHNpcywgRGVzY3JpcHRpb24sIE5vdGVzLg0KICAgICAgICAtIEZ1bmN0aW9uIExldmVsIERvY3VtZW50YXRpb246IFN5bm9wc2lzLCBQYXJhbWV0ZXIgRGVzY3JpcHRpb25zLCBPdXRwdXQgU3BlY2lmaWNhdGlvbnMuDQogICAgICAgIC0gQ29kZSBPcmdhbml6YXRpb246IExvZ2ljYWwgZ3JvdXBpbmcgdXNpbmcgI3JlZ2lvbiAvICNlbmRyZWdpb24uIEZ1bmN0aW9ucyBvcmdhbml6ZWQgYnkgd29ya2Zsb3cuDQogICAgICAgIC0gU3RlcCBEb2N1bWVudGF0aW9uOiBDb2RlIGJsb2NrcyBlbmNsb3NlZCBpbiAnI3JlZ2lvbiBTdGVwOiBEZXNjcmlwdGlvbicgLyAnI2VuZHJlZ2lvbiBTdGVwOiBEZXNjcmlwdGlvbicuDQogICAgICAgIC0gVmFyaWFibGUgRGVmaW5pdGlvbnM6IElubGluZSBjb21tZW50cyBkZXNjcmliaW5nIHRoZSBwdXJwb3NlIG9mIHNpZ25pZmljYW50IHZhcmlhYmxlcy4NCiAgICAgICAgLSBFcnJvciBIYW5kbGluZzogQ29tcHJlaGVuc2l2ZSB0cnkvY2F0Y2gvZmluYWxseSBibG9ja3Mgd2l0aCBlcnJvciBsb2dnaW5nIGFuZCB1c2VyIG5vdGlmaWNhdGlvbi4NCg0KICAgICAgICBUaGlzIG1vZHVsZSByZWxpZXMgaGVhdmlseSBvbiB0aGUgZ2xvYmFsICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnIG9iamVjdCBmb3Igc3RhdGUgYW5kIGNvbmZpZ3VyYXRpb24uDQojPg0KDQojcmVnaW9uIEdsb2JhbCBWYXJpYWJsZXMNCiAgICAjcmVnaW9uIFN0ZXA6IERlZmluZSBzY3JpcHQtbGV2ZWwgd2luZG93IHN0YXRlIHRyYWNraW5nIHZhcmlhYmxlDQogICAgICAgICMgJHNjcmlwdDpXaW5kb3dTdGF0ZTogVHJhY2tzIHN0YXRlIHJlbGF0ZWQgdG8gd2luZG93IG1vdmVtZW50IGFuZCBpbnRlcmFjdGlvbi4NCiAgICAgICAgIyAgIC0gSXNNb3Zpbmc6IEJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgbW91c2UgYnV0dG9uIGlzIGRvd24gZm9yIGEgcG90ZW50aWFsIG1vdmUuDQogICAgICAgICMgICAtIExhc3RNb3VzZVBvczogU3RvcmVzIHRoZSBsYXN0IHJlY29yZGVkIG1vdXNlIHBvc2l0aW9uIGR1cmluZyBhIG1vdmUuDQogICAgICAgICMgICAtIElzRHJhZ2dpbmc6IEJvb2xlYW4gaW5kaWNhdGluZyBpZiBhIGRyYWcgb3BlcmF0aW9uIGlzIGN1cnJlbnRseSBhY3RpdmUuDQogICAgICAgICMgICAtIExhc3RDbGlja1RpbWU6IFRpbWVzdGFtcCBvZiB0aGUgbGFzdCBtb3VzZSBjbGljayAodXNlZCBmb3IgZG91YmxlLWNsaWNrIGRldGVjdGlvbiwgdGhvdWdoIG5vdCBleHBsaWNpdGx5IHVzZWQgaGVyZSkuDQogICAgICAgICMgICAtIENsaWNrVGhyZXNob2xkOiBUaW1lIHRocmVzaG9sZCBpbiBtaWxsaXNlY29uZHMgdG8gZGlmZmVyZW50aWF0ZSBjbGlja3MgKG5vdCBleHBsaWNpdGx5IHVzZWQgaGVyZSkuDQogICAgICAgICRzY3JpcHQ6V2luZG93U3RhdGUgPSBAew0KICAgICAgICAgICAgSXNNb3ZpbmcgICAgICAgPSAkZmFsc2UNCiAgICAgICAgICAgIExhc3RNb3VzZVBvcyAgID0gJG51bGwNCiAgICAgICAgICAgIElzRHJhZ2dpbmcgICAgID0gJGZhbHNlDQogICAgICAgICAgICBMYXN0Q2xpY2tUaW1lICA9IFtEYXRlVGltZV06Ok1pblZhbHVlDQogICAgICAgICAgICBDbGlja1RocmVzaG9sZCA9IDIwMCAjIG1pbGxpc2Vjb25kcw0KICAgICAgICB9DQogICAgI2VuZHJlZ2lvbiBTdGVwOiBEZWZpbmUgc2NyaXB0LWxldmVsIHdpbmRvdyBzdGF0ZSB0cmFja2luZyB2YXJpYWJsZQ0KI2VuZHJlZ2lvbiBHbG9iYWwgVmFyaWFibGVzDQoNCiNyZWdpb24gSGVscGVyIEZ1bmN0aW9ucw0KICAgICNyZWdpb24gRnVuY3Rpb246IFN5bmMtVUlUb0NvbmZpZw0KICAgICAgICBmdW5jdGlvbiBTeW5jLVVJVG9Db25maWcNCiAgICAgICAgew0KICAgICAgICAgICAgPCMNCiAgICAgICAgICAgIC5TWU5PUFNJUw0KICAgICAgICAgICAgICAgIFN5bmNocm9uaXplcyB0aGUgY3VycmVudCBzdGF0ZSBvZiBVSSBpbnB1dCBlbGVtZW50cyB0byB0aGUgZ2xvYmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0Lg0KICAgICAgICAgICAgLk9VVFBVVFMNCiAgICAgICAgICAgICAgICBbYm9vbF0gUmV0dXJucyAkdHJ1ZSBpZiBzeW5jaHJvbml6YXRpb24gd2FzIHN1Y2Nlc3NmdWwsICRmYWxzZSBvdGhlcndpc2UuDQogICAgICAgICAgICAuTk9URVMNCiAgICAgICAgICAgICAgICBSZWFkcyB2YWx1ZXMgZnJvbSBVSSBjb250cm9scyAoVGV4dEJveGVzLCBDb21ib0JveGVzKSBhbmQgdXBkYXRlcyB0aGUgY29ycmVzcG9uZGluZw0KICAgICAgICAgICAgICAgIGtleXMgaW4gdGhlICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZyBoYXNodGFibGUuIEVuc3VyZXMgbmVjZXNzYXJ5IHNlY3Rpb25zIGV4aXN0Lg0KICAgICAgICAgICAgIz4NCiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldDQogICAgICAgICAgICBbT3V0cHV0VHlwZShbYm9vbF0pXQ0KICAgICAgICAgICAgcGFyYW0oKQ0KDQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEF0dGVtcHQgdG8gc3luYyBVSSBzdGF0ZSB0byBnbG9iYWwgY29uZmlnDQogICAgICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IExvZyBTeW5jIFN0YXJ0DQogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICcgIFVJOiBTeW5jaW5nIFVJIHRvIGNvbmZpZycgLUZvcmVncm91bmRDb2xvciBDeWFuDQogICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogTG9nIFN5bmMgU3RhcnQNCg0KICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFZhbGlkYXRlIFVJIGFuZCBDb25maWcgb2JqZWN0cw0KICAgICAgICAgICAgICAgICAgICAgICAgJFVJID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtbm90ICgkVUkgLWFuZCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJyAgVUk6IFVJIG9yIENvbmZpZyBvYmplY3Qgbm90IGZvdW5kLCBjYW5ub3Qgc3luYy4nIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFZhbGlkYXRlIFVJIGFuZCBDb25maWcgb2JqZWN0cw0KDQogICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogRW5zdXJlIHJlcXVpcmVkIGNvbmZpZyBzZWN0aW9ucyBleGlzdA0KICAgICAgICAgICAgICAgICAgICAgICAgIyBFbnN1cmUgc2VjdGlvbnMgZXhpc3QgaW4gdGhlIGNvbmZpZyBoYXNodGFibGUgYmVmb3JlIGF0dGVtcHRpbmcgdG8gd3JpdGUgdG8gdGhlbS4NCiAgICAgICAgICAgICAgICAgICAgICAgIEAoJ0xhdW5jaGVyUGF0aCcsICdQcm9jZXNzTmFtZScsICdNYXhDbGllbnRzJywgJ0xvZ2luJykgfCBGb3JFYWNoLU9iamVjdCB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC1ub3QgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnLkNvbnRhaW5zKCRfKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skX10gPSBbb3JkZXJlZF1Ae30NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogRW5zdXJlIHJlcXVpcmVkIGNvbmZpZyBzZWN0aW9ucyBleGlzdA0KDQogICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogU3luYyBiYXNpYyBVSSBjb250cm9sIHZhbHVlcyB0byBjb25maWcNCiAgICAgICAgICAgICAgICAgICAgICAgICMgUmVhZCB2YWx1ZXMgZnJvbSBUZXh0Qm94ZXMgYW5kIHVwZGF0ZSB0aGUgY29uZmlnLg0KICAgICAgICAgICAgICAgICAgICAgICAgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMYXVuY2hlclBhdGgnXVsnTGF1bmNoZXJQYXRoJ10gPSAkVUkuSW5wdXRMYXVuY2hlci5UZXh0DQogICAgICAgICAgICAgICAgICAgICAgICAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ1Byb2Nlc3NOYW1lJ11bJ1Byb2Nlc3NOYW1lJ10gPSAkVUkuSW5wdXRQcm9jZXNzLlRleHQNCiAgICAgICAgICAgICAgICAgICAgICAgICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snTWF4Q2xpZW50cyddWydNYXhDbGllbnRzJ10gPSAkVUkuSW5wdXRNYXguVGV4dA0KICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFN5bmMgYmFzaWMgVUkgY29udHJvbCB2YWx1ZXMgdG8gY29uZmlnDQoNCiAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBTeW5jIGxvZ2luIHBvc2l0aW9uIENvbWJvQm94IHNlbGVjdGlvbnMgdG8gY29uZmlnDQogICAgICAgICAgICAgICAgICAgICAgICAjIENvbGxlY3Qgc2VsZWN0ZWQgaXRlbXMgZnJvbSBsb2dpbiBwb3NpdGlvbiBDb21ib0JveGVzLg0KICAgICAgICAgICAgICAgICAgICAgICAgJGxvZ2luUG9zID0gQCgpDQogICAgICAgICAgICAgICAgICAgICAgICAkVUkuTG9naW4uS2V5cyB8IFNvcnQtT2JqZWN0IHsgW2ludF0oJF8gLXJlcGxhY2UgJ0xvZ2luJywgJycpIH0gfCBGb3JFYWNoLU9iamVjdCB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbWJvID0gJFVJLkxvZ2luWyRfXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2dpblBvcyArPSBpZiAoJGNvbWJvLlNlbGVjdGVkSXRlbSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb21iby5TZWxlY3RlZEl0ZW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzEnICMgRGVmYXVsdCB0byAnMScgaWYgbm90aGluZyBpcyBzZWxlY3RlZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICMgU3RvcmUgdGhlIGNvbGxlY3RlZCBwb3NpdGlvbnMgYXMgYSBjb21tYS1zZXBhcmF0ZWQgc3RyaW5nIGluIHRoZSBjb25maWcuDQogICAgICAgICAgICAgICAgICAgICAgICAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ0xvZ2luJ11bJ0xvZ2luJ10gPSAkbG9naW5Qb3MgLWpvaW4gJywnDQogICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogU3luYyBsb2dpbiBwb3NpdGlvbiBDb21ib0JveCBzZWxlY3Rpb25zIHRvIGNvbmZpZw0KDQogICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogTG9nIFN5bmMgU3VjY2Vzcw0KICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnICBVSTogVUkgc3luY2VkIHRvIGNvbmZpZycgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0cnVlDQogICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogTG9nIFN5bmMgU3VjY2Vzcw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBjYXRjaA0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBIYW5kbGUgZXJyb3JzIGR1cmluZyBzeW5jDQogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIFVJOiBGYWlsZWQgdG8gc3luYyBVSSB0byBjb25maWc6ICRfIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBlcnJvcnMgZHVyaW5nIHN5bmMNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEF0dGVtcHQgdG8gc3luYyBVSSBzdGF0ZSB0byBnbG9iYWwgY29uZmlnDQogICAgICAgIH0NCiAgICAjZW5kcmVnaW9uIEZ1bmN0aW9uOiBTeW5jLVVJVG9Db25maWcNCg0KICAgICNyZWdpb24gRnVuY3Rpb246IFN5bmMtQ29uZmlnVG9VSQ0KICAgICAgICBmdW5jdGlvbiBTeW5jLUNvbmZpZ1RvVUkNCiAgICAgICAgew0KICAgICAgICAgICAgPCMNCiAgICAgICAgICAgIC5TWU5PUFNJUw0KICAgICAgICAgICAgICAgIFN5bmNocm9uaXplcyB0aGUgZ2xvYmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHZhbHVlcyB0byB0aGUgVUkgZWxlbWVudHMuDQogICAgICAgICAgICAuT1VUUFVUUw0KICAgICAgICAgICAgICAgIFtib29sXSBSZXR1cm5zICR0cnVlIGlmIHN5bmNocm9uaXphdGlvbiB3YXMgc3VjY2Vzc2Z1bCwgJGZhbHNlIG90aGVyd2lzZS4NCiAgICAgICAgICAgIC5OT1RFUw0KICAgICAgICAgICAgICAgIFJlYWRzIHZhbHVlcyBmcm9tIHRoZSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcgaGFzaHRhYmxlIGFuZCB1cGRhdGVzIHRoZQ0KICAgICAgICAgICAgICAgIGNvcnJlc3BvbmRpbmcgVUkgY29udHJvbHMgKFRleHRCb3hlcywgQ29tYm9Cb3hlcykuIEhhbmRsZXMgY2FzZXMgd2hlcmUgY29uZmlnIHZhbHVlcyBtaWdodCBiZSBtaXNzaW5nLg0KICAgICAgICAgICAgIz4NCiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldDQogICAgICAgICAgICBbT3V0cHV0VHlwZShbYm9vbF0pXQ0KICAgICAgICAgICAgcGFyYW0oKQ0KDQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEF0dGVtcHQgdG8gc3luYyBnbG9iYWwgY29uZmlnIHRvIFVJIHN0YXRlDQogICAgICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IExvZyBTeW5jIFN0YXJ0DQogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICcgIFVJOiBTeW5jaW5nIGNvbmZpZyB0byBVSScgLUZvcmVncm91bmRDb2xvciBDeWFuDQogICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogTG9nIFN5bmMgU3RhcnQNCg0KICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFZhbGlkYXRlIFVJIGFuZCBDb25maWcgb2JqZWN0cw0KICAgICAgICAgICAgICAgICAgICAgICAgJFVJID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtbm90ICgkVUkgLWFuZCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJyAgVUk6IFVJIG9yIENvbmZpZyBvYmplY3Qgbm90IGZvdW5kLCBjYW5ub3Qgc3luYy4nIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFZhbGlkYXRlIFVJIGFuZCBDb25maWcgb2JqZWN0cw0KDQogICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogU3luYyBMYXVuY2hlclBhdGggZnJvbSBjb25maWcgdG8gVUkNCiAgICAgICAgICAgICAgICAgICAgICAgICMgVXBkYXRlIExhdW5jaGVyIFBhdGggVGV4dEJveCBpZiB0aGUgY29uZmlnIHZhbHVlIGV4aXN0cy4NCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ0xhdW5jaGVyUGF0aCddWydMYXVuY2hlclBhdGgnXSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVUkuSW5wdXRMYXVuY2hlci5UZXh0ID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMYXVuY2hlclBhdGgnXVsnTGF1bmNoZXJQYXRoJ10NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBTeW5jIExhdW5jaGVyUGF0aCBmcm9tIGNvbmZpZyB0byBVSQ0KDQogICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogU3luYyBQcm9jZXNzTmFtZSBmcm9tIGNvbmZpZyB0byBVSQ0KICAgICAgICAgICAgICAgICAgICAgICAgIyBVcGRhdGUgUHJvY2VzcyBOYW1lIFRleHRCb3ggaWYgdGhlIGNvbmZpZyB2YWx1ZSBleGlzdHMuDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydQcm9jZXNzTmFtZSddWydQcm9jZXNzTmFtZSddKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRVSS5JbnB1dFByb2Nlc3MuVGV4dCA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snUHJvY2Vzc05hbWUnXVsnUHJvY2Vzc05hbWUnXQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFN5bmMgUHJvY2Vzc05hbWUgZnJvbSBjb25maWcgdG8gVUkNCg0KICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFN5bmMgTWF4Q2xpZW50cyBmcm9tIGNvbmZpZyB0byBVSQ0KICAgICAgICAgICAgICAgICAgICAgICAgIyBVcGRhdGUgTWF4IENsaWVudHMgVGV4dEJveCBpZiB0aGUgY29uZmlnIHZhbHVlIGV4aXN0cy4NCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ01heENsaWVudHMnXVsnTWF4Q2xpZW50cyddKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRVSS5JbnB1dE1heC5UZXh0ID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydNYXhDbGllbnRzJ11bJ01heENsaWVudHMnXQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFN5bmMgTWF4Q2xpZW50cyBmcm9tIGNvbmZpZyB0byBVSQ0KDQogICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogU3luYyBsb2dpbiBwb3NpdGlvbiBjb25maWcgdG8gQ29tYm9Cb3ggc2VsZWN0aW9ucw0KICAgICAgICAgICAgICAgICAgICAgICAgIyBVcGRhdGUgTG9naW4gUG9zaXRpb24gQ29tYm9Cb3hlcyBiYXNlZCBvbiB0aGUgY29tbWEtc2VwYXJhdGVkIGNvbmZpZyBzdHJpbmcuDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMb2dpbiddWydMb2dpbiddKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwb3NpdGlvbnMgPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ0xvZ2luJ11bJ0xvZ2luJ10gLXNwbGl0ICcsJw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBJdGVyYXRlIHRocm91Z2ggQ29tYm9Cb3hlcyBhbmQgc2V0IHNlbGVjdGVkIGl0ZW0gYmFzZWQgb24gY29uZmlnLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoJGkgPSAwOyAkaSAtbHQgW01hdGhdOjpNaW4oJFVJLkxvZ2luLkNvdW50LCAkcG9zaXRpb25zLkNvdW50KTsgJGkrKykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRrZXkgPSAiTG9naW4kKCRpKzEpIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdmFsdWUgPSAkcG9zaXRpb25zWyRpXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29tYm8gPSAkVUkuTG9naW5bJGtleV0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFNldCBzZWxlY3RlZCBpdGVtIG9ubHkgaWYgdGhlIENvbWJvQm94IGV4aXN0cyBhbmQgdGhlIHZhbHVlIGlzIHZhbGlkLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGNvbWJvIC1hbmQgJGNvbWJvLkl0ZW1zLkNvbnRhaW5zKCR2YWx1ZSkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb21iby5TZWxlY3RlZEl0ZW0gPSAkdmFsdWUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBTeW5jIGxvZ2luIHBvc2l0aW9uIGNvbmZpZyB0byBDb21ib0JveCBzZWxlY3Rpb25zDQoNCiAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBMb2cgU3luYyBTdWNjZXNzDQogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICcgIFVJOiBDb25maWcgc3luY2VkIHRvIFVJJyAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBMb2cgU3luYyBTdWNjZXNzDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNhdGNoDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEhhbmRsZSBlcnJvcnMgZHVyaW5nIHN5bmMNCiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IEZhaWxlZCB0byBzeW5jIGNvbmZpZyB0byBVSTogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogSGFuZGxlIGVycm9ycyBkdXJpbmcgc3luYw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQXR0ZW1wdCB0byBzeW5jIGdsb2JhbCBjb25maWcgdG8gVUkgc3RhdGUNCiAgICAgICAgfQ0KICAgICNlbmRyZWdpb24gRnVuY3Rpb246IFN5bmMtQ29uZmlnVG9VSQ0KI2VuZHJlZ2lvbiBIZWxwZXIgRnVuY3Rpb25zDQoNCiNyZWdpb24gQ29yZSBVSSBGdW5jdGlvbnMNCiAgICAjcmVnaW9uIEZ1bmN0aW9uOiBJbml0aWFsaXplLVVJDQogICAgICAgIGZ1bmN0aW9uIEluaXRpYWxpemUtVUkNCiAgICAgICAgew0KICAgICAgICAgICAgPCMNCiAgICAgICAgICAgIC5TWU5PUFNJUw0KICAgICAgICAgICAgICAgIEluaXRpYWxpemVzIGFsbCBVSSBjb21wb25lbnRzIGZvciB0aGUgZGFzaGJvYXJkIGFwcGxpY2F0aW9uLg0KICAgICAgICAgICAgLk9VVFBVVFMNCiAgICAgICAgICAgICAgICBbYm9vbF0gUmV0dXJucyAkdHJ1ZSBpZiBVSSBpbml0aWFsaXphdGlvbiB3YXMgc3VjY2Vzc2Z1bCwgJGZhbHNlIG90aGVyd2lzZSAodGhvdWdoIGN1cnJlbnRseSBhbHdheXMgcmV0dXJucyAkdHJ1ZSBvciB0aHJvd3MpLg0KICAgICAgICAgICAgLk5PVEVTDQogICAgICAgICAgICAgICAgQ3JlYXRlcyB0aGUgbWFpbiBmb3JtLCBzZXR0aW5ncyBmb3JtLCBhbGwgYnV0dG9ucywgbGFiZWxzLCB0ZXh0IGJveGVzLCBkYXRhIGdyaWRzLA0KICAgICAgICAgICAgICAgIGFuZCBjb250ZXh0IG1lbnVzLiBQb3B1bGF0ZXMgdGhlIGdsb2JhbCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSSBvYmplY3Qgd2l0aCByZWZlcmVuY2VzDQogICAgICAgICAgICAgICAgdG8gdGhlc2UgZWxlbWVudHMuIENhbGxzIFJlZ2lzdGVyLVVJRXZlbnRIYW5kbGVycyBhdCB0aGUgZW5kLg0KICAgICAgICAgICAgIz4NCiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldDQogICAgICAgICAgICBwYXJhbSgpDQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogTG9nIFVJIGluaXRpYWxpemF0aW9uIHN0YXJ0DQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnICBVSTogSW5pdGlhbGl6aW5nIFVJLi4uJyAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogTG9nIFVJIGluaXRpYWxpemF0aW9uIHN0YXJ0DQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ3JlYXRlIE1haW4gVUkgRWxlbWVudHMNCiAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYWluIEFwcGxpY2F0aW9uIEZvcm0NCiAgICAgICAgICAgICAgICAgICAgIyAkbWFpbkZvcm1Qcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBtYWluIGFwcGxpY2F0aW9uIHdpbmRvdy4NCiAgICAgICAgICAgICAgICAgICAgJG1haW5Gb3JtUHJvcHMgPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSAgICAgICAgICAgID0gJ0Zvcm0nDQogICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlICAgICAgICAgPSAkZmFsc2UgIyBTdGFydCBoaWRkZW4sIHNob3duIGxhdGVyDQogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAgICAgICAgICAgPSA0NzANCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCAgICAgICAgICA9IDQ0MA0KICAgICAgICAgICAgICAgICAgICAgICAgdG9wICAgICAgICAgICAgID0gMA0KICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAgICAgICAgICAgID0gMA0KICAgICAgICAgICAgICAgICAgICAgICAgYmcgICAgICAgICAgICAgID0gQCgzMCwgMzAsIDMwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRGFyayBiYWNrZ3JvdW5kDQogICAgICAgICAgICAgICAgICAgICAgICBmZyAgICAgICAgICAgICAgPSBAKDI1NSwgMjU1LCAyNTUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBXaGl0ZSB0ZXh0DQogICAgICAgICAgICAgICAgICAgICAgICBpZCAgICAgICAgICAgICAgPSAnTWFpbkZvcm0nDQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICAgICAgICAgICAgPSAnRW50cm9waWEgRGFzaGJvYXJkJw0KICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbiAgID0gJ01hbnVhbCcgIyBQb3NpdGlvbiBjb250cm9sbGVkIG1hbnVhbGx5IG9yIGJ5IHNhdmVkIHN0YXRlDQogICAgICAgICAgICAgICAgICAgICAgICBmb3JtQm9yZGVyU3R5bGUgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybUJvcmRlclN0eWxlXTo6Tm9uZSAgIyBCb3JkZXJsZXNzIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eSAgICAgICAgID0gMQ0KICAgICAgICAgICAgICAgICAgICAgICAgdG9wTW9zdCAgICAgICAgID0gJGZhbHNlDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgJG1haW5Gb3JtID0gU2V0LVVJRWxlbWVudCBAbWFpbkZvcm1Qcm9wcw0KICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIE1haW4gQXBwbGljYXRpb24gRm9ybQ0KDQogICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgU2V0dGluZ3MgRm9ybQ0KICAgICAgICAgICAgICAgICAgICAjICRzZXR0aW5nc0Zvcm1Qcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBzZXR0aW5ncyBkaWFsb2cgd2luZG93Lg0KICAgICAgICAgICAgICAgICAgICAkc2V0dGluZ3NGb3JtUHJvcHMgPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSAgICAgICAgICAgID0gJ0Zvcm0nDQogICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlICAgICAgICAgPSAkZmFsc2UgIyBTdGFydCBoaWRkZW4NCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICAgICAgICAgICA9IDQ3MA0KICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICAgICAgICAgID0gNDQwDQogICAgICAgICAgICAgICAgICAgICAgICB0b3AgICAgICAgICAgICAgPSAwDQogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgICAgICAgICAgPSAwDQogICAgICAgICAgICAgICAgICAgICAgICBiZyAgICAgICAgICAgICAgPSBAKDMwLCAzMCwgMzApDQogICAgICAgICAgICAgICAgICAgICAgICBmZyAgICAgICAgICAgICAgPSBAKDI1NSwgMjU1LCAyNTUpDQogICAgICAgICAgICAgICAgICAgICAgICBpZCAgICAgICAgICAgICAgPSAnU2V0dGluZ3NGb3JtJw0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCAgICAgICAgICAgID0gJ1NldHRpbmdzJw0KICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbiAgID0gJ01hbnVhbCcNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1Cb3JkZXJTdHlsZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtQm9yZGVyU3R5bGVdOjpOb25lDQogICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5ICAgICAgICAgPSAwICMgU3RhcnQgaW52aXNpYmxlIGZvciBmYWRlLWluIGVmZmVjdA0KICAgICAgICAgICAgICAgICAgICAgICAgdG9wTW9zdCAgICAgICAgID0gJHRydWUgIyBBbHdheXMgb24gdG9wIG9mIG1haW4gZm9ybSB3aGVuIHZpc2libGUNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAkc2V0dGluZ3NGb3JtID0gU2V0LVVJRWxlbWVudCBAc2V0dGluZ3NGb3JtUHJvcHMNCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBTZXR0aW5ncyBGb3JtDQoNCiAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IExvYWQgY3VzdG9tIGljb24gaWYgc3BlY2lmaWVkIGFuZCBleGlzdHMNCiAgICAgICAgICAgICAgICAgICAgIyBBdHRlbXB0IHRvIGxvYWQgYSBjdXN0b20gaWNvbiBmcm9tIHRoZSBwYXRoIGRlZmluZWQgaW4gZ2xvYmFsIGNvbmZpZy4NCiAgICAgICAgICAgICAgICAgICAgaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkljb24gLWFuZCAoVGVzdC1QYXRoICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkljb24pKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICB0cnkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaWNvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuSWNvbigkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5QYXRocy5JY29uKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtYWluRm9ybS5JY29uID0gJGljb24NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2V0dGluZ3NGb3JtLkljb24gPSAkaWNvbg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2gNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIFVJOiBGYWlsZWQgdG8gbG9hZCBpY29uIGZyb20gJCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5QYXRocy5JY29uKTogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IExvYWQgY3VzdG9tIGljb24gaWYgc3BlY2lmaWVkIGFuZCBleGlzdHMNCg0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ3JlYXRlIFRvcCBCYXIgUGFuZWwNCiAgICAgICAgICAgICAgICAgICAgIyAkdG9wQmFyUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgcGFuZWwgdXNlZCBhcyBhIGN1c3RvbSB0aXRsZS9kcmFnIGJhci4NCiAgICAgICAgICAgICAgICAgICAgJHRvcEJhclByb3BzID0gQHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgPSAnUGFuZWwnDQogICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICAgPSA0NzANCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCAgPSAzMA0KICAgICAgICAgICAgICAgICAgICAgICAgdG9wICAgICA9IDANCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgICAgPSAwDQogICAgICAgICAgICAgICAgICAgICAgICBiZyAgICAgID0gQCgzMCwgMzAsIDMwLCAzMCkgIyBTZW1pLXRyYW5zcGFyZW50IGJhY2tncm91bmQNCiAgICAgICAgICAgICAgICAgICAgICAgIGZnICAgICAgPSBAKDI1NSwgMjU1LCAyNTUpDQogICAgICAgICAgICAgICAgICAgICAgICBpZCAgICAgID0gJ1RvcEJhcicNCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgICAgPSAnJw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICR0b3BCYXIgPSBTZXQtVUlFbGVtZW50IEB0b3BCYXJQcm9wcw0KICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFRvcCBCYXIgUGFuZWwNCg0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ3JlYXRlIFRpdGxlIExhYmVsDQogICAgICAgICAgICAgICAgICAgICMgJHRpdGxlTGFiZWxQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBhcHBsaWNhdGlvbiB0aXRsZSBsYWJlbCBvbiB0aGUgdG9wIGJhci4NCiAgICAgICAgICAgICAgICAgICAgJHRpdGxlTGFiZWxQcm9wcyA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlICAgID0gJ0xhYmVsJw0KICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA9ICR0cnVlDQogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAgID0gMTQwDQogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgID0gMTgNCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCAgICAgPSA1DQogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgID0gMTANCiAgICAgICAgICAgICAgICAgICAgICAgIGJnICAgICAgPSBAKDMwLCAzMCwgMzAsIDApICMgVHJhbnNwYXJlbnQgYmFja2dyb3VuZA0KICAgICAgICAgICAgICAgICAgICAgICAgZmcgICAgICA9IEAoMjU1LCAyNTUsIDI1NSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkICAgICAgPSAnVGl0bGVMYWJlbCcNCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgICAgPSAnRW50cm9waWEgRGFzaGJvYXJkJw0KICAgICAgICAgICAgICAgICAgICAgICAgZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCAxMCwgW1N5c3RlbS5EcmF3aW5nLkZvbnRTdHlsZV06OkJvbGQpDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgJHRpdGxlTGFiZWxGb3JtID0gU2V0LVVJRWxlbWVudCBAdGl0bGVMYWJlbFByb3BzDQogICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgVGl0bGUgTGFiZWwNCg0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ3JlYXRlIENvcHlyaWdodCBMYWJlbA0KICAgICAgICAgICAgICAgICAgICAjICRjb3B5cmlnaHRMYWJlbFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIGFwcGxpY2F0aW9uIGNvcHlyaWdodCBsYWJlbCBvbiB0aGUgdG9wIGJhci4NCiAgICAgICAgICAgICAgICAgICAgJGNvcHlyaWdodExhYmVsUHJvcHMgPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSAgICA9ICdMYWJlbCcNCiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggICA9IDE0MA0KICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICA9IDE1DQogICAgICAgICAgICAgICAgICAgICAgICB0b3AgICAgID0gMjANCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgICAgPSAxMA0KICAgICAgICAgICAgICAgICAgICAgICAgYmcgICAgICA9IEAoMzAsIDMwLCAzMCwgMCkgIyBUcmFuc3BhcmVudCBiYWNrZ3JvdW5kDQogICAgICAgICAgICAgICAgICAgICAgICBmZyAgICAgID0gQCgyNTUsIDI1NSwgMjU1KQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWQgICAgICA9ICdDb3B5cmlnaHRMYWJlbCcNCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgICAgPSBbY2hhcl0weDAwQTkgKyAnIEltbW9ydGFsIC8gRGl2aW5lIDIwMjUgLSB2MS4wJw0KICAgICAgICAgICAgICAgICAgICAgICAgZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA3LCBbU3lzdGVtLkRyYXdpbmcuRm9udFN0eWxlXTo6UmVndWxhcikNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAkY29weXJpZ2h0TGFiZWxGb3JtID0gU2V0LVVJRWxlbWVudCBAY29weXJpZ2h0TGFiZWxQcm9wcw0KICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIENvcHlyaWdodCBMYWJlbA0KDQogICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgTWluaW1pemUgQnV0dG9uDQogICAgICAgICAgICAgICAgICAgICMgJG1pbkZvcm1Qcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBtaW5pbWl6ZSB3aW5kb3cgYnV0dG9uLg0KICAgICAgICAgICAgICAgICAgICAkbWluRm9ybVByb3BzID0gQHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgPSAnQnV0dG9uJw0KICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA9ICR0cnVlDQogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAgID0gMzANCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCAgPSAzMA0KICAgICAgICAgICAgICAgICAgICAgICAgdG9wICAgICA9IDANCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgICAgPSA0MTANCiAgICAgICAgICAgICAgICAgICAgICAgIGJnICAgICAgPSBAKDUwLCA1MCwgNTApDQogICAgICAgICAgICAgICAgICAgICAgICBmZyAgICAgID0gQCgyNTUsIDI1NSwgMjU1KQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWQgICAgICA9ICdNaW5Gb3JtJw0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCAgICA9ICdfJw0KICAgICAgICAgICAgICAgICAgICAgICAgZnMgICAgICA9ICdGbGF0JyAjIEZsYXQgYXBwZWFyYW5jZQ0KICAgICAgICAgICAgICAgICAgICAgICAgZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCAxMSwgW1N5c3RlbS5EcmF3aW5nLkZvbnRTdHlsZV06OkJvbGQpDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgJGJ0bk1pbmltaXplRm9ybSA9IFNldC1VSUVsZW1lbnQgQG1pbkZvcm1Qcm9wcw0KICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIE1pbmltaXplIEJ1dHRvbg0KDQogICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgQ2xvc2UgQnV0dG9uDQogICAgICAgICAgICAgICAgICAgICMgJGNsb3NlRm9ybVByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIGNsb3NlIHdpbmRvdyBidXR0b24uDQogICAgICAgICAgICAgICAgICAgICRjbG9zZUZvcm1Qcm9wcyA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlICAgID0gJ0J1dHRvbicNCiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggICA9IDMwDQogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgID0gMzANCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCAgICAgPSAwDQogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgID0gNDQwDQogICAgICAgICAgICAgICAgICAgICAgICBiZyAgICAgID0gQCgyMDAsIDUwLCA1MCkgIyBSZWQgYmFja2dyb3VuZCBmb3IgY2xvc2UgYnV0dG9uDQogICAgICAgICAgICAgICAgICAgICAgICBmZyAgICAgID0gQCgyNTUsIDI1NSwgMjU1KQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWQgICAgICA9ICdDbG9zZUZvcm0nDQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICAgID0gW2NoYXJdMHgxNjZEICMgJ1gnIHN5bWJvbA0KICAgICAgICAgICAgICAgICAgICAgICAgZnMgICAgICA9ICdGbGF0Jw0KICAgICAgICAgICAgICAgICAgICAgICAgZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCAxMSwgW1N5c3RlbS5EcmF3aW5nLkZvbnRTdHlsZV06OkJvbGQpDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgJGJ0bkNsb3NlRm9ybSA9IFNldC1VSUVsZW1lbnQgQGNsb3NlRm9ybVByb3BzDQogICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgQ2xvc2UgQnV0dG9uDQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYWluIFVJIEVsZW1lbnRzDQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ3JlYXRlIE1haW4gRm9ybSBBY3Rpb24gQnV0dG9ucw0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ3JlYXRlIExvZ2luIEJ1dHRvbg0KICAgICAgICAgICAgICAgICAgICAjICRsYXVuY2hQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBMb2dpbiBidXR0b24uDQogICAgICAgICAgICAgICAgICAgICRsYXVuY2hQcm9wcyA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlICAgID0gJ0J1dHRvbicNCiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggICA9IDEyNQ0KICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICA9IDMwDQogICAgICAgICAgICAgICAgICAgICAgICB0b3AgICAgID0gNDANCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgICAgPSAxNQ0KICAgICAgICAgICAgICAgICAgICAgICAgYmcgICAgICA9IEAoNjMsIDgxLCAxODEpICMgSW5kaWdvIGNvbG9yDQogICAgICAgICAgICAgICAgICAgICAgICBmZyAgICAgID0gQCgyNTUsIDI1NSwgMjU1KQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWQgICAgICA9ICdMYXVuY2gnDQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICAgID0gJ0xhdW5jaCcNCiAgICAgICAgICAgICAgICAgICAgICAgIGZzICAgICAgPSAnRmxhdCcNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAkYnRuTGF1bmNoID0gU2V0LVVJRWxlbWVudCBAbGF1bmNoUHJvcHMNCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBMb2dpbiBCdXR0b24NCg0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ3JlYXRlIEZ0b29sIEJ1dHRvbg0KICAgICAgICAgICAgICAgICAgICAjICRsb2dpblByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIEZ0b29sIGJ1dHRvbi4NCiAgICAgICAgICAgICAgICAgICAgJGxvZ2luUHJvcHMgPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSAgICA9ICdCdXR0b24nDQogICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICAgPSAxMjUNCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCAgPSAzMA0KICAgICAgICAgICAgICAgICAgICAgICAgdG9wICAgICA9IDQwDQogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgID0gMTUwDQogICAgICAgICAgICAgICAgICAgICAgICBiZyAgICAgID0gQCgxMDAsIDEwMCwgMTAwKSAjIEdyYXkgY29sb3INCiAgICAgICAgICAgICAgICAgICAgICAgIGZnICAgICAgPSBAKDI1NSwgMjU1LCAyNTUpDQogICAgICAgICAgICAgICAgICAgICAgICBpZCAgICAgID0gJ0xvZ2luJw0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCAgICA9ICdMb2dpbicNCiAgICAgICAgICAgICAgICAgICAgICAgIGZzICAgICAgPSAnRmxhdCcNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAkYnRuTG9naW4gPSBTZXQtVUlFbGVtZW50IEBsb2dpblByb3BzDQogICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgRnRvb2wgQnV0dG9uDQoNCiAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENyZWF0ZSBTZXR0aW5ncyBCdXR0b24NCiAgICAgICAgICAgICAgICAgICAgIyAkc2V0dGluZ3NQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBTZXR0aW5ncyBidXR0b24uDQogICAgICAgICAgICAgICAgICAgICRzZXR0aW5nc1Byb3BzID0gQHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgPSAnQnV0dG9uJw0KICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA9ICR0cnVlDQogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAgID0gODANCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCAgPSAzMA0KICAgICAgICAgICAgICAgICAgICAgICAgdG9wICAgICA9IDQwDQogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgID0gMjg1DQogICAgICAgICAgICAgICAgICAgICAgICBiZyAgICAgID0gQCgyNTUsIDE2NSwgMCkgIyBPcmFuZ2UgY29sb3INCiAgICAgICAgICAgICAgICAgICAgICAgIGZnICAgICAgPSBAKDI1NSwgMjU1LCAyNTUpDQogICAgICAgICAgICAgICAgICAgICAgICBpZCAgICAgID0gJ1NldHRpbmdzJw0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCAgICA9ICdTZXR0aW5ncycNCiAgICAgICAgICAgICAgICAgICAgICAgIGZzICAgICAgPSAnRmxhdCcNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAkYnRuU2V0dGluZ3MgPSBTZXQtVUlFbGVtZW50IEBzZXR0aW5nc1Byb3BzDQogICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgU2V0dGluZ3MgQnV0dG9uDQoNCiAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENyZWF0ZSBUZXJtaW5hdGUgQnV0dG9uIChUZXJtaW5hdGUgU2VsZWN0ZWQpDQogICAgICAgICAgICAgICAgICAgICMgJGV4aXRQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBidXR0b24gdG8gdGVybWluYXRlIHNlbGVjdGVkIHByb2Nlc3Nlcy4NCiAgICAgICAgICAgICAgICAgICAgJGV4aXRQcm9wcyA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlICAgID0gJ0J1dHRvbicNCiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggICA9IDgwDQogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgID0gMzANCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCAgICAgPSA0MA0KICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAgICA9IDM3NQ0KICAgICAgICAgICAgICAgICAgICAgICAgYmcgICAgICA9IEAoMjExLCA0NywgNDcpICMgUmVkIGNvbG9yDQogICAgICAgICAgICAgICAgICAgICAgICBmZyAgICAgID0gQCgyNTUsIDI1NSwgMjU1KQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWQgICAgICA9ICdUZXJtaW5hdGUnDQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICAgID0gJ1Rlcm1pbmF0ZScNCiAgICAgICAgICAgICAgICAgICAgICAgIGZzICAgICAgPSAnRmxhdCcNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAkYnRuU3RvcCA9IFNldC1VSUVsZW1lbnQgQGV4aXRQcm9wcw0KICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFRlcm1pbmF0ZSBCdXR0b24gKFRlcm1pbmF0ZSBTZWxlY3RlZCkNCg0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ3JlYXRlIExhdW5jaCBCdXR0b24NCiAgICAgICAgICAgICAgICAgICAgIyAkZnRvb2xQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBtYWluIExhdW5jaCBidXR0b24uDQogICAgICAgICAgICAgICAgICAgICRmdG9vbFByb3BzID0gQHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgPSAnQnV0dG9uJw0KICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA9ICR0cnVlDQogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAgID0gNDQwDQogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgID0gMzANCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCAgICAgPSA3NQ0KICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAgICA9IDE1DQogICAgICAgICAgICAgICAgICAgICAgICBiZyAgICAgID0gQCgzNCwgMTc3LCA3NikgIyBHcmVlbiBjb2xvcg0KICAgICAgICAgICAgICAgICAgICAgICAgZmcgICAgICA9IEAoMjU1LCAyNTUsIDI1NSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkICAgICAgPSAnRnRvb2wnDQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICAgID0gJ0Z0b29sJw0KICAgICAgICAgICAgICAgICAgICAgICAgZnMgICAgICA9ICdGbGF0Jw0KICAgICAgICAgICAgICAgICAgICAgICAgZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICRidG5GdG9vbCA9IFNldC1VSUVsZW1lbnQgQGZ0b29sUHJvcHMNCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBMYXVuY2ggQnV0dG9uDQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYWluIEZvcm0gQWN0aW9uIEJ1dHRvbnMNCg0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgU2V0dGluZ3MgRm9ybSBDb250cm9scw0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ3JlYXRlIFNhdmUgU2V0dGluZ3MgQnV0dG9uDQogICAgICAgICAgICAgICAgICAgICMgJHNhdmVQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBTYXZlIGJ1dHRvbiBvbiB0aGUgc2V0dGluZ3MgZm9ybS4NCiAgICAgICAgICAgICAgICAgICAgJHNhdmVQcm9wcyA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlICAgID0gJ0J1dHRvbicNCiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggICA9IDEyMA0KICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICA9IDQwDQogICAgICAgICAgICAgICAgICAgICAgICB0b3AgICAgID0gMzQwDQogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgID0gMjANCiAgICAgICAgICAgICAgICAgICAgICAgIGJnICAgICAgPSBAKDYzLCA4MSwgMTgxKSAjIEluZGlnbyBjb2xvcg0KICAgICAgICAgICAgICAgICAgICAgICAgZmcgICAgICA9IEAoMjU1LCAyNTUsIDI1NSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkICAgICAgPSAnU2F2ZScNCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgICAgPSAnU2F2ZScNCiAgICAgICAgICAgICAgICAgICAgICAgIGZzICAgICAgPSAnRmxhdCcNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAkYnRuU2F2ZSA9IFNldC1VSUVsZW1lbnQgQHNhdmVQcm9wcw0KICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFNhdmUgU2V0dGluZ3MgQnV0dG9uDQoNCiAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENyZWF0ZSBDYW5jZWwgU2V0dGluZ3MgQnV0dG9uDQogICAgICAgICAgICAgICAgICAgICMgJGNhbmNlbFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIENhbmNlbCBidXR0b24gb24gdGhlIHNldHRpbmdzIGZvcm0uDQogICAgICAgICAgICAgICAgICAgICRjYW5jZWxQcm9wcyA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlICAgID0gJ0J1dHRvbicNCiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggICA9IDEyMA0KICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICA9IDQwDQogICAgICAgICAgICAgICAgICAgICAgICB0b3AgICAgID0gMzQwDQogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgID0gMTUwDQogICAgICAgICAgICAgICAgICAgICAgICBiZyAgICAgID0gQCgyMTEsIDQ3LCA0NykgIyBSZWQgY29sb3INCiAgICAgICAgICAgICAgICAgICAgICAgIGZnICAgICAgPSBAKDI1NSwgMjU1LCAyNTUpDQogICAgICAgICAgICAgICAgICAgICAgICBpZCAgICAgID0gJ0NhbmNlbCcNCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgICAgPSAnQ2FuY2VsJw0KICAgICAgICAgICAgICAgICAgICAgICAgZnMgICAgICA9ICdGbGF0Jw0KICAgICAgICAgICAgICAgICAgICAgICAgZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICRidG5DYW5jZWwgPSBTZXQtVUlFbGVtZW50IEBjYW5jZWxQcm9wcw0KICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIENhbmNlbCBTZXR0aW5ncyBCdXR0b24NCg0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ3JlYXRlIEJyb3dzZSBMYXVuY2hlciBQYXRoIEJ1dHRvbg0KICAgICAgICAgICAgICAgICAgICAjICRicm93c2VMYXVuY2hlclByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIEJyb3dzZSBidXR0b24gbmV4dCB0byB0aGUgbGF1bmNoZXIgcGF0aCBpbnB1dC4NCiAgICAgICAgICAgICAgICAgICAgJGJyb3dzZUxhdW5jaGVyUHJvcHMgPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSAgICA9ICdCdXR0b24nDQogICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICAgPSA1NQ0KICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICA9IDI1DQogICAgICAgICAgICAgICAgICAgICAgICB0b3AgICAgID0gMjANCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgICAgPSAxMTANCiAgICAgICAgICAgICAgICAgICAgICAgIGJnICAgICAgPSBAKDYzLCA4MSwgMTgxKSAjIEluZGlnbyBjb2xvcg0KICAgICAgICAgICAgICAgICAgICAgICAgZmcgICAgICA9IEAoMjU1LCAyNTUsIDI1NSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkICAgICAgPSAnQnJvd3NlJw0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCAgICA9ICdCcm93c2UnDQogICAgICAgICAgICAgICAgICAgICAgICBmcyAgICAgID0gJ0ZsYXQnDQogICAgICAgICAgICAgICAgICAgICAgICBmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgJGJ0bkJyb3dzZUxhdW5jaGVyID0gU2V0LVVJRWxlbWVudCBAYnJvd3NlTGF1bmNoZXJQcm9wcw0KICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIEJyb3dzZSBMYXVuY2hlciBQYXRoIEJ1dHRvbg0KDQogICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgTGF1bmNoZXIgUGF0aCBMYWJlbA0KICAgICAgICAgICAgICAgICAgICAjICRsYXVuY2hlckxhYmVsUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgbGFiZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBsYXVuY2hlciBwYXRoIGlucHV0Lg0KICAgICAgICAgICAgICAgICAgICAkbGF1bmNoZXJMYWJlbFByb3BzID0gQHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgPSAnTGFiZWwnDQogICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICAgPSA4NQ0KICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICA9IDIwDQogICAgICAgICAgICAgICAgICAgICAgICB0b3AgICAgID0gMjUNCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgICAgPSAyMA0KICAgICAgICAgICAgICAgICAgICAgICAgYmcgICAgICA9IEAoMzAsIDMwLCAzMCwgMCkgIyBUcmFuc3BhcmVudCBiYWNrZ3JvdW5kDQogICAgICAgICAgICAgICAgICAgICAgICBmZyAgICAgID0gQCgyNTUsIDI1NSwgMjU1KQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWQgICAgICA9ICdMYWJlbExhdW5jaGVyJw0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCAgICA9ICdMYXVuY2hlciBQYXRoOicNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAkbGJsTGF1bmNoZXIgPSBTZXQtVUlFbGVtZW50IEBsYXVuY2hlckxhYmVsUHJvcHMNCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBMYXVuY2hlciBQYXRoIExhYmVsDQoNCiAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENyZWF0ZSBQcm9jZXNzIE5hbWUgTGFiZWwNCiAgICAgICAgICAgICAgICAgICAgIyAkcHJvY2Vzc05hbWVMYWJlbFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIGxhYmVsIGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvY2VzcyBuYW1lIGlucHV0Lg0KICAgICAgICAgICAgICAgICAgICAkcHJvY2Vzc05hbWVMYWJlbFByb3BzID0gQHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgPSAnTGFiZWwnDQogICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICAgPSA4NQ0KICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICA9IDIwDQogICAgICAgICAgICAgICAgICAgICAgICB0b3AgICAgID0gOTUNCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgICAgPSAyMA0KICAgICAgICAgICAgICAgICAgICAgICAgYmcgICAgICA9IEAoMzAsIDMwLCAzMCwgMCkgIyBUcmFuc3BhcmVudCBiYWNrZ3JvdW5kDQogICAgICAgICAgICAgICAgICAgICAgICBmZyAgICAgID0gQCgyNTUsIDI1NSwgMjU1KQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWQgICAgICA9ICdMYWJlbFByb2Nlc3MnDQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICAgID0gJ1Byb2Nlc3MgTmFtZTonDQogICAgICAgICAgICAgICAgICAgICAgICBmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgJGxibFByb2Nlc3NOYW1lID0gU2V0LVVJRWxlbWVudCBAcHJvY2Vzc05hbWVMYWJlbFByb3BzDQogICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgUHJvY2VzcyBOYW1lIExhYmVsDQoNCiAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYXggQ2xpZW50cyBMYWJlbA0KICAgICAgICAgICAgICAgICAgICAjICRtYXhDbGllbnRzTGFiZWxQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBsYWJlbCBhc3NvY2lhdGVkIHdpdGggdGhlIG1heCBjbGllbnRzIGlucHV0Lg0KICAgICAgICAgICAgICAgICAgICAkbWF4Q2xpZW50c0xhYmVsUHJvcHMgPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSAgICA9ICdMYWJlbCcNCiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggICA9IDg1DQogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgID0gMjANCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCAgICAgPSAxNjUNCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgICAgPSAyMA0KICAgICAgICAgICAgICAgICAgICAgICAgYmcgICAgICA9IEAoMzAsIDMwLCAzMCwgMCkgIyBUcmFuc3BhcmVudCBiYWNrZ3JvdW5kDQogICAgICAgICAgICAgICAgICAgICAgICBmZyAgICAgID0gQCgyNTUsIDI1NSwgMjU1KQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWQgICAgICA9ICdMYWJlbE1heCcNCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgICAgPSAnTWF4IENsaWVudHM6Jw0KICAgICAgICAgICAgICAgICAgICAgICAgZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICRsYmxNYXhDbGllbnRzID0gU2V0LVVJRWxlbWVudCBAbWF4Q2xpZW50c0xhYmVsUHJvcHMNCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYXggQ2xpZW50cyBMYWJlbA0KICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgU2V0dGluZ3MgRm9ybSBDb250cm9scw0KDQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYWluIEZvcm0gRGF0YSBEaXNwbGF5IENvbnRyb2xzDQogICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgTWFpbiBEYXRhR3JpZCAoUHJvY2VzcyBMaXN0KQ0KICAgICAgICAgICAgICAgICAgICAjICRkYXRhR3JpZE1haW5Qcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBwcmltYXJ5IERhdGFHcmlkVmlldyBkaXNwbGF5aW5nIHByb2Nlc3MgaW5mby4NCiAgICAgICAgICAgICAgICAgICAgJGRhdGFHcmlkTWFpblByb3BzID0gQHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgPSAnRGF0YUdyaWRWaWV3Jw0KICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA9ICRmYWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggICA9IDE1NQ0KICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICA9IDMyMA0KICAgICAgICAgICAgICAgICAgICAgICAgdG9wICAgICA9IDExNQ0KICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAgICA9IDUNCiAgICAgICAgICAgICAgICAgICAgICAgIGJnICAgICAgPSBAKDQwLCA0MCwgNDApDQogICAgICAgICAgICAgICAgICAgICAgICBmZyAgICAgID0gQCgyNTUsIDI1NSwgMjU1KQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWQgICAgICA9ICdEYXRhR3JpZE1haW4nDQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICAgID0gJycNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAkRGF0YUdyaWRNYWluID0gU2V0LVVJRWxlbWVudCBAZGF0YUdyaWRNYWluUHJvcHMNCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYWluIERhdGFHcmlkIChQcm9jZXNzIExpc3QpDQoNCiAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENyZWF0ZSBTZWNvbmRhcnkgRGF0YUdyaWQNCiAgICAgICAgICAgICAgICAgICAgIyAkZGF0YUdyaWRGaWxsZXJQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBzZWNvbmRhcnkgRGF0YUdyaWRWaWV3IChwdXJwb3NlIG1pZ2h0IGJlIHNwZWNpZmljKS4NCiAgICAgICAgICAgICAgICAgICAgJGRhdGFHcmlkRmlsbGVyUHJvcHMgPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSAgICA9ICdEYXRhR3JpZFZpZXcnDQogICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICAgPSA0NTANCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCAgPSAzMjANCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCAgICAgPSAxMTUNCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgICAgPSAxMA0KICAgICAgICAgICAgICAgICAgICAgICAgYmcgICAgICA9IEAoNDAsIDQwLCA0MCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGZnICAgICAgPSBAKDI1NSwgMjU1LCAyNTUpDQogICAgICAgICAgICAgICAgICAgICAgICBpZCAgICAgID0gJ0RhdGFHcmlkRmlsbGVyJw0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCAgICA9ICcnDQogICAgICAgICAgICAgICAgICAgICAgICBmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgJERhdGFHcmlkRmlsbGVyID0gU2V0LVVJRWxlbWVudCBAZGF0YUdyaWRGaWxsZXJQcm9wcw0KICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFNlY29uZGFyeSBEYXRhR3JpZA0KICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgTWFpbiBGb3JtIERhdGEgRGlzcGxheSBDb250cm9scw0KDQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENyZWF0ZSBTZXR0aW5ncyBGb3JtIElucHV0IENvbnRyb2xzDQogICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgTGF1bmNoZXIgUGF0aCBUZXh0Qm94DQogICAgICAgICAgICAgICAgICAgICMgJGxhdW5jaGVyVGV4dEJveFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIFRleHRCb3ggdG8gaW5wdXQgdGhlIGxhdW5jaGVyIHBhdGguDQogICAgICAgICAgICAgICAgICAgICRsYXVuY2hlclRleHRCb3hQcm9wcyA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlICAgID0gJ1RleHRCb3gnDQogICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICAgPSAxNTANCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCAgPSAzMA0KICAgICAgICAgICAgICAgICAgICAgICAgdG9wICAgICA9IDUwDQogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgID0gMjANCiAgICAgICAgICAgICAgICAgICAgICAgIGJnICAgICAgPSBAKDQwLCA0MCwgNDApDQogICAgICAgICAgICAgICAgICAgICAgICBmZyAgICAgID0gQCgyNTUsIDI1NSwgMjU1KQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWQgICAgICA9ICdJbnB1dExhdW5jaGVyJw0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCAgICA9ICcnDQogICAgICAgICAgICAgICAgICAgICAgICBmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgJHR4dExhdW5jaGVyID0gU2V0LVVJRWxlbWVudCBAbGF1bmNoZXJUZXh0Qm94UHJvcHMNCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBMYXVuY2hlciBQYXRoIFRleHRCb3gNCg0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ3JlYXRlIFByb2Nlc3MgTmFtZSBUZXh0Qm94DQogICAgICAgICAgICAgICAgICAgICMgJHByb2Nlc3NOYW1lVGV4dEJveFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIFRleHRCb3ggdG8gaW5wdXQgdGhlIHRhcmdldCBwcm9jZXNzIG5hbWUuDQogICAgICAgICAgICAgICAgICAgICRwcm9jZXNzTmFtZVRleHRCb3hQcm9wcyA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlICAgID0gJ1RleHRCb3gnDQogICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICAgPSAxNTANCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCAgPSAzMA0KICAgICAgICAgICAgICAgICAgICAgICAgdG9wICAgICA9IDEyMA0KICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAgICA9IDIwDQogICAgICAgICAgICAgICAgICAgICAgICBiZyAgICAgID0gQCg0MCwgNDAsIDQwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZmcgICAgICA9IEAoMjU1LCAyNTUsIDI1NSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkICAgICAgPSAnSW5wdXRQcm9jZXNzJw0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCAgICA9ICcnDQogICAgICAgICAgICAgICAgICAgICAgICBmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgJHR4dFByb2Nlc3NOYW1lID0gU2V0LVVJRWxlbWVudCBAcHJvY2Vzc05hbWVUZXh0Qm94UHJvcHMNCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBQcm9jZXNzIE5hbWUgVGV4dEJveA0KDQogICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgTWF4IENsaWVudHMgVGV4dEJveA0KICAgICAgICAgICAgICAgICAgICAjICRtYXhDbGllbnRzVGV4dEJveFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIFRleHRCb3ggdG8gaW5wdXQgdGhlIG1heGltdW0gbnVtYmVyIG9mIGNsaWVudHMuDQogICAgICAgICAgICAgICAgICAgICRtYXhDbGllbnRzVGV4dEJveFByb3BzID0gQHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgPSAnVGV4dEJveCcNCiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggICA9IDE1MA0KICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICA9IDMwDQogICAgICAgICAgICAgICAgICAgICAgICB0b3AgICAgID0gMTkwDQogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgID0gMjANCiAgICAgICAgICAgICAgICAgICAgICAgIGJnICAgICAgPSBAKDQwLCA0MCwgNDApDQogICAgICAgICAgICAgICAgICAgICAgICBmZyAgICAgID0gQCgyNTUsIDI1NSwgMjU1KQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWQgICAgICA9ICdJbnB1dE1heCcNCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgICAgPSAnJw0KICAgICAgICAgICAgICAgICAgICAgICAgZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICR0eHRNYXhDbGllbnRzID0gU2V0LVVJRWxlbWVudCBAbWF4Q2xpZW50c1RleHRCb3hQcm9wcw0KICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIE1heCBDbGllbnRzIFRleHRCb3gNCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFNldHRpbmdzIEZvcm0gSW5wdXQgQ29udHJvbHMNCg0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgQ29udGV4dCBNZW51IGFuZCBMb2dpbiBQb3NpdGlvbiBDb250cm9scw0KDQogICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBEZWZpbmUgU2xvdCBPcHRpb25zIGZvciBMb2dpbiBQb3NpdGlvbnMNCiAgICAgICAgICAgICAgICAgICAgIyAkc2xvdE9wdGlvbnM6IEFycmF5IGRlZmluaW5nIHRoZSBhdmFpbGFibGUgY2hvaWNlcyBmb3IgbG9naW4gcG9zaXRpb24gQ29tYm9Cb3hlcy4NCiAgICAgICAgICAgICAgICAgICAgJHNsb3RPcHRpb25zID0gQCgnMScsICcyJywgJzMnKQ0KICAgICAgICAgICAgICAgICAgICAjICRMb2dpbkNvbWJvczogT3JkZXJlZCBkaWN0aW9uYXJ5IHRvIHN0b3JlIHJlZmVyZW5jZXMgdG8gdGhlIGNyZWF0ZWQgbG9naW4gQ29tYm9Cb3hlcy4NCiAgICAgICAgICAgICAgICAgICAgJExvZ2luQ29tYm9zID0gW29yZGVyZWRdQHt9DQogICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBEZWZpbmUgU2xvdCBPcHRpb25zIGZvciBMb2dpbiBQb3NpdGlvbnMNCg0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogRHluYW1pY2FsbHkgQ3JlYXRlIExvZ2luIFBvc2l0aW9uIExhYmVscyBhbmQgQ29tYm9Cb3hlcw0KICAgICAgICAgICAgICAgICAgICAjIExvb3AgdG8gY3JlYXRlIGEgbGFiZWwgYW5kIENvbWJvQm94IGZvciBlYWNoIHBvdGVudGlhbCBsb2dpbiBwb3NpdGlvbiAoMSB0byAxMCkuDQogICAgICAgICAgICAgICAgICAgIDEuLjEwIHwgRm9yRWFjaC1PYmplY3Qgew0KICAgICAgICAgICAgICAgICAgICAgICAgJGkgPSAkXw0KICAgICAgICAgICAgICAgICAgICAgICAgJHBvc2l0aW9uS2V5ID0gIkxvZ2luJGkiDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ3JlYXRlIExhYmVsIGZvciBQb3NpdGlvbiAkaQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgJGxibFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIGxhYmVsIGZvciB0aGUgY3VycmVudCBsb2dpbiBwb3NpdGlvbi4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGJsUHJvcHMgPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlICAgID0gJ0xhYmVsJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggICA9IDExMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgID0gMjANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wICAgICA9ICgyNSArICgoJGkgLSAxKSAqIDMwKSkgIyBDYWxjdWxhdGUgdmVydGljYWwgcG9zaXRpb24NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAgICA9IDE4MA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZyAgICAgID0gQCgzMCwgMzAsIDMwLCAwKSAjIFRyYW5zcGFyZW50IGJhY2tncm91bmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmcgICAgICA9IEAoMjU1LCAyNTUsIDI1NSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgICAgICA9ICJMYWJlbFBvcyRpIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICAgID0gIkxvZ2luIFBvc2l0aW9uICRpYDoiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxibCA9IFNldC1VSUVsZW1lbnQgQGxibFByb3BzDQogICAgICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBMYWJlbCBmb3IgUG9zaXRpb24gJGkNCg0KICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgQ29tYm9Cb3ggZm9yIFBvc2l0aW9uICRpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAkY21iUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgQ29tYm9Cb3ggZm9yIHRoZSBjdXJyZW50IGxvZ2luIHBvc2l0aW9uLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjbWJQcm9wcyA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgICAgICAgPSAnQ29tYm9Cb3gnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGUgICAgICAgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAgICAgICAgID0gMTUwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCAgICAgICAgPSAyNQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3AgICAgICAgICAgID0gKDI1ICsgKCgkaSAtIDEpICogMzApKSAjIENhbGN1bGF0ZSB2ZXJ0aWNhbCBwb3NpdGlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgICAgICAgID0gMjkwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJnICAgICAgICAgICAgPSBAKDQwLCA0MCwgNDApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZnICAgICAgICAgICAgPSBAKDI1NSwgMjU1LCAyNTUpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZzICAgICAgICAgICAgPSAnRmxhdCcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgICAgICAgICAgICA9ICJMb2dpbiRpIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250ICAgICAgICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duc3R5bGUgPSAnRHJvcERvd25MaXN0JyAjIFVzZXIgY2Fubm90IHR5cGUgY3VzdG9tIHZhbHVlcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY21iID0gU2V0LVVJRWxlbWVudCBAY21iUHJvcHMNCiAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIENvbWJvQm94IGZvciBQb3NpdGlvbiAkaQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEFkZCBTbG90IE9wdGlvbnMgdG8gQ29tYm9Cb3gNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFBvcHVsYXRlIHRoZSBjcmVhdGVkIENvbWJvQm94IHdpdGggdGhlIGRlZmluZWQgc2xvdCBvcHRpb25zLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzbG90T3B0aW9ucyB8IEZvckVhY2gtT2JqZWN0IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNtYi5JdGVtcy5BZGQoJF8pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBBZGQgU2xvdCBPcHRpb25zIHRvIENvbWJvQm94DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQWRkIENvbnRyb2xzIHRvIFNldHRpbmdzIEZvcm0gYW5kIFN0b3JlIENvbWJvQm94DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBBZGQgdGhlIG5ld2x5IGNyZWF0ZWQgbGFiZWwgYW5kIENvbWJvQm94IHRvIHRoZSBzZXR0aW5ncyBmb3JtJ3MgY29udHJvbHMgY29sbGVjdGlvbi4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2V0dGluZ3NGb3JtLkNvbnRyb2xzLkFkZCgkbGJsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzZXR0aW5nc0Zvcm0uQ29udHJvbHMuQWRkKCRjbWIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBTdG9yZSBhIHJlZmVyZW5jZSB0byB0aGUgQ29tYm9Cb3ggaW4gdGhlICRMb2dpbkNvbWJvcyBkaWN0aW9uYXJ5Lg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2dpbkNvbWJvc1skcG9zaXRpb25LZXldID0gJGNtYg0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBBZGQgQ29udHJvbHMgdG8gU2V0dGluZ3MgRm9ybSBhbmQgU3RvcmUgQ29tYm9Cb3gNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogRHluYW1pY2FsbHkgQ3JlYXRlIExvZ2luIFBvc2l0aW9uIExhYmVscyBhbmQgQ29tYm9Cb3hlcw0KDQogICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgQ29udGV4dCBNZW51IGZvciBEYXRhR3JpZHMNCiAgICAgICAgICAgICAgICAgICAgIyBDcmVhdGUgdGhlIGNvbnRleHQgbWVudSBzdHJpcCBhbmQgaXRzIGl0ZW1zIGZvciBEYXRhR3JpZCBpbnRlcmFjdGlvbnMuDQogICAgICAgICAgICAgICAgICAgICRjdHhNZW51ID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Db250ZXh0TWVudVN0cmlwDQogICAgICAgICAgICAgICAgICAgICRpdG1Gcm9udCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuVG9vbFN0cmlwTWVudUl0ZW0oJ1Nob3cnKQ0KICAgICAgICAgICAgICAgICAgICAkaXRtQmFjayA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuVG9vbFN0cmlwTWVudUl0ZW0oJ01pbmltaXplJykNCiAgICAgICAgICAgICAgICAgICAgJGl0bVJlc2l6ZUNlbnRlciA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuVG9vbFN0cmlwTWVudUl0ZW0oJ1Jlc2l6ZScpDQogICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgQ29udGV4dCBNZW51IGZvciBEYXRhR3JpZHMNCg0KICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgQ29udGV4dCBNZW51IGFuZCBMb2dpbiBQb3NpdGlvbiBDb250cm9scw0KDQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFNldCBVcCBDb250cm9sIEhpZXJhcmNoeSBhbmQgQ29udGV4dCBNZW51cw0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQWRkIENvbnRyb2xzIHRvIE1haW4gRm9ybQ0KICAgICAgICAgICAgICAgICAgICAjIEFkZCB0aGUgcHJpbWFyeSBjb250cm9scyB0byB0aGUgbWFpbiBhcHBsaWNhdGlvbiBmb3JtLg0KICAgICAgICAgICAgICAgICAgICAkbWFpbkZvcm0uQ29udHJvbHMuQWRkUmFuZ2UoQCgkdG9wQmFyLCAkYnRuTG9naW4sICRidG5GdG9vbCwgJGJ0bkxhdW5jaCwgJGJ0blNldHRpbmdzLCAkYnRuU3RvcCwgJERhdGFHcmlkTWFpbiwgJERhdGFHcmlkRmlsbGVyKSkNCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEFkZCBDb250cm9scyB0byBNYWluIEZvcm0NCg0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQWRkIENvbnRyb2xzIHRvIFRvcCBCYXINCiAgICAgICAgICAgICAgICAgICAgIyBBZGQgdGhlIHRpdGxlIGxhYmVsIGFuZCB3aW5kb3cgY29udHJvbCBidXR0b25zIHRvIHRoZSB0b3AgYmFyIHBhbmVsLg0KICAgICAgICAgICAgICAgICAgICAkdG9wQmFyLkNvbnRyb2xzLkFkZFJhbmdlKEAoJHRpdGxlTGFiZWxGb3JtLCAkY29weXJpZ2h0TGFiZWxGb3JtLCAkYnRuTWluaW1pemVGb3JtLCAkYnRuQ2xvc2VGb3JtKSkNCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEFkZCBDb250cm9scyB0byBUb3AgQmFyDQoNCiAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFNldCBVcCBDb250ZXh0IE1lbnUgZm9yIERhdGFHcmlkcw0KICAgICAgICAgICAgICAgICAgICAjIEFkZCB0aGUgcHJldmlvdXNseSBjcmVhdGVkIGl0ZW1zIHRvIHRoZSBjb250ZXh0IG1lbnUgc3RyaXAuDQogICAgICAgICAgICAgICAgICAgICRjdHhNZW51Lkl0ZW1zLkFkZFJhbmdlKEAoJGl0bUZyb250LCAkaXRtQmFjaywgJGl0bVJlc2l6ZUNlbnRlcikpDQogICAgICAgICAgICAgICAgICAgICMgQXNzaWduIHRoZSBjb250ZXh0IG1lbnUgdG8gYm90aCBEYXRhR3JpZFZpZXcgY29udHJvbHMuDQogICAgICAgICAgICAgICAgICAgICREYXRhR3JpZE1haW4uQ29udGV4dE1lbnVTdHJpcCA9ICRjdHhNZW51DQogICAgICAgICAgICAgICAgICAgICREYXRhR3JpZEZpbGxlci5Db250ZXh0TWVudVN0cmlwID0gJGN0eE1lbnUNCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFNldCBVcCBDb250ZXh0IE1lbnUgZm9yIERhdGFHcmlkcw0KDQogICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBBZGQgQ29udHJvbHMgdG8gU2V0dGluZ3MgRm9ybQ0KICAgICAgICAgICAgICAgICAgICAjIEFkZCB0aGUgcHJpbWFyeSBjb250cm9scyB0byB0aGUgc2V0dGluZ3MgZm9ybS4gKExvZ2luIHBvc2l0aW9uIGNvbnRyb2xzIHdlcmUgYWRkZWQgZHluYW1pY2FsbHkgZWFybGllcikuDQogICAgICAgICAgICAgICAgICAgICRzZXR0aW5nc0Zvcm0uQ29udHJvbHMuQWRkUmFuZ2UoQCgkYnRuU2F2ZSwgJGJ0bkNhbmNlbCwgJGxibExhdW5jaGVyLCAkdHh0TGF1bmNoZXIsICRidG5Ccm93c2VMYXVuY2hlciwgJGxibFByb2Nlc3NOYW1lLCAkdHh0UHJvY2Vzc05hbWUsICRsYmxNYXhDbGllbnRzLCAkdHh0TWF4Q2xpZW50cykpDQogICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBBZGQgQ29udHJvbHMgdG8gU2V0dGluZ3MgRm9ybQ0KICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBTZXQgVXAgQ29udHJvbCBIaWVyYXJjaHkgYW5kIENvbnRleHQgTWVudXMNCg0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgR2xvYmFsIFVJIE9iamVjdCBmb3IgRWxlbWVudCBBY2Nlc3MNCiAgICAgICAgICAgICAgICAjICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJOiBBIGNlbnRyYWwgUFNDdXN0b21PYmplY3QgaG9sZGluZyByZWZlcmVuY2VzIHRvIGFsbCBjcmVhdGVkIFVJIGVsZW1lbnRzIGZvciBlYXN5IGFjY2VzcyB0aHJvdWdob3V0IHRoZSBhcHBsaWNhdGlvbi4NCiAgICAgICAgICAgICAgICAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSSA9IFtQU0N1c3RvbU9iamVjdF1Aew0KICAgICAgICAgICAgICAgICAgICAjIE1haW4gZm9ybSBhbmQgY29udGFpbmVycw0KICAgICAgICAgICAgICAgICAgICBNYWluRm9ybSAgICAgICAgICAgICAgICAgICA9ICRtYWluRm9ybQ0KICAgICAgICAgICAgICAgICAgICBTZXR0aW5nc0Zvcm0gICAgICAgICAgICAgICA9ICRzZXR0aW5nc0Zvcm0NCiAgICAgICAgICAgICAgICAgICAgVG9wQmFyICAgICAgICAgICAgICAgICAgICAgPSAkdG9wQmFyDQoNCiAgICAgICAgICAgICAgICAgICAgIyBXaW5kb3cgY29udHJvbCBidXR0b25zDQogICAgICAgICAgICAgICAgICAgIENsb3NlRm9ybSAgICAgICAgICAgICAgICAgID0gJGJ0bkNsb3NlRm9ybQ0KICAgICAgICAgICAgICAgICAgICBNaW5Gb3JtICAgICAgICAgICAgICAgICAgICA9ICRidG5NaW5pbWl6ZUZvcm0NCg0KICAgICAgICAgICAgICAgICAgICAjIE1haW4gZGlzcGxheSBlbGVtZW50cw0KICAgICAgICAgICAgICAgICAgICBEYXRhR3JpZE1haW4gICAgICAgICAgICAgICA9ICREYXRhR3JpZE1haW4NCiAgICAgICAgICAgICAgICAgICAgRGF0YUdyaWRGaWxsZXIgICAgICAgICAgICAgPSAkRGF0YUdyaWRGaWxsZXINCg0KICAgICAgICAgICAgICAgICAgICAjIE1haW4gYWN0aW9uIGJ1dHRvbnMNCiAgICAgICAgICAgICAgICAgICAgTG9naW5CdXR0b24gICAgICAgICAgICAgICAgPSAkYnRuTG9naW4NCiAgICAgICAgICAgICAgICAgICAgRnRvb2wgICAgICAgICAgICAgICAgICAgICAgPSAkYnRuRnRvb2wNCiAgICAgICAgICAgICAgICAgICAgU2V0dGluZ3MgICAgICAgICAgICAgICAgICAgPSAkYnRuU2V0dGluZ3MNCiAgICAgICAgICAgICAgICAgICAgRXhpdCAgICAgICAgICAgICAgICAgICAgICAgPSAkYnRuU3RvcA0KICAgICAgICAgICAgICAgICAgICBMYXVuY2ggICAgICAgICAgICAgICAgICAgICA9ICRidG5MYXVuY2gNCg0KICAgICAgICAgICAgICAgICAgICAjIFNldHRpbmdzIGZvcm0gbGFiZWxzDQogICAgICAgICAgICAgICAgICAgIExhYmVsTGF1bmNoZXIgICAgICAgICAgICAgID0gJGxibExhdW5jaGVyDQogICAgICAgICAgICAgICAgICAgIExhYmVsUHJvY2VzcyAgICAgICAgICAgICAgID0gJGxibFByb2Nlc3NOYW1lDQogICAgICAgICAgICAgICAgICAgIExhYmVsTWF4ICAgICAgICAgICAgICAgICAgID0gJGxibE1heENsaWVudHMNCg0KICAgICAgICAgICAgICAgICAgICAjIFNldHRpbmdzIGZvcm0gaW5wdXRzDQogICAgICAgICAgICAgICAgICAgIElucHV0TGF1bmNoZXIgICAgICAgICAgICAgID0gJHR4dExhdW5jaGVyDQogICAgICAgICAgICAgICAgICAgIElucHV0UHJvY2VzcyAgICAgICAgICAgICAgID0gJHR4dFByb2Nlc3NOYW1lDQogICAgICAgICAgICAgICAgICAgIElucHV0TWF4ICAgICAgICAgICAgICAgICAgID0gJHR4dE1heENsaWVudHMNCiAgICAgICAgICAgICAgICAgICAgQnJvd3NlICAgICAgICAgICAgICAgICAgICAgPSAkYnRuQnJvd3NlTGF1bmNoZXINCiAgICAgICAgICAgICAgICAgICAgU2F2ZSAgICAgICAgICAgICAgICAgICAgICAgPSAkYnRuU2F2ZQ0KICAgICAgICAgICAgICAgICAgICBDYW5jZWwgICAgICAgICAgICAgICAgICAgICA9ICRidG5DYW5jZWwNCg0KICAgICAgICAgICAgICAgICAgICAjIExvZ2luIHBvc2l0aW9uIGNvbnRyb2xzDQogICAgICAgICAgICAgICAgICAgIFBvc1JhbmdlICAgICAgICAgICAgICAgICAgID0gJHNsb3RPcHRpb25zICMgQXZhaWxhYmxlIHBvc2l0aW9uIG51bWJlcnMNCiAgICAgICAgICAgICAgICAgICAgTG9naW4gICAgICAgICAgICAgICAgICAgICAgPSAkTG9naW5Db21ib3MgIyBEaWN0aW9uYXJ5IG9mIExvZ2luIENvbWJvQm94ZXMNCg0KICAgICAgICAgICAgICAgICAgICAjIENvbnRleHQgbWVudSBpdGVtcw0KICAgICAgICAgICAgICAgICAgICBDb250ZXh0TWVudSAgICAgICAgICAgICAgICA9ICRjdHhNZW51DQogICAgICAgICAgICAgICAgICAgIENvbnRleHRNZW51RnJvbnQgICAgICAgICAgID0gJGl0bUZyb250DQogICAgICAgICAgICAgICAgICAgIENvbnRleHRNZW51QmFjayAgICAgICAgICAgID0gJGl0bUJhY2sNCiAgICAgICAgICAgICAgICAgICAgQ29udGV4dE1lbnVSZXNpemVBbmRDZW50ZXIgPSAkaXRtUmVzaXplQ2VudGVyDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgR2xvYmFsIFVJIE9iamVjdCBmb3IgRWxlbWVudCBBY2Nlc3MNCg0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBSZWdpc3RlciBBbGwgVUkgRXZlbnQgSGFuZGxlcnMNCiAgICAgICAgICAgICAgICAjIENhbGwgdGhlIGZ1bmN0aW9uIHRvIGF0dGFjaCBldmVudCBoYW5kbGVycyB0byB0aGUgY3JlYXRlZCBVSSBlbGVtZW50cy4NCiAgICAgICAgICAgICAgICBSZWdpc3Rlci1VSUV2ZW50SGFuZGxlcnMNCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogUmVnaXN0ZXIgQWxsIFVJIEV2ZW50IEhhbmRsZXJzDQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogUmV0dXJuIFN1Y2Nlc3MgU3RhdHVzDQogICAgICAgICAgICAgICAgcmV0dXJuICR0cnVlDQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFJldHVybiBTdWNjZXNzIFN0YXR1cw0KICAgICAgICB9DQogICAgI2VuZHJlZ2lvbiBGdW5jdGlvbjogSW5pdGlhbGl6ZS1VSQ0KDQogICAgI3JlZ2lvbiBGdW5jdGlvbjogUmVnaXN0ZXItVUlFdmVudEhhbmRsZXJzDQogICAgICAgIGZ1bmN0aW9uIFJlZ2lzdGVyLVVJRXZlbnRIYW5kbGVycw0KICAgICAgICB7DQogICAgICAgICAgICA8Iw0KICAgICAgICAgICAgLlNZTk9QU0lTDQogICAgICAgICAgICAgICAgUmVnaXN0ZXJzIGFsbCBuZWNlc3NhcnkgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBVSSBlbGVtZW50cy4NCiAgICAgICAgICAgIC5OT1RFUw0KICAgICAgICAgICAgICAgIERlZmluZXMgYSBtYXBwaW5nIG9mIFVJIGVsZW1lbnQgbmFtZXMgdG8gdGhlaXIgZXZlbnRzIGFuZCBjb3JyZXNwb25kaW5nIHNjcmlwdCBibG9ja3MgKGFjdGlvbnMpLg0KICAgICAgICAgICAgICAgIFVzZXMgUmVnaXN0ZXItT2JqZWN0RXZlbnQgdG8gYXR0YWNoIHRoZXNlIGhhbmRsZXJzLiBJbmNsdWRlcyBsb2dpYyBmb3IgZm9ybSBsb2FkaW5nLCBjbG9zaW5nLA0KICAgICAgICAgICAgICAgIHJlc2l6aW5nLCBidXR0b24gY2xpY2tzLCBjb250ZXh0IG1lbnUgYWN0aW9ucywgZXRjLiBFbnN1cmVzIHByZXZpb3VzIGhhbmRsZXJzIHdpdGggdGhlIHNhbWUNCiAgICAgICAgICAgICAgICBzb3VyY2UgaWRlbnRpZmllciBhcmUgdW5yZWdpc3RlcmVkIGZpcnN0Lg0KICAgICAgICAgICAgIz4NCiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldDQogICAgICAgICAgICBwYXJhbSgpDQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogVmFsaWRhdGUgR2xvYmFsIFVJIE9iamVjdCBFeGlzdGVuY2UNCiAgICAgICAgICAgICAgICAjIEVuc3VyZSB0aGUgVUkgb2JqZWN0IGhhcyBiZWVuIGluaXRpYWxpemVkIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHJlZ2lzdGVyIGV2ZW50cy4NCiAgICAgICAgICAgICAgICBpZiAoJG51bGwgLWVxICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnICBVSTogR2xvYmFsIFVJIGlzIG51bGwsIGV4aXRpbmcgZXZlbnQgcmVnaXN0cmF0aW9uJyAtRm9yZWdyb3VuZENvbG9yIFJlZA0KICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFZhbGlkYXRlIEdsb2JhbCBVSSBPYmplY3QgRXhpc3RlbmNlDQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogRGVmaW5lIEV2ZW50IEhhbmRsZXIgTWFwcGluZ3MNCiAgICAgICAgICAgICAgICAjICRldmVudE1hcHBpbmdzOiBIYXNodGFibGUgZGVmaW5pbmcgd2hpY2ggc2NyaXB0IGJsb2NrIHRvIGV4ZWN1dGUgZm9yIHNwZWNpZmljIGV2ZW50cyBvbiBzcGVjaWZpYyBVSSBlbGVtZW50cy4NCiAgICAgICAgICAgICAgICAkZXZlbnRNYXBwaW5ncyA9IEB7DQogICAgICAgICAgICAgICAgICAgICMgTWFpbiBmb3JtIGV2ZW50cw0KICAgICAgICAgICAgICAgICAgICBNYWluRm9ybSAgICAgICAgICAgICAgICAgICA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEhhbmRsZSBNYWluRm9ybSBMb2FkIEV2ZW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBJbml0aWFsaXplIGZvcm0gb24gbG9hZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvYWQgICAgICAgID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IExvYWQgQ29uZmlndXJhdGlvbiBmcm9tIElOSSBGaWxlIG9uIEZvcm0gTG9hZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBMb2FkIHNldHRpbmdzIGZyb20gdGhlIElOSSBmaWxlIGlmIHRoZSBwYXRoIGlzIGNvbmZpZ3VyZWQuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUGF0aHMuSW5pKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ2hlY2sgaWYgSU5JIGZpbGUgZXhpc3RzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGluaUV4aXN0cyA9IFRlc3QtUGF0aCAtUGF0aCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5QYXRocy5JbmkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGluaUV4aXN0cykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IElOSSBmaWxlIGV4aXN0cyBhdDogJCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5QYXRocy5JbmkpIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBmaWxlIHNpemUgKGZvciBkZWJ1Z2dpbmcpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmaWxlSW5mbyA9IEdldC1JdGVtIC1QYXRoICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkluaQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIFVJOiBJTkkgZmlsZSBzaXplOiAkKCRmaWxlSW5mby5MZW5ndGgpIGJ5dGVzIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBUcnkgdG8gcmVhZCByYXcgY29udGVudCBmb3IgZGVidWdnaW5nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmF3Q29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkluaSAtUmF3DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIFVJOiBJTkkgY29udGVudDogYHJgbiQoJHJhd0NvbnRlbnQuU3Vic3RyaW5nKDAsIFtNYXRoXTo6TWluKDEwMDAsICRyYXdDb250ZW50Lkxlbmd0aCkpKSBgcmBuLi4uIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2gNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBVSTogQ291bGQgbm90IHJlYWQgcmF3IElOSSBjb250ZW50OiAkXyIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVXNlIEdldC1JbmlGaWxlQ29udGVudCB0byByZWFkIGFsbCBzZXR0aW5ncyBhdCBvbmNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbmlTZXR0aW5ncyA9IEdldC1JbmlGaWxlQ29udGVudCAtSW5pICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkluaQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ2hlY2sgaWYgd2UgZ290IGFueSBzZXR0aW5ncw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGluaVNldHRpbmdzLkNvdW50IC1ndCAwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICcgIFVJOiBTdWNjZXNzZnVsbHkgcmVhZCBzZXR0aW5ncyBmcm9tIElOSSBmaWxlJyAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgU3RvcmUgc2V0dGluZ3MgaW4gZ2xvYmFsIHZhcmlhYmxlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcgPSAkaW5pU2V0dGluZ3MNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBMb2cgbG9hZGVkIHNldHRpbmdzIChmb3IgZGVidWdnaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJHNlY3Rpb24gaW4gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnLktleXMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skc2VjdGlvbl0gLWFuZCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJHNlY3Rpb25dLktleXMuQ291bnQgLWd0IDApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgka2V5IGluICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skc2VjdGlvbl0uS2V5cykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBVSTogTG9hZGVkIHNldHRpbmcgJHNlY3Rpb24uJGtleSA9ICQoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWyRzZWN0aW9uXVska2V5XSkiIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyZXkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIFVJOiBTZWN0aW9uICRzZWN0aW9uIGhhcyBubyBrZXlzIiAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJyAgVUk6IE5vIHNldHRpbmdzIGZvdW5kIGluIElOSSBmaWxlJyAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IElOSSBmaWxlIGRvZXMgbm90IGV4aXN0IGF0OiAkKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkluaSkiIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBVcGRhdGUgVUkgd2l0aCBsb2FkZWQgc2V0dGluZ3MNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTeW5jLUNvbmZpZ1RvVUkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBMb2FkIENvbmZpZ3VyYXRpb24gZnJvbSBJTkkgRmlsZSBvbiBGb3JtIExvYWQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFN0b3JlIEluaXRpYWwgQ29udHJvbCBQcm9wZXJ0aWVzIGZvciBSZXNpemluZw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBTdG9yZSBpbml0aWFsIGRpbWVuc2lvbnMgYW5kIHBvc2l0aW9ucyBmb3IgZHluYW1pYyByZXNpemluZy4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY3JpcHQ6aW5pdGlhbENvbnRyb2xQcm9wcyA9IEB7fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjcmlwdDppbml0aWFsRm9ybVdpZHRoID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTWFpbkZvcm0uV2lkdGgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY3JpcHQ6aW5pdGlhbEZvcm1IZWlnaHQgPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5NYWluRm9ybS5IZWlnaHQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBTdG9yZSBJbml0aWFsIENvbnRyb2wgUHJvcGVydGllcyBmb3IgUmVzaXppbmcNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IERlZmluZSBDb250cm9scyB0byBTY2FsZSBhbmQgU3RvcmUgSW5pdGlhbCBQcm9wZXJ0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIERlZmluZSB3aGljaCBjb250cm9scyBzaG91bGQgYmUgc2NhbGVkIGR1cmluZyBmb3JtIHJlc2l6ZS4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb250cm9sc1RvU2NhbGUgPSBAKCdUb3BCYXInLCAnTG9naW4nLCAnRnRvb2wnLCAnU2V0dGluZ3MnLCAnRXhpdCcsICdMYXVuY2gnLCAnRGF0YUdyaWRNYWluJywgJ0RhdGFHcmlkRmlsbGVyJywgJ01pbkZvcm0nLCAnQ2xvc2VGb3JtJykNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBTdG9yZSBpbml0aWFsIHByb3BlcnRpZXMgZm9yIGVhY2ggc2NhbGFibGUgY29udHJvbC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRjb250cm9sTmFtZSBpbiAkY29udHJvbHNUb1NjYWxlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb250cm9sID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuJGNvbnRyb2xOYW1lDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRjb250cm9sKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjcmlwdDppbml0aWFsQ29udHJvbFByb3BzWyRjb250cm9sTmFtZV0gPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGVmdCAgICAgICAgICAgICA9ICRjb250cm9sLkxlZnQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvcCAgICAgICAgICAgICAgPSAkY29udHJvbC5Ub3ANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdpZHRoICAgICAgICAgICAgPSAkY29udHJvbC5XaWR0aA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVpZ2h0ICAgICAgICAgICA9ICRjb250cm9sLkhlaWdodA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSXNTY2FsYWJsZUJvdHRvbSA9ICgkY29udHJvbE5hbWUgLWVxICdEYXRhR3JpZEZpbGxlcicgLW9yICRjb250cm9sTmFtZSAtZXEgJ0RhdGFHcmlkTWFpbicpICMgTWFyayBncmlkcyBmb3IgdmVydGljYWwgc2NhbGluZw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IERlZmluZSBDb250cm9scyB0byBTY2FsZSBhbmQgU3RvcmUgSW5pdGlhbCBQcm9wZXJ0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgTWFpbkZvcm0gTG9hZCBFdmVudA0KDQogICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEhhbmRsZSBNYWluRm9ybSBTaG93biBFdmVudA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgU3RhcnQgdXBkYXRlIHRpbWVyIHdoZW4gZm9ybSBpcyBhY3R1YWxseSBzaG93bg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNob3duICAgICAgID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFN0YXJ0IERhdGFHcmlkIFVwZGF0ZSBUaW1lciBXaGVuIEZvcm0gaXMgU2hvd24NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5EYXRhR3JpZEZpbGxlcikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXJ0LURhdGFHcmlkVXBkYXRlVGltZXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2gNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgU2lsZW50IGVycm9yIGhhbmRsaW5nIGlmIHRpbWVyIHN0YXJ0IGZhaWxzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IEZhaWxlZCB0byBzdGFydCBEYXRhR3JpZCB1cGRhdGUgdGltZXI6ICRfIiAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBTdGFydCBEYXRhR3JpZCBVcGRhdGUgVGltZXIgV2hlbiBGb3JtIGlzIFNob3duDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgTWFpbkZvcm0gU2hvd24gRXZlbnQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBIYW5kbGUgTWFpbkZvcm0gRm9ybUNsb3NpbmcgRXZlbnQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIENsZWFuIHVwIHJlc291cmNlcyB3aGVuIGZvcm0gaXMgY2xvc2luZw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1DbG9zaW5nID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgkc3JjLCAkZSkNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENsZWFuIFVwIFJlc291cmNlcyBvbiBGb3JtIENsb3NpbmcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJyAgVUk6IEZvcm0gY2xvc2luZyAtIGNsZWFuaW5nIHVwIHJlc291cmNlcycgLUZvcmVncm91bmRDb2xvciBDeWFuDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ2xlYW4gVXAgRnRvb2wgSW5zdGFuY2VzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDbGVhbiB1cCBhbnkgcnVubmluZyBmdG9vbCBmb3JtcyBhbmQgdGhlaXIgYXNzb2NpYXRlZCByZXNvdXJjZXMuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5GdG9vbEZvcm1zIC1hbmQgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLkZ0b29sRm9ybXMuQ291bnQgLWd0IDApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIFVJOiBDbGVhbmluZyB1cCBmdG9vbCBpbnN0YW5jZXM6ICQoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLkZ0b29sRm9ybXMuQ291bnQpIGZvcm1zIiAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEdldCBhIGNvcHkgb2YgdGhlIGtleXMgdG8gYXZvaWQgY29sbGVjdGlvbiBtb2RpZmljYXRpb24gaXNzdWVzIGR1cmluZyBpdGVyYXRpb24uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnN0YW5jZUlkcyA9IEAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLkZ0b29sRm9ybXMuS2V5cykNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkaW5zdGFuY2VJZCBpbiAkaW5zdGFuY2VJZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IENsZWFuaW5nIHVwIGZ0b29sIGluc3RhbmNlOiAkaW5zdGFuY2VJZCIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZvcm0gPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuRnRvb2xGb3Jtc1skaW5zdGFuY2VJZF0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRmb3JtIC1hbmQgLW5vdCAkZm9ybS5Jc0Rpc3Bvc2VkKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVXNlIFN0b3AtRnRvb2xGb3JtIGlmIGF2YWlsYWJsZSBmb3IgcHJvcGVyIGNsZWFudXAuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEdldC1Db21tYW5kIC1OYW1lIFN0b3AtRnRvb2xGb3JtIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RvcC1GdG9vbEZvcm0gLUZvcm0gJGZvcm0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBGYWxsYmFjayBjbGVhbnVwIGlmIFN0b3AtRnRvb2xGb3JtIGlzIG5vdCBmb3VuZC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRhdGEgPSAkZm9ybS5UYWcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRkYXRhKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIENsZWFuIHVwIHJ1bm5pbmcgc3BhbW1lciB0aW1lciBpZiBleGlzdHMuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGRhdGEuUnVubmluZ1NwYW1tZXIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRhdGEuUnVubmluZ1NwYW1tZXIuU3RvcCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRhdGEuUnVubmluZ1NwYW1tZXIuRGlzcG9zZSgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ2xlYW4gdXAgZm9ybS1zcGVjaWZpYyB0aW1lcnMuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGRhdGEuVGltZXJzIC1hbmQgJGRhdGEuVGltZXJzLkNvdW50IC1ndCAwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR0aW1lcktleSBpbiBAKCRkYXRhLlRpbWVycy5LZXlzKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lciA9ICRkYXRhLlRpbWVyc1skdGltZXJLZXldDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdGltZXIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lci5TdG9wKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lci5EaXNwb3NlKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ2xvc2UgYW5kIGRpc3Bvc2UgZm9ybS4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZvcm0uQ2xvc2UoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZm9ybS5EaXNwb3NlKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBUaGlzIG1pZ2h0IGJlIHRvbyBhZ2dyZXNzaXZlIGhlcmUsIGNvbnNpZGVyIGlmIG5lZWRlZC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQXBwbGljYXRpb25dOjpFeGl0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFJlbW92ZSB0aGUgZm9ybSByZWZlcmVuY2UgZnJvbSB0aGUgZ2xvYmFsIGNvbGxlY3Rpb24uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLkZ0b29sRm9ybXMuUmVtb3ZlKCRpbnN0YW5jZUlkKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDbGVhbiBVcCBGdG9vbCBJbnN0YW5jZXMNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDbGVhbiBVcCBHbG9iYWwgVGltZXJzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDbGVhbiB1cCBhbGwgcmVnaXN0ZXJlZCB0aW1lcnMgc3RvcmVkIGluIHRoZSBnbG9iYWwgcmVzb3VyY2VzLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuVGltZXJzIC1hbmQgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLlRpbWVycy5Db3VudCAtZ3QgMCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IENsZWFuaW5nIHVwICQoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLlRpbWVycy5Db3VudCkgdGltZXJzIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBIYW5kbGUgbmVzdGVkIHRpbWVyIGNvbGxlY3Rpb25zIGZpcnN0IChlLmcuLCB0aW1lcnMgd2l0aGluIGZ0b29sIGRhdGEpLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkY29sbGVjdGlvbktleSBpbiBAKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5UaW1lcnMuS2V5cykpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb2xsZWN0aW9uID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLlRpbWVyc1skY29sbGVjdGlvbktleV0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRjb2xsZWN0aW9uIC1pcyBbU3lzdGVtLkNvbGxlY3Rpb25zLkhhc2h0YWJsZV0gLW9yICRjb2xsZWN0aW9uIC1pcyBbU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5XSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbmVzdGVkS2V5cyA9IEAoJGNvbGxlY3Rpb24uS2V5cykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkbmVzdGVkS2V5IGluICRuZXN0ZWRLZXlzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVyID0gJGNvbGxlY3Rpb25bJG5lc3RlZEtleV0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0aW1lciAtaXMgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLlRpbWVyXSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0aW1lci5FbmFibGVkKSB7ICR0aW1lci5TdG9wKCkgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVyLkRpc3Bvc2UoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbGxlY3Rpb24uUmVtb3ZlKCRuZXN0ZWRLZXkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEhhbmRsZSBkaXJlY3QgdGltZXJzIHN0b3JlZCBpbiB0aGUgbWFpbiBUaW1lcnMgY29sbGVjdGlvbi4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVyS2V5cyA9IEAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLlRpbWVycy5LZXlzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgka2V5IGluICR0aW1lcktleXMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lciA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5UaW1lcnNbJGtleV0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdGltZXIgLWlzIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5UaW1lcl0pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0aW1lci5FbmFibGVkKSB7ICR0aW1lci5TdG9wKCkgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lci5EaXNwb3NlKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuVGltZXJzLlJlbW92ZSgka2V5KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDbGVhbiBVcCBHbG9iYWwgVGltZXJzDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ2xlYW4gVXAgQmFja2dyb3VuZCBKb2JzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBTdG9wIGFuZCByZW1vdmUgYW55IHJ1bm5pbmcgUG93ZXJTaGVsbCBiYWNrZ3JvdW5kIGpvYnMuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcnVubmluZ0pvYnMgPSBHZXQtSm9iIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgV2hlcmUtT2JqZWN0IHsgJF8uU3RhdGUgLW5lICdDb21wbGV0ZWQnIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRydW5uaW5nSm9icyAtYW5kICRydW5uaW5nSm9icy5Db3VudCAtZ3QgMCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBVSTogU3RvcHBpbmcgJCgkcnVubmluZ0pvYnMuQ291bnQpIGJhY2tncm91bmQgam9icy4iIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRydW5uaW5nSm9icyB8IFN0b3AtSm9iIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQtSm9iIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgUmVtb3ZlLUpvYiAtRm9yY2UgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBVSTogRXJyb3IgY2xlYW5pbmcgdXAgYmFja2dyb3VuZCBqb2JzOiAkXyItRm9yZWdyb3VuZENvbG9yIFJlZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ2xlYW4gVXAgQmFja2dyb3VuZCBKb2JzDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ2xlYW4gVXAgUnVuc3BhY2VzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBEaXNwb3NlIG9mIGFueSBhY3RpdmUgcnVuc3BhY2VzLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZ2xvYmFsOnJ1bnNwYWNlcyAtYW5kICRnbG9iYWw6cnVuc3BhY2VzLkNvdW50IC1ndCAwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBVSTogRGlzcG9zaW5nICQoJGdsb2JhbDpydW5zcGFjZXMuQ291bnQpIHJ1bnNwYWNlcy4iIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJHJzIGluICRnbG9iYWw6cnVuc3BhY2VzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHJzLlJ1bnNwYWNlLlJ1bnNwYWNlU3RhdGVJbmZvLlN0YXRlIC1uZSAnQ2xvc2VkJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRycy5Qb3dlclNoZWxsLkRpc3Bvc2UoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcnMuUnVuc3BhY2UuRGlzcG9zZSgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2gNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIFVJOiBFcnJvciBkaXNwb3NpbmcgcnVuc3BhY2U6ICRfIi1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGdsb2JhbDpydW5zcGFjZXMuQ2xlYXIoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ2xlYW4gVXAgUnVuc3BhY2VzDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ2xlYW4gVXAgTGF1bmNoIFJlc291cmNlcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgU3RvcCBhbnkgb25nb2luZyBjbGllbnQgbGF1bmNoIHByb2Nlc3Nlcy4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdG9wLUNsaWVudExhdW5jaA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDbGVhbiBVcCBMYXVuY2ggUmVzb3VyY2VzDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogRm9yY2UgR2FyYmFnZSBDb2xsZWN0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBFeHBsaWNpdGx5IHJ1biBnYXJiYWdlIGNvbGxlY3Rpb24gdG8gcmVsZWFzZSBtZW1vcnkuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N5c3RlbS5HQ106OkNvbGxlY3QoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTeXN0ZW0uR0NdOjpXYWl0Rm9yUGVuZGluZ0ZpbmFsaXplcnMoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBGb3JjZSBHYXJiYWdlIENvbGxlY3Rpb24NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDbGVhbiBVcCBSZXNvdXJjZXMgb24gRm9ybSBDbG9zaW5nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgTWFpbkZvcm0gRm9ybUNsb3NpbmcgRXZlbnQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBIYW5kbGUgTWFpbkZvcm0gUmVzaXplIEV2ZW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBIYW5kbGUgZm9ybSByZXNpemluZyB0byBkeW5hbWljYWxseSBhZGp1c3QgY29udHJvbCBwb3NpdGlvbnMgYW5kIHNpemVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVzaXplICAgICAgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogSGFuZGxlIEZvcm0gUmVzaXppbmcgYW5kIFNjYWxlIENvbnRyb2xzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFNraXAgaWYgaW5pdGlhbGl6YXRpb24gZGF0YSBpcyBtaXNzaW5nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdCAkc2NyaXB0OmluaXRpYWxDb250cm9sUHJvcHMgLW9yIC1ub3QgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ2FsY3VsYXRlIHNjYWxpbmcgZmFjdG9ycyBiYXNlZCBvbiBjdXJyZW50IHZzIGluaXRpYWwgc2l6ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRGb3JtV2lkdGggPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5NYWluRm9ybS5DbGllbnRTaXplLldpZHRoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY3VycmVudEZvcm1IZWlnaHQgPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5NYWluRm9ybS5DbGllbnRTaXplLkhlaWdodA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjYWxlVyA9ICRjdXJyZW50Rm9ybVdpZHRoIC8gJHNjcmlwdDppbml0aWFsRm9ybVdpZHRoDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRGVmaW5lIGZpeGVkIGFyZWFzIChlLmcuLCBoZWlnaHQgb2YgdGhlIHRvcCBidXR0b24gYmFyIGFyZWEpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZml4ZWRUb3BIZWlnaHQgPSAxMjUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRib3R0b21NYXJnaW4gPSAxMA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFJlc2l6ZSBhbmQgcmVwb3NpdGlvbiBlYWNoIHNjYWxhYmxlIGNvbnRyb2wNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRjb250cm9sTmFtZSBpbiAkc2NyaXB0OmluaXRpYWxDb250cm9sUHJvcHMuS2V5cykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29udHJvbCA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLiRjb250cm9sTmFtZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkY29udHJvbCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbml0aWFsUHJvcHMgPSAkc2NyaXB0OmluaXRpYWxDb250cm9sUHJvcHNbJGNvbnRyb2xOYW1lXQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ2FsY3VsYXRlIG5ldyBwb3NpdGlvbiBhbmQgd2lkdGggYmFzZWQgb24gaG9yaXpvbnRhbCBzY2FsZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbmV3TGVmdCA9IFtpbnRdKCRpbml0aWFsUHJvcHMuTGVmdCAqICRzY2FsZVcpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRuZXdXaWR0aCA9IFtpbnRdKCRpbml0aWFsUHJvcHMuV2lkdGggKiAkc2NhbGVXKQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgSGFuZGxlIHNwZWNpYWwgY2FzZSBmb3IgYm90dG9tLWFuY2hvcmVkIGNvbnRyb2xzIChEYXRhR3JpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkaW5pdGlhbFByb3BzLklzU2NhbGFibGVCb3R0b20pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb250cm9sLlRvcCA9ICRmaXhlZFRvcEhlaWdodA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBBZGp1c3QgaGVpZ2h0IGJhc2VkIG9uIHJlbWFpbmluZyBmb3JtIGhlaWdodA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRyb2wuSGVpZ2h0ID0gW01hdGhdOjpNYXgoMTAwLCAkY3VycmVudEZvcm1IZWlnaHQgLSAkZml4ZWRUb3BIZWlnaHQgLSAkYm90dG9tTWFyZ2luKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBLZWVwIG9yaWdpbmFsIHRvcCBhbmQgaGVpZ2h0IGZvciBub24tdmVydGljYWxseS1zY2FsaW5nIGNvbnRyb2xzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29udHJvbC5Ub3AgPSAkaW5pdGlhbFByb3BzLlRvcA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRyb2wuSGVpZ2h0ID0gJGluaXRpYWxQcm9wcy5IZWlnaHQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQXBwbHkgbmV3IHBvc2l0aW9uIGFuZCB3aWR0aA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29udHJvbC5MZWZ0ID0gJG5ld0xlZnQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRyb2wuV2lkdGggPSAkbmV3V2lkdGgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogSGFuZGxlIEZvcm0gUmVzaXppbmcgYW5kIFNjYWxlIENvbnRyb2xzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgTWFpbkZvcm0gUmVzaXplIEV2ZW50DQoNCgkJCQkJCUtleURvd24gICAgICA9IHsNCgkJCQkJCQkJIyBjcmVhdGUgYSBzbWFsbCBhcnJheSB0byBjYXB0dXJlIHRoZSBtb2RpZmllciBrZXlzIHVzZWQNCgkJCQkJCQkJJG1vZGlmaWVycyA9IEAoKQ0KCQkJCQkJCQlpZiAoJF8uU2hpZnQpICAgeyAkbW9kaWZpZXJzICs9ICJTaGlmdCIgfQ0KCQkJCQkJCQlpZiAoJF8uQWx0KSAgICAgeyAkbW9kaWZpZXJzICs9ICJBbHQiIH0NCgkJCQkJCQkJaWYgKCRfLkNvbnRyb2wpIHsgJG1vZGlmaWVycyArPSAiQ29udHJvbCIgfQ0KCQkJCQkJCQkjIHVzaW5nIHRoYXQgYXJyYXksIGJ1aWxkIHBhcnQgb2YgdGhlIG91dHB1dCB0ZXh0DQoJCQkJCQkJCSRtb2RrZXlzID0gJycNCgkJCQkJCQkJaWYgKCRtb2RpZmllcnMuQ291bnQpIHsNCgkJCQkJCQkJCSRtb2RrZXlzID0gJF8uTW9kaWZpZXJzIC1yZXBsYWNlICcsICcsICcgKyAnDQoJCQkJCQkJCX0NCgkJCQkJCQkJCQkJCQ0KCQkJCQkJCQlpZiAoJ1EnLCdBJywnRjEnLCdFc2NhcGUnLCdOdW1Mb2NrJyAtY29udGFpbnMgJF8uS2V5Q29kZSkgew0KCQkJCQkJCQ0KCQkJCQkJCQkJIyB3ZSBjcmVhdGUgdGhlIG91dHB1dCBzdHJpbmcgYnkgbWFraW5nIHVzZSBvZiB0aGUgJy1mJyBGb3JtYXQgb3BlcmF0b3IgaW4gUE93ZXJzaGVsbC4NCgkJCQkJCQkJCSMgeW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhhdCBoZXJlIGZvciBpbnN0YW5jZToNCgkJCQkJCQkJCSMgaHR0cHM6Ly9zb2NpYWwudGVjaG5ldC5taWNyb3NvZnQuY29tL3dpa2kvY29udGVudHMvYXJ0aWNsZXMvNzg1NS5wb3dlcnNoZWxsLXVzaW5nLXRoZS1mLWZvcm1hdC1vcGVyYXRvci5hc3B4DQoJCQkJCQkJCQlXcml0ZS1WZXJib3NlICgnezB9ezF9IHByZXNzZWQgLSAxJyAtZiAkbW9ka2V5cywgJF8uS2V5Q29kZSkNCgkJCQkJCQkNCgkJCQkJCQkJCSMgVGhlIHNhbWUgY291bGQgaGF2ZSBiZWVuIGRvbmUgd2l0aCBzb21ldGhpbmcgbGlrZToNCgkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgKCRtb2RrZXlzICsgJyAnICsgJF8uS2V5Q29kZSArICcgcHJlc3NlZCAtIDInKQ0KCQkJCQkJCQkJIyBvcg0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiJG1vZGtleXMgJCgkXy5LZXlDb2RlKSBwcmVzc2VkIC0gMyINCgkJCQkJCQl9DQoJCQkJCQl9DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAjIFNldHRpbmdzIGZvcm0gZXZlbnRzDQogICAgICAgICAgICAgICAgICAgIFNldHRpbmdzRm9ybSAgICAgICAgICAgICAgID0gQHsNCiAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogSGFuZGxlIFNldHRpbmdzRm9ybSBMb2FkIEV2ZW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBJbml0aWFsaXplIGZvcm0gb24gbG9hZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvYWQgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogU3luYyBDb25maWcgdG8gVUkgV2hlbiBTZXR0aW5ncyBGb3JtIExvYWRzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFBvcHVsYXRlIFVJIGNvbnRyb2xzIHdpdGggY3VycmVudCBjb25maWcgdmFsdWVzIHdoZW4gdGhlIGZvcm0gbG9hZHMuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3luYy1Db25maWdUb1VJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IEVycm9yIGxvYWRpbmcgc2V0dGluZ3MgZm9ybTogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJGYWlsZWQgdG8gbG9hZCBzZXR0aW5nczogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiLCAnRXJyb3InLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6RXJyb3IpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogU3luYyBDb25maWcgdG8gVUkgV2hlbiBTZXR0aW5ncyBGb3JtIExvYWRzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgU2V0dGluZ3NGb3JtIExvYWQgRXZlbnQNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAjIE1pbmltaXplIGJ1dHRvbiBldmVudA0KICAgICAgICAgICAgICAgICAgICBNaW5Gb3JtICAgICAgICAgICAgICAgICAgICA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEhhbmRsZSBNaW5Gb3JtIENsaWNrIEV2ZW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xpY2sgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogTWluaW1pemUgTWFpbiBGb3JtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIE1pbmltaXplIHRoZSBtYWluIGFwcGxpY2F0aW9uIHdpbmRvdy4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtLldpbmRvd1N0YXRlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm1XaW5kb3dTdGF0ZV06Ok1pbmltaXplZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IE1pbmltaXplIE1haW4gRm9ybQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogSGFuZGxlIE1pbkZvcm0gQ2xpY2sgRXZlbnQNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICMgQ2xvc2UgYnV0dG9uIGV2ZW50DQogICAgICAgICAgICAgICAgICAgIENsb3NlRm9ybSAgICAgICAgICAgICAgICAgID0gQHsNCiAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogSGFuZGxlIENsb3NlRm9ybSBDbGljayBFdmVudA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsaWNrID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENsb3NlIE1haW4gRm9ybSBhbmQgRXhpdCBBcHBsaWNhdGlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDbG9zZSB0aGUgbWFpbiBmb3JtLCB3aGljaCB0cmlnZ2VycyB0aGUgRm9ybUNsb3NpbmcgZXZlbnQgZm9yIGNsZWFudXAuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTWFpbkZvcm0uQ2xvc2UoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQXR0ZW1wdCB0byBleGl0IHRoZSBhcHBsaWNhdGlvbiBtZXNzYWdlIGxvb3AuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkFwcGxpY2F0aW9uXTo6RXhpdCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBGb3JjZWZ1bGx5IHN0b3AgdGhlIGN1cnJlbnQgUG93ZXJTaGVsbCBwcm9jZXNzIGFzIGEgZmluYWwgbWVhc3VyZS4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdG9wLVByb2Nlc3MgLUlkICRQSUQgLUZvcmNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygiRmFpbGVkIHRvIGNsb3NlIHRoZSBhcHBsaWNhdGlvbjogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiLCAnRXJyb3InLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6RXJyb3IpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ2xvc2UgTWFpbiBGb3JtIGFuZCBFeGl0IEFwcGxpY2F0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgQ2xvc2VGb3JtIENsaWNrIEV2ZW50DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAjIFRvcCBiYXIgZHJhZyBldmVudA0KICAgICAgICAgICAgICAgICAgICBUb3BCYXIgICAgICAgICAgICAgICAgICAgICA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEhhbmRsZSBUb3BCYXIgTW91c2VEb3duIEV2ZW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTW91c2VEb3duID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgkc3JjLCAkZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBFbmFibGUgRm9ybSBEcmFnZ2luZyB2aWEgVG9wIEJhcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBVc2UgbmF0aXZlIFdpbmRvd3MgbWVzc2FnZXMgdG8gYWxsb3cgZHJhZ2dpbmcgdGhlIGJvcmRlcmxlc3MgZm9ybSBieSBpdHMgdG9wIGJhci4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtOYXRpdmVdOjpSZWxlYXNlQ2FwdHVyZSgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbTmF0aXZlXTo6U2VuZE1lc3NhZ2UoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTWFpbkZvcm0uSGFuZGxlLCAweEExLCAweDIsIDApICMgV01fTkNMQlVUVE9ORE9XTiwgSFRDQVBUSU9ODQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogRW5hYmxlIEZvcm0gRHJhZ2dpbmcgdmlhIFRvcCBCYXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBUb3BCYXIgTW91c2VEb3duIEV2ZW50DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAjIFNldHRpbmdzIGJ1dHRvbiBldmVudA0KICAgICAgICAgICAgICAgICAgICBTZXR0aW5ncyAgICAgICAgICAgICAgICAgICA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEhhbmRsZSBTZXR0aW5ncyBCdXR0b24gQ2xpY2sgRXZlbnQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbGljayA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBTaG93IFNldHRpbmdzIEZvcm0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ2FsbCB0aGUgZnVuY3Rpb24gdG8gZGlzcGxheSB0aGUgc2V0dGluZ3MgZm9ybSB3aXRoIGEgZmFkZS1pbiBlZmZlY3QuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaG93LVNldHRpbmdzRm9ybQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFNob3cgU2V0dGluZ3MgRm9ybQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogSGFuZGxlIFNldHRpbmdzIEJ1dHRvbiBDbGljayBFdmVudA0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgIyBTYXZlIGJ1dHRvbiBldmVudCAoaW4gU2V0dGluZ3MgRm9ybSkNCiAgICAgICAgICAgICAgICAgICAgU2F2ZSAgICAgICAgICAgICAgICAgICAgICAgPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBIYW5kbGUgU2F2ZSBCdXR0b24gQ2xpY2sgRXZlbnQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbGljayA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBTYXZlIFNldHRpbmdzIGZyb20gVUkgdG8gQ29uZmlnIEZpbGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJyAgVUk6IFVwZGF0aW5nIHNldHRpbmdzIGZyb20gVUknIC1Gb3JlZ3JvdW5kQ29sb3IgQ3lhbg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBTeW5jIFVJIHZhbHVlcyBiYWNrIHRvIHRoZSBnbG9iYWwgY29uZmlnIG9iamVjdC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTeW5jLVVJVG9Db25maWcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFdyaXRlIHRoZSB1cGRhdGVkIGNvbmZpZyBvYmplY3QgdG8gdGhlIElOSSBmaWxlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXN1bHQgPSBXcml0ZS1Db25maWcNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTG9nIHRoZSBzZXR0aW5ncyBiZWluZyBzYXZlZCAoZm9yIGRlYnVnZ2luZykuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnICBVSTogU2V0dGluZ3MgdG8gc2F2ZTonIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkc2VjdGlvbiBpbiAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcuS2V5cykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRrZXkgaW4gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWyRzZWN0aW9uXS5LZXlzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIFVJOiAkc2VjdGlvbi4ka2V5ID0gJCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJHNlY3Rpb25dWyRrZXldKSIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBpZiB3cml0aW5nIHRoZSBjb25maWcgd2FzIHN1Y2Nlc3NmdWwuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoJHJlc3VsdCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICcgIFVJOiBGYWlsZWQgdG8gc2F2ZSBzZXR0aW5ncyB0byBJTkkgZmlsZScgLUZvcmVncm91bmRDb2xvciBSZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJGYWlsZWQgdG8gc2F2ZSBzZXR0aW5ncy4iLCAnRXJyb3InLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6RXJyb3IpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgSGlkZSBzZXR0aW5ncyBmb3JtIHdpdGggZmFkZS1vdXQgZWZmZWN0IHVwb24gc3VjY2Vzc2Z1bCBzYXZlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhpZGUtU2V0dGluZ3NGb3JtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgU2hvdyBlcnJvciBtZXNzYWdlIGlmIHNhdmluZyBmYWlscy4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIFVJOiBGYWlsZWQgdG8gc2F2ZSBzZXR0aW5ncyB0byBJTkkgZmlsZTogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJGYWlsZWQgdG8gc2F2ZSBzZXR0aW5nczogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiLCAnRXJyb3InLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6RXJyb3IpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogU2F2ZSBTZXR0aW5ncyBmcm9tIFVJIHRvIENvbmZpZyBGaWxlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgU2F2ZSBCdXR0b24gQ2xpY2sgRXZlbnQNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICMgQ2FuY2VsIGJ1dHRvbiBldmVudCAoaW4gU2V0dGluZ3MgRm9ybSkNCiAgICAgICAgICAgICAgICAgICAgQ2FuY2VsICAgICAgICAgICAgICAgICAgICAgPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBIYW5kbGUgQ2FuY2VsIEJ1dHRvbiBDbGljayBFdmVudA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsaWNrID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEhpZGUgU2V0dGluZ3MgRm9ybQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDYWxsIHRoZSBmdW5jdGlvbiB0byBoaWRlIHRoZSBzZXR0aW5ncyBmb3JtIHdpdGhvdXQgc2F2aW5nIGNoYW5nZXMuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIaWRlLVNldHRpbmdzRm9ybQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEhpZGUgU2V0dGluZ3MgRm9ybQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogSGFuZGxlIENhbmNlbCBCdXR0b24gQ2xpY2sgRXZlbnQNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICMgQnJvd3NlIGJ1dHRvbiBldmVudCAoaW4gU2V0dGluZ3MgRm9ybSkNCiAgICAgICAgICAgICAgICAgICAgQnJvd3NlICAgICAgICAgICAgICAgICAgICAgPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBIYW5kbGUgQnJvd3NlIEJ1dHRvbiBDbGljayBFdmVudA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsaWNrID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFNob3cgT3BlbkZpbGVEaWFsb2cgZm9yIExhdW5jaGVyIFBhdGgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgT3BlbiBhIHN0YW5kYXJkIGZpbGUgZGlhbG9nIHRvIHNlbGVjdCB0aGUgZ2FtZSBsYXVuY2hlciBleGVjdXRhYmxlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGQgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLk9wZW5GaWxlRGlhbG9nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZC5GaWx0ZXIgPSAnRXhlY3V0YWJsZSBGaWxlcyAoKi5leGUpfCouZXhlfEFsbCBGaWxlcyAoKi4qKXwqLionDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGQuU2hvd0RpYWxvZygpIC1lcSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuRGlhbG9nUmVzdWx0XTo6T0spDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBVcGRhdGUgdGhlIGxhdW5jaGVyIHBhdGggVGV4dEJveCB3aXRoIHRoZSBzZWxlY3RlZCBmaWxlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLklucHV0TGF1bmNoZXIuVGV4dCA9ICRkLkZpbGVOYW1lDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogU2hvdyBPcGVuRmlsZURpYWxvZyBmb3IgTGF1bmNoZXIgUGF0aA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogSGFuZGxlIEJyb3dzZSBCdXR0b24gQ2xpY2sgRXZlbnQNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICMgRGF0YUdyaWQgZXZlbnRzDQogICAgICAgICAgICAgICAgICAgIERhdGFHcmlkRmlsbGVyICAgICAgICAgICAgICAgICAgID0gQHsNCiAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogSGFuZGxlIERhdGFHcmlkIE1vdXNlRG93biBFdmVudA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgSGFuZGxlIHJpZ2h0LWNsaWNrIGZvciBjb250ZXh0IG1lbnUgZGlzcGxheSBvbiB0aGUgY29ycmVjdCByb3cNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNb3VzZURvd24gICA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0oJHNyYywgJGUpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogSGFuZGxlIFJpZ2h0LUNsaWNrIGZvciBDb250ZXh0IE1lbnUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZS5CdXR0b24gLWVxIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Nb3VzZUJ1dHRvbnNdOjpSaWdodCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIERldGVybWluZSB3aGljaCByb3cgd2FzIGNsaWNrZWQuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGhpdFRlc3RJbmZvID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuSGl0VGVzdCgkZS5YLCAkZS5ZKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkaGl0VGVzdEluZm8uUm93SW5kZXggLWdlIDApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFNlbGVjdCB0aGUgcm93IHVuZGVyIHRoZSBtb3VzZSBjdXJzb3IgYmVmb3JlIHNob3dpbmcgdGhlIGNvbnRleHQgbWVudS4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuUm93c1skaGl0VGVzdEluZm8uUm93SW5kZXhdLlNlbGVjdGVkID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogSGFuZGxlIFJpZ2h0LUNsaWNrIGZvciBDb250ZXh0IE1lbnUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBEYXRhR3JpZCBNb3VzZURvd24gRXZlbnQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBIYW5kbGUgRGF0YUdyaWQgRG91YmxlQ2xpY2sgRXZlbnQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEhhbmRsZSBkb3VibGUtY2xpY2sgdG8gYnJpbmcgdGhlIGNvcnJlc3BvbmRpbmcgcHJvY2VzcyB3aW5kb3cgdG8gdGhlIGZyb250DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRG91YmxlQ2xpY2sgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtKCRzcmMsICRlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEhhbmRsZSBEb3VibGUtQ2xpY2sgdG8gQnJpbmcgV2luZG93IHRvIEZyb250DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIERldGVybWluZSB3aGljaCByb3cgd2FzIGRvdWJsZS1jbGlja2VkLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGhpdFRlc3RJbmZvID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuSGl0VGVzdCgkZS5YLCAkZS5ZKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRoaXRUZXN0SW5mby5Sb3dJbmRleCAtZ2UgMCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm93ID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuUm93c1skaGl0VGVzdEluZm8uUm93SW5kZXhdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBpZiB0aGUgcm93IGhhcyBhc3NvY2lhdGVkIHByb2Nlc3MgaW5mbyBhbmQgYSB2YWxpZCB3aW5kb3cgaGFuZGxlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkcm93LlRhZyAtYW5kICRyb3cuVGFnLk1haW5XaW5kb3dIYW5kbGUgLW5lIFtJbnRQdHJdOjpaZXJvKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBVc2UgbmF0aXZlIGZ1bmN0aW9uIHRvIGJyaW5nIHRoZSB3aW5kb3cgdG8gdGhlIGZvcmVncm91bmQuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtOYXRpdmVdOjpCcmluZ1RvRnJvbnQoJHJvdy5UYWcuTWFpbldpbmRvd0hhbmRsZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogSGFuZGxlIERvdWJsZS1DbGljayB0byBCcmluZyBXaW5kb3cgdG8gRnJvbnQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBEYXRhR3JpZCBEb3VibGVDbGljayBFdmVudA0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgIyBDb250ZXh0IG1lbnUgaXRlbSBldmVudHMNCiAgICAgICAgICAgICAgICAgICAgQ29udGV4dE1lbnVGcm9udCAgICAgICAgICAgPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBIYW5kbGUgQ29udGV4dE1lbnVGcm9udCBDbGljayBFdmVudA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsaWNrID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEJyaW5nIFNlbGVjdGVkIFByb2Nlc3MgV2luZG93cyB0byBGcm9udA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBJdGVyYXRlIHRocm91Z2ggc2VsZWN0ZWQgcm93cyBpbiB0aGUgRGF0YUdyaWQuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzLkNvdW50IC1ndCAwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRyb3cgaW4gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBmb3IgdmFsaWQgcHJvY2VzcyBpbmZvIGFuZCB3aW5kb3cgaGFuZGxlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHJvdy5UYWcgLWFuZCAkcm93LlRhZy5NYWluV2luZG93SGFuZGxlIC1uZSBbSW50UHRyXTo6WmVybykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBCcmluZyB0aGUgd2luZG93IHRvIHRoZSBmb3JlZ3JvdW5kLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW05hdGl2ZV06OkJyaW5nVG9Gcm9udCgkcm93LlRhZy5NYWluV2luZG93SGFuZGxlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEJyaW5nIFNlbGVjdGVkIFByb2Nlc3MgV2luZG93cyB0byBGcm9udA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogSGFuZGxlIENvbnRleHRNZW51RnJvbnQgQ2xpY2sgRXZlbnQNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIENvbnRleHRNZW51QmFjayAgICAgICAgICAgID0gQHsNCiAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogSGFuZGxlIENvbnRleHRNZW51QmFjayBDbGljayBFdmVudA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsaWNrID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFNlbmQgU2VsZWN0ZWQgUHJvY2VzcyBXaW5kb3dzIHRvIEJhY2sgKE1pbmltaXplKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBJdGVyYXRlIHRocm91Z2ggc2VsZWN0ZWQgcm93cyBpbiB0aGUgRGF0YUdyaWQuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzLkNvdW50IC1ndCAwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRyb3cgaW4gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBmb3IgdmFsaWQgcHJvY2VzcyBpbmZvIGFuZCB3aW5kb3cgaGFuZGxlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHJvdy5UYWcgLWFuZCAkcm93LlRhZy5NYWluV2luZG93SGFuZGxlIC1uZSBbSW50UHRyXTo6WmVybykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBNaW5pbWl6ZSB0aGUgd2luZG93IChzZW5kcyBpdCBiZWhpbmQgb3RoZXJzKS4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtOYXRpdmVdOjpTZW5kVG9CYWNrKCRyb3cuVGFnLk1haW5XaW5kb3dIYW5kbGUpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogU2VuZCBTZWxlY3RlZCBQcm9jZXNzIFdpbmRvd3MgdG8gQmFjayAoTWluaW1pemUpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgQ29udGV4dE1lbnVCYWNrIENsaWNrIEV2ZW50DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICBDb250ZXh0TWVudVJlc2l6ZUFuZENlbnRlciA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEhhbmRsZSBDb250ZXh0TWVudVJlc2l6ZUFuZENlbnRlciBDbGljayBFdmVudA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsaWNrID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFJlc2l6ZSBTZWxlY3RlZCBQcm9jZXNzIFdpbmRvd3MgdG8gU3RhbmRhcmQgU2l6ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBJdGVyYXRlIHRocm91Z2ggc2VsZWN0ZWQgcm93cyBpbiB0aGUgRGF0YUdyaWQuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzLkNvdW50IC1ndCAwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgR2V0IHNjcmVlbiBkaW1lbnNpb25zIGFuZCBkZWZpbmUgc3RhbmRhcmQgd2luZG93IHNpemUuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjciA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5TY3JlZW5dOjpQcmltYXJ5U2NyZWVuLldvcmtpbmdBcmVhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpZHRoID0gMTA0MA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRoZWlnaHQgPSA4MDcNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRyb3cgaW4gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBmb3IgdmFsaWQgcHJvY2VzcyBpbmZvIGFuZCB3aW5kb3cgaGFuZGxlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHJvdy5UYWcgLWFuZCAkcm93LlRhZy5NYWluV2luZG93SGFuZGxlIC1uZSBbSW50UHRyXTo6WmVybykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBVc2UgbmF0aXZlIGZ1bmN0aW9uIHRvIHJlc2l6ZSBhbmQgY2VudGVyIHRoZSB3aW5kb3cuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbTmF0aXZlXTo6UG9zaXRpb25XaW5kb3coDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvdy5UYWcuTWFpbldpbmRvd0hhbmRsZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbTmF0aXZlXTo6VG9wV2luZG93SGFuZGxlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtpbnRdKCgkc2NyLldpZHRoIC0gJHdpZHRoKSAvIDIpLCAgIyBDZW50ZXIgWA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtpbnRdKCgkc2NyLkhlaWdodCAtICRoZWlnaHQpIC8gMiksICMgQ2VudGVyIFkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2lkdGgsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGhlaWdodCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEZsYWdzOiBEb24ndCBhY3RpdmF0ZSwgZW5zdXJlIHZpc2libGUuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW05hdGl2ZStXaW5kb3dQb3NpdGlvbk9wdGlvbnNdOjpEb05vdEFjdGl2YXRlIC1ib3INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbTmF0aXZlK1dpbmRvd1Bvc2l0aW9uT3B0aW9uc106Ok1ha2VWaXNpYmxlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogUmVzaXplIFNlbGVjdGVkIFByb2Nlc3MgV2luZG93cyB0byBTdGFuZGFyZCBTaXplDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgQ29udGV4dE1lbnVSZXNpemVBbmRDZW50ZXIgQ2xpY2sgRXZlbnQNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICMgTGF1bmNoIGJ1dHRvbiBldmVudA0KICAgICAgICAgICAgICAgICAgICBMYXVuY2ggICAgICAgICAgICAgICAgICAgICA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEhhbmRsZSBMYXVuY2ggQnV0dG9uIENsaWNrIEV2ZW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xpY2sgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogSW5pdGlhbGl6ZSBDbGllbnQgTGF1bmNoIFByb2Nlc3MNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ2FsbCB0aGUgZnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIHN0YXJ0aW5nIHRoZSBjbGllbnQgbGF1bmNoIHNlcXVlbmNlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXJ0LUNsaWVudExhdW5jaA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2gNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEhhbmRsZSBlcnJvcnMgZHVyaW5nIGxhdW5jaCBpbml0aWFsaXphdGlvbi4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5TdGF0ZS5MYXVuY2hBY3RpdmUgPSAkZmFsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIFVJOiBMYXVuY2ggaW5pdGlhbGl6YXRpb24gZmFpbGVkOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIgLUZvcmVncm91bmRDb2xvciBSZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkFuIGVycm9yIG9jY3VycmVkIGR1cmluZyBsYXVuY2g6ICQoJF8uRXhjZXB0aW9uLk1lc3NhZ2UpIiwgJ0Vycm9yJywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkVycm9yKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEluaXRpYWxpemUgQ2xpZW50IExhdW5jaCBQcm9jZXNzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgTGF1bmNoIEJ1dHRvbiBDbGljayBFdmVudA0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgIyBMb2dpbiBidXR0b24gZXZlbnQNCiAgICAgICAgICAgICAgICAgICAgTG9naW5CdXR0b24gICAgICAgICAgICAgICAgPSBAew0KICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBIYW5kbGUgTG9naW4gQnV0dG9uIENsaWNrIEV2ZW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xpY2sgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogSW5pdGlhdGUgTG9naW4gUHJvY2VzcyBmb3IgU2VsZWN0ZWQgQ2xpZW50cw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBpZiB0aGUgTG9naW5TZWxlY3RlZFJvdyBmdW5jdGlvbiAobGlrZWx5IGZyb20gbG9naW4ucHNtMSkgaXMgYXZhaWxhYmxlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChHZXQtQ29tbWFuZCAtTmFtZSBMb2dpblNlbGVjdGVkUm93IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBFbnN1cmUgYXQgbGVhc3Qgb25lIGNsaWVudCByb3cgaXMgc2VsZWN0ZWQgaW4gdGhlIERhdGFHcmlkLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzLkNvdW50IC1lcSAwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICcgIFVJOiBObyBjbGllbnRzIHNlbGVjdGVkIGZvciBsb2dpbicgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygnUGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgY2xpZW50IHRvIGxvZyBpbi4nLCAnTG9naW4nLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6SW5mb3JtYXRpb24pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRGV0ZXJtaW5lIGxvZyBmaWxlIHBhdGggYmFzZWQgb24gbGF1bmNoZXIgcGF0aC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvZ0ZvbGRlciA9ICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ0xhdW5jaGVyUGF0aCddWydMYXVuY2hlclBhdGgnXSAtcmVwbGFjZSAnXFxMYXVuY2hlclwuZXhlJCcsICcnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9nRmlsZVBhdGggPSBKb2luLVBhdGggLVBhdGggJExvZ0ZvbGRlciAtQ2hpbGRQYXRoICJMb2dcbmV0d29ya18kKEdldC1EYXRlIC1Gb3JtYXQgJ3l5eXlNTWRkJykubG9nIg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ2FsbCB0aGUgbG9naW4gZnVuY3Rpb24sIHBhc3NpbmcgdGhlIGxvZyBmaWxlIHBhdGguDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJyAgVUk6IFN0YXJ0aW5nIGxvZ2luIHByb2Nlc3MgZm9yIHNlbGVjdGVkIGNsaWVudHMuLi4nIC1Gb3JlZ3JvdW5kQ29sb3IgQ3lhbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dpblNlbGVjdGVkUm93IC1Mb2dGaWxlUGF0aCAkTG9nRmlsZVBhdGgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnICBVSTogTG9naW4gbW9kdWxlIChMb2dpblNlbGVjdGVkUm93IGNvbW1hbmQpIG5vdCBhdmFpbGFibGUnIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygnTG9naW4gZnVuY3Rpb25hbGl0eSBpcyBub3QgYXZhaWxhYmxlLicsICdFcnJvcicsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IEVycm9yIGluIGxvZ2luIHByb2Nlc3M6ICRfIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygiQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIGxvZ2luOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIsICdFcnJvcicsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBJbml0aWF0ZSBMb2dpbiBQcm9jZXNzIGZvciBTZWxlY3RlZCBDbGllbnRzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgTG9naW4gQnV0dG9uIENsaWNrIEV2ZW50DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAjIEZ0b29sIGJ1dHRvbiBldmVudA0KICAgICAgICAgICAgICAgICAgICBGdG9vbCAgICAgICAgICAgICAgICAgICAgICA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEhhbmRsZSBGdG9vbCBCdXR0b24gQ2xpY2sgRXZlbnQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbGljayA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBJbml0aWF0ZSBGdG9vbCBQcm9jZXNzIGZvciBTZWxlY3RlZCBDbGllbnRzDQoJCQkJCQkJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBWYWxpZGF0ZSBEYXRhR3JpZCBleGlzdHMuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC1ub3QgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICcgIFVJOiBEYXRhR3JpZCBub3QgZm91bmQgZm9yIEZ0b29sIGFjdGlvbicgLUZvcmVncm91bmRDb2xvciBSZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBFbnN1cmUgYXQgbGVhc3Qgb25lIHJvdyBpcyBzZWxlY3RlZC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2VsZWN0ZWRSb3dzID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBVSTogRnRvb2wgYnV0dG9uIGNsaWNrZWQsIHNlbGVjdGVkIHJvd3MgY291bnQ6ICQoJHNlbGVjdGVkUm93cy5Db3VudCkiIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2VsZWN0ZWRSb3dzLkNvdW50IC1lcSAwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCdQbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBjbGllbnQgcm93IHRvIHVzZSBGdG9vbC4nLCAnRnRvb2wnLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6SW5mb3JtYXRpb24pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ2hlY2sgaWYgRnRvb2xTZWxlY3RlZFJvdyBmdW5jdGlvbiAobGlrZWx5IGZyb20gZnRvb2wucHNtMSkgaXMgYXZhaWxhYmxlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtbm90IChHZXQtQ29tbWFuZCAtTmFtZSBGdG9vbFNlbGVjdGVkUm93IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICcgIFVJOiBGdG9vbCBtb2R1bGUgKEZ0b29sU2VsZWN0ZWRSb3cgY29tbWFuZCkgbm90IGF2YWlsYWJsZScgLUZvcmVncm91bmRDb2xvciBSZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCdGdG9vbCBmdW5jdGlvbmFsaXR5IGlzIG5vdCBhdmFpbGFibGUuJywgJ0Vycm9yJywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkVycm9yKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFByb2Nlc3MgZWFjaCBzZWxlY3RlZCByb3cgdXNpbmcgdGhlIEZ0b29sIGZ1bmN0aW9uLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRyb3cgaW4gJHNlbGVjdGVkUm93cykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZ0b29sU2VsZWN0ZWRSb3cgJHJvdw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBVSTogRXJyb3IgaW4gRnRvb2wgY2xpY2sgaGFuZGxlcjogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJBbiBlcnJvciBvY2N1cnJlZCBpbml0aWF0aW5nIEZ0b29sOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIsICdFcnJvcicsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBJbml0aWF0ZSBGdG9vbCBQcm9jZXNzIGZvciBTZWxlY3RlZCBDbGllbnRzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgRnRvb2wgQnV0dG9uIENsaWNrIEV2ZW50DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAjIEV4aXQgYnV0dG9uIGV2ZW50IChUZXJtaW5hdGUgU2VsZWN0ZWQpDQogICAgICAgICAgICAgICAgICAgIEV4aXQgICAgICAgICAgICAgICAgICAgICAgID0gQHsNCiAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogSGFuZGxlIEV4aXQgQnV0dG9uIENsaWNrIEV2ZW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xpY2sgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogVGVybWluYXRlIFNlbGVjdGVkIFByb2Nlc3Nlcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBFbnN1cmUgYXQgbGVhc3Qgb25lIHJvdyBpcyBzZWxlY3RlZC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5EYXRhR3JpZEZpbGxlci5TZWxlY3RlZFJvd3MuQ291bnQgLWd0IDApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDb25maXJtIHRlcm1pbmF0aW9uIHdpdGggdGhlIHVzZXIuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlc3VsdCA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byB0ZXJtaW5hdGUgdGhlIHNlbGVjdGVkIHByb2Nlc3Nlcz8nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29uZmlybSBUZXJtaW5hdGlvbicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Olllc05vLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpXYXJuaW5nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRyZXN1bHQgLWVxIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EaWFsb2dSZXN1bHRdOjpZZXMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEl0ZXJhdGUgdGhyb3VnaCBzZWxlY3RlZCByb3dzIGFuZCBhdHRlbXB0IHRlcm1pbmF0aW9uLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkcm93IGluICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyLlNlbGVjdGVkUm93cykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRyb3cuVGFnIC1hbmQgJHJvdy5UYWcuSWQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHByb2Nlc3NJZCA9ICRyb3cuVGFnLklkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEdldCB0aGUgcHJvY2VzcyBvYmplY3QuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwcm9jZXNzID0gR2V0LVByb2Nlc3MgLUlkICRwcm9jZXNzSWQgLUVycm9yQWN0aW9uIFN0b3ANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFRyeSB0byBjbG9zZSBncmFjZWZ1bGx5IGZpcnN0Lg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdCAkcHJvY2Vzcy5IYXNFeGl0ZWQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgUmVzdG9yZSBpZiBtaW5pbWl6ZWQgYmVmb3JlIGNsb3NpbmcgbWFpbiB3aW5kb3cuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoW05hdGl2ZV06OklzV2luZG93TWluaW1pemVkKCRwcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtOYXRpdmVdOjpTaG93V2luZG93KCRwcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUsIFtOYXRpdmVdOjpTV19SRVNUT1JFKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIFVJOiBBdHRlbXB0aW5nIGdyYWNlZnVsIHNodXRkb3duIGZvciBQSUQgJHByb2Nlc3NJZC4uLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHByb2Nlc3MuQ2xvc2VNYWluV2luZG93KCkgfCBPdXQtTnVsbA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFdhaXQgYnJpZWZseSBmb3IgZ3JhY2VmdWwgZXhpdC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtbm90ICRwcm9jZXNzLldhaXRGb3JFeGl0KDEwMDApKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBJZiBzdGlsbCBydW5uaW5nLCBmb3JjZSBraWxsLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IEdyYWNlZnVsIHNodXRkb3duIGZhaWxlZCBmb3IgUElEICRwcm9jZXNzSWQuIEZvcmNpbmcgdGVybWluYXRpb24uIiAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwcm9jZXNzLktpbGwoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIFVJOiBQcm9jZXNzIFBJRCAkcHJvY2Vzc0lkIGV4aXRlZCBncmFjZWZ1bGx5LiIgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IFN1Y2Nlc3NmdWxseSB0ZXJtaW5hdGVkIHByb2Nlc3MgSUQgJHByb2Nlc3NJZCIgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCBbU3lzdGVtLkFyZ3VtZW50RXhjZXB0aW9uXSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgUHJvY2VzcyBhbHJlYWR5IGV4aXRlZCBvciBJRCBpbnZhbGlkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IFByb2Nlc3MgSUQgJHByb2Nlc3NJZCBub3QgZm91bmQgb3IgYWxyZWFkeSBleGl0ZWQuIiAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IEZhaWxlZCB0byB0ZXJtaW5hdGUgcHJvY2VzcyBJRCAkKCRwcm9jZXNzSWQpOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFRyeSBhbHRlcm5hdGl2ZSB0ZXJtaW5hdGlvbiBhcyBmYWxsYmFjay4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IEF0dGVtcHRpbmcgU3RvcC1Qcm9jZXNzIGZhbGxiYWNrIGZvciBQSUQgJHByb2Nlc3NJZC4uLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RvcC1Qcm9jZXNzIC1JZCAkcHJvY2Vzc0lkIC1Gb3JjZSAtRXJyb3JBY3Rpb24gU3RvcA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBVSTogVGVybWluYXRlZCBwcm9jZXNzIElEICRwcm9jZXNzSWQgdXNpbmcgU3RvcC1Qcm9jZXNzIiAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2gNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBVSTogRmFpbGVkIHRvIHRlcm1pbmF0ZSBwcm9jZXNzIElEICRwcm9jZXNzSWQgdXNpbmcgU3RvcC1Qcm9jZXNzOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgUmVmcmVzaCB0aGUgZ3JpZCBhZnRlciB0ZXJtaW5hdGlvbiBhdHRlbXB0cy4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyLlJlZnJlc2hNZXRob2QpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IFJlZnJlc2hpbmcgRGF0YUdyaWQgYWZ0ZXIgdGVybWluYXRpb24gYXR0ZW1wdHMuIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyLlJlZnJlc2hNZXRob2QNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCdQbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBwcm9jZXNzIHRvIHRlcm1pbmF0ZS4nLCAnVGVybWluYXRlIFByb2Nlc3MnLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6SW5mb3JtYXRpb24pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogVGVybWluYXRlIFNlbGVjdGVkIFByb2Nlc3Nlcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogSGFuZGxlIEV4aXQgQnV0dG9uIENsaWNrIEV2ZW50DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IERlZmluZSBFdmVudCBIYW5kbGVyIE1hcHBpbmdzDQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogUmVnaXN0ZXIgRGVmaW5lZCBFdmVudCBIYW5kbGVycyBmb3IgRWFjaCBVSSBFbGVtZW50DQogICAgICAgICAgICAgICAgIyBJdGVyYXRlIHRocm91Z2ggdGhlIGV2ZW50IG1hcHBpbmdzIGFuZCByZWdpc3RlciBlYWNoIGhhbmRsZXIuDQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJGVsZW1lbnROYW1lIGluICRldmVudE1hcHBpbmdzLktleXMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAkZWxlbWVudCA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLiRlbGVtZW50TmFtZQ0KICAgICAgICAgICAgICAgICAgICBpZiAoJGVsZW1lbnQpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRldmVudCBpbiAkZXZlbnRNYXBwaW5nc1skZWxlbWVudE5hbWVdLktleXMpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDcmVhdGUgYSB1bmlxdWUgc291cmNlIGlkZW50aWZpZXIgZm9yIGVhY2ggZXZlbnQgc3Vic2NyaXB0aW9uLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzb3VyY2VJZGVudGlmaWVyID0gIkVudHJvcGlhRGFzaGJvYXJkLiRlbGVtZW50TmFtZS4kZXZlbnQiDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFVucmVnaXN0ZXIgYW55IGV4aXN0aW5nIGV2ZW50IGhhbmRsZXIgd2l0aCB0aGUgc2FtZSBpZGVudGlmaWVyIHRvIHByZXZlbnQgZHVwbGljYXRlcy4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQtRXZlbnRTdWJzY3JpYmVyIC1Tb3VyY2VJZGVudGlmaWVyICRzb3VyY2VJZGVudGlmaWVyIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgVW5yZWdpc3Rlci1FdmVudA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBSZWdpc3RlciB0aGUgbmV3IGV2ZW50IGhhbmRsZXIuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVnaXN0ZXItT2JqZWN0RXZlbnQgLUlucHV0T2JqZWN0ICRlbGVtZW50IGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUV2ZW50TmFtZSAkZXZlbnQgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtQWN0aW9uICRldmVudE1hcHBpbmdzWyRlbGVtZW50TmFtZV1bJGV2ZW50XSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1Tb3VyY2VJZGVudGlmaWVyICRzb3VyY2VJZGVudGlmaWVyIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgIyBDb250aW51ZSBpZiByZWdpc3RyYXRpb24gZmFpbHMgZm9yIHNvbWUgcmVhc29uDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBVSTogRWxlbWVudCAnJGVsZW1lbnROYW1lJyBub3QgZm91bmQgaW4gZ2xvYmFsIFVJIG9iamVjdCBkdXJpbmcgZXZlbnQgcmVnaXN0cmF0aW9uLiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogUmVnaXN0ZXIgRGVmaW5lZCBFdmVudCBIYW5kbGVycyBmb3IgRWFjaCBVSSBFbGVtZW50DQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogTWFyayBVSSBhcyBJbml0aWFsaXplZA0KICAgICAgICAgICAgICAgICMgU2V0IGEgZmxhZyBpbmRpY2F0aW5nIHRoYXQgVUkgaW5pdGlhbGl6YXRpb24gYW5kIGV2ZW50IHJlZ2lzdHJhdGlvbiBhcmUgY29tcGxldGUuDQogICAgICAgICAgICAgICAgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuU3RhdGUuVUlJbml0aWFsaXplZCA9ICR0cnVlDQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnICBVSTogRXZlbnQgaGFuZGxlcnMgcmVnaXN0ZXJlZC4nIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogTWFyayBVSSBhcyBJbml0aWFsaXplZA0KICAgICAgICB9DQogICAgI2VuZHJlZ2lvbiBGdW5jdGlvbjogUmVnaXN0ZXItVUlFdmVudEhhbmRsZXJzDQoNCiAgICAjcmVnaW9uIEZ1bmN0aW9uOiBTaG93LVNldHRpbmdzRm9ybQ0KICAgICAgICBmdW5jdGlvbiBTaG93LVNldHRpbmdzRm9ybQ0KICAgICAgICB7DQogICAgICAgICAgICA8Iw0KICAgICAgICAgICAgLlNZTk9QU0lTDQogICAgICAgICAgICAgICAgU2hvd3MgdGhlIHNldHRpbmdzIGZvcm0gd2l0aCBhIGZhZGUtaW4gYW5pbWF0aW9uIGVmZmVjdC4NCiAgICAgICAgICAgIC5OT1RFUw0KICAgICAgICAgICAgICAgIE1ha2VzIHRoZSBzZXR0aW5ncyBmb3JtIHZpc2libGUsIHBvc2l0aW9ucyBpdCByZWxhdGl2ZSB0byB0aGUgbWFpbiBmb3JtLA0KICAgICAgICAgICAgICAgIGFuZCBpbml0aWF0ZXMgYSB0aW1lci1iYXNlZCBmYWRlLWluIGJ5IGdyYWR1YWxseSBpbmNyZWFzaW5nIG9wYWNpdHkuDQogICAgICAgICAgICAgICAgUHJldmVudHMgY29uY3VycmVudCBmYWRlIGFuaW1hdGlvbnMuDQogICAgICAgICAgICAjPg0KICAgICAgICAgICAgW0NtZGxldEJpbmRpbmcoKV0NCiAgICAgICAgICAgIHBhcmFtKCkNCg0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBQcmV2ZW50IENvbmN1cnJlbnQgQW5pbWF0aW9ucw0KICAgICAgICAgICAgICAgICMgQ2hlY2sgaWYgYSBmYWRlLWluIG9yIGZhZGUtb3V0IGFuaW1hdGlvbiBpcyBhbHJlYWR5IGluIHByb2dyZXNzLg0KICAgICAgICAgICAgICAgIGlmICgoJHNjcmlwdDpmYWRlSW5UaW1lciAtYW5kICRzY3JpcHQ6ZmFkZUluVGltZXIuRW5hYmxlZCkgLW9yDQogICAgICAgICAgICAgICAgICAgICgkZ2xvYmFsOmZhZGVPdXRUaW1lciAtYW5kICRnbG9iYWw6ZmFkZU91dFRpbWVyLkVuYWJsZWQpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICMgRXhpdCBpZiBhbiBhbmltYXRpb24gaXMgYWN0aXZlDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBQcmV2ZW50IENvbmN1cnJlbnQgQW5pbWF0aW9ucw0KDQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFZhbGlkYXRlIFVJIE9iamVjdHMNCiAgICAgICAgICAgICAgICAjIEVuc3VyZSB0aGUgbmVjZXNzYXJ5IFVJIGVsZW1lbnRzIChtYWluIGZvcm0sIHNldHRpbmdzIGZvcm0pIGV4aXN0Lg0KICAgICAgICAgICAgICAgIGlmICgtbm90ICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSSAtYW5kICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybSAtYW5kICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtKSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IENhbm5vdCBzaG93IHNldHRpbmdzIGZvcm0gLSBVSSBvYmplY3RzIG1pc3NpbmcuIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFZhbGlkYXRlIFVJIE9iamVjdHMNCg0KICAgICAgICAgICAgJHNldHRpbmdzRm9ybSA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybQ0KDQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFBvc2l0aW9uIGFuZCBTaG93IFNldHRpbmdzIEZvcm0NCiAgICAgICAgICAgICAgICAjIE9ubHkgcHJvY2VlZCBpZiB0aGUgZm9ybSBpcyBub3QgYWxyZWFkeSBmdWxseSBvcGFxdWUgKG9yIG5lYXJseSBzbykuDQogICAgICAgICAgICAgICAgaWYgKCRzZXR0aW5nc0Zvcm0uT3BhY2l0eSAtbHQgMC45NSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICMgTWFrZSB0aGUgZm9ybSB2aXNpYmxlIGJlZm9yZSBzdGFydGluZyB0aGUgZmFkZS4NCiAgICAgICAgICAgICAgICAgICAgJHNldHRpbmdzRm9ybS5WaXNpYmxlID0gJHRydWUNCg0KICAgICAgICAgICAgICAgICAgICAjIENhbGN1bGF0ZSBvcHRpbWFsIHBvc2l0aW9uIGZvciBzZXR0aW5ncyBmb3JtIHJlbGF0aXZlIHRvIHRoZSBtYWluIGZvcm0sIGtlZXBpbmcgaXQgb24gc2NyZWVuLg0KICAgICAgICAgICAgICAgICAgICAkbWFpbkZvcm1Mb2NhdGlvbiA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtLkxvY2F0aW9uDQogICAgICAgICAgICAgICAgICAgICRzZXR0aW5nc0Zvcm1XaWR0aCA9ICRzZXR0aW5nc0Zvcm0uV2lkdGgNCiAgICAgICAgICAgICAgICAgICAgJHNldHRpbmdzRm9ybUhlaWdodCA9ICRzZXR0aW5nc0Zvcm0uSGVpZ2h0DQogICAgICAgICAgICAgICAgICAgICRzY3JlZW5XaWR0aCA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5TY3JlZW5dOjpQcmltYXJ5U2NyZWVuLldvcmtpbmdBcmVhLldpZHRoDQogICAgICAgICAgICAgICAgICAgICRzY3JlZW5IZWlnaHQgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuU2NyZWVuXTo6UHJpbWFyeVNjcmVlbi5Xb3JraW5nQXJlYS5IZWlnaHQNCg0KICAgICAgICAgICAgICAgICAgICAjIEF0dGVtcHQgdG8gY2VudGVyIHRoZSBzZXR0aW5ncyBmb3JtIG92ZXIgdGhlIG1haW4gZm9ybS4NCiAgICAgICAgICAgICAgICAgICAgJHggPSAkbWFpbkZvcm1Mb2NhdGlvbi5YICsgKCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5NYWluRm9ybS5XaWR0aCAtICRzZXR0aW5nc0Zvcm1XaWR0aCkgLyAyKQ0KICAgICAgICAgICAgICAgICAgICAkeSA9ICRtYWluRm9ybUxvY2F0aW9uLlkgKyAoKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtLkhlaWdodCAtICRzZXR0aW5nc0Zvcm1IZWlnaHQpIC8gMikNCg0KICAgICAgICAgICAgICAgICAgICAjIEVuc3VyZSBmb3JtIHN0YXlzIHdpdGhpbiBzY3JlZW4gYm91bmRzLCBhZGRpbmcgYSBzbWFsbCBtYXJnaW4uDQogICAgICAgICAgICAgICAgICAgICRtYXJnaW4gPSAwDQogICAgICAgICAgICAgICAgICAgICR4ID0gW01hdGhdOjpNYXgoJG1hcmdpbiwgW01hdGhdOjpNaW4oJHgsICRzY3JlZW5XaWR0aCAtICRzZXR0aW5nc0Zvcm1XaWR0aCAtICRtYXJnaW4pKQ0KICAgICAgICAgICAgICAgICAgICAkeSA9IFtNYXRoXTo6TWF4KCRtYXJnaW4sIFtNYXRoXTo6TWluKCR5LCAkc2NyZWVuSGVpZ2h0IC0gJHNldHRpbmdzRm9ybUhlaWdodCAtICRtYXJnaW4pKQ0KDQogICAgICAgICAgICAgICAgICAgICMgQXBwbHkgcG9zaXRpb24gYW5kIGJyaW5nIHRoZSBzZXR0aW5ncyBmb3JtIHRvIHRoZSBmcm9udC4NCiAgICAgICAgICAgICAgICAgICAgJHNldHRpbmdzRm9ybS5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuUG9pbnQoJHgsICR5KQ0KICAgICAgICAgICAgICAgICAgICAkc2V0dGluZ3NGb3JtLkJyaW5nVG9Gcm9udCgpDQogICAgICAgICAgICAgICAgICAgICRzZXR0aW5nc0Zvcm0uQWN0aXZhdGUoKSAjIEdpdmUgZm9jdXMgdG8gdGhlIHNldHRpbmdzIGZvcm0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFBvc2l0aW9uIGFuZCBTaG93IFNldHRpbmdzIEZvcm0NCg0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgYW5kIFN0YXJ0IEZhZGUtSW4gQW5pbWF0aW9uIFRpbWVyDQogICAgICAgICAgICAgICAgIyBEaXNwb3NlIHByZXZpb3VzIHRpbWVyIGlmIGl0IGV4aXN0cw0KICAgICAgICAgICAgICAgIGlmICgkc2NyaXB0OmZhZGVJblRpbWVyKSB7ICRzY3JpcHQ6ZmFkZUluVGltZXIuRGlzcG9zZSgpIH0NCg0KICAgICAgICAgICAgICAgICMgQ3JlYXRlIGEgdGltZXIgdG8gaGFuZGxlIHRoZSBmYWRlLWluIGVmZmVjdC4NCiAgICAgICAgICAgICAgICAkc2NyaXB0OmZhZGVJblRpbWVyID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5UaW1lcg0KICAgICAgICAgICAgICAgICRzY3JpcHQ6ZmFkZUluVGltZXIuSW50ZXJ2YWwgPSAxNSAjIEludGVydmFsIGZvciBvcGFjaXR5IHN0ZXBzIChtaWxsaXNlY29uZHMpDQogICAgICAgICAgICAgICAgJHNjcmlwdDpmYWRlSW5UaW1lci5BZGRfVGljayh7DQogICAgICAgICAgICAgICAgICAgICAgICAjIENoZWNrIGlmIGZvcm0gc3RpbGwgZXhpc3RzIGFuZCBoYXNuJ3QgYmVlbiBkaXNwb3NlZC4NCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtbm90ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybSAtb3IgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuU2V0dGluZ3NGb3JtLklzRGlzcG9zZWQpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjcmlwdDpmYWRlSW5UaW1lci5TdG9wKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NyaXB0OmZhZGVJblRpbWVyLkRpc3Bvc2UoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY3JpcHQ6ZmFkZUluVGltZXIgPSAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAjIEluY3JlYXNlIG9wYWNpdHkgZ3JhZHVhbGx5IHVudGlsIGl0IHJlYWNoZXMgMS4NCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5TZXR0aW5nc0Zvcm0uT3BhY2l0eSAtbHQgMSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5TZXR0aW5nc0Zvcm0uT3BhY2l0eSArPSAwLjENCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFN0b3AgYW5kIGRpc3Bvc2UgdGhlIHRpbWVyIG9uY2UgZnVsbHkgb3BhcXVlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybS5PcGFjaXR5ID0gMSAjIEVuc3VyZSBleGFjdGx5IDENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NyaXB0OmZhZGVJblRpbWVyLlN0b3AoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY3JpcHQ6ZmFkZUluVGltZXIuRGlzcG9zZSgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjcmlwdDpmYWRlSW5UaW1lciA9ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgIyBTdGFydCB0aGUgZmFkZS1pbiB0aW1lci4NCiAgICAgICAgICAgICAgICAkc2NyaXB0OmZhZGVJblRpbWVyLlN0YXJ0KCkNCiAgICAgICAgICAgICAgICAjIFN0b3JlIHRpbWVyIHJlZmVyZW5jZSBmb3IgcG90ZW50aWFsIGNsZWFudXAgbGF0ZXIuDQogICAgICAgICAgICAgICAgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLlRpbWVyc1snZmFkZUluVGltZXInXSA9ICRzY3JpcHQ6ZmFkZUluVGltZXINCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIGFuZCBTdGFydCBGYWRlLUluIEFuaW1hdGlvbiBUaW1lcg0KICAgICAgICB9DQogICAgI2VuZHJlZ2lvbiBGdW5jdGlvbjogU2hvdy1TZXR0aW5nc0Zvcm0NCg0KICAgICNyZWdpb24gRnVuY3Rpb246IEhpZGUtU2V0dGluZ3NGb3JtDQogICAgICAgIGZ1bmN0aW9uIEhpZGUtU2V0dGluZ3NGb3JtDQogICAgICAgIHsNCiAgICAgICAgICAgIDwjDQogICAgICAgICAgICAuU1lOT1BTSVMNCiAgICAgICAgICAgICAgICBIaWRlcyB0aGUgc2V0dGluZ3MgZm9ybSB3aXRoIGEgZmFkZS1vdXQgYW5pbWF0aW9uIGVmZmVjdC4NCiAgICAgICAgICAgIC5OT1RFUw0KICAgICAgICAgICAgICAgIEluaXRpYXRlcyBhIHRpbWVyLWJhc2VkIGZhZGUtb3V0IGJ5IGdyYWR1YWxseSBkZWNyZWFzaW5nIG9wYWNpdHkuDQogICAgICAgICAgICAgICAgSGlkZXMgdGhlIGZvcm0gY29tcGxldGVseSBvbmNlIG9wYWNpdHkgcmVhY2hlcyB6ZXJvLg0KICAgICAgICAgICAgICAgIFByZXZlbnRzIGNvbmN1cnJlbnQgZmFkZSBhbmltYXRpb25zLg0KICAgICAgICAgICAgIz4NCiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldDQogICAgICAgICAgICBwYXJhbSgpDQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogUHJldmVudCBDb25jdXJyZW50IEFuaW1hdGlvbnMNCiAgICAgICAgICAgICAgICAjIENoZWNrIGlmIGEgZmFkZS1pbiBvciBmYWRlLW91dCBhbmltYXRpb24gaXMgYWxyZWFkeSBpbiBwcm9ncmVzcy4NCiAgICAgICAgICAgICAgICBpZiAoKCRzY3JpcHQ6ZmFkZUluVGltZXIgLWFuZCAkc2NyaXB0OmZhZGVJblRpbWVyLkVuYWJsZWQpIC1vcg0KICAgICAgICAgICAgICAgICAgICAoJGdsb2JhbDpmYWRlT3V0VGltZXIgLWFuZCAkZ2xvYmFsOmZhZGVPdXRUaW1lci5FbmFibGVkKSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiAjIEV4aXQgaWYgYW4gYW5pbWF0aW9uIGlzIGFjdGl2ZQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogUHJldmVudCBDb25jdXJyZW50IEFuaW1hdGlvbnMNCg0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBWYWxpZGF0ZSBVSSBPYmplY3RzDQogICAgICAgICAgICAgICAgIyBFbnN1cmUgdGhlIHNldHRpbmdzIGZvcm0gb2JqZWN0IGV4aXN0cy4NCiAgICAgICAgICAgICAgICBpZiAoLW5vdCAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkgLWFuZCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5TZXR0aW5nc0Zvcm0pKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgVUk6IENhbm5vdCBoaWRlIHNldHRpbmdzIGZvcm0gLSBVSSBvYmplY3QgbWlzc2luZy4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogVmFsaWRhdGUgVUkgT2JqZWN0cw0KDQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENyZWF0ZSBhbmQgU3RhcnQgRmFkZS1PdXQgQW5pbWF0aW9uIFRpbWVyDQogICAgICAgICAgICAgICAgICMgRGlzcG9zZSBwcmV2aW91cyB0aW1lciBpZiBpdCBleGlzdHMNCiAgICAgICAgICAgICAgICBpZiAoJGdsb2JhbDpmYWRlT3V0VGltZXIpIHsgJGdsb2JhbDpmYWRlT3V0VGltZXIuRGlzcG9zZSgpIH0NCg0KICAgICAgICAgICAgICAgICMgQ3JlYXRlIGEgdGltZXIgdG8gaGFuZGxlIHRoZSBmYWRlLW91dCBlZmZlY3QuDQogICAgICAgICAgICAgICAgJGdsb2JhbDpmYWRlT3V0VGltZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlRpbWVyDQogICAgICAgICAgICAgICAgJGdsb2JhbDpmYWRlT3V0VGltZXIuSW50ZXJ2YWwgPSAxNSAjIEludGVydmFsIGZvciBvcGFjaXR5IHN0ZXBzIChtaWxsaXNlY29uZHMpDQogICAgICAgICAgICAgICAgJGdsb2JhbDpmYWRlT3V0VGltZXIuQWRkX1RpY2soew0KICAgICAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBpZiBmb3JtIHN0aWxsIGV4aXN0cyBhbmQgaGFzbid0IGJlZW4gZGlzcG9zZWQuDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5TZXR0aW5nc0Zvcm0gLW9yICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybS5Jc0Rpc3Bvc2VkKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRnbG9iYWw6ZmFkZU91dFRpbWVyLlN0b3AoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRnbG9iYWw6ZmFkZU91dFRpbWVyLkRpc3Bvc2UoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRnbG9iYWw6ZmFkZU91dFRpbWVyID0gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgIyBEZWNyZWFzZSBvcGFjaXR5IGdyYWR1YWxseSB1bnRpbCBpdCByZWFjaGVzIDAuDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuU2V0dGluZ3NGb3JtLk9wYWNpdHkgLWd0IDApDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuU2V0dGluZ3NGb3JtLk9wYWNpdHkgLT0gMC4xDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBTdG9wIHRoZSB0aW1lciwgZW5zdXJlIG9wYWNpdHkgaXMgMCwgYW5kIGhpZGUgdGhlIGZvcm0uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuU2V0dGluZ3NGb3JtLk9wYWNpdHkgPSAwICMgRW5zdXJlIGV4YWN0bHkgMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRnbG9iYWw6ZmFkZU91dFRpbWVyLlN0b3AoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRnbG9iYWw6ZmFkZU91dFRpbWVyLkRpc3Bvc2UoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRnbG9iYWw6ZmFkZU91dFRpbWVyID0gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5TZXR0aW5nc0Zvcm0uSGlkZSgpDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgIyBTdGFydCB0aGUgZmFkZS1vdXQgdGltZXIuDQogICAgICAgICAgICAgICAgJGdsb2JhbDpmYWRlT3V0VGltZXIuU3RhcnQoKQ0KICAgICAgICAgICAgICAgICMgU3RvcmUgdGltZXIgcmVmZXJlbmNlIGZvciBwb3RlbnRpYWwgY2xlYW51cCBsYXRlci4NCiAgICAgICAgICAgICAgICAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuVGltZXJzWydmYWRlT3V0VGltZXInXSA9ICRnbG9iYWw6ZmFkZU91dFRpbWVyDQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBhbmQgU3RhcnQgRmFkZS1PdXQgQW5pbWF0aW9uIFRpbWVyDQogICAgICAgIH0NCiAgICAjZW5kcmVnaW9uIEZ1bmN0aW9uOiBIaWRlLVNldHRpbmdzRm9ybQ0KDQogICAgI3JlZ2lvbiBGdW5jdGlvbjogU2V0LVVJRWxlbWVudA0KICAgICAgICBmdW5jdGlvbiBTZXQtVUlFbGVtZW50DQogICAgICAgIHsNCiAgICAgICAgICAgIDwjDQogICAgICAgICAgICAuU1lOT1BTSVMNCiAgICAgICAgICAgICAgICBDcmVhdGVzIGFuZCBjb25maWd1cmVzIHZhcmlvdXMgU3lzdGVtLldpbmRvd3MuRm9ybXMgVUkgZWxlbWVudHMgYmFzZWQgb24gcHJvdmlkZWQgcGFyYW1ldGVycy4NCiAgICAgICAgICAgIC5QQVJBTUVURVIgdHlwZQ0KICAgICAgICAgICAgICAgIFtzdHJpbmddIFRoZSB0eXBlIG9mIFVJIGVsZW1lbnQgdG8gY3JlYXRlLiBWYWxpZCB2YWx1ZXM6ICdGb3JtJywgJ1BhbmVsJywgJ0J1dHRvbicsICdMYWJlbCcsICdEYXRhR3JpZFZpZXcnLCAnVGV4dEJveCcsICdDb21ib0JveCcuIChNYW5kYXRvcnkpDQogICAgICAgICAgICAuUEFSQU1FVEVSIHZpc2libGUNCiAgICAgICAgICAgICAgICBbYm9vbF0gU2V0cyB0aGUgaW5pdGlhbCB2aXNpYmlsaXR5IG9mIHRoZSBlbGVtZW50Lg0KICAgICAgICAgICAgLlBBUkFNRVRFUiB3aWR0aA0KICAgICAgICAgICAgICAgIFtpbnRdIFNldHMgdGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50IGluIHBpeGVscy4NCiAgICAgICAgICAgIC5QQVJBTUVURVIgaGVpZ2h0DQogICAgICAgICAgICAgICAgW2ludF0gU2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBlbGVtZW50IGluIHBpeGVscy4NCiAgICAgICAgICAgIC5QQVJBTUVURVIgdG9wDQogICAgICAgICAgICAgICAgW2ludF0gU2V0cyB0aGUgdG9wIHBvc2l0aW9uIChZLWNvb3JkaW5hdGUpIG9mIHRoZSBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBjb250YWluZXIuDQogICAgICAgICAgICAuUEFSQU1FVEVSIGxlZnQNCiAgICAgICAgICAgICAgICBbaW50XSBTZXRzIHRoZSBsZWZ0IHBvc2l0aW9uIChYLWNvb3JkaW5hdGUpIG9mIHRoZSBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBjb250YWluZXIuDQogICAgICAgICAgICAuUEFSQU1FVEVSIGJnDQogICAgICAgICAgICAgICAgW2FycmF5XSBTZXRzIHRoZSBiYWNrZ3JvdW5kIGNvbG9yIHVzaW5nIGFuIFJHQiBvciBBUkdCIGFycmF5IChlLmcuLCBAKDMwLDMwLDMwKSBvciBAKDI1NSwwLDAsMTI4KSkuDQogICAgICAgICAgICAuUEFSQU1FVEVSIGZnDQogICAgICAgICAgICAgICAgW2FycmF5XSBTZXRzIHRoZSBmb3JlZ3JvdW5kICh0ZXh0KSBjb2xvciB1c2luZyBhbiBSR0IgYXJyYXkgKGUuZy4sIEAoMjU1LDI1NSwyNTUpKS4NCiAgICAgICAgICAgIC5QQVJBTUVURVIgaWQNCiAgICAgICAgICAgICAgICBbc3RyaW5nXSBBbiBpZGVudGlmaWVyIHN0cmluZyAobm90IGRpcmVjdGx5IHVzZWQgYnkgV2luRm9ybXMsIGJ1dCB1c2VmdWwgZm9yIHJlZmVyZW5jaW5nIGluIHRoZSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSSBvYmplY3QpLg0KICAgICAgICAgICAgLlBBUkFNRVRFUiB0ZXh0DQogICAgICAgICAgICAgICAgW3N0cmluZ10gU2V0cyB0aGUgdGV4dCBjb250ZW50IG9yIGNhcHRpb24gb2YgdGhlIGVsZW1lbnQgKGUuZy4sIGJ1dHRvbiB0ZXh0LCBsYWJlbCB0ZXh0LCBmb3JtIHRpdGxlKS4NCiAgICAgICAgICAgIC5QQVJBTUVURVIgZnMNCiAgICAgICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuRmxhdFN0eWxlXSBTZXRzIHRoZSBGbGF0U3R5bGUgZm9yIGVsZW1lbnRzIGxpa2UgQnV0dG9ucyBhbmQgQ29tYm9Cb3hlcyAoZS5nLiwgJ0ZsYXQnLCAnU3RhbmRhcmQnKS4NCiAgICAgICAgICAgIC5QQVJBTUVURVIgZm9udA0KICAgICAgICAgICAgICAgIFtTeXN0ZW0uRHJhd2luZy5Gb250XSBTZXRzIHRoZSBmb250IGZvciB0aGUgZWxlbWVudCdzIHRleHQuDQogICAgICAgICAgICAuUEFSQU1FVEVSIHN0YXJ0UG9zaXRpb24NCiAgICAgICAgICAgICAgICBbc3RyaW5nXSBGb3IgRm9ybXMsIHNldHMgdGhlIGluaXRpYWwgc3RhcnRpbmcgcG9zaXRpb24gKGUuZy4sICdNYW51YWwnLCAnQ2VudGVyU2NyZWVuJykuDQogICAgICAgICAgICAuUEFSQU1FVEVSIGZvcm1Cb3JkZXJTdHlsZQ0KICAgICAgICAgICAgICAgIFtpbnRdIEZvciBGb3Jtcywgc2V0cyB0aGUgYm9yZGVyIHN0eWxlIHVzaW5nIHRoZSBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtQm9yZGVyU3R5bGUgZW51bWVyYXRpb24gdmFsdWUuIERlZmF1bHRzIHRvICdOb25lJy4NCiAgICAgICAgICAgIC5QQVJBTUVURVIgb3BhY2l0eQ0KICAgICAgICAgICAgICAgIFtkb3VibGVdIEZvciBGb3Jtcywgc2V0cyB0aGUgb3BhY2l0eSBsZXZlbCAoMC4wIHRvIDEuMCkuIERlZmF1bHRzIHRvIDEuMC4NCiAgICAgICAgICAgIC5QQVJBTUVURVIgdG9wTW9zdA0KICAgICAgICAgICAgICAgIFtib29sXSBGb3IgRm9ybXMsIHNldHMgd2hldGhlciB0aGUgZm9ybSBzaG91bGQgc3RheSBvbiB0b3Agb2Ygb3RoZXIgd2luZG93cy4NCiAgICAgICAgICAgIC5QQVJBTUVURVIgbXVsdGlsaW5lDQogICAgICAgICAgICAgICAgW3N3aXRjaF0gRm9yIFRleHRCb3hlcywgZW5hYmxlcyBtdWx0aS1saW5lIGlucHV0Lg0KICAgICAgICAgICAgLlBBUkFNRVRFUiByZWFkT25seQ0KICAgICAgICAgICAgICAgIFtzd2l0Y2hdIEZvciBUZXh0Qm94ZXMgb3IgRGF0YUdyaWRWaWV3cywgbWFrZXMgdGhlIGNvbnRlbnQgcmVhZC1vbmx5Lg0KICAgICAgICAgICAgLlBBUkFNRVRFUiBzY3JvbGxCYXJzDQogICAgICAgICAgICAgICAgW3N3aXRjaF0gRm9yIFRleHRCb3hlcywgZW5hYmxlcyB2ZXJ0aWNhbCBzY3JvbGxiYXJzIChpZiAkbXVsdGlsaW5lIGlzIGFsc28gdHJ1ZSkuDQogICAgICAgICAgICAuUEFSQU1FVEVSIGRyb3BEb3duU3R5bGUNCiAgICAgICAgICAgICAgICBbc3RyaW5nXSBGb3IgQ29tYm9Cb3hlcywgc2V0cyB0aGUgc3R5bGUgKGUuZy4sICdTaW1wbGUnLCAnRHJvcERvd24nLCAnRHJvcERvd25MaXN0JykuIERlZmF1bHRzIHRvICdEcm9wRG93bkxpc3QnLg0KICAgICAgICAgICAgLk9VVFBVVFMNCiAgICAgICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQ29udHJvbF0gUmV0dXJucyB0aGUgY3JlYXRlZCBhbmQgY29uZmlndXJlZCBVSSBlbGVtZW50IG9iamVjdC4NCiAgICAgICAgICAgIC5OT1RFUw0KICAgICAgICAgICAgICAgIFByb3ZpZGVzIGEgc3RhbmRhcmRpemVkIHdheSB0byBjcmVhdGUgY29tbW9uIFVJIGVsZW1lbnRzIHdpdGggY29uc2lzdGVudCBzdHlsaW5nIGZvciB0aGUgZGFyayB0aGVtZS4NCiAgICAgICAgICAgICAgICBJbmNsdWRlcyBzcGVjaWZpYyBjb25maWd1cmF0aW9ucyBmb3IgRGF0YUdyaWRWaWV3cyBhbmQgY3VzdG9tIGRyYXdpbmcgbG9naWMgZm9yIEJ1dHRvbnMsIFRleHRCb3hlcywgYW5kIENvbWJvQm94ZXMNCiAgICAgICAgICAgICAgICB0byBlbnN1cmUgdmlzdWFsIGNvbnNpc3RlbmN5LiBVc2VzIGEgRGFya0NvbWJvQm94IGN1c3RvbSBjbGFzcyBmb3IgYmV0dGVyIENvbWJvQm94IHN0eWxpbmcuDQogICAgICAgICAgICAjPg0KICAgICAgICAgICAgW0NtZGxldEJpbmRpbmcoKV0NCiAgICAgICAgICAgIHBhcmFtKA0KICAgICAgICAgICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0NCiAgICAgICAgICAgICAgICBbVmFsaWRhdGVTZXQoJ0Zvcm0nLCAnUGFuZWwnLCAnQnV0dG9uJywgJ0xhYmVsJywgJ0RhdGFHcmlkVmlldycsICdUZXh0Qm94JywgJ0NvbWJvQm94JyldDQogICAgICAgICAgICAgICAgW3N0cmluZ10kdHlwZSwNCiAgICAgICAgICAgICAgICBbYm9vbF0kdmlzaWJsZSwNCiAgICAgICAgICAgICAgICBbaW50XSR3aWR0aCwNCiAgICAgICAgICAgICAgICBbaW50XSRoZWlnaHQsDQogICAgICAgICAgICAgICAgW2ludF0kdG9wLA0KICAgICAgICAgICAgICAgIFtpbnRdJGxlZnQsDQogICAgICAgICAgICAgICAgW2FycmF5XSRiZywNCiAgICAgICAgICAgICAgICBbYXJyYXldJGZnLA0KICAgICAgICAgICAgICAgIFtzdHJpbmddJGlkLCAjIFVzZWQgZm9yIHJlZmVyZW5jaW5nLCBub3QgYSBkaXJlY3QgV2luRm9ybXMgcHJvcGVydHkNCiAgICAgICAgICAgICAgICBbc3RyaW5nXSR0ZXh0LA0KICAgICAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5GbGF0U3R5bGVdJGZzLA0KICAgICAgICAgICAgICAgIFtTeXN0ZW0uRHJhd2luZy5Gb250XSRmb250LA0KICAgICAgICAgICAgICAgIFtzdHJpbmddJHN0YXJ0UG9zaXRpb24sDQogICAgICAgICAgICAgICAgW2ludF0kZm9ybUJvcmRlclN0eWxlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm1Cb3JkZXJTdHlsZV06Ok5vbmUsDQogICAgICAgICAgICAgICAgW2RvdWJsZV0kb3BhY2l0eSA9IDEuMCwNCiAgICAgICAgICAgICAgICBbYm9vbF0kdG9wTW9zdCwNCiAgICAgICAgICAgICAgICBbc3dpdGNoXSRtdWx0aWxpbmUsDQogICAgICAgICAgICAgICAgW3N3aXRjaF0kcmVhZE9ubHksDQogICAgICAgICAgICAgICAgW3N3aXRjaF0kc2Nyb2xsQmFycywNCiAgICAgICAgICAgICAgICBbVmFsaWRhdGVTZXQoJ1NpbXBsZScsICdEcm9wRG93bicsICdEcm9wRG93bkxpc3QnKV0NCiAgICAgICAgICAgICAgICBbc3RyaW5nXSRkcm9wRG93blN0eWxlID0gJ0Ryb3BEb3duTGlzdCcNCiAgICAgICAgICAgICkNCg0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDcmVhdGUgVUkgRWxlbWVudCBCYXNlZCBvbiBUeXBlDQogICAgICAgICAgICAgICAgIyBDcmVhdGUgdGhlIGFwcHJvcHJpYXRlIC5ORVQgV2luZG93cyBGb3JtcyBjb250cm9sIG9iamVjdCBiYXNlZCBvbiB0aGUgJHR5cGUgcGFyYW1ldGVyLg0KICAgICAgICAgICAgICAgICRlbCA9IHN3aXRjaCAoJHR5cGUpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAnRm9ybScgICAgICAgICB7IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybSB9DQogICAgICAgICAgICAgICAgICAgICdQYW5lbCcgICAgICAgIHsgTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5QYW5lbCB9DQogICAgICAgICAgICAgICAgICAgICdCdXR0b24nICAgICAgIHsgTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5CdXR0b24gfQ0KICAgICAgICAgICAgICAgICAgICAnTGFiZWwnICAgICAgICB7IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGFiZWwgfQ0KICAgICAgICAgICAgICAgICAgICAnRGF0YUdyaWRWaWV3JyB7IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRGF0YUdyaWRWaWV3IH0NCiAgICAgICAgICAgICAgICAgICAgJ1RleHRCb3gnICAgICAgeyBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlRleHRCb3ggfQ0KICAgICAgICAgICAgICAgICAgICAnQ29tYm9Cb3gnICAgICB7IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQ29tYm9Cb3ggfQ0KICAgICAgICAgICAgICAgICAgICBkZWZhdWx0ICAgICAgICB7IHRocm93ICJJbnZhbGlkIGVsZW1lbnQgdHlwZSBzcGVjaWZpZWQ6ICR0eXBlIiB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgVUkgRWxlbWVudCBCYXNlZCBvbiBUeXBlDQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ29uZmlndXJlIERhdGFHcmlkVmlldyBTcGVjaWZpYyBQcm9wZXJ0aWVzDQogICAgICAgICAgICAgICAgIyBBcHBseSBzZXR0aW5ncyBzcGVjaWZpYyB0byBEYXRhR3JpZFZpZXcgY29udHJvbHMgZm9yIGFwcGVhcmFuY2UgYW5kIGJlaGF2aW9yLg0KICAgICAgICAgICAgICAgIGlmICgkdHlwZSAtZXEgJ0RhdGFHcmlkVmlldycpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAkZWwuQWxsb3dVc2VyVG9BZGRSb3dzID0gJGZhbHNlICAgICAgICAgICMgRG9uJ3QgYWxsb3cgdXNlcnMgdG8gYWRkIG5ldyByb3dzIGRpcmVjdGx5DQogICAgICAgICAgICAgICAgICAgICRlbC5SZWFkT25seSA9ICR0cnVlICAgICAgICAgICAgICAgICAgICAgIyBNYWtlIHRoZSBncmlkIHJlYWQtb25seQ0KICAgICAgICAgICAgICAgICAgICAkZWwuUm93SGVhZGVyc1Zpc2libGUgPSAkZmFsc2UgICAgICAgICAgICMgSGlkZSB0aGUgcm93IGhlYWRlciBjb2x1bW4NCiAgICAgICAgICAgICAgICAgICAgJGVsLk11bHRpU2VsZWN0ID0gJHRydWUgICAgICAgICAgICAgICAgICAjIEFsbG93IHNlbGVjdGluZyBtdWx0aXBsZSByb3dzDQogICAgICAgICAgICAgICAgICAgICRlbC5TZWxlY3Rpb25Nb2RlID0gJ0Z1bGxSb3dTZWxlY3QnICAgICAgIyBTZWxlY3QgZW50aXJlIHJvd3MgaW5zdGVhZCBvZiBpbmRpdmlkdWFsIGNlbGxzDQogICAgICAgICAgICAgICAgICAgICRlbC5BdXRvU2l6ZUNvbHVtbnNNb2RlID0gJ0ZpbGwnICAgICAgICAgIyBNYWtlIGNvbHVtbnMgZmlsbCB0aGUgYXZhaWxhYmxlIHdpZHRoDQogICAgICAgICAgICAgICAgICAgICRlbC5Cb3JkZXJTdHlsZSA9ICdOb25lJyAgICAgICAgICAgICAgICAgIyBSZW1vdmUgdGhlIG91dGVyIGJvcmRlcg0KICAgICAgICAgICAgICAgICAgICAkZWwuRW5hYmxlSGVhZGVyc1Zpc3VhbFN0eWxlcyA9ICRmYWxzZSAgICMgQWxsb3cgY3VzdG9tIGhlYWRlciBzdHlsaW5nDQogICAgICAgICAgICAgICAgICAgICRlbC5DZWxsQm9yZGVyU3R5bGUgPSAnU2luZ2xlSG9yaXpvbnRhbCcgIyBIb3Jpem9udGFsIGxpbmVzIGJldHdlZW4gcm93cw0KICAgICAgICAgICAgICAgICAgICAkZWwuQ29sdW1uSGVhZGVyc0JvcmRlclN0eWxlID0gJ05vbmUnICAgICMgTm8gYm9yZGVyIGFyb3VuZCBjb2x1bW4gaGVhZGVycw0KDQogICAgICAgICAgICAgICAgICAgICMgU2V0IGNvbG9ycyBmb3IgYmV0dGVyIHZpc2liaWxpdHkgaW4gZGFyayB0aGVtZQ0KICAgICAgICAgICAgICAgICAgICAkZWwuRGVmYXVsdENlbGxTdHlsZS5CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig0MCwgNDAsIDQwKSAgICAjIERhcmsgY2VsbCBiYWNrZ3JvdW5kDQogICAgICAgICAgICAgICAgICAgICRlbC5EZWZhdWx0Q2VsbFN0eWxlLkZvcmVDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDIzMCwgMjMwLCAyMzApICMgTGlnaHQgdGV4dA0KICAgICAgICAgICAgICAgICAgICAkZWwuQ29sdW1uSGVhZGVyc0RlZmF1bHRDZWxsU3R5bGUuQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNTAsIDUwLCA1MCkgIyBTbGlnaHRseSBkYXJrZXIgaGVhZGVyIGJhY2tncm91bmQNCiAgICAgICAgICAgICAgICAgICAgJGVsLkNvbHVtbkhlYWRlcnNEZWZhdWx0Q2VsbFN0eWxlLkZvcmVDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDI1NSwgMjU1LCAyNTUpICMgV2hpdGUgaGVhZGVyIHRleHQNCiAgICAgICAgICAgICAgICAgICAgJGVsLkdyaWRDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDcwLCA3MCwgNzApICAgICAgICAgICAgICAgICAgICAgIyBDb2xvciBmb3IgZ3JpZCBsaW5lcw0KICAgICAgICAgICAgICAgICAgICAkZWwuQmFja2dyb3VuZENvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNDAsIDQwLCA0MCkgICAgICAgICAgICAgICAjIEJhY2tncm91bmQgaWYgZ3JpZCBpcyBlbXB0eQ0KICAgICAgICAgICAgICAgICAgICAkZWwuRGVmYXVsdENlbGxTdHlsZS5TZWxlY3Rpb25CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig2MCwgODAsIDE4MCkgIyBTZWxlY3Rpb24gYmFja2dyb3VuZCBjb2xvciAoYmx1ZWlzaCkNCiAgICAgICAgICAgICAgICAgICAgJGVsLkRlZmF1bHRDZWxsU3R5bGUuU2VsZWN0aW9uRm9yZUNvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoMjU1LCAyNTUsIDI1NSkgIyBXaGl0ZSBzZWxlY3RlZCB0ZXh0DQoNCiAgICAgICAgICAgICAgICAgICAgIyBBZGQgZGVmYXVsdCBjb2x1bW5zIGV4cGVjdGVkIGJ5IHRoZSBhcHBsaWNhdGlvbg0KICAgICAgICAgICAgICAgICAgICAkZWwuQ29sdW1ucy5BZGRSYW5nZSgNCiAgICAgICAgICAgICAgICAgICAgICAgIChOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkRhdGFHcmlkVmlld1RleHRCb3hDb2x1bW4gLVByb3BlcnR5IEB7IE5hbWUgPSAnSW5kZXgnOyBIZWFkZXJUZXh0ID0gJyMnOyBGaWxsV2VpZ2h0ID0gNSB9KSwNCiAgICAgICAgICAgICAgICAgICAgICAgIChOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkRhdGFHcmlkVmlld1RleHRCb3hDb2x1bW4gLVByb3BlcnR5IEB7IE5hbWUgPSAnVGl0ZWwnOyBIZWFkZXJUZXh0ID0gJ1RpdGVsJzsgRmlsbFdlaWdodCA9IDMwIH0pLA0KICAgICAgICAgICAgICAgICAgICAgICAgKE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRGF0YUdyaWRWaWV3VGV4dEJveENvbHVtbiAtUHJvcGVydHkgQHsgTmFtZSA9ICdJRCc7IEhlYWRlclRleHQgPSAnSUQnOyBGaWxsV2VpZ2h0ID0gOCB9KSwNCiAgICAgICAgICAgICAgICAgICAgICAgIChOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkRhdGFHcmlkVmlld1RleHRCb3hDb2x1bW4gLVByb3BlcnR5IEB7IE5hbWUgPSAnU3RhdGUnOyBIZWFkZXJUZXh0ID0gJ1N0YXRlJzsgRmlsbFdlaWdodCA9IDEyIH0pDQogICAgICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENvbmZpZ3VyZSBEYXRhR3JpZFZpZXcgU3BlY2lmaWMgUHJvcGVydGllcw0KDQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEFwcGx5IENvbW1vbiBDb250cm9sIFByb3BlcnRpZXMNCiAgICAgICAgICAgICAgICAjIEFwcGx5IHByb3BlcnRpZXMgY29tbW9uIHRvIG1vc3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQ29udHJvbCB0eXBlcy4NCiAgICAgICAgICAgICAgICBpZiAoJGVsIC1pcyBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQ29udHJvbF0pDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCd2aXNpYmxlJykpIHsgJGVsLlZpc2libGUgPSAkdmlzaWJsZSB9DQogICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ3dpZHRoJykpICAgeyAkZWwuV2lkdGggPSAkd2lkdGggfQ0KICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdoZWlnaHQnKSkgIHsgJGVsLkhlaWdodCA9ICRoZWlnaHQgfQ0KICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCd0b3AnKSkgICAgIHsgJGVsLlRvcCA9ICR0b3AgfQ0KICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdsZWZ0JykpICAgIHsgJGVsLkxlZnQgPSAkbGVmdCB9DQoNCiAgICAgICAgICAgICAgICAgICAgIyBTZXQgYmFja2dyb3VuZCBjb2xvciBmcm9tIFJHQiBvciBBUkdCIGFycmF5DQogICAgICAgICAgICAgICAgICAgIGlmICgkYmcgLWlzIFthcnJheV0gLWFuZCAkYmcuQ291bnQgLWdlIDMpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRlbC5CYWNrQ29sb3IgPSBpZiAoJGJnLkNvdW50IC1lcSA0KSB7IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKCRiZ1swXSwgJGJnWzFdLCAkYmdbMl0sICRiZ1szXSkgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgICAgICAgICAgICAgICAgIHsgW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoJGJnWzBdLCAkYmdbMV0sICRiZ1syXSkgfQ0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgIyBTZXQgZm9yZWdyb3VuZCBjb2xvciBmcm9tIFJHQiBhcnJheQ0KICAgICAgICAgICAgICAgICAgICBpZiAoJGZnIC1pcyBbYXJyYXldIC1hbmQgJGZnLkNvdW50IC1nZSAzKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAkZWwuRm9yZUNvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoJGZnWzBdLCAkZmdbMV0sICRmZ1syXSkNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICMgU2V0IGZvbnQgaWYgcHJvdmlkZWQNCiAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnZm9udCcpKSB7ICRlbC5Gb250ID0gJGZvbnQgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQXBwbHkgQ29tbW9uIENvbnRyb2wgUHJvcGVydGllcw0KDQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEFwcGx5IFR5cGUtU3BlY2lmaWMgUHJvcGVydGllcw0KICAgICAgICAgICAgICAgICMgQXBwbHkgcHJvcGVydGllcyBzcGVjaWZpYyB0byB0aGUgY3JlYXRlZCBlbGVtZW50IHR5cGUuDQogICAgICAgICAgICAgICAgc3dpdGNoICgkdHlwZSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICdGb3JtJyB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCd0ZXh0JykpIHsgJGVsLlRleHQgPSAkdGV4dCB9DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdzdGFydFBvc2l0aW9uJykpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgeyAkZWwuU3RhcnRQb3NpdGlvbiA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtU3RhcnRQb3NpdGlvbl06OiRzdGFydFBvc2l0aW9uIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7IFdyaXRlLVZlcmJvc2UgIiAgVUk6IEludmFsaWQgU3RhcnRQb3NpdGlvbiB2YWx1ZTogJHN0YXJ0UG9zaXRpb24uIFVzaW5nIGRlZmF1bHQuIiAtRm9yZWdyb3VuZENvbG9yIFllbGxvdyB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdmb3JtQm9yZGVyU3R5bGUnKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgeyAkZWwuRm9ybUJvcmRlclN0eWxlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm1Cb3JkZXJTdHlsZV0kZm9ybUJvcmRlclN0eWxlIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggeyBXcml0ZS1WZXJib3NlICIgIFVJOiBJbnZhbGlkIEZvcm1Cb3JkZXJTdHlsZSB2YWx1ZTogJGZvcm1Cb3JkZXJTdHlsZS4gVXNpbmcgZGVmYXVsdC4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93IH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ29wYWNpdHknKSkgeyAkZWwuT3BhY2l0eSA9IFtkb3VibGVdJG9wYWNpdHkgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgndG9wTW9zdCcpKSB7ICRlbC5Ub3BNb3N0ID0gJHRvcE1vc3QgfQ0KCQkJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnaWNvbicpKSB7ICRlbC5JY29uID0gW1N5c3RlbS5EcmF3aW5nLkljb25dOjpFeHRyYWN0QXNzb2NpYXRlZEljb24oJFBTQ29tbWFuZFBhdGgpIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAnQnV0dG9uJyB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCd0ZXh0JykpIHsgJGVsLlRleHQgPSAkdGV4dCB9DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdmcycpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVsLkZsYXRTdHlsZSA9ICRmcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQXBwbHkgY3VzdG9tIGFwcGVhcmFuY2UgZm9yIGZsYXQgYnV0dG9ucyB0byBtYXRjaCBkYXJrIHRoZW1lDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVsLkZsYXRBcHBlYXJhbmNlLkJvcmRlckNvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNjAsIDYwLCA2MCkgIyBTdWJ0bGUgYm9yZGVyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVsLkZsYXRBcHBlYXJhbmNlLkJvcmRlclNpemUgPSAxDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVsLkZsYXRBcHBlYXJhbmNlLk1vdXNlT3ZlckJhY2tDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDcwLCA3MCwgNzApICMgU2xpZ2h0bHkgbGlnaHRlciBvbiBob3Zlcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlbC5GbGF0QXBwZWFyYW5jZS5Nb3VzZURvd25CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig5MCwgOTAsIDkwKSAjIEV2ZW4gbGlnaHRlciB3aGVuIGNsaWNrZWQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ3VzdG9tIFBhaW50IGhhbmRsZXIgZm9yIG1vcmUgY29tcGxleCBkcmF3aW5nLg0KCQkJCQkJCSRlbC5BZGRfUGFpbnQoew0KCQkJCQkJCQlwYXJhbSgkc3JjLCAkZSkNCgkJCQkJCQkNCgkJCQkJCQkJIyBPbmx5IGN1c3RvbSBwYWludCBpZiB3ZSdyZSB1c2luZyBmbGF0IHN0eWxlDQoJCQkJCQkJCWlmICgkc3JjLkZsYXRTdHlsZSAtZXEgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZsYXRTdHlsZV06OkZsYXQpDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgRHJhdyB0aGUgYnV0dG9uIGJhY2tncm91bmQNCgkJCQkJCQkJCSRiZ0JydXNoID0gW1N5c3RlbS5EcmF3aW5nLlNvbGlkQnJ1c2hdOjpuZXcoW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNDAsIDQwLCA0MCkpDQoJCQkJCQkJCQkkZS5HcmFwaGljcy5GaWxsUmVjdGFuZ2xlKCRiZ0JydXNoLCAwLCAwLCAkc3JjLldpZHRoLCAkc3JjLkhlaWdodCkNCgkJCQkJCQkJDQoJCQkJCQkJCQkjIERyYXcgdGV4dA0KCQkJCQkJCQkJJHRleHRCcnVzaCA9IFtTeXN0ZW0uRHJhd2luZy5Tb2xpZEJydXNoXTo6bmV3KFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OldoaXRlKQ0KCQkJCQkJCQkJJHRleHRGb3JtYXQgPSBbU3lzdGVtLkRyYXdpbmcuU3RyaW5nRm9ybWF0XTo6bmV3KCkNCgkJCQkJCQkJCSR0ZXh0Rm9ybWF0LkFsaWdubWVudCA9IFtTeXN0ZW0uRHJhd2luZy5TdHJpbmdBbGlnbm1lbnRdOjpDZW50ZXINCgkJCQkJCQkJCSR0ZXh0Rm9ybWF0LkxpbmVBbGlnbm1lbnQgPSBbU3lzdGVtLkRyYXdpbmcuU3RyaW5nQWxpZ25tZW50XTo6Q2VudGVyDQoJCQkJCQkJCQkkZS5HcmFwaGljcy5EcmF3U3RyaW5nKCRzcmMuVGV4dCwgJHNyYy5Gb250LCAkdGV4dEJydXNoLCANCgkJCQkJCQkJCQlbU3lzdGVtLkRyYXdpbmcuUmVjdGFuZ2xlRl06Om5ldygwLCAwLCAkc3JjLldpZHRoLCAkc3JjLkhlaWdodCksICR0ZXh0Rm9ybWF0KQ0KCQkJCQkJCQkNCgkJCQkJCQkJCSMgRHJhdyBib3JkZXINCgkJCQkJCQkJCSRib3JkZXJQZW4gPSBbU3lzdGVtLkRyYXdpbmcuUGVuXTo6bmV3KFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDYwLCA2MCwgNjApKQ0KCQkJCQkJCQkJJGUuR3JhcGhpY3MuRHJhd1JlY3RhbmdsZSgkYm9yZGVyUGVuLCAwLCAwLCAkc3JjLldpZHRoIC0gMSwgJHNyYy5IZWlnaHQgLSAxKQ0KCQkJCQkJCQkNCgkJCQkJCQkJCSMgRGlzcG9zZSByZXNvdXJjZXMNCgkJCQkJCQkJCSRiZ0JydXNoLkRpc3Bvc2UoKQ0KCQkJCQkJCQkJJHRleHRCcnVzaC5EaXNwb3NlKCkNCgkJCQkJCQkJCSRib3JkZXJQZW4uRGlzcG9zZSgpDQoJCQkJCQkJCQkkdGV4dEZvcm1hdC5EaXNwb3NlKCkNCgkJCQkJCQkJfQ0KCQkJCQkJCX0pDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgJ0xhYmVsJyB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCd0ZXh0JykpIHsgJGVsLlRleHQgPSAkdGV4dCB9DQogICAgICAgICAgICAgICAgICAgICAgICAjIEVuc3VyZSBsYWJlbHMgd2l0aCB0cmFuc3BhcmVudCBiYWNrZ3JvdW5kcyBhcmUgaGFuZGxlZCBjb3JyZWN0bHkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZWwuQmFja0NvbG9yIC1lcSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpUcmFuc3BhcmVudCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBNYXkgbmVlZCBhZGRpdGlvbmFsIGhhbmRsaW5nIGRlcGVuZGluZyBvbiBjb250YWluZXIgaWYgdHJhbnNwYXJlbmN5IGlzc3VlcyBhcmlzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICdUZXh0Qm94JyB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCd0ZXh0JykpIHsgJGVsLlRleHQgPSAkdGV4dCB9DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdtdWx0aWxpbmUnKSkgeyAkZWwuTXVsdGlsaW5lID0gJG11bHRpbGluZSB9DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdyZWFkT25seScpKSB7ICRlbC5SZWFkT25seSA9ICRyZWFkT25seSB9DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdzY3JvbGxCYXJzJykpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZWwuU2Nyb2xsQmFycyA9IGlmICgkc2Nyb2xsQmFycyAtYW5kICRtdWx0aWxpbmUpIHsgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLlNjcm9sbEJhcnNdOjpWZXJ0aWNhbCB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLlNjcm9sbEJhcnNdOjpOb25lIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgIyBBcHBseSBkYXJrIHRoZW1lIHN0eWxpbmcgdG8gVGV4dEJveA0KICAgICAgICAgICAgICAgICAgICAgICAgJGVsLkJvcmRlclN0eWxlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkJvcmRlclN0eWxlXTo6Rml4ZWRTaW5nbGUNCiAgICAgICAgICAgICAgICAgICAgICAgICRlbC5CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig1MCwgNTAsIDUwKSAjIFNsaWdodGx5IGxpZ2h0ZXIgdGhhbiBiYWNrZ3JvdW5kDQogICAgICAgICAgICAgICAgICAgICAgICAkZWwuRm9yZUNvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoMjMwLCAyMzAsIDIzMCkNCg0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICdDb21ib0JveCcNCgkJCQkJew0KCQkJCQkJaWYgKCRudWxsIC1uZSAkZHJvcERvd25TdHlsZSkNCgkJCQkJCXsNCgkJCQkJCQl0cnkNCgkJCQkJCQl7DQoJCQkJCQkJCSRlbC5Ecm9wRG93blN0eWxlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkNvbWJvQm94U3R5bGVdOjokZHJvcERvd25TdHlsZSANCgkJCQkJCQl9DQoJCQkJCQkJY2F0Y2gNCgkJCQkJCQl7DQoJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIlVJOiBJbnZhbGlkIERyb3BEb3duU3R5bGUgdmFsdWU6ICRkcm9wRG93blN0eWxlLiBVc2luZyBkZWZhdWx0LiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJCQkJCQl9DQoJCQkJCQl9DQoJCQkJCQlpZiAoJG51bGwgLW5lICRmcykNCgkJCQkJCXsNCgkJCQkJCQkkZWwuRmxhdFN0eWxlID0gJGZzDQoJCQkJCQkJJGVsLkRyYXdNb2RlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkRyYXdNb2RlXTo6T3duZXJEcmF3Rml4ZWQNCgkJCQkJCQkNCgkJCQkJCQkjIFNldCBwcm9wZXJ0aWVzIHRvIHNob3cgYWxsIGl0ZW1zIHdpdGhvdXQgc2Nyb2xsYmFyDQoJCQkJCQkJJGVsLkludGVncmFsSGVpZ2h0ID0gJGZhbHNlDQoJCQkJCQkJDQoJCQkJCQkJIyBTdG9yZSB0aGUgb3JpZ2luYWwgZXZlbnQgaGFuZGxlcnMgYmVmb3JlIGNyZWF0aW5nIHRoZSBjdXN0b20gY29udHJvbA0KCQkJCQkJCSRvcmlnaW5hbERyYXdJdGVtU2NyaXB0ID0gew0KCQkJCQkJCQlwYXJhbSgkc3JjLCAkZSkNCgkJCQkJCQkJDQoJCQkJCQkJCSRlLkRyYXdCYWNrZ3JvdW5kKCkNCgkJCQkJCQkJDQoJCQkJCQkJCWlmICgkZS5JbmRleCAtZ2UgMCkNCgkJCQkJCQkJew0KCQkJCQkJCQkJJGJydXNoQmFja2dyb3VuZCA9IGlmICgkZS5TdGF0ZSAtYmFuZCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuRHJhd0l0ZW1TdGF0ZV06OlNlbGVjdGVkKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCVtTeXN0ZW0uRHJhd2luZy5CcnVzaGVzXTo6RGFya1NsYXRlR3JheQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkJZWxzZQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCVtTeXN0ZW0uRHJhd2luZy5Tb2xpZEJydXNoXTo6bmV3KFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDQwLCA0MCwgNDApKQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkJDQoJCQkJCQkJCQkkZS5HcmFwaGljcy5GaWxsUmVjdGFuZ2xlKCRicnVzaEJhY2tncm91bmQsICRlLkJvdW5kcykNCgkJCQkJCQkJCSRlLkdyYXBoaWNzLkRyYXdTdHJpbmcoJHNyYy5JdGVtc1skZS5JbmRleF0uVG9TdHJpbmcoKSwgJHNyYy5Gb250LCBbU3lzdGVtLkRyYXdpbmcuQnJ1c2hlc106OldoaXRlLCAkZS5Cb3VuZHMuTGVmdCwgJGUuQm91bmRzLlRvcCkNCgkJCQkJCQkJfQ0KCQkJCQkJCQkNCgkJCQkJCQkJJGUuRHJhd0ZvY3VzUmVjdGFuZ2xlKCkNCgkJCQkJCQl9DQoJCQkJCQkJDQoJCQkJCQkJJG9yaWdpbmFsRHJvcERvd25TY3JpcHQgPSB7DQoJCQkJCQkJCXBhcmFtKCRzcmMsICRlKQ0KCQkJCQkJCQkNCgkJCQkJCQkJIyBDYWxjdWxhdGUgaGVpZ2h0IG5lZWRlZCBmb3IgYWxsIGl0ZW1zDQoJCQkJCQkJCSRpdGVtSGVpZ2h0ID0gJHNyYy5JdGVtSGVpZ2h0DQoJCQkJCQkJCSR0b3RhbEl0ZW1zID0gJHNyYy5JdGVtcy5Db3VudA0KCQkJCQkJCQkkcmVxdWlyZWRIZWlnaHQgPSAkaXRlbUhlaWdodCAqICR0b3RhbEl0ZW1zDQoJCQkJCQkJCQ0KCQkJCQkJCQkjIFNldCBkcm9wZG93biBoZWlnaHQgdG8gc2hvdyBhbGwgaXRlbXMgKG1heCAzMDBweCB0byBwcmV2ZW50IGV4dHJlbWVseSBsYXJnZSBkcm9wZG93bnMpDQoJCQkJCQkJCSRzcmMuRHJvcERvd25IZWlnaHQgPSBbTWF0aF06Ok1pbigkcmVxdWlyZWRIZWlnaHQgKyAyLCAzMDApDQoJCQkJCQkJfQ0KCQkJCQkJCQ0KCQkJCQkJCSMgQWRkIHRoZSBldmVudCBoYW5kbGVycyB0byB0aGUgb3JpZ2luYWwgY29udHJvbA0KCQkJCQkJCSRlbC5BZGRfRHJhd0l0ZW0oJG9yaWdpbmFsRHJhd0l0ZW1TY3JpcHQpDQoJCQkJCQkJJGVsLkFkZF9Ecm9wRG93bigkb3JpZ2luYWxEcm9wRG93blNjcmlwdCkNCgkJCQkJCQkJCQkJCQkJDQoJCQkJCQkJIyBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2Ygb3VyIGN1c3RvbSBDb21ib0JveA0KCQkJCQkJCSRjdXN0b21Db21ib0JveCA9IE5ldy1PYmplY3QgRGFya0NvbWJvQm94DQoJCQkJCQkJDQoJCQkJCQkJIyBDb3B5IHByb3BlcnRpZXMgZnJvbSB0aGUgb3JpZ2luYWwgQ29tYm9Cb3gNCgkJCQkJCQkkY3VzdG9tQ29tYm9Cb3guTG9jYXRpb24gPSAkZWwuTG9jYXRpb24NCgkJCQkJCQkkY3VzdG9tQ29tYm9Cb3guU2l6ZSA9ICRlbC5TaXplDQoJCQkJCQkJJGN1c3RvbUNvbWJvQm94LkRyb3BEb3duU3R5bGUgPSAkZWwuRHJvcERvd25TdHlsZQ0KCQkJCQkJCSRjdXN0b21Db21ib0JveC5GbGF0U3R5bGUgPSAkZWwuRmxhdFN0eWxlDQoJCQkJCQkJJGN1c3RvbUNvbWJvQm94LkRyYXdNb2RlID0gJGVsLkRyYXdNb2RlDQoJCQkJCQkJJGN1c3RvbUNvbWJvQm94LkJhY2tDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDQwLCA0MCwgNDApDQoJCQkJCQkJJGN1c3RvbUNvbWJvQm94LkZvcmVDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OldoaXRlDQoJCQkJCQkJJGN1c3RvbUNvbWJvQm94LkZvbnQgPSAkZWwuRm9udA0KCQkJCQkJCSRjdXN0b21Db21ib0JveC5JbnRlZ3JhbEhlaWdodCA9ICRmYWxzZQ0KCQkJCQkJCSRjdXN0b21Db21ib0JveC5UYWJJbmRleCA9ICRlbC5UYWJJbmRleA0KCQkJCQkJCSRjdXN0b21Db21ib0JveC5OYW1lID0gJGVsLk5hbWUNCgkJCQkJCQkNCgkJCQkJCQkjIENvcHkgYW55IGl0ZW1zIGZyb20gdGhlIG9yaWdpbmFsIENvbWJvQm94DQoJCQkJCQkJZm9yZWFjaCAoJGl0ZW0gaW4gJGVsLkl0ZW1zKQ0KCQkJCQkJCXsNCgkJCQkJCQkJJGN1c3RvbUNvbWJvQm94Lkl0ZW1zLkFkZCgkaXRlbSkNCgkJCQkJCQl9DQoJCQkJCQkJDQoJCQkJCQkJIyBBZGQgdGhlIHNhbWUgZXZlbnQgaGFuZGxlcnMgdG8gdGhlIG5ldyBjb250cm9sDQoJCQkJCQkJJGN1c3RvbUNvbWJvQm94LkFkZF9Ecm9wRG93bigkb3JpZ2luYWxEcm9wRG93blNjcmlwdCkNCgkJCQkJCQkNCgkJCQkJCQkjIFJldHVybiB0aGUgY3VzdG9tIENvbWJvQm94DQoJCQkJCQkJJGVsID0gJGN1c3RvbUNvbWJvQm94DQoJCQkJCQl9DQoJCQkJCX0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEFwcGx5IFR5cGUtU3BlY2lmaWMgUHJvcGVydGllcw0KDQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFJldHVybiBDcmVhdGVkIFVJIEVsZW1lbnQNCiAgICAgICAgICAgICAgICByZXR1cm4gJGVsDQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFJldHVybiBDcmVhdGVkIFVJIEVsZW1lbnQNCiAgICAgICAgfQ0KICAgICNlbmRyZWdpb24gRnVuY3Rpb246IFNldC1VSUVsZW1lbnQNCiNlbmRyZWdpb24gQ29yZSBVSSBGdW5jdGlvbnMNCg0KI3JlZ2lvbiBNb2R1bGUgRXhwb3J0cw0KICAgICNyZWdpb24gU3RlcDogRXhwb3J0IFB1YmxpYyBGdW5jdGlvbnMNCiAgICAgICAgIyBFeHBvcnQgdGhlIGZ1bmN0aW9ucyBpbnRlbmRlZCBmb3IgdXNlIGJ5IG90aGVyIG1vZHVsZXMgb3IgdGhlIG1haW4gc2NyaXB0Lg0KICAgICAgICBFeHBvcnQtTW9kdWxlTWVtYmVyIC1GdW5jdGlvbiBJbml0aWFsaXplLVVJLCBTZXQtVUlFbGVtZW50LCBTaG93LVNldHRpbmdzRm9ybSwgSGlkZS1TZXR0aW5nc0Zvcm0sIFN5bmMtQ29uZmlnVG9VSSwgU3luYy1VSVRvQ29uZmlnLCBSZWdpc3Rlci1VSUV2ZW50SGFuZGxlcnMNCiAgICAjZW5kcmVnaW9uIFN0ZXA6IEV4cG9ydCBQdWJsaWMgRnVuY3Rpb25zDQojZW5kcmVnaW9uIE1vZHVsZSBFeHBvcnRz
				'
			}
			
			# Important modules: Add major features. Failure might limit things, but the app can still start.
			'datagrid.psm1' = @{ 
				Priority = 'Important'; 
				Order = 4; 
				Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1');
				FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'datagrid.psm1');
				Base64Content = '
					
				'
			}
			
			# Optional modules: Add extra, non-essential features. Failure is logged, but the app still starts.
			'launch.psm1'   = @{ 
				Priority = 'Optional';  
				Order = 5; 
				Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
				FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'launch.psm1');
				Base64Content = '
					
				'
			}
			'login.psm1'    = @{ 
				Priority = 'Optional';  
				Order = 6; 
				Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
				FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'login.psm1');
				Base64Content = '
					
				'
			}
			'ftool.psm1'    = @{ 
				Priority = 'Optional';  
				Order = 7; 
				Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
				FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ftool.psm1');
				Base64Content = '
					
				'
			}
			'ftool.dll'     = @{ 
				Priority = 'Optional';  
				Order = 8; 
				Dependencies = @('ftool.psm1');
				FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ftool.dll');
				Base64Content = '
					TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6AAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAADylR4YtvRwS7b0cEu29HBLkTILS7T0cEuRMg1Lt/RwS5EyHku09HBLkTIdS7v0cEt1+y1LtfRwS7b0cUuX9HBLkTICS7f0cEuRMgpLt/RwS5EyCEu39HBLUmljaLb0cEsAAAAAAAAAAFBFAABMAQUApBpbSAAAAAAAAAAA4AACIQsBCAAACgAAAA4AAAAAAAClFAAAABAAAAAgAAAAAAAQABAAAAACAAAEAAAAAAAAAAQAAAAAAAAAAGAAAAAEAAB7lQAAAgAAAAAAEAAAEAAAAAAQAAAQAAAAAAAAEAAAAPAlAADPAAAAnCIAADwAAAAAQAAArAEAAAAAAAAAAAAAAAAAAAAAAAAAUAAAbAEAAKAgAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQCEAAEAAAAAAAAAAAAAAAAAgAACMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALnRleHQAAABoCQAAABAAAAAKAAAABAAAAAAAAAAAAAAAAAAAIAAAYC5yZGF0YQAAvwYAAAAgAAAACAAAAA4AAAAAAAAAAAAAAAAAAEAAAEAuZGF0YQAAAHwDAAAAMAAAAAIAAAAWAAAAAAAAAAAAAAAAAABAAADALnJzcmMAAACsAQAAAEAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQC5yZWxvYwAApAEAAABQAAAAAgAAABoAAAAAAAAAAAAAAAAAAEAAAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIv/VYvs/yVcMwAQzMzMzMyL/1WL7P8lVDMAEMzMzMzMi/9Vi+z/JUwzABDMzMzMzIv/VYvs/yVYMwAQzMzMzMyL/1WL7P8lSDMAEMzMzMzMuPcRAAD/JWAzABDMzMzMzItEJAiD+ANWD4fsAAAA/ySFYBEAEGjIIAAQ/xUAIAAQgz1cMwAQAIs1CCAAEKNQMwAQdRVo4CAAEFD/1oPABaNcMwAQoVAzABCDPVQzABAAdRVo8CAAEFD/1oPABaNUMwAQoVAzABCDPUwzABAAdRVoACEAEFD/1oPABaNMMwAQoVAzABCDPVgzABAAdRVoECEAEFD/1oPABaNYMwAQoVAzABCDPUgzABAAdRVoICEAEFD/1oPABaNIMwAQoVAzABCDPWAzABAAdTBoMCEAEFD/1oPABaNgMwAQsAFewgwAoVAzABCFwHQRUP8VBCAAEMcFUDMAEAAAAACwAV7CDABAEQAQdRAAEHUQABBAEQAQOw0AMAAQdQLzw+lHAwAAVmiAAAAA/xV8IAAQi/BW/xWAIAAQhfZZWaN0MwAQo3AzABB1BTPAQF7DgyYA6NwEAABosRYAEOjABAAAxwQkyhUAEOi0BAAAWTPAXsOLRCQIVTPtO8V1DjktEDAAEH46/w0QMAAQg/gBiw1gIAAQiwlTVleJDWQzABAPhdQAAABkoRgAAACLcASLHTAgABCJbCQYv2wzABDrFjPA6WsBAAA7xnQWaOgDAAD/FTQgABBVVlf/0zvFdejrCMdEJBgBAAAAoWgzABCFwGoCXnQJah/o0wUAAOs8aJwgABBolCAAEMcFaDMAEAEAAADosgUAAIXAWVl0BzPA6QsBAABokCAAEGiMIAAQ6JAFAABZiTVoMwAQOWwkHFl1CFVX/xU4IAAQOS14MwAQdB5oeDMAEOisBAAAhcBZdA//dCQcVv90JBz/FXgzABD/BRAwABDpsgAAADvFD4WqAAAAizUwIAAQv2wzABDrC2joAwAA/xU0IAAQVWoBV//WhcB166FoMwAQg/gCdApqH+gaBQAAWet0/zV0MwAQix1wIAAQ/9OL6IXtWXRM/zVwMwAQ/9NZi/DrIIM+AHQbiwaJRCQY/xV0IAAQOUQkGHQJ/3QkGP/TWf/Qg+4EO/Vz2VX/FXggABBZ/xV0IAAQo3AzABCjdDMAEGoAV8cFaDMAEAAAAAD/FTggABAzwEBfXltdwgwAahBoOCIAEOiZBAAAi/mL8otdCDPAQIlF5DPJiU38iTUIMAAQiUX8O/F1EDkNEDAAEHUIiU3k6bcAAAA78HQFg/4CdS6hvCAAEDvBdAhXVlP/0IlF5IN95AAPhJMAAABXVlPo1v3//4lF5IXAD4SAAAAAV1ZT6Ff8//+JReSD/gF1JIXAdSBXUFPoQ/z//1dqAFPopv3//6G8IAAQhcB0BldqAFP/0IX2dAWD/gN1Q1dWU+iG/f//hcB1AyFF5IN95AB0LqG8IAAQhcB0JVdWU//QiUXk6xuLReyLCIsJiU3gUFHotwMAAFlZw4tl6INl5ACDZfwAx0X8/v///+gJAAAAi0Xk6OADAADDxwUIMAAQ/////8ODfCQIAXUF6P8DAAD/dCQEi0wkEItUJAzozf7//1nCDABVi+yB7CgDAACjIDEAEIkNHDEAEIkVGDEAEIkdFDEAEIk1EDEAEIk9DDEAEGaMFTgxABBmjA0sMQAQZowdCDEAEGaMBQQxABBmjCUAMQAQZowt/DAAEJyPBTAxABCLRQCjJDEAEItFBKMoMQAQjUUIozQxABCLheD8///HBXAwABABAAEAoSgxABCjJDAAEMcFGDAAEAkEAMDHBRwwABABAAAAoQAwABCJhdj8//+hBDAAEImF3Pz///8VHCAAEKNoMAAQagHoswMAAFlqAP8VICAAEGjAIAAQ/xUkIAAQgz1oMAAQAHUIagHojwMAAFloCQQAwP8VKCAAEFD/FSwgABDJw2hAMwAQ6HYDAABZw2oUaGAiABDoUgIAAP81dDMAEIs1cCAAEP/WWYlF5IP4/3UM/3UI/xVMIAAQWetnagjoUAMAAFmDZfwA/zV0MwAQ/9aJReT/NXAzABD/1llZiUXgjUXgUI1F5FD/dQiLNYAgABD/1llQ6BMDAACJRdz/deT/1qN0MwAQ/3Xg/9aDxBSjcDMAEMdF/P7////oCQAAAItF3OgIAgAAw2oI6NcCAABZw/90JAToUv////fYG8D32FlIw1ZXuCgiABC/KCIAEDvHi/BzD4sGhcB0Av/Qg8YEO/dy8V9ew1ZXuDAiABC/MCIAEDvHi/BzD4sGhcB0Av/Qg8YEO/dy8V9ew8zMzMzMzMzMzMzMi0wkBGaBOU1adAMzwMOLQTwDwYE4UEUAAHXwM8lmgXgYCwEPlMGLwcPMzMzMzMzMi0QkBItIPAPID7dBFFNWD7dxBjPShfZXjUQIGHYei3wkFItIDDv5cgmLWAgD2Tv7cgyDwgGDwCg71nLmM8BfXlvDzMzMzMzMzMzMzMzMzMxVi+xq/miAIgAQaI0YABBkoQAAAABQg+wIU1ZXoQAwABAxRfgzxVCNRfBkowAAAACJZejHRfwAAAAAaAAAABDoPP///4PEBIXAdFWLRQgtAAAAEFBoAAAAEOhS////g8QIhcB0O4tAJMHoH/fQg+ABx0X8/v///4tN8GSJDQAAAABZX15bi+Vdw4tF7IsIiwEz0j0FAADAD5TCi8LDi2Xox0X8/v///zPAi03wZIkNAAAAAFlfXluL5V3DzP8lbCAAEP8laCAAEP8lZCAAEP8lXCAAEGiNGAAQZP81AAAAAItEJBCJbCQQjWwkECvgU1ZXoQAwABAxRfwzxVCJZej/dfiLRfzHRfz+////iUX4jUXwZKMAAAAAw4tN8GSJDQAAAABZX19eW4vlXVHD/3QkEP90JBD/dCQQ/3QkEGhwEQAQaAAwABDotgAAAIPEGMNVi+yD7BChADAAEINl+ACDZfwAU1e/TuZAuzvHuwAA//90DYXDdAn30KMEMAAQ62BWjUX4UP8VPCAAEIt1/DN1+P8VDCAAEDPw/xUQIAAQM/D/FRQgABAz8I1F8FD/FRggABCLRfQzRfAz8Dv3dQe+T+ZAu+sLhfN1B4vGweAQC/CJNQAwABD31ok1BDAAEF5fW8nD/yVYIAAQ/yVUIAAQ/yVEIAAQ/yWEIAAQ/yVIIAAQ/yVQIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkIwAAdCMAAIIjAACyJQAAnCUAAIwlAAByJQAAXiUAAEAlAAAkJQAAECUAAPwkAADeJAAA1iQAAMAkAADIJQAAAAAAAHAkAACIJAAAkCQAAKYkAABMJAAANiQAACQkAAAUJAAABiQAAPgjAADsIwAA2iMAAMojAADCIwAAtCMAAKIjAAB6JAAAAAAAAAAAAAAAAAAAAAAAAH8RABAAAAAAAAAAAKQaW0gAAAAAAgAAAIkAAACIIQAAiA8AAAAAAAAYMAAQcDAAEHUAcwBlAHIAMwAyAC4AZABsAGwAAAAAAFBvc3RNZXNzYWdlQQAAAABQb3N0TWVzc2FnZVcAAAAAU2VuZE1lc3NhZ2VBAAAAAFNlbmRNZXNzYWdlVwAAAABTZXRDdXJzb3JQb3MAAAAAU2V0QWN0aXZlV2luZG93AEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwABAgIgAQAQAAAFJTRFNTUO3S8L97Q4yN0/DLuR2RBwAAAGM6XERvY3VtZW50cyBhbmQgU2V0dGluZ3NcQWxkZVxNeSBEb2N1bWVudHNcVmlzdWFsIFN0dWRpbyAyMDA1XFByb2plY3RzXEZseUZGIEFwcGxpY2F0aW9uc1xyZWxlYXNlXEZ1bmN0aW9ucy5wZGIAAAAAAAAAAAAAAAAAAAAAjRgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/v///wAAAADQ////AAAAAP7///8AAAAAmhQAEAAAAABmFAAQehQAEP7///8AAAAAzP///wAAAAD+////AAAAAHIWABAAAAAA/v///wAAAADY////AAAAAP7////pFwAQ/RcAENgiAAAAAAAAAAAAAJQjAAAAIAAAHCMAAAAAAAAAAAAAmiQAAEQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQjAAB0IwAAgiMAALIlAACcJQAAjCUAAHIlAABeJQAAQCUAACQlAAAQJQAA/CQAAN4kAADWJAAAwCQAAMglAAAAAAAAcCQAAIgkAACQJAAApiQAAEwkAAA2JAAAJCQAABQkAAAGJAAA+CMAAOwjAADaIwAAyiMAAMIjAAC0IwAAoiMAAHokAAAAAAAAVQJMb2FkTGlicmFyeVcAAPgARnJlZUxpYnJhcnkAoAFHZXRQcm9jQWRkcmVzcwAAS0VSTkVMMzIuZGxsAAByAV9lbmNvZGVfcG9pbnRlcgCTAl9tYWxsb2NfY3J0APQEZnJlZQAAcwFfZW5jb2RlZF9udWxsAGgBX2RlY29kZV9wb2ludGVyABACX2luaXR0ZXJtABECX2luaXR0ZXJtX2UAHQFfYW1zZ19leGl0AAATAV9hZGp1c3RfZmRpdgAAbQBfX0NwcFhjcHRGaWx0ZXIAUwFfY3J0X2RlYnVnZ2VyX2hvb2sAAI8AX19jbGVhbl90eXBlX2luZm9fbmFtZXNfaW50ZXJuYWwAAPMDX3VubG9jawCZAF9fZGxsb25leGl0AIICX2xvY2sAKANfb25leGl0AE1TVkNSODAuZGxsAHsBX2V4Y2VwdF9oYW5kbGVyNF9jb21tb24AKQJJbnRlcmxvY2tlZEV4Y2hhbmdlAFYDU2xlZXAAJgJJbnRlcmxvY2tlZENvbXBhcmVFeGNoYW5nZQAAXgNUZXJtaW5hdGVQcm9jZXNzAABCAUdldEN1cnJlbnRQcm9jZXNzAG4DVW5oYW5kbGVkRXhjZXB0aW9uRmlsdGVyAABKA1NldFVuaGFuZGxlZEV4Y2VwdGlvbkZpbHRlcgA5AklzRGVidWdnZXJQcmVzZW50AKMCUXVlcnlQZXJmb3JtYW5jZUNvdW50ZXIA3wFHZXRUaWNrQ291bnQAAEYBR2V0Q3VycmVudFRocmVhZElkAABDAUdldEN1cnJlbnRQcm9jZXNzSWQAygFHZXRTeXN0ZW1UaW1lQXNGaWxlVGltZQAAAAAAAAAAAAAAAAAAAAAAAACkGltIAAAAAFQmAAABAAAABgAAAAYAAAAYJgAAMCYAAEgmAAAAEAAAEBAAACAQAAAwEAAAUBAAAEAQAABiJgAAcSYAAIAmAACPJgAAniYAALAmAAAAAAEAAgADAAQABQBGdW5jdGlvbnMuZGxsAGZuUG9zdE1lc3NhZ2VBAGZuUG9zdE1lc3NhZ2VXAGZuU2VuZE1lc3NhZ2VBAGZuU2VuZE1lc3NhZ2VXAGZuU2V0QWN0aXZlV2luZG93AGZuU2V0Q3Vyc29yUG9zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE7mQLuxGb9E//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAABABgAAAAYAACAAAAAAAAAAAAEAAAAAAABAAIAAAAwAACAAAAAAAAAAAAEAAAAAAABAAkEAABIAAAAWEAAAFQBAADkBAAAAAAAADxhc3NlbWJseSB4bWxucz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTphc20udjEiIG1hbmlmZXN0VmVyc2lvbj0iMS4wIj4NCiAgPGRlcGVuZGVuY3k+DQogICAgPGRlcGVuZGVudEFzc2VtYmx5Pg0KICAgICAgPGFzc2VtYmx5SWRlbnRpdHkgdHlwZT0id2luMzIiIG5hbWU9Ik1pY3Jvc29mdC5WQzgwLkNSVCIgdmVyc2lvbj0iOC4wLjUwNzI3Ljc2MiIgcHJvY2Vzc29yQXJjaGl0ZWN0dXJlPSJ4ODYiIHB1YmxpY0tleVRva2VuPSIxZmM4YjNiOWExZTE4ZTNiIj48L2Fzc2VtYmx5SWRlbnRpdHk+DQogICAgPC9kZXBlbmRlbnRBc3NlbWJseT4NCiAgPC9kZXBlbmRlbmN5Pg0KPC9hc3NlbWJseT5QQURESU5HWFhQQURESU5HUEFERElOR1hYUEFERElOR1BBRERJTkdYWFBBRERJTkdQQURESU5HWFhQQURESU5HUEFERElOR1hYUEFERElOR1BBREQAEAAATAEAAAcwFzAnMDcwRzBXMHEwdjB8MIIwiTCOMJUwoDClMKswszC+MMMwyTDRMNww4TDnMO8w+jD/MAUxDTEYMR0xIzErMTYxQTFMMVIxYDFkMWgxbDFyMYcxkDGZMZ4xsjG+Mdkx4THqMfUxCjITMisyQzJYMl0yYzJ+MoMyjzKeMqQyqzLEMsoy3TLiMu8y/jITMxkzKDNAM10zZDNpM24zdzOBM5IzrzO8M9QzJzRUNJw00DTWNNw04jToNO409TT8NAM1CjURNRg1HzUnNS81NzVDNUw1UTVXNWE1ajV1NYE1hjWWNZs1oTWnNb01xDXLNdk15DXqNf41EzYeNjY2TDZZNpA2lTa0Nrk2ZjdrN303mzevN7U3HjgkOCo4MDg1OFI4njijOLc42jjnOPM4+zgDOQ85Mzk7OUY5TDlSOVg5XjlkOQAgAAAgAAAAmDDAMMQwfDGAMVAyWDJcMngylDKYMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
				'
			}
			'icon.ico'      = @{ 
				Priority = 'Optional';  
				Order = 9; 
				Dependencies = @();
				FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'icon.ico');
				Base64Content = '
					AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAAAAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AgIC/wICAv8CAgL/BAQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wQEAv8CAgL/AgIC/wICAv8DAwP/AwMD/wMDA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8GBgP/BQUD/wUEA/8NDgP/DQ4D/wUEA/8FBQP/BgYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BgYD/wMDA/8DAwP/AwMD/wQEBP8EBAT/BAQE/wMDBP8DAwT/AwME/wMDBP8DAwT/AwME/wQFBP8CAwT/BQQE/xIPA/8jHQP/LiUD/zo0A/86NAP/LiUD/yMdA/8SDwP/BQQE/wIDBP8EBQT/AwME/wMDBP8DAwT/AwME/wMDBP8DAwT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8DAwT/EBME/ycmBP84LQP/OC0E/ykhBP8cFwT/FxME/xcTBP8cFwT/KSEE/zgtBP84LQP/JyYE/xATBP8DAwT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BAQF/w0MBf83LgT/OjIE/xYSBf8JCgX/Cw0F/w4QBf8PEQX/DhEF/w4QBf8LDQX/CQoF/xYSBf86MgT/OC4E/w0MBf8EBAX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wYGBv8GBgb/BgYG/wYGBv8GBgb/BgYG/wUFBv8SEAb/PjIF/yMdBf8JCQb/DxIG/xETBv8MDgb/CQoG/wgJBv8ICQb/CQoG/wwOBv8REwb/DxIG/wkJBv8jHQX/PjIF/xIQBv8FBQb/BgYG/wYGBv8GBgb/BgYG/wYGBv8GBgb/BwcH/wcHB/8HBwf/BwcH/wcHB/8GBgf/Dw0H/z4zBf8dGAb/CwwH/xIVBv8MDQf/BwcH/wYGB/8HBwf/BwcH/wcHB/8HBwf/BgYH/wcHB/8MDQf/EhUG/wsMB/8dGAb/PjMF/w8NB/8GBgf/BwcH/wcHB/8HBwf/BwcH/wcHB/8ICAj/CAgI/wgICP8ICAj/CQkI/xMWB/85MAb/JR4H/wsNCP8TFgf/CQoI/wgHCP8ICAj/CAgI/wgICP8ICAj/CAgI/wgICP8ICAj/CAgI/wgHCP8JCgj/ExYH/wsNCP8lHgf/OTAG/xMWB/8JCQj/CAgI/wgICP8ICAj/CAgI/wkJCf8JCQn/CQkJ/wkJCf8ICAn/KykH/z01B/8LDAn/FBcI/woKCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8KCgn/FBcI/wsMCf89NQf/KykH/wgICf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/woKCf88MQf/GRYI/xIVCf8ODwn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8ODwn/EhUJ/xkWCP88MQf/CgoJ/wkJCf8JCQn/CQkJ/wkJCf8KCgr/CgoK/woKCv8JCQr/GBUJ/zwyCP8ODgr/FRcK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8UFwr/Dg4K/zwyCP8YFQn/CQkK/woKCv8KCgr/CgoK/wsLC/8LCwv/CwsL/wkKC/8qIwr/LiYJ/xATC/8REwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/xETC/8QEgv/LiYJ/yojCv8JCgv/CwsL/wsLC/8LCwv/DAwM/wwMDP8MDAz/CgoM/zUsCv8jHgv/FBcL/w8QDP8MDAz/DAwM/wwMDP8MDAz/DAwM/wwMDP8MDAz/CwoM/wsKDP8MDAz/DAwM/wwMDP8MDAz/DAwM/wwMDP8MDAz/DxAM/xQXC/8jHgv/NSwK/woKDP8MDAz/DAwM/wwMDP8NDQ3/DQ0N/w0NDf8SFQ3/QTsK/x4bDP8WGQz/Dw8N/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/wwMDf9JWQn/SVkJ/wwMDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/w0NDf8PEA3/FxoM/x4bDP9BOwr/EhUN/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/xMVDf9COwr/HhsM/xYZDP8PDw3/DQ0N/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/CwoN/1ltCP9ZbQj/CwoN/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/w8QDf8XGgz/HhsM/0I7Cv8TFQ3/DQ0N/w0NDf8NDQ3/Dg4O/w4ODv8ODg7/DAwO/zYuDP8lIA3/FhkN/xESDv8ODg7/Dg4O/w4ODv8ODg7/Dg4O/w4ODv8MCw7/Mz0L/zM9C/8MCw7/Dg4O/w4ODv8ODg7/Dg4O/w4ODv8ODg7/ERIO/xYZDf8lIA3/Ni4M/wwMDv8ODg7/Dg4O/w4ODv8PDw//Dw8P/w8PD/8NDg//LScN/zEqDf8UFg//FRcO/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w0MD/81Pwz/NT8M/w0MD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8VFw//FBYP/zEqDf8tJw3/DQ4P/w8PD/8PDw//Dw8P/xAQEP8QEBD/EBAQ/w8PEP8eGw//QTYN/xMUEP8aHQ//EBAQ/xAQEP8QEBD/EBAQ/xAQEP8QEBD/Dg0Q/zZADf82QA3/Dg0Q/xAQEP8QEBD/EBAQ/xAQEP8QEBD/EBAQ/xodD/8TFBD/QTYN/x4bD/8PDxD/EBAQ/xAQEP8QEBD/ERER/xEREf8RERH/ERER/xISEf9CNw3/IB0Q/xkcEP8VFhD/ERER/xEREf8RERH/ERER/xEREf8PDhH/NkAO/zZADv8PDhH/ERER/xEREf8RERH/ERER/xEREf8VFhD/GRwQ/yAdEP9CNw3/EhIR/xEREf8RERH/ERER/xEREf8RERH/ERER/xEREf8RERH/EBAR/zIxD/9EPA7/FBUR/xwfEP8TExH/ERER/xEREf8RERH/ERER/w8OEf82QA7/NkAO/w8OEf8RERH/ERER/xEREf8RERH/ExMR/xwfEP8UFBH/RDwO/zIxD/8QEBH/ERER/xEREf8RERH/ERER/xISEv8SEhL/EhIS/xISEv8TExL/HSAR/0I5D/8uKBD/FhgS/x0gEf8UFBL/EhIS/xISEv8SEhL/EA8S/zdBDv83QQ7/EA8S/xISEv8SEhL/EhIS/xQUEv8dIBH/FhcS/y4oEP9COQ//HSAR/xMTEv8SEhL/EhIS/xISEv8SEhL/ExMT/xMTE/8TExP/ExMT/xMTE/8SEhP/GxkS/0g8D/8oIxH/FxgT/x4hEv8XGRP/ExMT/xMTE/8REBP/OEIP/zhCD/8REBP/ExMT/xMTE/8XGRP/HiES/xcYE/8oIxH/SDwP/xsZEv8SEhP/ExMT/xMTE/8TExP/ExMT/xMTE/8UFBT/FBQU/xQUFP8UFBT/FBQU/xQUFP8TExT/IB0T/0k9D/8vKRL/FhcU/xwfE/8eIRP/GhwT/xUVFP87RRD/O0UQ/xUVFP8aHBP/HiAT/xwfE/8WFxT/LykS/0k9D/8gHRP/ExMU/xQUFP8UFBT/FBQU/xQUFP8UFBT/FBQU/xUVFf8VFRX/FRUV/xUVFf8VFRX/FRUV/xUVFf8UFBX/HBsU/0Q7EP9GPhD/JCAT/xgZFP8aHBT/Gx0U/zpFEP87RhD/Gx0U/xocFP8YGRT/JCAT/0Y+EP9EOxD/HBsU/xQUFf8VFRX/FRUV/xUVFf8VFRX/FRUV/xUVFf8VFRX/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8VFBb/ICMV/zY0Ev9FOxH/RTsR/zcvEv8rJhT/KSYU/ykmFP8rJhT/Ny8S/0U7Ef9FOxH/NjQS/yAjFP8VFBb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8XFxb/FRYW/xcXFv8kIRX/NC0U/z01E/9JQhH/SUIR/z41E/80LRT/JCEV/xcXFv8VFhb/FxcW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xYXF/8VFhf/FRUX/xwfFv8cHxb/FRUX/xUWF/8WFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
				'
			}
		}
	#endregion Step: Define Module Metadata

#endregion Global Configuration

#region Environment Initialization and Checks

	#region Function: Show-ErrorDialog
		function Show-ErrorDialog
		{
			<#
			.SYNOPSIS
				Displays a standardized error message box using Windows Forms for critical errors.
			
			.PARAMETER Message
				[string] The error message text to display in the dialog box. This message should clearly state the problem encountered. (Mandatory)
			
			.OUTPUTS
				[void] This function does not return any value. Its purpose is to display a modal error dialog to the user.
			
			.NOTES
				This function requires the System.Windows.Forms .NET assembly to be loaded. It attempts to load the assembly if not already present.
				If displaying the Windows Forms MessageBox fails (e.g., in a non-interactive session or if assembly loading fails), it falls back to writing
				the error message to the PowerShell error stream using Write-Verbose for logging purposes. This function is intended for critical errors
				that need immediate user attention, often before exiting the script.
			#>
			param(
				[Parameter(Mandatory = $true)]
				[string]$Message
			)
			try
			{
				#region Step: Ensure WinForms Assembly is Loaded
					# Try loading the .NET part needed for MessageBox. Use -ErrorAction Stop to catch errors.
					# See if it's already loaded to avoid trying again/warnings.
					if (-not ([System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')))
					{
						Add-Type -AssemblyName System.Windows.Forms -ErrorAction Stop
					}
					#endregion Step: Ensure WinForms Assembly is Loaded
					
					#region Step: Display WinForms MessageBox
					# Show the error pop-up box to the user.
					# Title shows the app name clearly. MessageBoxIcon.Error gives a visual hint.
					[System.Windows.Forms.MessageBox]::Show($Message, 'Entropia Dashboard Error',
						[System.Windows.Forms.MessageBoxButtons]::OK,
						[System.Windows.Forms.MessageBoxIcon]::Error) | Out-Null # Send to Out-Null to hide the 'OK' button result.
				#endregion Step: Display WinForms MessageBox
			}
			catch
			{
				# Backup plan if the WinForms MessageBox doesn't work.
				# Write the original message and why the pop-up failed to the error output.
				Write-Verbose "Failed to display error dialog: `"$Message`". Dialog Display Error: $($_.Exception.Message)" -ForegroundColor Red
			}
		}
	#endregion Function: Show-ErrorDialog

	#region Function: Request-Elevation
		function Request-Elevation
		{
			<#
			.SYNOPSIS
				Checks for required execution context (Admin rights, 32-bit, Bypass Policy) and attempts to restart the script if necessary.
			
			.DESCRIPTION
				This function assesses the current script execution environment. It verifies:
				1. Administrator Privileges: Checks if the current user is a member of the Administrators group.
				2. 32-bit Execution: Confirms if the current PowerShell process is running in 32-bit mode (required for potential interaction with 32-bit game clients or libraries).
				3. Execution Policy: Ensures the effective execution policy for the current process is 'Bypass' to allow dynamic script and module loading.
				
				If any of these conditions are not met, the function attempts to relaunch the script using the 32-bit PowerShell executable located in SysWOW64.
				The relaunch uses the 'RunAs' verb, triggering a UAC prompt for elevation if needed, and explicitly sets the execution policy to 'Bypass' for the new process.
				Upon successfully starting the new process, the *current* script instance exits immediately.
			
			.OUTPUTS
				[void] This function does not return a value. It either determines no restart is needed and returns silently, or it attempts to start a new process and then exits the current one using 'exit'.
			
			.NOTES
				- Relies on the existence of the 32-bit PowerShell executable at '$env:SystemRoot\SysWOW64\WindowsPowerShell\v1.0\powershell.exe'. If not found, the script will exit with an error.
				- Uses the '$myinvocation' automatic variable to get the path of the currently running script for the relaunch command.
				- If the relaunch attempt fails (e.g., user cancels UAC, file not found), an error dialog is shown, and the script exits.
				- The use of '-ExecutionPolicy Bypass' in the relaunch arguments is a security consideration; see the main script notes.
			#>
			param() # No inputs needed for this function.
			
			#region Step: Check Current Environment State
				Write-Verbose "Checking current execution environment (Admin, 32-bit, Execution Policy)..." -ForegroundColor Cyan
				# $needsRestart - Flag ($true/$false), set to $true if something isn't right.
				[bool]$needsRestart = $false
				# $reason - A list to gather easy-to-read reasons why we need a restart.
				[System.Collections.ArrayList]$reason = @()
				
				# Check if we're running as Admin.
				# $isAdmin - Flag ($true/$false), $true if the current user is an Admin.
				[bool]$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
				if (-not $isAdmin)
				{
					$needsRestart = $true; $null = $reason.Add('Administrator privileges required.') # Add reason if not admin.
				}
				
				# Check if this process is 32-bit. [IntPtr]::Size is 4 for 32-bit, 8 for 64-bit.
				# $is32Bit - Flag ($true/$false), $true if the process is 32-bit.
				[bool]$is32Bit = [IntPtr]::Size -eq 4
				if (-not $is32Bit)
				{
					$needsRestart = $true; $null = $reason.Add('32-bit execution required.') # Add reason if not 32-bit.
				}
				
				# Check the Execution Policy just for this running process.
				# $currentPolicy - Text showing the execution policy (like 'Restricted', 'Bypass').
				[string]$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue # SilentlyContinue handles if it's not set for the process.
				# Needs 'Bypass' for loading/running things the way we planned.
				if ($currentPolicy -ne 'Bypass')
				{
					$needsRestart = $true
					if ($currentPolicy -ne '') {
						$effectivePolicy = $currentPolicy
					} else {
						$effectivePolicy = Get-ExecutionPolicy
					}
					$null = $reason.Add("Execution Policy 'Bypass' required for Process scope (Current effective: '$effectivePolicy').") # Show the actual policy being used.
				}
			#endregion Step: Check Current Environment State
			
			#region Step: Perform Restart if Necessary
				if ($needsRestart)
				{
					# Write down the reasons we're trying to restart.
					Write-Verbose "  Restarting script needed: $($reason -join ' ')" -ForegroundColor Yellow
					
					# Set the path to the 32-bit PowerShell program.
					# $psExe - Text, full path to the 32-bit powershell.exe.
					[string]$psExe = Join-Path $env:SystemRoot 'SysWOW64\WindowsPowerShell\v1.0\powershell.exe'
					if (-not (Test-Path $psExe -PathType Leaf)) # Check if the program file exists.
					{
						# Show error and quit if the needed program is missing.
						Show-ErrorDialog "FATAL: Required 32-bit PowerShell executable not found at '$psExe'. Cannot continue."
						exit 1 # Exit code 1 means there was an error.
					}
					
					# Get everything inside the current script file.
					$encodedCommand = @"
						
"@

					# Decode the command
					try {
						$decodedBytes = [System.Convert]::FromBase64String($encodedCommand)
						# IMPORTANT: Use the right encoding the script was saved with! UTF8 is typical, but PowerShell might use UTF8 with BOM or UTF16LE. Assume UTF8 here.
						$decodedCommand = [System.Text.Encoding]::UTF8.GetString($decodedBytes)
					} catch {
						Show-ErrorDialog "FATAL: Failed to decode the embedded command. Error: $($_.Exception.Message)"
						exit 1
					}

					# Make a temporary file path
					$tempScriptPath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), ([System.Guid]::NewGuid().ToString() + ".ps1"))

					try
					{
						# Save the decoded command to the temp file (using the right encoding)
						[System.IO.File]::WriteAllText($tempScriptPath, $decodedCommand, [System.Text.Encoding]::UTF8) # Match encoding from GetString

						# Build the NEW arguments using -File
						# Added -ExecutionPolicy Bypass, often needed when running scripts like this.
						# $psArgs - Text holding the command-line arguments.
						[string]$psArgs = "-noexit -ExecutionPolicy Bypass -File `"$tempScriptPath`"" # Note the quotes around the path

						# Set up the ProcessStartInfo object
						$psi = New-Object System.Diagnostics.ProcessStartInfo
						$psi.FileName = $psExe         # The program to run. Make sure $psExe is set!
						$psi.Arguments = $psArgs       # The arguments for the program.
						$psi.UseShellExecute = $true   # MUST be $true to use the 'Verb' property.
						$psi.Verb = 'RunAs'            # Ask for Admin rights (UAC).

						Write-Verbose "  Attempting to start new elevated/32-bit process via temp file: `"$psExe`" $psArgs" -ForegroundColor Cyan
						Write-Verbose "  Temporary script file: $tempScriptPath" -ForegroundColor DarkGray

						# Start the new process
						[System.Diagnostics.Process]::Start($psi) | Out-Null

						# Success (request sent)
						Write-Verbose "  Successfully requested elevated/32-bit process start. Exiting current process." -ForegroundColor Green
						exit 0
					}
					catch
					{
						# Error handling
						Show-ErrorDialog "FATAL: Failed to restart script with required settings (Admin/32-bit/Bypass). Error: $($_.Exception.Message)"
						# Delete the temp file if it failed (might not work if permissions are odd)
						if (Test-Path $tempScriptPath) {
							try { Remove-Item $tempScriptPath -ErrorAction Stop } catch {}
						}
						exit 1
					}
				}
				else
				{
					# Log that the script is already running with the right settings.
					Write-Verbose "  Script already running with required environment settings (Admin, 32-bit, Bypass Policy)." -ForegroundColor Green
				}
			#endregion Step: Perform Restart if Necessary
		}
	#endregion Function: Request-Elevation

	#region Function: Initialize-ScriptEnvironment
		function Initialize-ScriptEnvironment
		{
			<#
			.SYNOPSIS
				Verifies that the script environment meets all requirements *after* any potential restart attempt by Request-Elevation.
			
			.DESCRIPTION
				This function performs final checks to ensure the script is operating in the correct environment before proceeding with core logic.
				It re-validates:
				1. Administrator Privileges: Confirms the script is now running elevated.
				2. 32-bit Mode: Confirms the script is now running in a 32-bit PowerShell process.
				3. Execution Policy: Confirms the process scope execution policy is 'Bypass'. If not (which shouldn't happen if Request-Elevation worked),
				it makes a final attempt to set it using Set-ExecutionPolicy.
				
				If any check fails, it displays a specific error message using Show-ErrorDialog and returns $false.
			
			.OUTPUTS
				[bool] Returns $true if all environment checks pass successfully, otherwise returns $false.
			
			.NOTES
				- This function should be called *after* Request-Elevation. It acts as a final safeguard.
				- Failure here is typically fatal for the application, as indicated by the error messages and the return value.
				- The attempt to set ExecutionPolicy within this function is a fallback; ideally, Request-Elevation should have ensured this.
			#>
			[CmdletBinding()]
			[OutputType([bool])] 
			param()
			
			Write-Verbose "Verifying final script environment settings..." -ForegroundColor Cyan
			try
			{
				#region Step: Verify Administrator Privileges
					# $isAdmin - Flag ($true/$false), $true if the current user is an Admin.
					[bool]$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
					if (-not $isAdmin)
					{
						# Show error and return $false if not running as Admin.
						Show-ErrorDialog 'FATAL: Application requires administrator privileges to run.'
						return $false
					}
					Write-Verbose "[OK] Running with administrator privileges." -ForegroundColor Green
				#endregion Step: Verify Administrator Privileges
				
				#region Step: Verify 32-bit Execution Mode
					# $is32Bit - Flag ($true/$false), $true if the process is 32-bit.
					[bool]$is32Bit = [IntPtr]::Size -eq 4
					if (-not $is32Bit)
					{
						# Show error and return $false if not running in 32-bit mode.
						Show-ErrorDialog 'FATAL: Application must run in 32-bit PowerShell mode.'
						return $false
					}
					Write-Verbose "[OK] Running in 32-bit mode." -ForegroundColor Green
				#endregion Step: Verify 32-bit Execution Mode
				
				#region Step: Verify Process Execution Policy
					# $currentPolicy - Text, the execution policy for this process.
					[string]$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue
					if ($currentPolicy -ne 'Bypass')
					{
						# This is a backup. Ideally, Request-Elevation already set 'Bypass'.
						Write-Verbose "  Process Execution Policy is not 'Bypass' (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })'). Attempting final Set..." -ForegroundColor Yellow
						try
						{
							# Try to force the policy to Bypass for this process.
							Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force -ErrorAction Stop
							# Check again after trying.
							$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue
							if ($currentPolicy -ne 'Bypass')
							{
								# If it still didn't work, report a major error.
								Show-ErrorDialog "FATAL: Failed to set required PowerShell Execution Policy to 'Bypass'.  (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })')."
								return $false
							}
							Write-Verbose "[OK] Execution policy successfully forced to Bypass for this process." -ForegroundColor Green
						}
						catch
						{
							# Catch errors during the last Set-ExecutionPolicy try.
							Show-ErrorDialog "FATAL: Error setting PowerShell Execution Policy to 'Bypass'.  (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })'). Error: $($_.Exception.Message)"
							return $false
						}
					}
					else
					{
						Write-Verbose "[OK] Execution policy is '$currentPolicy'." -ForegroundColor Green
					}
				#endregion Step: Verify Process Execution Policy
				
				# If all checks passed:
				Write-Verbose "  Environment verification successful." -ForegroundColor Green
				return $true
			}
			catch
			{
				# Catch any surprise errors during the check itself.
				Show-ErrorDialog "FATAL: An unexpected error occurred during environment verification: $($_.Exception.Message)"
				return $false
			}
		}
	#endregion Function: Initialize-ScriptEnvironment

	#region Function: Initialize-BaseConfig
		function Initialize-BaseConfig
		{
			<#
			.SYNOPSIS
				Ensures necessary application data directories exist in %APPDATA% and are writable.
			
			.DESCRIPTION
				This function is responsible for setting up the fundamental directory structure required by the application
				within the user's roaming application data folder (%APPDATA%). It specifically checks for and, if necessary, creates:
				1. The main application directory: %APPDATA%\Entropia_Dashboard
				2. The modules subdirectory: %APPDATA%\Entropia_Dashboard\modules
				
				After ensuring the directories exist, it performs a quick write test in each directory by creating and immediately
				deleting a temporary file ('write_test.tmp'). This verifies that the script has the necessary permissions to write
				files (like modules and configuration) to these locations.
			
			.OUTPUTS
				[bool] Returns $true if both directories exist (or were created successfully) AND are verified as writable. Returns $false if
				directory creation fails or if either directory is found to be non-writable.
			
			.NOTES
				- Upon successful completion (returning $true), it sets the global state flag '$global:DashboardConfig.State.ConfigInitialized' to $true.
				- Errors during directory creation or the write test are logged to the error stream and presented to the user via Show-ErrorDialog,
				as these are typically fatal issues preventing the application from functioning correctly.
				- Uses -Force with New-Item to create parent directories if they don't exist.
			#>
			[CmdletBinding()]
			[OutputType([bool])]
			param()

			Write-Verbose "Initializing base configuration directories in %APPDATA%..." -ForegroundColor Cyan
			try
			{
				# List of essential folders that must exist and be writable.
				# $directories - List of text paths for the required folders.
				[string[]]$directories = @(
					$global:DashboardConfig.Paths.App,     # e.g., C:\Users\User\AppData\Roaming\Entropia_Dashboard\
					$global:DashboardConfig.Paths.Modules  # e.g., C:\Users\User\AppData\Roaming\Entropia_Dashboard\modules\
				)
				
				# Go through each needed folder path.
				foreach ($dir in $directories)
				{
					#region Step: Ensure Directory Exists
						# Check if the path exists and is actually a folder (Container).
						if (-not (Test-Path -Path $dir -PathType Container))
						{
							Write-Verbose "  Directory not found. Creating: '$dir'" -ForegroundColor DarkGray
							try
							{
								# Create the folder. -Force makes parent folders too. -ErrorAction Stop stops if it fails.
								$null = New-Item -Path $dir -ItemType Directory -Force -ErrorAction Stop
							}
							catch
							{
								# Handle errors when creating the folder (like permissions, bad path).
								$errorMsg = "  Failed to create required directory '$dir'. Please check permissions or path validity. Error: $($_.Exception.Message)"
								Write-Verbose $errorMsg -ForegroundColor Red
								Show-ErrorDialog $errorMsg
								return $false # Can't continue if creating the folder fails.
							}
						}
						else
						{
							Write-Verbose "  Directory exists: '$dir'" -ForegroundColor DarkGray
						}
					#endregion Step: Ensure Directory Exists
					
					#region Step: Test Directory Writability
						# Make a temporary file path in the current folder for a write test.
						# $testFile - Text, path for the temporary test file.
						[string]$testFile = Join-Path -Path $dir -ChildPath 'write_test.tmp'
						try
						{
							# Try writing a small bit of text to the test file.
							[System.IO.File]::WriteAllText($testFile, 'TestWriteAccess')
							# If writing works, delete the test file right away. -Force skips asking.
							Remove-Item -Path $testFile -Force -ErrorAction Stop
							Write-Verbose "  Directory is writable: '$dir'" -ForegroundColor DarkGray
						}
						catch
						{
							# Handle errors during writing or deleting (probably bad permissions).
							$errorMsg = "  Cannot write to directory '$dir'. Please check permissions. Error: $($_.Exception.Message)"
							Write-Verbose $errorMsg -ForegroundColor Red
							Show-ErrorDialog $errorMsg
							# Try cleaning up the test file just in case it was made but couldn't be deleted.
							if (Test-Path -Path $testFile -PathType Leaf)
							{
								Remove-Item -Path $testFile -Force -ErrorAction SilentlyContinue
							}
							return $false # Can't continue if the folder isn't writable.
						}
					#endregion Step: Test Directory Writability
				} # End of the loop for each directory.
				
				# If the loop finishes without returning false, all folders are ready.
				Write-Verbose "  Base configuration directories initialized and verified successfully." -ForegroundColor Green
				# Set the main state flag.
				$global:DashboardConfig.State.ConfigInitialized = $true
				return $true
			}
			catch
			{
				# Catch any surprise errors during the whole setup process.
				$errorMsg = "  An unexpected error occurred during base configuration directory initialization: $($_.Exception.Message)"
				Write-Verbose $errorMsg -ForegroundColor Red
				Show-ErrorDialog $errorMsg
				return $false
			}
		}
	#endregion Function: Initialize-BaseConfig

#endregion Environment Initialization and Checks

#region Module Handling Functions

	#region Function: Write-Module
		# ... (Keep Write-Module function as it was) ...
        function Write-Module
		{
			<#
			.SYNOPSIS
				Writes module content (from a source file or Base64 string) to the designated modules directory in %APPDATA%, performing hash checks to avoid redundant writes.
			
			.DESCRIPTION
				This function handles the deployment of module files (e.g., .psm1, .dll, .ico) from their source location or embedded Base64 representation
				to the application's 'modules' directory under %APPDATA% (defined in $global:DashboardConfig.Paths.Modules).
				
				Key operations:
				1. Ensures the target 'modules' directory exists, attempting to create it if necessary.
				2. Retrieves the module content as a byte array, either by reading the source file specified by the -Content parameter or by decoding the Base64 string provided via -ContentBase64.
				3. If the target file already exists in the 'modules' directory:
				a. Compares the file size of the existing file with the size of the new content. If different, an update is needed.
				b. If sizes match, calculates the SHA256 hash of both the existing file and the new content in memory.
				c. If the hashes match, the function logs that no update is needed and returns the path to the existing file, avoiding an unnecessary write operation.
				d. If hashes differ, an update is needed.
				4. If the target file does not exist or an update is required (sizes/hashes differ), the function attempts to write the new content (byte array) to the target path.
				5. Includes a simple retry mechanism (up to 5 seconds) with short delays (100ms) specifically for System.IO.IOException errors during the write attempt, which often indicate temporary file locks.
			
			.PARAMETER ModuleName
				[string] The destination filename for the module in the target directory (e.g., 'ui.psm1', 'ftool.dll', 'icon.ico'). (Mandatory)
			
			.PARAMETER Content
				[string] Used in the 'FilePath' parameter set. The full path to the source file containing the module content to be copied. (Mandatory, ParameterSetName='FilePath')
			
			.PARAMETER ContentBase64
				[string] Used in the 'Base64Content' parameter set. A Base64 encoded string containing the module content to be decoded and written. (Mandatory, ParameterSetName='Base64Content')
			
			.OUTPUTS
				[string] Returns the full path to the successfully written (or verified existing and matching) module file in the target 'modules' directory.
				Returns $null if any critical operation fails (e.g., directory creation, source file reading, Base64 decoding, final write attempt after retries).
			
			.NOTES
				- Uses SHA256 hash comparison for efficient and reliable detection of unchanged files.
				- Error handling is implemented for directory creation, file reading, Base64 decoding, hash calculation, and file writing.
				- The write retry loop is basic and may not handle all concurrent access scenarios perfectly but addresses common temporary locks.
				- Uses [System.IO.File]::ReadAllBytes and ::WriteAllBytes for potentially better performance with binary files (.dll, .ico) compared to Get-Content/Set-Content.
			#>
			[CmdletBinding(DefaultParameterSetName = 'FilePath')] # Default to FilePath if only unnamed inputs are used.
			[OutputType([string])]
			param (
				[Parameter(Mandatory = $true, Position = 0)]
				[string]$ModuleName, # e.g., 'ui.psm1'
			
				[Parameter(Mandatory = $true, ParameterSetName = 'FilePath', Position = 1)]
				[ValidateScript({ Test-Path $_ -PathType Leaf })] # Basic check: make sure path exists and is a file.
				[string]$Content, # Source file path, e.g., 'C:\path\to\source\ui.psm1'
			
				[Parameter(Mandatory = $true, ParameterSetName = 'Base64Content')]
				[string]$ContentBase64 # Base64 encoded content text
			)
			
			# Get the destination folder path from the main config.
			# $modulesDir - Text, destination folder for modules.
			[string]$modulesDir = $global:DashboardConfig.Paths.Modules
			# Build the full path for the destination file.
			# $finalPath - Text, full destination path for the module file.
			[string]$finalPath = Join-Path -Path $modulesDir -ChildPath $ModuleName
			
			Write-Verbose "Executing Write-Module for '$ModuleName' to '$finalPath'" -ForegroundColor Cyan
			try
			{
				#region Step: Ensure Target Directory Exists
					# Check if the destination folder exists; try creating it if not.
					if (-not (Test-Path -Path $modulesDir -PathType Container))
					{
						Write-Verbose "Target module directory not found, attempting creation: '$modulesDir'" -ForegroundColor DarkGray
						try
						{
							$null = New-Item -Path $modulesDir -ItemType Directory -Force -ErrorAction Stop
							Write-Verbose "Target module directory created successfully: '$modulesDir'" -ForegroundColor Green
						}
						catch
						{
							# Major error if folder cannot be created.
							Write-Verbose "Failed to create target module directory '$modulesDir': $($_.Exception.Message)" -ForegroundColor Red
							return $null # Cannot continue.
						}
					}
				#endregion Step: Ensure Target Directory Exists
				
				#region Step: Get Content Bytes from Source (File or Base64)
					# $bytes - Array of bytes that will hold the module content.
					[byte[]]$bytes = $null
					Write-Verbose "  ParameterSetName: $($PSCmdlet.ParameterSetName)" -ForegroundColor DarkGray
					
					# Handle Base64 input
					if ($PSCmdlet.ParameterSetName -eq 'Base64Content')
					{
						if ([string]::IsNullOrEmpty($ContentBase64))
						{
							Write-Verbose "  ModuleName '$ModuleName': ContentBase64 parameter was provided but is empty." -ForegroundColor Yellow
							return $null
						}
						try
						{
							$bytes = [System.Convert]::FromBase64String($ContentBase64)
							Write-Verbose "  Decoded Base64 content for '$ModuleName' ($($bytes.Length) bytes)." -ForegroundColor DarkGray
						}
						catch
						{
							# Major error if Base64 decoding fails.
							Write-Verbose "  Failed to decode Base64 content for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
							return $null
						}
					}
					# Handle FilePath input
					elseif ($PSCmdlet.ParameterSetName -eq 'FilePath')
					{
						# File existence already checked by ValidateScript, but double-check path is valid.
						if ([string]::IsNullOrEmpty($Content) -or -not ([System.IO.File]::Exists($Content)) )
						{
							Write-Verbose "  ModuleName '$ModuleName': Source file path '$Content' is invalid or does not exist." -ForegroundColor Red
							return $null # Shouldn't happen with ValidateScript, but good safety check.
						}
						try
						{
							$bytes = [System.IO.File]::ReadAllBytes($Content)
							Write-Verbose "  Read source file content for '$ModuleName' from '$Content' ($($bytes.Length) bytes)." -ForegroundColor DarkGray
						}
						catch
						{
							# Major error if source file cannot be read.
							Write-Verbose "  Failed to read source file '$Content' for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
							return $null
						}
					}
					else # Shouldn't get here because of parameter sets
					{
						Write-Verbose "  ModuleName '$ModuleName': Invalid parameter combination or missing content." -ForegroundColor Red
						return $null
					}
					
					# Final check if the byte array got filled.
					if ($null -eq $bytes)
					{
						Write-Verbose "  Failed to obtain content bytes for '$ModuleName'. Source data might be empty or invalid." -ForegroundColor Red
						return $null
					}
				#endregion Step: Get Content Bytes from Source (File or Base64)
				
				#region Step: Check if File Needs Updating (Size and Hash Comparison)
					# $updateNeeded - Flag ($true/$false), decides if the file needs writing.
					[bool]$updateNeeded = $true
					if (Test-Path -Path $finalPath -PathType Leaf) # Check if the destination file exists.
					{
						Write-Verbose "  Target file exists: '$finalPath'. Comparing size and hash..." -ForegroundColor DarkGray
						try
						{
							# Get info about the existing file.
							# $fileInfo - File info object for the existing file.
							$fileInfo = Get-Item -LiteralPath $finalPath -Force -ErrorAction Stop
							
							# 1. Compare file sizes first (quick check).
							if ($fileInfo.Length -eq $bytes.Length)
							{
								Write-Verbose "  File sizes match ($($bytes.Length) bytes). Comparing SHA256 hashes..." -ForegroundColor DarkGray
								# 2. If sizes match, compare SHA256 hashes.
								# $existingHash - Text, SHA256 hash of the file on disk.
								[string]$existingHash = (Get-FileHash -LiteralPath $finalPath -Algorithm SHA256 -ErrorAction Stop).Hash
								
								# Calculate hash of the new content (bytes) in memory.
								# $memStream - Memory stream to feed bytes to Get-FileHash. 'Using' cleans it up.
								$newHash = try
								{
									$memStream = New-Object System.IO.MemoryStream(,$bytes)
									(Get-FileHash -InputStream $memStream -Algorithm SHA256 -ErrorAction Stop).Hash
								}
								finally
								{
									if ($memStream)
									{
										$memStream.Dispose() 
									}
								}
								
								Write-Verbose " - Existing Hash: $existingHash" -ForegroundColor DarkGray
								Write-Verbose " - New Hash:    - $newHash" -ForegroundColor DarkGray
								
								# If hashes match, no update needed.
								if ($existingHash -eq $newHash)
								{
									Write-Verbose "  Hashes match for '$ModuleName'. No update needed." -ForegroundColor DarkGray
									$updateNeeded = $false
									# Return path to the existing, checked file.
									return $finalPath
								}
								else
								{
									Write-Verbose "  Hashes differ for '$ModuleName'. Update required." -ForegroundColor Yellow 
								}
							}
							else
							{
								Write-Verbose "  File sizes differ (Existing: $($fileInfo.Length), New: $($bytes.Length)). Update required." -ForegroundColor Yellow 
							}
						}
						catch
						{
							# Handle errors during size/hash compare (like file locked, permissions).
							# Log a warning and assume an update is needed.
							Write-Verbose "  Could not compare size/hash for '$ModuleName' (Path: '$finalPath'). Will attempt to overwrite. Error: $($_.Exception.Message)" -ForegroundColor Yellow
							$updateNeeded = $true
						}
					}
					else
					{
						Write-Verbose "  Target file does not exist: '$finalPath'. Writing new file." -ForegroundColor DarkGray 
						$updateNeeded = $true
					}
				#endregion Step: Check if File Needs Updating (Size and Hash Comparison)
				
				#region Step: Write File to Target Path (with Retry on IO Exception)
					if ($updateNeeded)
					{
						# Set up retry settings.
						# $timeoutMilliseconds - Number, max time (ms) to spend retrying the write.
						[int]$timeoutMilliseconds = 5000  # 5 seconds total retry time.
						# $retryDelayMilliseconds - Number, delay (ms) between retries.
						[int]$retryDelayMilliseconds = 100 # Wait 100ms before trying again.
						# $startTime - DateTime, when the retry loop started.
						[datetime]$startTime = Get-Date
						# $fileWritten - Flag ($true/$false) if file was written okay within the time limit.
						[bool]$fileWritten = $false
						# $attempts - Number, counts how many times we tried writing.
						[int]$attempts = 0
						
						Write-Verbose "  Attempting to write file: '$finalPath'" -ForegroundColor DarkGray
						while (((Get-Date) - $startTime).TotalMilliseconds -lt $timeoutMilliseconds)
						{
							$attempts++
							try
							{
								# Try writing all bytes to the final path using a .NET method.
								[System.IO.File]::WriteAllBytes($finalPath, $bytes)
								$fileWritten = $true
								Write-Verbose "  Successfully wrote '$ModuleName' to '$finalPath' on attempt $attempts." -ForegroundColor Green
								break # Exit the retry loop if write worked.
							}
							catch [System.IO.IOException]
							{
								# Catch IO errors specifically (probably file lock). Log warning and retry after delay.
								Write-Verbose "  Attempt $($attempts): IO Error writing '$finalPath' (Retrying in $retryDelayMilliseconds ms): $($_.Exception.Message)" -ForegroundColor Red
								# Check if time is almost up before waiting.
								if (((Get-Date) - $startTime).TotalMilliseconds + $retryDelayMilliseconds -ge $timeoutMilliseconds)
								{
									Write-Verbose "  Timeout nearing, breaking retry loop for '$finalPath'." -ForegroundColor Yellow
									break # Don't wait longer than the timeout.
								}
								Start-Sleep -Milliseconds $retryDelayMilliseconds
							}
							catch
							{
								# Catch other surprise, non-retryable errors during write. Log error and stop loop.
								Write-Verbose "  Attempt $($attempts): Non-IO Error writing '$finalPath': $($_.Exception.Message)" -ForegroundColor Red
								$fileWritten = $false # Make sure flag is false.
								break # Exit loop on non-retryable error.
							}
						} # End of while retry loop
						
						# Check if the file was written okay after the loop.
						if (-not $fileWritten)
						{
							Write-Verbose "  Failed to write module '$ModuleName' to '$finalPath' after $attempts attempts within $timeoutMilliseconds ms timeout." -ForegroundColor Red
							return $null # Return null to show it failed.
						}
					} # End if($updateNeeded)
				#endregion Step: Write File to Target Path (with Retry on IO Exception)
				
				# If we get here, the file exists and is current, or it was just written successfully.
				return $finalPath
			}
			catch
			{
				# Catch any surprise errors in the main function part (like input check failed earlier).
				Write-Verbose "  An unexpected error occurred in Write-Module for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
				return $null
			}
		}
	#endregion Function: Write-Module


	#region Function: Import-ModuleUsingReflection
		# ... (Keep Import-ModuleUsingReflection function as it was) ...
        function Import-ModuleUsingReflection
		{
			<#
			.SYNOPSIS
				(Alternative Method) Imports a PowerShell module by reading, modifying (adding no-op Export-ModuleMember), and executing its content directly in the global scope via Invoke-Command.

			.DESCRIPTION
				This function offers another non-standard way to load a .psm1 module, aiming to address issues where `Import-Module` or `InvokeScript` fail due to `$using:` variables.
				Its process involves:
				1. Reading the entire content of the specified .psm1 file into a string.
				2. Storing the original content in $global:DashboardConfig.Resources.LoadedModuleContent.
				3. Prepending a simple, no-operation `Export-ModuleMember` function definition to the beginning of the content string.
				4. Creating a single `ScriptBlock` object from this modified content string.
				5. Executing this `ScriptBlock` directly in the current (global) execution context using `Invoke-Command -ScriptBlock $scriptBlock`. This method is chosen specifically because `Invoke-Command` executed locally *can* resolve `$using:` variables against the caller's scope.

			.PARAMETER Path
				[string] The full path to the .psm1 module file to be imported using this method. (Mandatory)

			.PARAMETER ModuleName
				[string] The logical name of the module being imported (e.g., 'ui.psm1'), used primarily for logging. (Mandatory)

			.OUTPUTS
				[bool] Returns $true if the `Invoke-Command` execution completes without throwing a terminating error.
				Returns $false if a fatal error occurs (e.g., file not found, terminating error during script execution).
				*Note: Returning $true indicates execution finished, but doesn't guarantee the module loaded correctly or that all its functions are available/working.*

			.NOTES
				- Global Scope Pollution: This method directly defines all functions, variables, and aliases from the module into the global scope.
				- Use Case: Fallback specifically intended to handle modules containing `$using:` variables that cause standard import/InvokeScript methods to fail.
				- Error Handling: Relies on catching terminating errors from `Invoke-Command`. Non-terminating errors within the module code will be logged by PowerShell but won't cause this function to return $false unless `-ErrorAction Stop` was used inside the module code itself.
			#>
			[CmdletBinding()]
			[OutputType([bool])]
			param(
				[Parameter(Mandatory = $true)]
				[ValidateScript({ Test-Path $_ -PathType Leaf })] # Make sure path exists and is a file.
				[string]$Path,

				[Parameter(Mandatory = $true)]
				[string]$ModuleName
			)

			Write-Verbose "Attempting reflection-style import (InvokeCommand in global scope) for '$ModuleName'." -ForegroundColor Cyan

			try
			{
				#region Step: Check File Existence (Redundant with ValidateScript but safe)
					if (-not (Test-Path -Path $Path -PathType Leaf))
					{
						Write-Verbose "Import-ModuleUsingReflection: Module file not found or is not a file: '$Path'" -ForegroundColor Red
						return $false
					}
				#endregion Step: Check File Existence

				#region Step: Read and Store Original Module Content
					[string]$moduleContent = [System.IO.File]::ReadAllText($Path)
					if ($null -eq $moduleContent)
					{
						if (Test-Path -Path $Path -PathType Leaf)
						{
							Write-Verbose "Import-ModuleUsingReflection: Module file '$Path' is empty. Considering import successful (no-op)." -ForegroundColor Yellow
							$global:DashboardConfig.Resources.LoadedModuleContent[$ModuleName] = ''
							return $true
						}
						else
						{
							Write-Verbose "Import-ModuleUsingReflection: Failed to read module file '$Path'." -ForegroundColor Red
							return $false
						}
					}
					# Ensure Resources hashtable exists before storing
                    if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('Resources')) {
                        $global:DashboardConfig['Resources'] = @{}
                    }
                    # Ensure LoadedModuleContent hashtable exists
                     if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and -not $global:DashboardConfig.Resources.ContainsKey('LoadedModuleContent')) {
                        $global:DashboardConfig.Resources['LoadedModuleContent'] = @{}
                    }
					$global:DashboardConfig.Resources.LoadedModuleContent[$ModuleName] = $moduleContent
					Write-Verbose "Read and stored original content for '$ModuleName'." -ForegroundColor DarkGray
				#endregion Step: Read and Store Original Module Content

				#region Step: Prepend No-Op Export-ModuleMember to Content
					# Define a simple Export-ModuleMember to potentially satisfy calls within the script
					# It does NOT actually export anything in the module sense.
					[string]$noOpExportFunc = @"
function Export-ModuleMember { 
	param(
	[string]`$Function='*', 
	[string]`$Variable='*', 
	[string]`$Alias='*', 
	[string]`$Cmdlet='*'
	)
}
"@
					[string]$modifiedContent = @"
$noOpExportFunc

# --- Original Module Content Start ---
$moduleContent
# --- Original Module Content End ---
"@
				#endregion Step: Prepend No-Op Export-ModuleMember to Content

				#region Step: Create ScriptBlock and Execute Globally via Invoke-Command
					Write-Verbose "Creating ScriptBlock and executing modified content globally via Invoke-Command for '$ModuleName'..." -ForegroundColor DarkGray
					[scriptblock]$scriptBlock = [ScriptBlock]::Create($modifiedContent)
					try
					{
						# Execute the script block in the current scope using Invoke-Command
						# This method allows $using: variables to resolve against the caller's scope locally
						$null = Invoke-Command -ScriptBlock $scriptBlock
						
						# Check the automatic variable $? to see if any *non-terminating* errors occurred during execution
						if (-not $?)
						{
							# Log if non-terminating errors happened, but execution still finished
							Write-Verbose "Execution of '$ModuleName' content via Invoke-Command completed, but non-terminating errors occurred within the script (check logs above)." -ForegroundColor Yellow
                            # We still return $true here as execution technically finished, but the caller (Import-DashboardModules)
                            # should perform additional checks (like Get-Command) to verify function availability.
						}
						else
						{
							# Log successful completion of the Invoke-Command call
							Write-Verbose "Successfully finished executing modified script block for '$ModuleName' via Invoke-Command." -ForegroundColor Green
						}
                        # Return true indicating Invoke-Command completed without *terminating* errors.
                        # Does NOT guarantee functions are correctly defined globally.
                        return $true 
					}
					catch # Catch only *terminating* errors from Invoke-Command itself
					{
						Write-Verbose "Terminating error occurred during Invoke-Command execution for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
						Write-Verbose "Stack Trace: $($_.ScriptStackTrace)"
						# Return false indicating a fatal error during execution.
						return $false 
					}
				#endregion Step: Create ScriptBlock and Execute Globally via Invoke-Command
			}
			catch # Catch errors during setup (read file, create scriptblock etc.)
			{
				Write-Verbose "FATAL error during reflection-style import (InvokeCommand) setup for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
				return $false # Return false indicating setup failure
			}
		}
	#endregion Function: Import-ModuleUsingReflection


	#region Function: Import-DashboardModules
		function Import-DashboardModules
		{
			<#
			.SYNOPSIS
				Loads all defined dashboard modules according to priority, dependencies, and execution context (Script vs EXE).
			
			.DESCRIPTION
				This crucial function orchestrates the loading of all modules specified in '$global:DashboardConfig.Modules'.
				It performs the following steps:
				1. Initializes tracking variables for loaded and failed modules.
				2. Determines if the script is running as a compiled EXE or a standard .ps1 script, storing the result in '$global:DashboardConfig.State.IsRunningAsExe'. This influences the import strategy.
				3. Sorts the modules based on the 'Order' property defined in their metadata to ensure correct loading sequence.
				4. Iterates through the sorted modules:
				a. Checks if all dependencies listed for the current module are already present in '$global:DashboardConfig.LoadedModules'. If not, skips the module and records the failure. Critical module dependency failures trigger a critical failure flag.
				b. Calls 'Write-Module' to ensure the module file (or resource like .dll, .ico) exists in the %APPDATA%\modules directory, handling source file paths or Base64 content, and using hash checks for efficiency. If Write-Module fails, records the failure. Critical module write failures trigger the critical failure flag.
				c. If Write-Module succeeds, adds the module name and its written path to '$global:DashboardConfig.LoadedModules'. This satisfies dependency checks for subsequent modules, including non-PSM1 files like DLLs or icons.
				d. If the module is a PowerShell module (.psm1):
				i. Attempts multiple import strategies in sequence until one succeeds:
				- Attempt 1 (Preferred): Standard `Import-Module`. If running as EXE, it first modifies the content in memory to prepend a no-op `Export-ModuleMember`, writes this to a temporary file, imports the temp file, and then deletes it. If running as a script, it imports the written module path directly. Success is verified by checking `Get-Module`.
				- Attempt 2 (Alternative): Calls `Import-ModuleUsingReflection` function (InvokeCommand in global scope). **Crucially, after this attempt returns true, this function now performs an additional verification step using `Get-Command` for key functions expected from the module.** If key functions are missing, Attempt 2 is marked as failed, and the process proceeds to Attempt 3.
				- Attempt 3 (Last Resort): Uses `Invoke-Expression` on the module content after attempting to remove/comment out `Export-ModuleMember` calls using string replacement. This attempt includes its own verification and global re-definition of functions. **(Security Risk)**
				ii. If all import attempts fail for a .psm1 module, records the failure, removes the module from '$global:DashboardConfig.LoadedModules' (as it was written but not imported), and triggers the critical failure flag if the module was critical.
				5. After processing all modules, checks the critical failure flag. If set, returns a status object indicating failure.
				6. Logs warnings for any 'Important' modules that failed and informational messages for 'Optional' module failures.
				7. If no critical failures occurred, returns a status object indicating overall success (though non-critical modules may have failed).
			
			.OUTPUTS
				[PSCustomObject] Returns an object with the following properties:
				- Status [bool]: $true if all 'Critical' modules were successfully written and (if applicable) imported without fatal errors. $false if any 'Critical' module failed or if an unhandled exception occurred.
				- LoadedModules [hashtable]: A hashtable containing {ModuleName = Path} entries for all modules that were successfully written to the AppData directory by Write-Module (includes .psm1, .dll, .ico, etc.). Note that for .psm1, inclusion here doesn't guarantee successful *import*, only successful writing/verification. Check FailedModules for import status.
				- FailedModules [hashtable]: A hashtable containing {ModuleName = ErrorMessage} entries for modules that failed during dependency check, writing (Write-Module), or importing (for .psm1 files).
				- CriticalFailure [bool]: $true if a module marked with Priority='Critical' failed at any stage (dependency, write, or import). $false otherwise.
				- Exception [string]: (Optional) Included only if an unexpected, unhandled exception occurred within the Import-DashboardModules function itself. Contains the exception message.
			
			.NOTES
				- The multi-attempt import strategy for .psm1 files adds complexity but aims for robustness, especially in potentially problematic EXE execution environments.
				- Attempt 2 now includes verification. If it passes, Attempt 3 (Invoke-Expression) is skipped.
				- The use of `Invoke-Expression` (Attempt 3) remains a significant security risk and should ideally be avoided by refactoring modules to work with Attempt 1 or a reliable Attempt 2.
				- Dependency checking relies on modules being added to `$global:DashboardConfig.LoadedModules` *after* successful execution of `Write-Module`.
				- Error reporting distinguishes between Critical, Important, and Optional module failures. Only Critical failures halt the application startup process.
			#>
			[CmdletBinding()]
			[OutputType([PSCustomObject])]
			param()
			
			Write-Verbose "Initializing module import process..." -ForegroundColor Cyan
			
			# Set up the return object structure and internal tracking variables.
			# $result - PSCustomObject to return. Start with default failure state.
			$result = [PSCustomObject]@{
				Status          = $false # Default to failure until proven successful.
				LoadedModules   = $global:DashboardConfig.LoadedModules # Use global directly, shows state during the run.
				FailedModules   = @{}    # List to store {ModuleName = ErrorMessage}.
				CriticalFailure = $false # Flag for critical module failures.
				Exception       = $null  # Placeholder for errors we didn't handle.
			}
			# $failedModules - Local reference to the list inside the result object for easier updates.
			[hashtable]$failedModules = $result.FailedModules
			
			try
			{
				#region Step: Determine Execution Context (EXE vs. Script)
					# Get info about the current running process.
					# $currentProcess - Process object for the current PowerShell instance.
					$currentProcess = Get-Process -Id $PID -ErrorAction Stop # Use Get-Process instead of GetCurrentProcess() for consistent MainModule access.

					# $processPath - Text, the full path of the program file for the current process. Use Path property.
					[string]$processPath = $currentProcess.Path # Use Path property, usually more reliable

					# Check if the process path ends with .exe and is NOT a normal PowerShell program.
					# $isRunningAsExe - Flag ($true/$false).
					[bool]$isRunningAsExe = $processPath -like '*.exe' -and ($processPath -notlike '*powershell.exe' -and $processPath -notlike '*pwsh.exe')
					
                    # Ensure State exists before setting IsRunningAsExe
                    if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('State')) {
                        $global:DashboardConfig['State'] = @{}
                    }
                    if ($global:DashboardConfig -and $global:DashboardConfig.State) {
					    $global:DashboardConfig.State.IsRunningAsExe = $isRunningAsExe # Store globally.
                    }
					Write-Verbose "  Execution context detected: $(if($isRunningAsExe){'Compiled EXE'} else {'PowerShell Script'}) (Process Path: '$processPath')" -ForegroundColor DarkGray
				#endregion Step: Determine Execution Context (EXE vs. Script)
				
				#region Step: Sort Modules by Defined 'Order' Property
					Write-Verbose "  Sorting modules based on 'Order' property..." -ForegroundColor DarkGray
					# $sortedModules - A list of module entries (Key/Value pairs) sorted by the 'Order' value in the module's info.
					# Need to handle errors if module config is messed up.
					$sortedModules = $global:DashboardConfig.Modules.GetEnumerator() |
					Where-Object {
						# Basic check: Make sure key exists and value is a hashtable with an 'Order' property.
						$_.Value -is [hashtable] -and $_.Value.ContainsKey('Order') -and $_.Value.Order -is [int]
					} |
					Sort-Object { $_.Value.Order } -ErrorAction SilentlyContinue # Sort based on the number 'Order' value.
					
					if (-not $sortedModules -or $sortedModules.Count -ne $global:DashboardConfig.Modules.Count)
					{
						# Check if sorting failed or if some modules were skipped due to bad structure.
						$invalidModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { -not ($_.Value -is [hashtable] -and $_.Value.ContainsKey('Order') -and $_.Value.Order -is [int]) }
						$errorMessage = "  Failed to sort modules or found invalid module configurations. Check structure in `$global:DashboardConfig.Modules."
						if ($invalidModules)
						{
							$errorMessage += " Invalid modules: $($invalidModules.Key -join ', ')"
						}
						Write-Verbose $errorMessage -ForegroundColor Red
						$result.Status = $false
						$result.CriticalFailure = $true # Treat sorting/config errors as critical.
						$failedModules['Module Sorting/Validation'] = $errorMessage
						return $result # Return failure right away.
					}
					Write-Verbose "  Processing $($sortedModules.Count) modules in defined order." -ForegroundColor DarkGray
				#endregion Step: Sort Modules by Defined 'Order' Property
				
				#region Step: Process Each Module in Sorted Order
					foreach ($entry in $sortedModules)
					{
						# $moduleName - Text, the key/filename of the module (e.g., 'ui.psm1').
						[string]$moduleName = $entry.Key
						# $moduleInfo - Hashtable holding info for this module (Priority, Order, Dependencies, FilePath/Base64Content).
						$moduleInfo = $entry.Value # Already checked as a hashtable during sorting.
						
						Write-Verbose "Processing Module: '$moduleName' (Priority: $($moduleInfo.Priority), Order: $($moduleInfo.Order))" -ForegroundColor Cyan
						
						#region SubStep: Check Dependencies
							Write-Verbose "- Checking dependencies..." -ForegroundColor DarkGray
							# $dependenciesMet - Flag ($true/$false), assume true until a missing dependency found.
							[bool]$dependenciesMet = $true
							# Check if Dependencies key exists, is an array, and has items.
							if ($moduleInfo.Dependencies -and $moduleInfo.Dependencies -is [array] -and $moduleInfo.Dependencies.Count -gt 0)
							{
								Write-Verbose "  - Required: $($moduleInfo.Dependencies -join ', ')" -ForegroundColor DarkGray
								foreach ($dependency in $moduleInfo.Dependencies)
								{
									# Check if the dependency is a key in the *global* loaded modules list.
									if (-not $global:DashboardConfig.LoadedModules.ContainsKey($dependency))
									{
										$errorMessage = "- Dependency NOT MET: Module '$dependency' must be loaded before '$moduleName'."
										Write-Verbose "- $errorMessage" -ForegroundColor Yellow
										$failedModules[$moduleName] = $errorMessage
										$dependenciesMet = $false
										# Check if this failure is critical.
										if ($moduleInfo.Priority -eq 'Critical')
										{
											Write-Verbose "- CRITICAL FAILURE: Critical module '$moduleName' cannot load due to missing dependency '$dependency'." -ForegroundColor Red
											$result.CriticalFailure = $true
										}
										break # No need to check more dependencies for this module.
									}
									else
									{
										Write-Verbose "  - Dependency satisfied: '$dependency' is loaded." -ForegroundColor DarkGray
									}
								}
							}
							else
							{
								Write-Verbose "  - No dependencies listed for '$moduleName'." -ForegroundColor DarkGray
							}
							
							# If dependencies aren't met, skip the rest of this module.
							if (-not $dependenciesMet)
							{
								continue
							} # Go to the next module in the loop.
						
						#endregion SubStep: Check Dependencies
						
						#region SubStep: Write Module to AppData Directory (Using Write-Module)
							# $modulePath - Text, path where module was written/checked. $null on failure.
							[string]$modulePath = $null
							Write-Verbose "- Ensuring module file exists in AppData via Write-Module for '$moduleName'..." -ForegroundColor DarkGray
							
							# Call Write-Module, giving inputs based on module's config (FilePath or Base64Content).
							try
							{
								if ($moduleInfo.ContainsKey('FilePath'))
								{
									[string]$sourceFilePath = $moduleInfo.FilePath
									# --- Add check for source file path ---
									if (-not (Test-Path $sourceFilePath -PathType Leaf)) {
										throw "Source FilePath specified in config does not exist or is not a file: '$sourceFilePath'"
									}
									Write-Verbose "Calling Write-Module with source FilePath: '$sourceFilePath'" -ForegroundColor Cyan
									$modulePath = Write-Module -ModuleName $moduleName -Content $sourceFilePath -ErrorAction Stop # Use Stop to catch errors here.
								}
								elseif ($moduleInfo.ContainsKey('Base64Content'))
								{
									[string]$base64Content = $moduleInfo.Base64Content
									Write-Verbose "Calling Write-Module with Base64Content (Length: $($base64Content.Length))" -ForegroundColor Cyan
									# Make sure content isn't null/empty before passing
									if ([string]::IsNullOrEmpty($base64Content))
									{
										throw "Base64Content for module '$moduleName' is empty."
									}
									$modulePath = Write-Module -ModuleName $moduleName -ContentBase64 $base64Content -ErrorAction Stop
								}
								else
								{
									# Shouldn't get here if sorting check worked.
									throw "Invalid module configuration format for '$moduleName' - missing FilePath or Base64Content."
								}
									
								# Check if Write-Module returned a valid path.
								if ([string]::IsNullOrEmpty($modulePath))
								{
									# Write-Module should ideally error out on failure with ErrorAction Stop, but double-check.
									throw "Write-Module returned null or empty path for '$moduleName', indicating write failure."
								}
									
								Write-Verbose "- [OK] Module file ready/verified: '$modulePath'" -ForegroundColor Green
								# Add/Update path in global loaded modules list. Happens for ALL written files (.psm1, .dll, .ico).
								# This is key for checking dependencies of non-PSM1 files.
                                # Ensure LoadedModules hashtable exists
                                if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('LoadedModules')) {
                                    $global:DashboardConfig['LoadedModules'] = @{}
                                }
                                if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules) {
								    $global:DashboardConfig.LoadedModules[$moduleName] = $modulePath
                                }
									
							}
							catch
							{
								# Catch errors from Write-Module call or the code block above.
								$errorMessage = "- Failed to write or verify module file for '$moduleName'. Error: $($_.Exception.Message)"
								Write-Verbose "- $errorMessage" -ForegroundColor Red
								$failedModules[$moduleName] = $errorMessage
								# Check if this failure is critical.
								if ($moduleInfo.Priority -eq 'Critical')
								{
									Write-Verbose "- CRITICAL FAILURE: Failed to write critical module '$moduleName'." -ForegroundColor Red
									$result.CriticalFailure = $true
								}
								continue # Go to the next module.
							}
						#endregion SubStep: Write Module to AppData Directory (Using Write-Module)
							
						#region SubStep: Import PowerShell Modules (.psm1)
							# Only try PowerShell import steps if the module is a .psm1 file.
							if ($moduleName -like '*.psm1')
							{
								Write-Verbose "Attempting to import PowerShell module '$moduleName' from '$modulePath'..." -ForegroundColor Cyan
								# $importSuccess - Flag ($true/$false) for successful import of this specific PSM1 module.
								[bool]$importSuccess = $false
								# $importErrorDetails - Text to store failure details if all tries fail.
								[string]$importErrorDetails = 'All import attempts failed.'
								[string]$moduleBaseName = [System.IO.Path]::GetFileNameWithoutExtension($moduleName)

								# --- Import Try 1: Standard Import-Module (with EXE changes if needed) ---
								if (-not $importSuccess)
								{
									Write-Verbose "- Attempt 1: Using standard Import-Module..." -ForegroundColor Cyan
									try
									{
										# $effectiveModulePath - Path for Import-Module (might be temp path for EXE).
										[string]$effectiveModulePath = $modulePath
										# $tempModulePath - Path to temp changed file if running as EXE.
										[string]$tempModulePath = $null
											
										if ($isRunningAsExe)
										{
											Write-Verbose "  - (Running as EXE: Prepending no-op Export-ModuleMember to temporary file for import)" -ForegroundColor DarkGray
											# Create a unique temporary file path.
											$tempModulePath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), ('{0}_{1}.psm1' -f $moduleBaseName, [System.Guid]::NewGuid().ToString('N')))
											Write-Verbose "  - Temp file path: $tempModulePath" -ForegroundColor DarkGray
												
											# Read original content (already in global config or re-read to be safe).
											# $originalContent - Text, content of the module.
                                            # Ensure Resources and LoadedModuleContent exist
                                            [string]$originalContent = $null
                                            if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.LoadedModuleContent -and $global:DashboardConfig.Resources.LoadedModuleContent.ContainsKey($moduleName)) {
											    $originalContent = $global:DashboardConfig.Resources.LoadedModuleContent[$moduleName]
                                            }
											if ($null -eq $originalContent)
											{
												$originalContent = [System.IO.File]::ReadAllText($modulePath)
											} # Re-read if not found
												
											# Define the dummy function text.
											$noOpExportFunc = "function Export-ModuleMember { param([Parameter(ValueFromPipeline=`$true)][string[]]`$Function='*', [string[]]`$Variable='*', [string[]]`$Alias='*', [string[]]`$Cmdlet='*') { Write-Verbose ""Ignoring Export-ModuleMember (EXE Mode Import for '$($using:moduleName)')"" -ForegroundColor Cyan} }"
											# Add to beginning and write to temp file using UTF8 encoding.
											Set-Content -Path $tempModulePath -Value "$noOpExportFunc`n`n# --- Original module content ($moduleName) follows ---`n$originalContent" -Encoding UTF8 -Force -ErrorAction Stop
											$effectiveModulePath = $tempModulePath # Use the temp path for import.
										}
											
										# Run Import-Module. -Force re-imports if already loaded (good for dev/debug).
										Import-Module -Name $effectiveModulePath -Force -ErrorAction Stop
											
										# Check module loaded okay by using Get-Module with the base name.
										if (Get-Module -Name $moduleBaseName -ErrorAction SilentlyContinue)
										{
											$importSuccess = $true
											Write-Verbose "- [OK] Attempt 1: SUCCESS (Standard Import-Module verified for '$moduleBaseName')." -ForegroundColor Green
										}
										else
										{
											# This might happen if Import-Module finishes but the module somehow doesn't show up right.
											Write-Verbose "- Attempt 1: FAILED (Standard Import-Module) - Module '$moduleBaseName' not found via Get-Module after import call." -ForegroundColor Yellow
											$importErrorDetails = "Standard Import-Module completed but module '$moduleBaseName' could not be verified via Get-Module."
											# If import failed, make sure any existing module state is removed before trying next way.
											Remove-Module -Name $moduleBaseName -Force -ErrorAction SilentlyContinue
										}
											
									}
									catch
									{
										Write-Verbose "- Attempt 1: FAILED (Standard Import-Module Error): $($_.Exception.Message)" -ForegroundColor Yellow
										$importErrorDetails = "Standard Import-Module Error: $($_.Exception.Message)"
										# Make sure any partial/failed module state is removed.
										Remove-Module -Name $moduleBaseName -Force -ErrorAction SilentlyContinue
									}
									finally
									{
										# Clean up temp file if one was made for EXE mode.
										if ($tempModulePath -and (Test-Path $tempModulePath))
										{
											Write-Verbose "  - Cleaning up temporary file: $tempModulePath" -ForegroundColor DarkGray
											Remove-Item -Path $tempModulePath -Force -ErrorAction SilentlyContinue
										}
									}
								} # End Try 1
																	
								# --- Import Try 2: Import-ModuleUsingReflection (WITH VERIFICATION) ---
								if (-not $importSuccess)
								{
									# Check if the alternative function exists.
									if (Get-Command Import-ModuleUsingReflection -ErrorAction SilentlyContinue)
									{
										Write-Verbose "- Attempt 2: Using alternative Import-ModuleUsingReflection (InvokeCommand)..." -ForegroundColor Yellow
										try
										{
                                            # Call the reflection import function
											if (Import-ModuleUsingReflection -Path $modulePath -ModuleName $moduleName -ErrorAction Stop)
											{
                                                # --- Verification Step Added ---
                                                Write-Verbose "  - Attempt 2: InvokeCommand finished. Verifying key functions globally for '$moduleName'..." -ForegroundColor Magenta

                                                # Get the list of expected functions for this module (reuse from Attempt 3 logic)
                                                $keyFunctionsToVerify = @()
                                                if ($moduleName -eq 'ini.psm1')       { $keyFunctionsToVerify = @('Initialize-IniConfig', 'Get-IniFileContent', 'Read-Config', 'Write-Config', 'Copy-OrderedDictionary', 'LoadDefaultConfigOnError') }
                                                elseif ($moduleName -eq 'ui.psm1') { $keyFunctionsToVerify = @('Initialize-UI', 'Set-UIElement', 'Show-SettingsForm', 'Hide-SettingsForm', 'Sync-ConfigToUI', 'Sync-UIToConfig', 'Register-UIEventHandlers') }
                                                elseif ($moduleName -eq 'datagrid.psm1') { $keyFunctionsToVerify = @('Test-ValidParameters', 'Get-ProcessList', 'Remove-TerminatedProcesses', 'New-RowLookupDictionary', 'Update-ExistingRow', 'UpdateRowIndices', 'Add-NewProcessRow', 'Start-WindowStateCheck', 'Find-TargetRow', 'Clear-OldProcessCache', 'Update-DataGrid', 'Start-DataGridUpdateTimer' ) }
                                                elseif ($moduleName -eq 'launch.psm1')   { $keyFunctionsToVerify = @('Start-ClientLaunch', 'Stop-ClientLaunch') }
                                                elseif ($moduleName -eq 'login.psm1')    { $keyFunctionsToVerify = @('Restore-Window', 'Set-WindowForeground', 'Test-UserMouseIntervention', 'Wait-ForResponsive', 'Wait-ForFileAccess', 'Write-LogWithRetry', 'Invoke-MouseClick', 'Invoke-KeyPress', 'LoginSelectedRow') }
                                                elseif ($moduleName -eq 'ftool.psm1')    { $keyFunctionsToVerify = @('LoadFtoolSettings', 'FindOrCreateProfile', 'InitializeExtensionTracking', 'GetNextExtensionNumber', 'FindExtensionKeyByControl', 'LoadExtensionSettings', 'UpdateSettings', 'CreatePositionTimer', 'RepositionExtensions', 'CreateSpammerTimer', 'ToggleButtonState', 'CheckRateLimit', 'AddFormCleanupHandler', 'CleanupInstanceResources', 'Stop-FtoolForm', 'RemoveExtension', 'FtoolSelectedRow', 'CreateFtoolForm', 'AddFtoolEventHandlers', 'CreateExtensionPanel', 'AddExtensionEventHandlers') }
                                                
                                                [bool]$attempt2VerificationPassed = $true # Assume success until proven otherwise
                                                [string]$missingFunction = $null

                                                if ($keyFunctionsToVerify.Count -gt 0) {
                                                    foreach ($funcName in $keyFunctionsToVerify) {
                                                        if (-not (Get-Command -Name $funcName -CommandType Function -ErrorAction SilentlyContinue)) {
                                                            $attempt2VerificationPassed = $false
                                                            $missingFunction = $funcName
                                                            Write-Verbose "  - Attempt 2: VERIFICATION FAILED. Function '$funcName' not found globally after InvokeCommand." -ForegroundColor Red
                                                            $importErrorDetails = "Attempt 2 (InvokeCommand) completed but verification failed: Function '$funcName' not found globally."
                                                            break # Stop checking if one is missing
                                                        }
                                                    }
                                                } else {
                                                    Write-Verbose "  - Attempt 2: No specific key functions listed for verification for '$moduleName'. Assuming success based on InvokeCommand completion." -ForegroundColor DarkGray
                                                    # If no functions to verify, trust the $true return from Import-ModuleUsingReflection
                                                    $attempt2VerificationPassed = $true 
                                                }

                                                # Set final import success based on verification
                                                if ($attempt2VerificationPassed) {
                                                    Write-Verbose "- [OK] Attempt 2: SUCCESS (InvokeCommand completed AND key functions verified for '$moduleName')." -ForegroundColor Green
													$importSuccess = $true
                                                } else {
                                                    # Failure already logged above
                                                    $importSuccess = $false
                                                }
                                                # --- End Verification Step ---
											}
											else # Import-ModuleUsingReflection returned false (fatal error during its execution)
											{
												Write-Verbose "- Attempt 2: FAILED (Import-ModuleUsingReflection returned false)." -ForegroundColor Yellow
												$importErrorDetails = 'Import-ModuleUsingReflection returned false (fatal execution error).'
                                                $importSuccess = $false # Ensure flag is false
											}
										}
										catch # Catch errors *calling* Import-ModuleUsingReflection
										{
											Write-Verbose "- Attempt 2: FAILED (Error calling Import-ModuleUsingReflection): $($_.Exception.Message)" -ForegroundColor Yellow
											$importErrorDetails = "Error calling Import-ModuleUsingReflection: $($_.Exception.Message)"
                                            $importSuccess = $false # Ensure flag is false
										}
									}
									else # Import-ModuleUsingReflection command not found
									{
										Write-Verbose "- Attempt 2: SKIPPED (Import-ModuleUsingReflection function not found)." -ForegroundColor Yellow
									}
								} # End Try 2
									
								# --- Import Try 3: Direct Invoke-Expression (Last Resort - Security Risk!) ---
								# This only runs if $importSuccess is still $false after Attempt 1 and Attempt 2 (including verification)
								if (-not $importSuccess)
								{
									Write-Verbose "- Attempt 3: Using LAST RESORT Invoke-Expression (Security Risk!)..." -ForegroundColor Yellow
									# === Add a variable to track functions caught just in *this* try ===
									$functionsCapturedInThisAttempt = @{}
									try
									{
										# Read module content (might be saved in global config).
                                        [string]$invokeContent = $null
                                        if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.LoadedModuleContent -and $global:DashboardConfig.Resources.LoadedModuleContent.ContainsKey($moduleName)) {
                                            $invokeContent = $global:DashboardConfig.Resources.LoadedModuleContent[$moduleName]
                                        }
										if ($null -eq $invokeContent)
										{
											$invokeContent = [System.IO.File]::ReadAllText($modulePath)
										} # Re-read if needed.

										# Basic try to disable Export-ModuleMember calls using multi-line regex replace.
										$invokeContent = $invokeContent -replace '(?m)^\s*Export-ModuleMember.*', "# Export-ModuleMember call disabled by Invoke-Expression wrapper for $moduleName"

										# Run the (maybe changed) content directly in the global space.
										Invoke-Expression -Command $invokeContent -ErrorAction Stop

										# First check if IEX finished without MAJOR error
										$iexCompletedWithoutTerminatingError = $?

										# Check key functions right away AND grab them if found
										$keyFunctionsToCapture = @()
										# --- LIST ALL EXPECTED EXPORTED/USED FUNCTIONS FOR EACH MODULE ---
										if ($moduleName -eq 'ini.psm1')       { $keyFunctionsToCapture = @('Initialize-IniConfig', 'Get-IniFileContent', 'Read-Config', 'Write-Config', 'Copy-OrderedDictionary', 'LoadDefaultConfigOnError') }
										elseif ($moduleName -eq 'ui.psm1') { $keyFunctionsToCapture = @('Initialize-UI', 'Set-UIElement', 'Show-SettingsForm', 'Hide-SettingsForm', 'Sync-ConfigToUI', 'Sync-UIToConfig', 'Register-UIEventHandlers') }
										elseif ($moduleName -eq 'datagrid.psm1') { $keyFunctionsToCapture = @('Test-ValidParameters', 'Get-ProcessList', 'Remove-TerminatedProcesses', 'New-RowLookupDictionary', 'Update-ExistingRow', 'UpdateRowIndices', 'Add-NewProcessRow', 'Start-WindowStateCheck', 'Find-TargetRow', 'Clear-OldProcessCache', 'Update-DataGrid', 'Start-DataGridUpdateTimer' ) }
										elseif ($moduleName -eq 'launch.psm1')   { $keyFunctionsToCapture = @('Start-ClientLaunch', 'Stop-ClientLaunch') }
										elseif ($moduleName -eq 'login.psm1')    { $keyFunctionsToCapture = @('Restore-Window', 'Set-WindowForeground', 'Test-UserMouseIntervention', 'Wait-ForResponsive', 'Wait-ForFileAccess', 'Write-LogWithRetry', 'Invoke-MouseClick', 'Invoke-KeyPress', 'LoginSelectedRow') }
										elseif ($moduleName -eq 'ftool.psm1')    { $keyFunctionsToCapture = @('LoadFtoolSettings', 'FindOrCreateProfile', 'InitializeExtensionTracking', 'GetNextExtensionNumber', 'FindExtensionKeyByControl', 'LoadExtensionSettings', 'UpdateSettings', 'CreatePositionTimer', 'RepositionExtensions', 'CreateSpammerTimer', 'ToggleButtonState', 'CheckRateLimit', 'AddFormCleanupHandler', 'CleanupInstanceResources', 'Stop-FtoolForm', 'RemoveExtension', 'FtoolSelectedRow', 'CreateFtoolForm', 'AddFtoolEventHandlers', 'CreateExtensionPanel', 'AddExtensionEventHandlers') }

										# Create captured functions storage if it doesn't exist
                                        if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and -not $global:DashboardConfig.Resources.ContainsKey('CapturedFunctions')) {
											$global:DashboardConfig.Resources['CapturedFunctions'] = @{}
										}

										$captureSuccess = $true # Assume capture worked at first
										$criticalFunctionMissing = $false

										if ($keyFunctionsToCapture.Count -gt 0) {
											Write-Verbose "- Attempt 3: Verifying and capturing key functions for '$moduleName' immediately after IEX..." -ForegroundColor Magenta
											foreach ($funcName in $keyFunctionsToCapture) {
												$funcInfo = Get-Command -Name $funcName -CommandType Function -ErrorAction SilentlyContinue
												if ($funcInfo) {
													$capturedScriptBlock = $funcInfo.ScriptBlock
													Write-Verbose "  - Found and capturing ScriptBlock for '$funcName'." -ForegroundColor Magenta
													# Store globally for possible later use (though direct global definition is main now)
                                                    if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.CapturedFunctions) {
													    $global:DashboardConfig.Resources.CapturedFunctions[$funcName] = $capturedScriptBlock
                                                    }
													# === Store locally for immediate global definition ===
													$functionsCapturedInThisAttempt[$funcName] = $capturedScriptBlock
												} else {
													Write-Verbose "  - WARNING: Could not find/capture function '$funcName' immediately after IEX for '$moduleName'." -ForegroundColor Yellow
													$captureSuccess = $false
													# Check if the missing function is critical FOR STARTUP
													# --- Adjusted Critical Function Check ---
													$isCriticalModule = $moduleInfo.Priority -eq 'Critical' 
													# Consider a function critical if it's in a Critical module AND in the key function list
													if ($isCriticalModule) { 
													    $criticalFunctionMissing = $true
													    $importErrorDetails += "; Critical function '$funcName' not found after IEX in Critical module '$moduleName'"
                                                        Write-Verbose "    - Missing function '$funcName' is considered critical for module '$moduleName'." -ForegroundColor Red
													} else {
                                                         $importErrorDetails += "; Non-critical function '$funcName' not found after IEX for module '$moduleName'"
                                                    }
                                                    # --- End Adjusted Critical Function Check ---
												}
											}
										}

										# Decide overall success for Try 3
										# Success means IEX didn't have non-terminating errors ($?),
										# capture succeeded, AND no *critical* functions were missing.
										if ($iexCompletedWithoutTerminatingError -and $captureSuccess -and (-not $criticalFunctionMissing)) {
											Write-Verbose "  - Attempt 3: IEX completed and key functions captured/verified for '$moduleName'." -ForegroundColor DarkGreen

											# === Define captured functions globally RIGHT AWAY ===
											Write-Verbose "  - Defining captured functions globally for '$moduleName'..." -ForegroundColor Magenta
											$definitionSuccess = $true # Track success of this small step
											foreach ($kvp in $functionsCapturedInThisAttempt.GetEnumerator()) {
												$funcNameToDefine = $kvp.Key
												$scriptBlockToDefine = $kvp.Value
												try {
													# Define in global function space
													Set-Item -Path "Function:\global:$funcNameToDefine" -Value $scriptBlockToDefine -Force -ErrorAction Stop
													Write-Verbose "    - Defined Function:\global:$funcNameToDefine" -ForegroundColor DarkMagenta
												} catch {
													Write-Verbose "    - FAILED to define Function:\global:$funcNameToDefine globally: $($_.Exception.Message)" -ForegroundColor Red
													$definitionSuccess = $false
													$importErrorDetails += "; Failed to define captured function '$funcNameToDefine' globally."
													# If defining a critical function fails, mark critical failure for the whole import process
                                                    # --- Adjusted Critical Function Check ---
                                                    if ($moduleInfo.Priority -eq 'Critical') {
														$result.CriticalFailure = $true
														Write-Verbose "    - Defining critical function '$funcNameToDefine' failed. Marking import as critical failure." -ForegroundColor Red
													}
                                                     # --- End Adjusted Critical Function Check ---
													break # Stop trying to define others for this module if one fails
												}
											}

											# Only mark the whole import successful if definitions also worked
											if ($definitionSuccess) {
												$importSuccess = $true
												Write-Verbose "- [OK] Attempt 3: SUCCESS (Invoke-Expression completed, key functions captured AND globally defined for $moduleName)." -ForegroundColor Green
											} else {
												$importSuccess = $false # Failed during definition
												Write-Verbose "- Attempt 3: FAILED during global definition phase for $moduleName." -ForegroundColor Red
											}

										} else { # IEX failed, capture failed, or critical function missing
											Write-Verbose "- Attempt 3: FAILED (IEX completed=$iexCompletedWithoutTerminatingError, CaptureSuccess=$captureSuccess, CriticalMissing=$criticalFunctionMissing) for $moduleName." -ForegroundColor Red
											if (-not $iexCompletedWithoutTerminatingError) { $importErrorDetails += "; IEX failed with non-terminating error detected by `$?."}
                                            if ($criticalFunctionMissing) { $importErrorDetails += "; Critical function missing prevented Attempt 3 success." }
                                            if (-not $captureSuccess) { $importErrorDetails += "; Function capture failed during Attempt 3." }
											$importSuccess = $false # Make sure import is marked as failed
										}
									}
									catch # Catch MAJOR errors from Invoke-Expression itself
									{
										Write-Verbose "- Attempt 3: FAILED (Invoke-Expression Error): $($_.Exception.Message)" -ForegroundColor Red
										$importErrorDetails = "Invoke-Expression Error: $($_.Exception.Message)"
										$importSuccess = $false # Make sure success is false if IEX throws major error
									}
								} # End Try 3

								# --- Final Check for PSM1 Import Success --- 
								if ($importSuccess)
								{
									Write-Verbose "- [OK] Successfully imported PSM1 module: '$moduleName'." -ForegroundColor Green
									# Module already added to $global:DashboardConfig.LoadedModules after Write-Module step.
								}
								else
								{
									$errorMessage = "All import methods FAILED for PSM1 module: '$moduleName'. Last error detail: $importErrorDetails"
									Write-Verbose "- $errorMessage" -ForegroundColor Red
									$failedModules[$moduleName] = $errorMessage
									# Critical: Remove from LoadedModules list if import failed after writing okay, as it's not really usable.
									if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules -and $global:DashboardConfig.LoadedModules.ContainsKey($moduleName))
									{
										Write-Verbose "- Removing '$moduleName' from LoadedModules list due to import failure." -ForegroundColor Yellow
										$global:DashboardConfig.LoadedModules.Remove($moduleName)
									}
									# Check if this failure is critical.
									if ($moduleInfo.Priority -eq 'Critical')
									{
										Write-Verbose "- CRITICAL FAILURE: Failed to import critical PSM1 module '$moduleName'." -ForegroundColor Red
										$result.CriticalFailure = $true
									}
								}
							}
						#endregion SubStep: Import PowerShell Modules (.psm1)
					} # End foreach ($entry in $sortedModules)
				#endregion Step: Process Each Module in Sorted Order
					
				#region Step: Final Status Check and Result Construction
					Write-Verbose "Module import check..." -ForegroundColor Cyan
						
					# Check for Critical Failures gathered during the loop.
					if ($result.CriticalFailure)
					{
						Write-Verbose "  CRITICAL FAILURE: One or more critical modules failed to load or write. Application cannot continue." -ForegroundColor Red
						# Find which critical modules exactly failed.
						$criticalModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Critical' }
						$failedCritical = $criticalModules | Where-Object { $failedModules.ContainsKey($_.Key) }
						if ($failedCritical)
						{
							Write-Verbose "  Failed critical modules: $($failedCritical.Key -join ', ')" -ForegroundColor Red
							$failedCritical | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor Red } 
						}
						$result.Status = $false # Make sure status is false.
						# Return the result object showing critical failure.
						return $result
					}
						
					# Report Important Module Failures (as Warnings).
					$importantModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Important' }
					$failedImportant = $importantModules | Where-Object { $failedModules.ContainsKey($_.Key) }
					if ($failedImportant.Count -gt 0)
					{
						Write-Verbose "  IMPORTANT module failures detected: $($failedImportant.Key -join ', '). Application may have limited functionality." -ForegroundColor Yellow
						# Log details of failures for important modules.
						$failedImportant | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor Yellow } 
					}
						
					# Report Optional Module Failures (as Info/DarkYellow).
					$optionalModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Optional' }
					$failedOptional = $optionalModules | Where-Object { $failedModules.ContainsKey($_.Key) }
					if ($failedOptional.Count -gt 0)
					{
						Write-Verbose "  Optional module failures detected: $($failedOptional.Key -join ', '). Non-essential features might be unavailable." -ForegroundColor DarkYellow
						# Log details.
						$failedOptional | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor DarkGray }
					}
						
					# If no critical failures happened, the whole process is seen as successful for startup.
                    $successCount = 0
                    if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules) {
                        $successCount = $global:DashboardConfig.LoadedModules.Count
                    }
					$failCount = $failedModules.Count
					Write-Verbose "  Module loading phase complete. Modules written/verified: $successCount. Failures (any type): $failCount." -ForegroundColor DarkGray
					if ($successCount -gt 0)
					{
						Write-Verbose "  Successfully written/verified modules: $($global:DashboardConfig.LoadedModules.Keys -join ', ')" -ForegroundColor DarkGray
					}
					if ($failCount -gt 0)
					{
						Write-Verbose "  Failed modules logged above." -ForegroundColor Yellow
					}
						
					# Set final status to true as no critical failures happened.
					$result.Status = $true
					$result.CriticalFailure = $false # Explicitly set false.
					# Return the final result object.
					return $result
				#endregion Step: Final Status Check and Result Construction
			}
			catch
			{
				# Catch surprise, unhandled errors within the main Import-DashboardModules function body.
				$errorMessage = "  FATAL UNHANDLED EXCEPTION in Import-DashboardModules: $($_.Exception.Message)"
				Write-Verbose $errorMessage -ForegroundColor Red
				Write-Verbose "  Stack trace: $($_.ScriptStackTrace)" -ForegroundColor Red
				# Fill and return the result object showing critical failure due to the error.
				$result.Status = $false
				$result.CriticalFailure = $true
				$result.Exception = $_.Exception.Message # Store error message.
				$failedModules['Unhandled Exception'] = $errorMessage # Add to failed modules list.
				return $result
			}
		}
	#endregion Function: Import-DashboardModules

#endregion Module Handling Functions
	
#region UI and Application Lifecycle Functions

	#region Function: Start-Dashboard
		function Start-Dashboard
		{
			<#
				.SYNOPSIS
					Initializes and displays the main dashboard user interface (UI) form.
				
				.DESCRIPTION
					This function orchestrates the startup of the application's graphical user interface. It performs these actions:
					1. Checks if the 'Initialize-UI' function, expected to be loaded from the 'ui.psm1' module, exists using `Get-Command`. If not found, it throws a terminating error as the UI cannot be built.
					2. Calls the `Initialize-UI` function. It assumes this function is responsible for creating all UI elements (forms, controls) and populating the '$global:DashboardConfig.UI' hashtable, including setting '$global:DashboardConfig.UI.MainForm'.
					3. Checks the return value of `Initialize-UI`. If it returns $false or null (interpreted as failure), it throws a terminating error.
					4. Verifies that '$global:DashboardConfig.UI.MainForm' exists and is a valid '[System.Windows.Forms.Form]' object after `Initialize-UI` returns successfully. If not, it throws a terminating error.
					5. If the MainForm is valid, it calls the `.Show()` method to make the main window visible and `.Activate()` to bring it to the foreground.
					6. Sets the global state flag '$global:DashboardConfig.State.UIInitialized' to $true.
				
				.OUTPUTS
					[bool] Returns $true if the UI is successfully initialized, the main form is found, shown, and activated.
					Returns $false if any step fails (missing function, initialization failure, missing main form), typically after throwing an error that gets caught by the main execution block.
				
				.NOTES
					- This function has a strong dependency on the 'ui.psm1' module being loaded correctly and functioning as expected (defining `Initialize-UI` and creating `MainForm`).
					- Errors encountered during this process are considered fatal for the application and are thrown to be caught by the main script's try/catch block, which should then display an error using `Show-ErrorDialog`.
			#>
			[CmdletBinding()]
			[OutputType([bool])]
			param()

			Write-Verbose "Starting Dashboard User Interface..." -ForegroundColor Cyan
			try
			{
				#region Step: Check for and Call Initialize-UI Function
					Write-Verbose "- Checking for required Initialize-UI function (from ui.psm1)..." -ForegroundColor DarkGray
					# Check that the Initialize-UI command (function) is available now.
					if (-not (Get-Command Initialize-UI -ErrorAction SilentlyContinue))
					{
						# Throw a major error if the function is missing.
						throw "FATAL: Initialize-UI function not found. Ensure 'ui.psm1' module loaded correctly and defines this function."
					}

					Write-Verbose "- Calling Initialize-UI function..." -ForegroundColor DarkGray
					# Run the UI setup function. Save its return value.
					Initialize-UI # Call directly now

					Write-Verbose "- [OK] Initialize-UI function executed successfully." -ForegroundColor Green
				#endregion Step: Check for and Call Initialize-UI Function

				#region Step: Verify, Show, and Activate Main Form
					Write-Verbose "- Verifying presence and type of UI.MainForm object..." -ForegroundColor DarkGray
					# Check if MainForm property exists in UI config and is a valid Form object.
					if ($null -eq $global:DashboardConfig.UI.MainForm -or -not ($global:DashboardConfig.UI.MainForm -is [System.Windows.Forms.Form]))
					{
						# Throw a major error if main form is missing or invalid after successful Initialize-UI call.
						throw 'FATAL: UI.MainForm object not found or is not a valid System.Windows.Forms.Form in $global:DashboardConfig after successful Initialize-UI call.'
					}

					Write-Verbose "- [OK] UI.MainForm found and is valid. Showing and activating window..." -ForegroundColor Green
					# Make the main app window visible.
					$global:DashboardConfig.UI.MainForm.Show()
					# Bring the main window to the front and focus it.
					$global:DashboardConfig.UI.MainForm.Activate()

					# Update the global state flag to show the UI is now set up and running.
					$global:DashboardConfig.State.UIInitialized = $true
					Write-Verbose "  Dashboard UI started and activated successfully." -ForegroundColor Green
				#endregion Step: Verify, Show, and Activate Main Form

				# Return true showing successful UI startup.
				return $true
			}
			catch
			{
				$errorMsg = "  FATAL: Failed to start dashboard UI. Error: $($_.Exception.Message)"
				Write-Verbose $errorMsg -ForegroundColor Red
				# Throw the error again to send it up to the main run block's catch.
				throw $_ # Use throw $_ to keep original error details.
			}
		}
	#endregion Function: Start-Dashboard
		
	#region Function: Start-MessageLoop
		function Start-MessageLoop
		{
			<#
				.SYNOPSIS
					Runs the Windows Forms message loop to keep the UI responsive until the main form is closed.
				
				.DESCRIPTION
					This function implements the core message processing loop required for a Windows Forms application. It keeps the UI alive and responsive to user interactions, window events, and timer ticks.
					
					The function first performs pre-checks:
					1. Verifies that the UI has been initialized (`$global:DashboardConfig.State.UIInitialized`).
					2. Verifies that the main form object (`$global:DashboardConfig.UI.MainForm`) exists, is a valid Form, and is not already disposed.
					
					If checks pass, it determines the loop method:
					- Preferred Native Loop: If the 'Native' class (expected from 'classes.psm1') and its required P/Invoke methods (`AsyncExecution`, `PeekMessage`, `TranslateMessage`, `DispatchMessage`) are detected, it uses an efficient loop based on `MsgWaitForMultipleObjectsEx` (wrapped in `AsyncExecution`). This waits for messages or a timeout, processing messages only when they arrive, thus minimizing CPU usage when idle.
					- Fallback DoEvents Loop: If the Native methods are unavailable, it falls back to a loop using `[System.Windows.Forms.Application]::DoEvents()`. This processes all pending messages but does not wait efficiently, potentially consuming more CPU. A short `Start-Sleep` (e.g., 20ms) is added within this loop to prevent 100% CPU usage.
					
					The chosen loop runs continuously as long as the main form (`$global:DashboardConfig.UI.MainForm`) is visible and not disposed.
				
				.OUTPUTS
					[void] This function runs synchronously and blocks execution until the main UI form is closed or disposed. It does not return a value.
				
				.NOTES
					- Requires the main UI form (`$global:DashboardConfig.UI.MainForm`) to be successfully initialized and shown by `Start-Dashboard` before being called.
					- The efficiency of the UI heavily depends on the availability and correctness of the 'Native' class methods from 'classes.psm1'. The `DoEvents` fallback is less performant.
					- Includes basic error handling within the loop itself and a final `DoEvents` fallback attempt if the primary loop method encounters an unhandled exception.
					- Logs the chosen loop method and status messages during execution and upon exit.
				#>
			[CmdletBinding()]
			[OutputType([void])]
			param()
				
			Write-Verbose "`Starting UI message loop..." -ForegroundColor Cyan
				
			#region Step: Pre-Loop Checks for UI State and Main Form Validity
				Write-Verbose "  Checking UI state before starting message loop..." -ForegroundColor DarkGray
				# Check if UI setup flag is set.
				if (-not $global:DashboardConfig.State.UIInitialized)
				{
					Write-Verbose "  UI not marked as initialized ($global:DashboardConfig.State.UIInitialized is $false). Skipping message loop." -ForegroundColor Yellow
					return # Exit function if UI isn't ready.
				}
				# Check if MainForm object exists and is a valid, non-disposed Form.
				$mainForm = $global:DashboardConfig.UI.MainForm # Local variable to make things easier.
				if ($null -eq $mainForm -or -not ($mainForm -is [System.Windows.Forms.Form]))
				{
					Write-Verbose "  MainForm object ($global:DashboardConfig.UI.MainForm) is missing or not a valid Form object. Cannot start message loop." -ForegroundColor Yellow
					return # Exit function if MainForm is invalid.
				}
				if ($mainForm.IsDisposed)
				{
					Write-Verbose "  MainForm ($global:DashboardConfig.UI.MainForm) is already disposed. Cannot start message loop." -ForegroundColor Yellow
					return # Exit function if MainForm is already disposed (cleaned up).
				}
				Write-Verbose "  Pre-loop checks passed. MainForm is valid and UI is initialized." -ForegroundColor Green
			#endregion Step: Pre-Loop Checks for UI State and Main Form Validity
				
			# $loopMethod - Text showing which loop type is used ('Native' or 'DoEvents').
			[string]$loopMethod = 'Unknown'
			try
			{
				#region Step: Determine Loop Method (Efficient Native P/Invoke vs. Fallback DoEvents)
					# $useNativeLoop - Flag ($true/$false), $true if Native methods seem available.
					[bool]$useNativeLoop = $false
					Write-Verbose "Detecting availability of Native methods for efficient loop..." -ForegroundColor Cyan
					try
					{
						# Check if the 'Native' type exists and has the key methods we need.
						# Use GetType() which errors if type not found, unlike PSTypeName.
						$nativeType = [type]'Native' # Errors if 'Native' class not loaded.
						if (($nativeType.GetMethod('AsyncExecution')) -and
							($nativeType.GetMethod('PeekMessage')) -and
							($nativeType.GetMethod('TranslateMessage')) -and
							($nativeType.GetMethod('DispatchMessage')))
						{
							Write-Verbose "- [OK] Native P/Invoke methods found (requires 'classes.psm1'). Using efficient message loop." -ForegroundColor Green
							$useNativeLoop = $true
							$loopMethod = 'Native'
						}
						else
						{
							Write-Verbose "- Native class found, but required methods (AsyncExecution, PeekMessage, etc.) are missing. Falling back to DoEvents loop." -ForegroundColor Yellow
							$loopMethod = 'DoEvents'
						}
					}
					catch [System.Management.Automation.RuntimeException]
					{
						# Catch specific error for type not found.
						Write-Verbose "- Native class not found. Falling back to less efficient Application.DoEvents() loop." -ForegroundColor Red
						$loopMethod = 'DoEvents'
					}
					catch
					{
						Write-Verbose "- Error checking for Native methods: $($_.Exception.Message). Falling back to DoEvents loop." -ForegroundColor Red
						$loopMethod = 'DoEvents'
					}
						
					# Make sure WinForms part is loaded if using DoEvents backup.
					if (-not $useNativeLoop)
					{
						Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue # Load if not already loaded.
					}
				#endregion Step: Determine Loop Method (Efficient Native P/Invoke vs. Fallback DoEvents)
					
				#region Step: Run the Chosen Message Loop
					Write-Verbose "Entering message loop (Method: $loopMethod). Loop runs until main form is closed..." -ForegroundColor Cyan
					# Loop keeps going as long as MainForm is valid, visible, and not disposed.
					# Re-check $mainForm validity inside the loop to be safe.
					while ($mainForm -and $mainForm.Visible -and -not $mainForm.IsDisposed)
					{
						if ($useNativeLoop)
						{
							# --- Efficient Native P/Invoke Loop ---
							try
							{
								# Wait efficiently for window messages (QS_ALLINPUT) or a timeout (like 50ms).
								# $result - Return value from AsyncExecution (based on MsgWaitForMultipleObjectsEx).
								# WAIT_OBJECT_0 (0) means a message arrived. WAIT_TIMEOUT (0x102) means timeout.
								$result = [Native]::AsyncExecution(0, [IntPtr[]]@(), $false, 50, [Native]::QS_ALLINPUT) # Timeout 50ms
									
								# If a message arrived (result is not WAIT_TIMEOUT).
								if ($result -ne 0x102) # Compare with decimal value of WAIT_TIMEOUT.
								{
									# Handle all waiting messages currently in the queue.
									# $msg - Structure to hold message details (Native+MSG).
									$msg = New-Object Native+MSG
									# PeekMessage with PM_REMOVE gets and removes message. Loop while messages exist.
									while ([Native]::PeekMessage([ref]$msg, [IntPtr]::Zero, 0, 0, [Native]::PM_REMOVE))
									{
										# Turn virtual-key messages into character messages.
										$null = [Native]::TranslateMessage([ref]$msg)
										# Send the message to the right window handler.
										$null = [Native]::DispatchMessage([ref]$msg)
									}
								}
								# If it was a timeout ($result -eq 0x102), the loop just continues and waits again. Nothing needed.
							}
							catch
							{
								# Catch errors *inside* the native loop run (e.g., P/Invoke call failed).
								Write-Verbose "  Error during Native message loop iteration: $($_.Exception.Message). Attempting to fall back to DoEvents..." -ForegroundColor Red
								$useNativeLoop = $false # Switch to DoEvents for the next loops.
								$loopMethod = 'DoEvents_Fallback'
								Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue # Make sure assembly loaded for backup.
								Start-Sleep -Milliseconds 50 # Add a small pause before maybe starting DoEvents loop next time.
							}
						}
						else # Use Backup DoEvents Loop
						{
							# --- Backup Application.DoEvents() Loop ---
							try
							{
								# Handle all messages currently in the queue. Less efficient as it does everything even if idle.
								[System.Windows.Forms.Application]::DoEvents()
								# Add a small pause to stop this backup loop from using 100% CPU if no messages.
								Start-Sleep -Milliseconds 20 # 20ms pause balances responsiveness and CPU use.
							}
							catch
							{
								# Catch errors during DoEvents() or Start-Sleep.
								Write-Verbose "  Error during DoEvents fallback loop iteration: $($_.Exception.Message). Loop may become unresponsive." -ForegroundColor Red
								# Maybe add longer pause or break if errors keep happening? For now, just log and continue loop.
								Start-Sleep -Milliseconds 100
							}
						}
					} # End while ($mainForm.Visible -and -not $mainForm.IsDisposed)
				#endregion Step: Run the Chosen Message Loop
			}
			catch
			{
				# Catch surprise errors setting up or during the main loop logic (outside the inner try/catch).
				Write-Verbose "  FATAL Error occurred within the UI message loop setup or main structure: $($_.Exception.Message)" -ForegroundColor Red
				# Try a very basic DoEvents loop as a last resort if the main loop structure failed.
				Write-Verbose "  Attempting basic DoEvents fallback loop after critical error..." -ForegroundColor Cyan
				try
				{
					if ($mainForm -and -not $mainForm.IsDisposed)
					{
						Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue 
					}
						
					while ($mainForm -and $mainForm.Visible -and -not $mainForm.IsDisposed)
					{
						[System.Windows.Forms.Application]::DoEvents()
						Start-Sleep -Milliseconds 50 # Slightly longer pause in emergency backup.
					}
				}
				catch
				{
					Write-Verbose "  Emergency fallback DoEvents loop also failed: $($_.Exception.Message)" -ForegroundColor Red
					# At this point, the UI is probably frozen or gone.
				}
			}
			finally
			{
				# This block runs when the message loop stops, either normally (window closed) or due to an error caught above.
				# Log the final state of the main form. Use $? to check if $mainForm variable exists before using its properties.
				if ($mainForm -and ($mainForm -is [System.Windows.Forms.Form]))
				{
					Write-Verbose "UI message loop exited (Method: $loopMethod). Final Form State -> Visible: $($mainForm.Visible), Disposed: $($mainForm.IsDisposed)" -ForegroundColor Cyan
				}
				else
				{
					Write-Verbose "UI message loop exited (Method: $loopMethod). MainForm object appears invalid or null upon exit." -ForegroundColor Yellow
				}
				# Mark UI as not initialized anymore *after* the loop finishes.
				$global:DashboardConfig.State.UIInitialized = $false
			}
		}
	#endregion Function: Start-MessageLoop
		
	#region Function: Stop-Dashboard
		function Stop-Dashboard
		{
			<#
				.SYNOPSIS
					Performs comprehensive cleanup of application resources during shutdown.
				
				.DESCRIPTION
					This function is responsible for gracefully stopping and releasing all resources allocated by the application
					and its modules. It's designed to be called within the main script's `finally` block to ensure cleanup
					happens reliably, even if errors occurred during execution.
					
					Cleanup is performed in a specific order to minimize dependency issues and errors:
					1.  **Ftool Forms:** If the optional 'ftool.psm1' module was loaded and created forms (tracked in `$global:DashboardConfig.Resources.FtoolForms`), it attempts to close and dispose of them. It preferably calls a `Stop-FtoolForm` function (if defined by ftool.psm1) for module-specific cleanup before falling back to basic `.Close()` and `.Dispose()` calls.
					2.  **Timers:** Stops and disposes of all `System.Windows.Forms.Timer` objects registered in `$global:DashboardConfig.Resources.Timers`. Handles nested collections if necessary.
					3.  **Main UI Form:** Disposes of the main application window (`$global:DashboardConfig.UI.MainForm`) if it exists and isn't already disposed.
					4.  **Runspaces & Module Cleanup:**
					*   Disposes of known background runspaces (e.g., `$global:DashboardConfig.Resources.LaunchResources` if used by 'launch.psm1').
					*   Calls specific cleanup functions (e.g., `Stop-ClientLaunch`, `CleanupLogin`, `CleanupFtool`) if they exist (assumed to be defined by the respective modules). These functions are expected to handle module-specific resource release (e.g., closing handles, stopping threads).
					5.  **Application State:** Resets global state flags (`UIInitialized`, `LoginActive`, `LaunchActive`) to $false.
				
				.OUTPUTS
					[bool] Returns $true if all cleanup steps attempted completed without throwing *new* errors during the cleanup process itself.
					Returns $false if any cleanup step encountered an error (logged as a warning). The function attempts to continue subsequent cleanup steps even if one fails.
				
				.NOTES
					- Uses individual `try/catch` blocks around major cleanup sections (Ftool forms, Timers, Main Form, Runspaces/Modules) to ensure robustness. An error in one section should not prevent others from running.
					- Errors encountered *during cleanup* are logged using `Write-Verbose` and cause the function to return $false, but they do not typically halt the entire cleanup process.
					- Relies on modules potentially defining specific cleanup functions (`Cleanup<ModuleName>`) or resources (like `$global:DashboardConfig.Resources.LaunchResources`). These need to be implemented correctly within the modules themselves.
					- The order of operations is important (e.g., dispose child forms before main form, stop timers before disposing forms they might interact with).
				#>
			[CmdletBinding()]
			[OutputType([bool])]
			param()
				
			Write-Verbose "Stopping Dashboard and Cleaning Up Application Resources..." -ForegroundColor Cyan
			# $cleanupOverallSuccess - Flag ($true/$false) to track if *any* cleanup step had an error. Default to true.
			[bool]$cleanupOverallSuccess = $true

			#region Step 0: Clean Up launch recources
			Write-Verbose "Step 0: Cleaning up Launch..." -ForegroundColor Cyan
			Stop-ClientLaunch
			#endregion Step 0: Clean Up launch recources
				
			#region Step 1: Clean Up Ftool Forms (if Ftool module was loaded/used)
				Write-Verbose "Step 1: Cleaning up Ftool forms..." -ForegroundColor Cyan
				try
				{
					# Check if the FtoolForms list exists and has items. Use .PSObject.Properties to check safely.
					$ftoolForms = $global:DashboardConfig.Resources.FtoolForms
					if ($ftoolForms -and $ftoolForms.Count -gt 0)
					{
						# Check if the special cleanup function from ftool.psm1 exists.
						# $stopFtoolFormCmd - FunctionInfo object or null.
						$stopFtoolFormCmd = Get-Command -Name Stop-FtoolForm -ErrorAction SilentlyContinue
						# Make a copy of the keys to loop over, as we change the list during the loop.
						# $formKeys - List of text (form names).
						[string[]]$formKeys = @($ftoolForms.Keys)
						Write-Verbose "- Found $($formKeys.Count) Ftool form(s) registered. Attempting cleanup..." -ForegroundColor DarkGray
							
						foreach ($key in $formKeys)
						{
							# Get the form object safely.
							# $form - The Ftool form object, maybe null or disposed.
							$form = $ftoolForms[$key]
							# Check if it's a valid, non-disposed Windows Form.
							if ($form -and $form -is [System.Windows.Forms.Form] -and -not $form.IsDisposed)
							{
								$formText = try
								{
									$form.Text 
								}
								catch
								{
									'(Error getting text)' 
								} # Get form text safely.
								Write-Verbose "  - Stopping Ftool form '$formText' (Key: $key)." -ForegroundColor Cyan
								try
								{
									# Use the module's special cleanup function if available.
									if ($stopFtoolFormCmd)
									{
										Write-Verbose "  - Using Stop-FtoolForm function..." -ForegroundColor Cyan
										Stop-FtoolForm -Form $form -ErrorAction Stop # Call specific cleanup.
									}
									else # Basic backup cleanup.
									{
										Write-Verbose "  - Stop-FtoolForm command not found. Performing basic Close() for form '$formText'." -ForegroundColor Yellow
										# Ask the form to close nicely. This triggers FormClosing/FormClosed events.
										$form.Close()
										# Give a tiny moment for events to process, maybe not needed but can help sometimes.
										Start-Sleep -Milliseconds 20
									}
								}
								catch # Catch errors specifically from Stop-FtoolForm or Close().
								{
									Write-Verbose "  - Error during Stop-FtoolForm or Close() for form '$formText': $($_.Exception.Message)" -ForegroundColor Red
									# Mark overall cleanup as possibly failed, but continue to make sure Dispose() is called.
									$cleanupOverallSuccess = $false
								}
								finally # Always try to dispose the form directly, whether Close() worked or not.
								{
									Write-Verbose "  - Ensuring Dispose() is called for form '$formText'." -ForegroundColor Cyan
									try
									{
										if (-not $form.IsDisposed)
										{
											$form.Dispose() 
										}
									}
									catch
									{
										Write-Verbose "  - Error during final Dispose() for form '$formText': $($_.Exception.Message)" -ForegroundColor Red
										$cleanupOverallSuccess = $false
									}
								}
							}
							elseif ($form -and $form -is [System.Windows.Forms.Form] -and $form.IsDisposed)
							{
								Write-Verbose "  - Ftool form with Key '$key' was already disposed." -ForegroundColor DarkGray
							}
							else
							{
								Write-Verbose "  - Ftool form entry with Key '$key' is null or not a valid Form object." -ForegroundColor Yellow
								$cleanupOverallSuccess = $false
							}
								
							# Remove the entry from the tracking list after trying cleanup.
							$ftoolForms.Remove($key) | Out-Null
						} # End foreach form key
						Write-Verbose "- Finished Ftool form cleanup." -ForegroundColor Green
					}
					else
					{
						Write-Verbose "  No active Ftool forms found in configuration to clean up." -ForegroundColor DarkGray 
					}
				}
				catch # Catch errors in the Ftool cleanup part setup (e.g., accessing FtoolForms).
				{
					Write-Verbose "Error during Ftool form cleanup phase setup: $($_.Exception.Message)" -ForegroundColor Red
					$cleanupOverallSuccess = $false
				}
			#endregion Step 1: Clean Up Ftool Forms (if Ftool module was loaded/used)
				
			#region Step 2: Clean Up Application Timers
				Write-Verbose "Step 2: Cleaning up application timers..." -ForegroundColor Cyan
				try
				{
					# Check if the Timers list exists and has items.
					$timersCollection = $global:DashboardConfig.Resources.Timers
					if ($timersCollection -and $timersCollection.Count -gt 0)
					{
						Write-Verbose "- Found $($timersCollection.Count) timer registration(s). Stopping and disposing..." -ForegroundColor Cyan
						# Use a temporary list to gather all unique timer objects, handling possible nesting or duplicates.
						# $uniqueTimers - List of separate timer objects.
						[System.Collections.Generic.List[System.Windows.Forms.Timer]]$uniqueTimers = New-Object System.Collections.Generic.List[System.Windows.Forms.Timer]
							
						# Go through the registered items in the Timers list.
						# Items could be single timers, or nested lists (like hashtables) of timers.
						foreach ($item in $timersCollection.Values)
						{
							if ($item -is [System.Windows.Forms.Timer])
							{
								if (-not $uniqueTimers.Contains($item))
								{
									$uniqueTimers.Add($item) 
								}
							}
							elseif ($item -is [System.Collections.IDictionary])
							{
								# If item is another list, go through its values.
								$item.Values | Where-Object { $_ -is [System.Windows.Forms.Timer] } | ForEach-Object {
									if (-not $uniqueTimers.Contains($_))
									{
										$uniqueTimers.Add($_) 
									}
								}
							}
							# Add checks for other possible list types if used (like ArrayList).
						}
						Write-Verbose "- Found $($uniqueTimers.Count) unique System.Windows.Forms.Timer object(s) to dispose." -ForegroundColor Cyan
							
						# Go through the unique timer objects.
						foreach ($timer in $uniqueTimers)
						{
							try
							{
								# Check if timer object is valid and not already disposed.
								if ($timer -and -not $timer.IsDisposed) # Check IsDisposed before accessing properties like Enabled.
								{
									Write-Verbose "  - Disposing timer (Was Enabled: $($timer.Enabled))." -ForegroundColor Green
									# Stop the timer first if it's running now.
									if ($timer.Enabled)
									{
										$timer.Stop() 
									}
									# Dispose of the timer object to free up resources.
									$timer.Dispose()
								}
								else
								{
									Write-Verbose "  - Skipping already disposed or invalid timer object." -ForegroundColor DarkGray
								}
							}
							catch # Catch errors during individual timer Stop() or Dispose().
							{
								Write-Verbose "  - Error stopping or disposing a timer: $($_.Exception.Message)" -ForegroundColor Red
								$cleanupOverallSuccess = $false # Mark overall cleanup as possibly incomplete.
							}
						} # End foreach timer
							
						# Clear the main timer list in the global config after trying disposal.
						Write-Verbose "- Clearing global timer registration collection." -ForegroundColor Cyan
						$timersCollection.Clear()
						Write-Verbose "- Finished timer cleanup." -ForegroundColor Green
					}
					else
					{
						Write-Verbose "- No active timers found in configuration to clean up." -ForegroundColor DarkGray 
					}
				}
				catch # Catch errors in the timer cleanup part setup.
				{
					Write-Verbose "Error during timer cleanup phase setup: $($_.Exception.Message)" -ForegroundColor Red
					$cleanupOverallSuccess = $false
				}
			#endregion Step 2: Clean Up Application Timers
				
			#region Step 3: Clean Up Main UI Form
				Write-Verbose "Step 3: Cleaning up main UI form..." -ForegroundColor Cyan
				try
				{
					# Check if the main form object exists, is a Form, and is not already disposed.
					$mainForm = $global:DashboardConfig.UI.PSObject.Properties['MainForm']
					if ($mainForm -and $mainForm.Value -is [System.Windows.Forms.Form] -and -not $mainForm.Value.IsDisposed)
					{
						Write-Verbose "- Disposing MainForm object..." -ForegroundColor DarkGray
						# Dispose of the main form object. Should trigger its FormClosed event if not already closed.
						$mainForm.Value.Dispose()
						Write-Verbose "- [OK] MainForm disposed." -ForegroundColor Green
					}
					elseif ($mainForm -and $mainForm.Value -is [System.Windows.Forms.Form] -and $mainForm.Value.IsDisposed)
					{
						Write-Verbose "- MainForm was already disposed." -ForegroundColor Yellow
					}
					else
					{
						Write-Verbose "- MainForm object not found or invalid in configuration." -ForegroundColor Yellow
					}
				}
				catch # Catch errors during main form disposal.
				{
					Write-Verbose "Error disposing main UI form: $($_.Exception.Message)" -ForegroundColor Red
					$cleanupOverallSuccess = $false
				}
			#endregion Step 3: Clean Up Main UI Form
				
			#region Step 4: Reset Application State Flags
				Write-Verbose "Step 5: Resetting application state flags..." -ForegroundColor Cyan
				try
				{
					# Reset flags to show the app is no longer active/set up.
					$global:DashboardConfig.State.UIInitialized = $null
					$global:DashboardConfig.State.LoginActive = $null
					$global:DashboardConfig.State.LaunchActive = $null
					$global:DashboardConfig.State.ConfigInitialized = $null
					$global:DashboardConfig.LoadedModules = $null
					Write-Verbose "- State flags reset." -ForegroundColor Green
				}
				catch # Catch errors during state flag resetting.
				{
					Write-Verbose "  Error resetting global state flags: $($_.Exception.Message)" -ForegroundColor Red
					# Continue cleanup even with this small issue.
					$cleanupOverallSuccess = $false
				}
			#endregion Step 4: Reset Application State Flags
					
			#region Step 5: Final Log Message for Cleanup Status
				# Set log color based on overall cleanup success flag.
				# $finalColor - Text, 'Green' for success, 'Yellow' for partial success/warnings.
				[string]$finalColor = if ($cleanupOverallSuccess)
				{
					'Green' 
				}
				else
				{
					'Yellow' 
				}
				Write-Verbose "--- Dashboard Cleanup Finished. Overall Success: $cleanupOverallSuccess ---" -ForegroundColor $finalColor
			#endregion Step 5: Final Log Message
				
			# Return the overall success status of the cleanup actions.
			return $cleanupOverallSuccess
		}
	#endregion Function: Stop-Dashboard

#endregion UI and Application Lifecycle Functions
	
#region Main Execution Block

	# This is the main start point and control flow of the script.
	Write-Verbose "=========================================" -ForegroundColor Cyan
	Write-Verbose "=== Initializing Entropia Dashboard ===" -ForegroundColor Cyan
	Write-Verbose "=== Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ===" -ForegroundColor Cyan
	Write-Verbose "=========================================" -ForegroundColor Cyan
		
	# Main try/catch/finally block to manage the app life cycle and ensure cleanup.
	try
	{
		#region Step 1: Ensure Correct Execution Environment (Admin, 32-bit, Bypass Policy)
			Write-Verbose "--- Step 1: Ensuring Correct Execution Environment ---" -ForegroundColor Cyan
			# Request-Elevation checks and might restart the script. If it restarts, this one exits here.
			Request-Elevation
			# If script continues, Request-Elevation decided no restart needed OR restart failed (error shown, exited).
			# Initialize-ScriptEnvironment does final checks *after* possible restart.
			if (-not (Initialize-ScriptEnvironment))
			{
				# If checks fail even after possible restart try, throw a major error. Show-ErrorDialog was probably called inside.
				throw 'Environment verification failed (Admin/32-bit/Bypass). Cannot continue.'
			}
			Write-Verbose "[OK] Environment verified successfully." -ForegroundColor Green
		#endregion Step 1: Ensure Correct Execution Environment (Admin, 32-bit, Bypass Policy)
			
		#region Step 2: Initialize Base Configuration (AppData Paths)
			Write-Verbose "--- Step 2: Initializing Base Configuration (AppData Paths) ---" -ForegroundColor Cyan
			if (-not (Initialize-BaseConfig))
			{
				# If essential paths can't be made/checked writable, throw major error. Show-ErrorDialog probably called inside.
				throw 'Failed to initialize base application paths in %APPDATA%. Cannot continue.'
			}
			Write-Verbose "[OK] Base configuration paths initialized successfully." -ForegroundColor Green
		#endregion Step 2: Initialize Base Configuration (AppData Paths)
			
		#region Step 3: Load Dashboard Modules (Write to AppData & Import)
			Write-Verbose "--- Step 3: Loading Dashboard Modules ---" -ForegroundColor Cyan
			# $importResult - PSCustomObject holding Status, LoadedModules, FailedModules, CriticalFailure.
			$importResult = Import-DashboardModules
			# $global:DashboardConfig.LoadedModules is updated directly inside Import-DashboardModules.
				
			# Check if the import process reported overall failure (specifically critical failure).
			if (-not $importResult.Status) # Status is false if CriticalFailure is true or an unhandled error happened.
			{
				# If critical modules failed, throw major error. Error details logged inside Import-DashboardModules.
				throw 'Critical module loading failed. Cannot continue.'
			}
			# Non-critical failures were logged as warnings/info inside Import-DashboardModules.
			Write-Verbose "[OK] Core modules loaded successfully (Non-critical failures may exist, see logs)." -ForegroundColor Green
		#endregion Step 3: Load Dashboard Modules (Write to AppData & Import)
			
		#region Step 4: Load INI Configuration File
			Write-Verbose "--- Step 4: Loading INI Configuration ---" -ForegroundColor Cyan
			# Check if the Initialize-IniConfig function (expected from ini.psm1) is available.
			if (Get-Command Initialize-IniConfig -ErrorAction SilentlyContinue) # Just use Get-Command
			{
				Write-Verbose "Calling Initialize-IniConfig..." -ForegroundColor Cyan
				try
				{
					# Run the INI loading function. Assuming it returns true/false or handles errors itself.
					[bool]$iniLoadSuccess = Initialize-IniConfig -ErrorAction Stop # Call directly
					if (-not $iniLoadSuccess)
					{
						# Log a warning if INI loading fails (as function reported), but continue with defaults.
						Write-Verbose "  Initialize-IniConfig reported failure. Default configuration values may be used." -ForegroundColor Yellow
					}
					else
					{
						Write-Verbose "[OK] INI configuration loaded successfully." -ForegroundColor Green 
					}
				}
				catch
				{
					Write-Verbose "  Error occurred during Initialize-IniConfig execution: $($_.Exception.Message). Default configuration values may be used." -ForegroundColor Yellow
				}
			}
			else
			{
				# Log a warning if the function is missing
				Write-Verbose "  Initialize-IniConfig function not found. Skipping INI load, defaults will be used." -ForegroundColor Yellow
			}
		#endregion Step 4: Load INI Configuration File
			
		#region Step 5: Start Dashboard User Interface
			Write-Verbose "--- Step 5: Starting Dashboard UI ---" -ForegroundColor Cyan
			# Start-Dashboard sets up and shows the main window. It errors out on failure.
			if (-not (Start-Dashboard)) # This check is a bit extra as Start-Dashboard errors on failure, but safe.
			{
				# Error should have been thrown by Start-Dashboard and caught by outer catch block.
				# This throw might not be reached but makes sure script stops if Start-Dashboard somehow returned false without erroring.
				throw 'Start-Dashboard returned failure. Cannot continue.'
			}
			Write-Verbose "[OK] Dashboard UI started successfully." -ForegroundColor Green
		#endregion Step 5: Start Dashboard User Interface
			
		#region Step 6: Run UI Message Loop
			Write-Verbose "--- Step 6: Running UI Message Loop ---" -ForegroundColor Cyan
			# Start-MessageLoop pauses execution here until the main UI window is closed by user or code.
			# It handles UI responsiveness.
			Start-MessageLoop
			# Execution continues here only *after* the UI message loop has stopped (main window closed/disposed).
			Write-Verbose "UI Message loop finished. Proceeding to final cleanup..." -ForegroundColor Green
		#endregion Step 6: Run UI Message Loop
	}
	catch
	{
		# --- Main Catch Block ---
		# Catches any unhandled major errors from the main setup or run steps (Steps 1-6).
		$errorMessage = "`nFATAL UNHANDLED ERROR during application lifecycle: $($_.Exception.Message)"
		Write-Verbose $errorMessage -ForegroundColor Red
			
		# Try showing the critical error in a pop-up box for the user to see.
		try
		{
			Show-ErrorDialog ($errorMessage + "`n`nPlease check console logs for details.`n`nStack Trace:`n" + $($_.ScriptStackTrace))
		}
		catch
		{
			# If even the error pop-up fails, log that failure to the error output.
			Write-Verbose "  Failed to show final error dialog. The critical error was: $errorMessage" -ForegroundColor Red
		}
		# App will then go to the 'finally' block for cleanup.
	}
	finally
	{
		# --- Main Finally Block ---
		# This block *always* runs, whether the 'try' block finished okay,
		# threw an error caught by 'catch', or quit early via 'exit' (though cleanup after 'exit' can be iffy).
		# Very important to make sure resource cleanup happens.
		#region Step 7: Final Application Cleanup
			Write-Verbose "--- Step 7: Entering Final Application Cleanup ---" -ForegroundColor Cyan
			# Make sure Stop-Dashboard function exists before calling it.
			if (Get-Command Stop-Dashboard -ErrorAction SilentlyContinue)
			{
				# Call the main cleanup function.
				$cleanupStatus = Stop-Dashboard # Save return status (true/false) if needed.
				Write-Verbose "[OK] Stop-Dashboard execution completed (Overall Success: $cleanupStatus)." -ForegroundColor Green
			}
			else
			{
				# Log a warning if the main cleanup function is missing (shouldn't happen if modules loaded).
				Write-Verbose "  Stop-Dashboard function not found! Full resource cleanup may not occur." -ForegroundColor Yellow
				# Try minimal essential backup cleanup if possible (like dispose main form).
				Write-Verbose "  Attempting basic MainForm dispose as fallback..." -ForegroundColor Cyan
				try
				{
					$finalMainForm = $global:DashboardConfig.UI.PSObject.Properties['MainForm']
					if ($finalMainForm -and $finalMainForm.Value -is [System.Windows.Forms.Form] -and -not $finalMainForm.Value.IsDisposed)
					{
						$finalMainForm.Value.Dispose()
						Write-Verbose "  Fallback MainForm dispose successful." -ForegroundColor Red
					}
					else
					{
						Write-Verbose "  Fallback MainForm dispose skipped (form null, invalid, or already disposed)."  -ForegroundColor Red
					}
				}
				catch
				{
					Write-Verbose "  Fallback MainForm dispose attempt failed: $($_.Exception.Message)"  -ForegroundColor Red
				}
			}
				
			# Optional: Explicitly exit the Windows Forms app context if it was used.
			# Check if the assembly is loaded before calling Application static methods.
			if ([System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms'))
			{
				Write-Verbose "Requesting Windows Forms application context exit..." -ForegroundColor Cyan
				try
				{
					[System.Windows.Forms.Application]::ExitThread() 
				}
				catch
				{
					Write-Verbose "  Error calling Application.ExitThread(): $($_.Exception.Message)" -ForegroundColor Red
				} # ExitThread is often better in PS scripts than Exit().
				# try { [System.Windows.Forms.Application]::Exit() } catch { Write-Verbose "Error calling Application.Exit(): $($_.Exception.Message)"} -ForegroundColor Red
			}
				
			Write-Verbose "=========================================" -ForegroundColor Cyan
			Write-Verbose "=== Entropia Dashboard Exited ===" -ForegroundColor Cyan
			Write-Verbose "=== Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ===" -ForegroundColor Cyan
			Write-Verbose "=========================================" -ForegroundColor Cyan
		#endregion Step 7: Final Application Cleanup
	}

#endregion Main Execution Block