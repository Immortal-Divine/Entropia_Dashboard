<# start.ps1
	.SYNOPSIS
		Initializes and launches the Entropia Dashboard application.

	.DESCRIPTION
		This script serves as the main entry point for the Entropia Dashboard. It performs critical environment checks,
		including Administrator rights verification, ensuring 32-bit execution context, and setting the required PowerShell
		Execution Policy ('Bypass') for the current process. It establishes necessary application paths within the user's
		AppData directory. The script manages the deployment and loading of PowerShell modules (.psm1) and associated
		resources (.dll, .ico) from the source directory or Base64 content to the AppData directory, respecting defined load 
		order and dependencies. It includes robust fallback mechanisms for module loading, particularly for scenarios where 
		the	script might be running in different environments. Configuration settings are loaded from 'config.ini',
		with defaults applied if the file or specific settings are missing. Finally, it initializes the Windows Forms
		user interface (UI), runs the application message loop to keep the UI responsive, and handles graceful
		shutdown and resource cleanup via the 'finally' block and the Stop-Dashboard function.

	.NOTES
		Author: Immortal / Divine
		Version: 1.1
		Requires: PowerShell 5.1+, .NET Framework 4.5+, Administrator privileges, Bypassed 32-bit PowerShell execution.

		Documentation Standards Followed:
		- Module Level Documentation: Synopsis, Description, Notes.
		- Function Level Documentation: Synopsis, Parameter Descriptions, Output Specifications.
		- Code Organization: Logical grouping using #region / #endregion. Functions organized by workflow.
		- Step Documentation: Code blocks enclosed in '#region Step: Description' / '#endregion Step: Description'.
		- Variable Definitions: Inline comments describing the purpose of significant variables.
		- Error Handling: Comprehensive try/catch/finally blocks with verbose logging and user notification on critical failure.

		Execution Policy Note: This script requires and attempts to set the execution policy to 'Bypass' for the *current process*.
		This is necessary for its dynamic module loading and execution features but reduces script execution security restrictions.
		Ensure you understand the implications before running this script in sensitive environments.

		Invoke-Expression Note: The fallback module import methods uses Invoke-Expression. This cmdlet
		can execute arbitrary code and poses a security risk if the module content is compromised.
#>

#region Custom Write-Verbose

	[CmdletBinding()]
	param()

	#region Step: Detect -Verbose argument when running as EXE/Script
		# If -Verbose is passed as a command-line argument, manually set the $VerbosePreference. 
		if ($args -contains '-Verbose') {
			$VerbosePreference = "Continue"
			Write-Verbose "-Verbose argument detected, enabling verbose preference."
		}
	#endregion Step: Detect -Verbose argument when running as EXE/Script

	Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force -ErrorAction Stop

	function Write-Verbose {
		[CmdletBinding()]
		param(
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$Message,
		[string]$ForegroundColor = 'DarkGray'
		)
		
		# Only proceed if verbose output is enabled
		if ($VerbosePreference -eq "Continue") {
			$dateStr = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
			$callStack = Get-PSCallStack
			$caller = if ($callStack.Count -gt 1) { $callStack[1] } else { $callStack[0] }
			
			$callerName = if ($caller.Command) { $caller.Command } else { "Script" }
			
			$bracketedCaller = "[$callerName]"
			$paddedCaller = $bracketedCaller.PadRight(35)
			$prefix = " | $dateStr - $paddedCaller - "
			$indentation = " " * $prefix.Length + "| "
			
			# Get console width for proper wrapping
			$consoleWidth = if ($Host.UI.RawUI.WindowSize.Width -gt 800) {
				$Host.UI.RawUI.WindowSize.Width # Use actual width if available
			} else {
				800 # Default fallback width if console width can't be determined or is to small
			}
			# Ensure consoleWidth is an integer for calculations
			try {
				$consoleWidth = [int]$consoleWidth
			} catch {
				$consoleWidth = 800 # Fallback if conversion fails
			}

			# Process message with proper wrapping and indentation
			$lines = $Message -split "`r`n"
			$formattedLines = @()
			
			# Calculate available width for text once
			$availableWidth = $consoleWidth - $prefix.Length - 5 # Subtract 2 for potential padding/margin

			foreach ($line in $lines) {
				# If line is shorter than available width, add it as-is
				if ($line.Length -le $availableWidth) {
					$formattedLines += $line
				} else {
					# For long lines, wrap them with proper word breaks
					$words = $line -split ' '
					$currentLine = ""
					
					foreach ($word in $words) {
						# Check if adding this word would exceed the line length
						if (($currentLine.Length + $word.Length + 1) -le $availableWidth) {
							# Add word with space
							if ($currentLine.Length -gt 0) {
								$currentLine += " $word"
							} else {
								$currentLine = $word
							}
						} else {
							# Line would be too long, add current line to results and start a new one
							if ($currentLine.Length -gt 0) {
								$formattedLines += $currentLine
								$currentLine = $word
							} else {
								# Word itself is too long for a line, add it anyway (might still overflow slightly)
								$formattedLines += $word
								$currentLine = ""
							}
						}
					}
					
					# Add the last line if not empty
					if ($currentLine.Length -gt 0) {
						$formattedLines += $currentLine
					}
				}
			}
			
			# Join lines with proper indentation for wrapped lines
			$formattedMessage = ""
			if ($formattedLines.Count -gt 0) {
				$formattedMessage = $formattedLines[0]
				for ($i = 1; $i -lt $formattedLines.Count; $i++) {
					$formattedMessage += "`r`n$indentation$($formattedLines[$i])"
				}
			}
			
			# Set color based on message type
			$color = switch ($ForegroundColor.ToLower()) {
				'red'    { [ConsoleColor]::Red }
				'yellow' { [ConsoleColor]::Yellow }
				'green'  { [ConsoleColor]::Green }
				'cyan'   { [ConsoleColor]::Cyan }
				default  { [ConsoleColor]::DarkGray }
			}

			# Output to console with color
			$originalColor = $host.UI.RawUI.ForegroundColor
			try {
				$host.UI.RawUI.ForegroundColor = $color
				# Write to Error stream to ensure it appears like standard Write-Verbose
				[Console]::Error.WriteLine("$prefix$formattedMessage")
			} finally {
				$host.UI.RawUI.ForegroundColor = $originalColor
			}
			
			# Also write to the verbose stream for proper logging/capture
			$wrappedCmdlet = $ExecutionContext.InvokeCommand.GetCommand(
			"Microsoft.PowerShell.Utility\Write-Verbose",
			[System.Management.Automation.CommandTypes]::Cmdlet
			)
			
			# Use steppable pipeline
			$scriptCmd = { & $wrappedCmdlet "$prefix$formattedMessage" }
			$steppablePipeline = $scriptCmd.GetSteppablePipeline()
			$steppablePipeline.Begin($true)
			# Ensure pipeline output is ended if necessary
			$steppablePipeline.End() # Ensure pipeline completes
		}
	}

	try {
		Add-Type -AssemblyName System.Windows.Forms, System.Drawing
		Write-Verbose "INFO: Loaded System.Windows.Forms and System.Drawing assembly" # This will now work if -Verbose was passed
	} catch {
		# Use the custom Write-Verbose for consistency, it checks $VerbosePreference internally
		Write-Verbose "ERROR: Failed to load required assemblies: $_" -ForegroundColor Red
		throw "Failed to initialize application. Required assemblies could not be loaded: $_"
	}

#endregion Custom Write-Verbose

#region Global Configuration

	#region Step: Define Global Configuration Hashtable
		# This main hashtable holds all our settings, states, paths, resources, and module info. It's available everywhere in the script.
		$global:DashboardConfig = @{
			# Paths: Stores important folders and file locations for the app.
			Paths            = @{
				# Source: Folder with the dashboard's source scripts (.ps1, .psm1) and things like .dlls or .icos. Usually in the user's profile.
				Source   = Join-Path $env:USERPROFILE 'Entropia_Dashboard\.main'
				# App: The main app data folder in AppData\Roaming. We put modules, config files, and maybe logs here.
				App      = Join-Path $env:APPDATA 'Entropia_Dashboard\'
				# Modules: Subfolder in the AppData path. Write-Module puts module files (.psm1), libraries (.dll), and icons (.ico) here before loading them.
				Modules  = Join-Path $env:APPDATA 'Entropia_Dashboard\modules'
				# Icon: Full path to the app's icon file (.ico) for the main window. It should end up in the Modules folder.
				Icon     = Join-Path $env:APPDATA 'Entropia_Dashboard\modules\icon.ico'
				# FtoolDLL: Full path to ftool.dll, needed if the optional 'ftool.psm1' module is used. Should also be in the Modules folder.
				FtoolDLL = Join-Path $env:APPDATA 'Entropia_Dashboard\modules\ftool.dll'
				# Config: Full path to the main settings file ('config.ini'). Saves user choices and app settings. Found in the main AppData folder.
				Ini   = Join-Path $env:APPDATA 'Entropia_Dashboard\config.ini'
			}
			# State: Keeps track of what the application is doing right now.
			State            = @{
				# ConfigInitialized: Flag ($true/$false) to check if basic setup (like creating app folders) worked.
				ConfigInitialized   = $false
				# UIInitialized: Flag ($true/$false) to see if the main window was set up correctly by 'ui.psm1'.
				UIInitialized       = $false
				# LoginActive: Flag ($true/$false) showing if an auto-login (from 'login.psm1') is running. Prevents doing it twice.
				LoginActive         = $false
				# LaunchActive: Flag ($true/$false) showing if a game launch (from 'launch.psm1') is happening. Prevents double launches.
				LaunchActive        = $false
				# PreviousLaunchState: Flag ($true/$false) showing if a game launch (from 'launch.psm1') happened.
				PreviousLaunchState = $false
				# PreviousLoginState: Flag ($true/$false) showing if a game login (from 'login.psm1') happened.
				PreviousLoginState  = $false
				# IsRunningAsExe: Flag ($true/$false) figured out at start. True if running as an .exe, not a .ps1 script. Changes how modules load.
				IsRunningAsExe      = $false
				IsDragging 			= $false
			}
			# Resources: Groups for handling things that change, like timers, windows, and shared info.
			Resources        = @{
				# Timers: An ordered list ([ordered]@{...}) holding active timers (System.Windows.Forms.Timer) used by the app or modules. Stopped/cleaned up on exit.
				Timers              = [ordered]@{}
				# FtoolForms: An ordered list ([ordered]@{...}) keeping track of active Ftool windows (from 'ftool.psm1'). Closed/cleaned up on exit.
				FtoolForms          = [ordered]@{}
				# LastEventTimes: A list (@{...}) remembering when named events last happened. Good for slowing down or grouping actions in modules.
				LastEventTimes      = @{}
				# ExtensionData: A general list (@{...}) for modules/extensions to store and share any data needed across the app.
				ExtensionData       = @{}
				# ExtensionTracking: A list (@{...}) for modules/extensions to track things like status flags, process IDs, or other state info.
				ExtensionTracking   = @{}
				# LoadedModuleContent: A list (@{...}) holding the actual text content of loaded .psm1 modules. Mainly for backup loading methods or debugging.
				LoadedModuleContent = @{}
				# LaunchResources: A list (@{...}) for the launch module to store resources specific to launching game clients.
				LaunchResources     = @{}
				DragSourceGrid 		= $null
			}
			# UI: Empty list (@{...}) filled by 'ui.psm1' when the UI starts. Holds references to important UI parts (windows, buttons, grids).
			UI               = @{
				Login        = @{}
			}
			# DefaultConfig: An ordered list ([ordered]@{...}) with default settings. Used by 'ini.psm1' if 'config.ini' is missing or incomplete.
			DefaultConfig    = [ordered]@{
				'LauncherPath' = [ordered]@{ 'LauncherPath' = 'Select_Launcher' } # Default if the game launcher path isn't in config.ini.
				'ProcessName'  = [ordered]@{ 'ProcessName' = 'neuz' }         # Default game process name to watch or use.
				'MaxClients'   = [ordered]@{ 'MaxClients' = '1' }                # Default max number of game clients allowed.
				'Login'        = [ordered]@{ 'Login' = '1,1,1,1,1,1,1,1,1,1'; 'FinalizeCollectorLogin' = '0' }             # Default list of login settings (format depends on 'login.psm1').
				'Ftool'        = [ordered]@{}                                    # Default empty section for 'ftool.psm1' related settings.
			}
			# Config: An ordered list ([ordered]@{...}) filled by 'ini.psm1' with settings from 'config.ini'. Overwrites defaults.
			Config           = [ordered]@{}
			# ConfigWriteTimer: Might hold a timer used by 'ini.psm1' to delay saving 'config.ini' often. Better performance, less disk activity.
			ConfigWriteTimer = @{}
			# LoadedModules: A list (@{...}) tracking filenames and full paths of modules that were written to AppData and/or loaded. Used for checking dependencies.
			LoadedModules    = @{}
		}
	#endregion Step: Define Global Configuration Hashtable

# --- Inlined Show-KeyCaptureDialog for EXE compatibility ---
function Show-KeyCaptureDialog {
    param($currentKey = 'F1')
    $captureForm = New-Object System.Windows.Forms.Form
    $captureForm.Text = "Press a Key"
    $captureForm.Size = New-Object System.Drawing.Size(300, 150)
    $captureForm.StartPosition = 'CenterParent'
    $captureForm.FormBorderStyle = 'FixedDialog'
    $captureForm.MaximizeBox = $false
    $captureForm.MinimizeBox = $false
    $captureForm.BackColor = [System.Drawing.Color]::FromArgb(30, 30, 30)
    $captureForm.ForeColor = [System.Drawing.Color]::White
    $label = New-Object System.Windows.Forms.Label
    $label.Text = "Press any key to capture it.`nCurrent: $currentKey`n`nPress ESC to cancel."
    $label.Size = New-Object System.Drawing.Size(280, 60)
    $label.Location = New-Object System.Drawing.Point(10, 10)
    $label.TextAlign = 'MiddleCenter'
    $label.Font = New-Object System.Drawing.Font('Segoe UI', 10)
    $captureForm.Controls.Add($label)
    $resultLabel = New-Object System.Windows.Forms.Label
    $resultLabel.Text = "Waiting for key press..."
    $resultLabel.Size = New-Object System.Drawing.Size(280, 25)
    $resultLabel.Location = New-Object System.Drawing.Point(10, 75)
    $resultLabel.TextAlign = 'MiddleCenter'
    $resultLabel.Font = New-Object System.Drawing.Font('Segoe UI', 9, [System.Drawing.FontStyle]::Bold)
    $resultLabel.ForeColor = [System.Drawing.Color]::Yellow
    $captureForm.Controls.Add($resultLabel)
    $script:capturedKey = $null
    function Get-VirtualKeyMappings {
        return @{
            'F1' = 0x70; 'F2' = 0x71; 'F3' = 0x72; 'F4' = 0x73; 'F5' = 0x74; 'F6' = 0x75
            'F7' = 0x76; 'F8' = 0x77; 'F9' = 0x78; 'F10' = 0x79; 'F11' = 0x7A; 'F12' = 0x7B
            'F13' = 0x7C; 'F14' = 0x7D; 'F15' = 0x7E; 'F16' = 0x7F; 'F17' = 0x80; 'F18' = 0x81
            'F19' = 0x82; 'F20' = 0x83; 'F21' = 0x84; 'F22' = 0x85; 'F23' = 0x86; 'F24' = 0x87
            '0' = 0x30; '1' = 0x31; '2' = 0x32; '3' = 0x33; '4' = 0x34; '5' = 0x35; '6' = 0x36; '7' = 0x37; '8' = 0x38; '9' = 0x39
            'A' = 0x41; 'B' = 0x42; 'C' = 0x43; 'D' = 0x44; 'E' = 0x45; 'F' = 0x46; 'G' = 0x47; 'H' = 0x48
            'I' = 0x49; 'J' = 0x4A; 'K' = 0x4B; 'L' = 0x4C; 'M' = 0x4D; 'N' = 0x4E; 'O' = 0x4F; 'P' = 0x50
            'Q' = 0x51; 'R' = 0x52; 'S' = 0x53; 'T' = 0x54; 'U' = 0x55; 'V' = 0x56; 'W' = 0x57; 'X' = 0x58
            'Y' = 0x59; 'Z' = 0x5A
            'SPACE' = 0x20; 'ENTER' = 0x0D; 'TAB' = 0x09; 'ESCAPE' = 0x1B; 'SHIFT' = 0x10; 'CONTROL' = 0x11; 'ALT' = 0x12
            'UP_ARROW' = 0x26; 'DOWN_ARROW' = 0x28; 'LEFT_ARROW' = 0x25; 'RIGHT_ARROW' = 0x27; 'HOME' = 0x24; 'END' = 0x23
            'PAGE_UP' = 0x21; 'PAGE_DOWN' = 0x22; 'INSERT' = 0x2D; 'DELETE' = 0x2E; 'BACKSPACE' = 0x08
            'CAPS_LOCK' = 0x14; 'NUM_LOCK' = 0x90; 'SCROLL_LOCK' = 0x91; 'PRINT_SCREEN' = 0x2C; 'PAUSE_BREAK' = 0x13
            'LEFT_WINDOWS' = 0x5B; 'RIGHT_WINDOWS' = 0x5C; 'APPLICATION' = 0x5D; 'LEFT_SHIFT' = 0xA0; 'RIGHT_SHIFT' = 0xA1
            'LEFT_CONTROL' = 0xA2; 'RIGHT_CONTROL' = 0xA3; 'LEFT_ALT' = 0xA4; 'RIGHT_ALT' = 0xA5; 'SLEEP' = 0x5F
            'NUMPAD_0' = 0x60; 'NUMPAD_1' = 0x61; 'NUMPAD_2' = 0x62; 'NUMPAD_3' = 0x63; 'NUMPAD_4' = 0x64; 'NUMPAD_5' = 0x65; 'NUMPAD_6' = 0x66; 'NUMPAD_7' = 0x67; 'NUMPAD_8' = 0x68; 'NUMPAD_9' = 0x69
            'NUMPAD_MULTIPLY' = 0x6A; 'NUMPAD_ADD' = 0x6B; 'NUMPAD_SEPARATOR' = 0x6C; 'NUMPAD_SUBTRACT' = 0x6D; 'NUMPAD_DECIMAL' = 0x6E; 'NUMPAD_DIVIDE' = 0x6F
            'SEMICOLON' = 0xBA; 'EQUALS' = 0xBB; 'COMMA' = 0xBC; 'MINUS' = 0xBD; 'PERIOD' = 0xBE
            'FORWARD_SLASH' = 0xBF; 'BACKTICK' = 0xC0; 'LEFT_BRACKET' = 0xDB; 'BACKSLASH' = 0xDC; 'RIGHT_BRACKET' = 0xDD
            'APOSTROPHE' = 0xDE
            'BROWSER_BACK' = 0xA6; 'BROWSER_FORWARD' = 0xA7; 'BROWSER_REFRESH' = 0xA8; 'BROWSER_STOP' = 0xA9
            'BROWSER_SEARCH' = 0xAA; 'BROWSER_FAVORITES' = 0xAB; 'BROWSER_HOME' = 0xAC; 'VOLUME_MUTE' = 0xAD
            'VOLUME_DOWN' = 0xAE; 'VOLUME_UP' = 0xAF; 'MEDIA_NEXT_TRACK' = 0xB0; 'MEDIA_PREVIOUS_TRACK' = 0xB1
            'MEDIA_STOP' = 0xB2; 'MEDIA_PLAY_PAUSE' = 0xB3; 'LAUNCH_MAIL' = 0xB4; 'LAUNCH_MEDIA_PLAYER' = 0xB5
            'LAUNCH_MY_COMPUTER' = 0xB6; 'LAUNCH_CALCULATOR' = 0xB7
            'IME_KANA_HANGUL' = 0x15; 'IME_JUNJA' = 0x17; 'IME_FINAL' = 0x18; 'IME_HANJA_KANJI' = 0x19
            'IME_CONVERT' = 0x1C; 'IME_NONCONVERT' = 0x1D; 'IME_ACCEPT' = 0x1E; 'IME_MODE_CHANGE' = 0x1F; 'IME_PROCESS' = 0xE5
            'SELECT' = 0x29; 'PRINT' = 0x2A; 'EXECUTE' = 0x2B; 'HELP' = 0x2F; 'CLEAR' = 0x0C
            'ATTN' = 0xF6; 'CRSEL' = 0xF7; 'EXSEL' = 0xF8; 'ERASE_EOF' = 0xF9; 'PLAY' = 0xFA; 'ZOOM' = 0xFB
            'PA1' = 0xFD; 'OEM_CLEAR' = 0xFE
        }
    }
    $captureForm.Add_KeyDown({
        param($form, $e)
        if ($e.KeyCode -eq 'Escape') {
            $script:capturedKey = $null
            $captureForm.DialogResult = 'Cancel'
            $captureForm.Close()
            return
        }
        $keyMappings = Get-VirtualKeyMappings
        $keyName = $null
        foreach ($kvp in $keyMappings.GetEnumerator()) {
            if ($kvp.Value -eq $e.KeyValue) {
                $keyName = $kvp.Key
                break
            }
        }
        if (-not $keyName) {
            $keyName = $e.KeyCode.ToString().ToUpper()
            $keyMappingsRecheck = Get-VirtualKeyMappings
            if (-not $keyMappingsRecheck.Contains($keyName)) {
                $keyName = 'F1'
            }
        }
        $script:capturedKey = $keyName
        $resultLabel.Text = "Captured: $keyName"
        $resultLabel.ForeColor = [System.Drawing.Color]::Green
        $timer = New-Object System.Windows.Forms.Timer
        $timer.Interval = 100
        $timer.Add_Tick({
            param($timerSender, $timerArgs)
            try {
                if ($timerSender) { $timerSender.Stop() }
                if ($captureForm -and -not $captureForm.IsDisposed) {
                    $captureForm.DialogResult = 'OK'
                    $captureForm.Close()
                }
            } catch {}
        })
        $timer.Start()
    })
    $captureForm.KeyPreview = $true
    $captureForm.TopMost = $true
    $result = $captureForm.ShowDialog()
    if ($result -eq 'OK' -and $script:capturedKey) {
        return $script:capturedKey
    } else {
        return $currentKey
    }
}

	#region Step: Define Module Metadata
		# Info about all known app modules: load order, importance (critical?), dependencies, and source file path.
		$global:DashboardConfig.Modules = @{
			# Critical modules: Must have these for the dashboard to work. If they fail, the app won't start.
			'ftool.dll'     = @{ 
				Priority = 'Critical';  
				Order = 1; 
				Dependencies = @();
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ftool.dll');
				Base64Content = '
					
				'
			}
			'icon.ico'      = @{ 
				Priority = 'Critical';  
				Order = 2; 
				Dependencies = @();
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'icon.ico');
				Base64Content = '
					AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAAAAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AgIC/wICAv8CAgL/BAQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wQEAv8CAgL/AgIC/wICAv8DAwP/AwMD/wMDA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8GBgP/BQUD/wUEA/8NDgP/DQ4D/wUEA/8FBQP/BgYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BgYD/wMDA/8DAwP/AwMD/wQEBP8EBAT/BAQE/wMDBP8DAwT/AwME/wMDBP8DAwT/AwME/wQFBP8CAwT/BQQE/xIPA/8jHQP/LiUD/zo0A/86NAP/LiUD/yMdA/8SDwP/BQQE/wIDBP8EBQT/AwME/wMDBP8DAwT/AwME/wMDBP8DAwT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8DAwT/EBME/ycmBP84LQP/OC0E/ykhBP8cFwT/FxME/xcTBP8cFwT/KSEE/zgtBP84LQP/JyYE/xATBP8DAwT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BAQF/w0MBf83LgT/OjIE/xYSBf8JCgX/Cw0F/w4QBf8PEQX/DhEF/w4QBf8LDQX/CQoF/xYSBf86MgT/OC4E/w0MBf8EBAX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wYGBv8GBgb/BgYG/wYGBv8GBgb/BgYG/wUFBv8SEAb/PjIF/yMdBf8JCQb/DxIG/xETBv8MDgb/CQoG/wgJBv8ICQb/CQoG/wwOBv8REwb/DxIG/wkJBv8jHQX/PjIF/xIQBv8FBQb/BgYG/wYGBv8GBgb/BgYG/wYGBv8GBgb/BwcH/wcHB/8HBwf/BwcH/wcHB/8GBgf/Dw0H/z4zBf8dGAb/CwwH/xIVBv8MDQf/BwcH/wYGB/8HBwf/BwcH/wcHB/8HBwf/BgYH/wcHB/8MDQf/EhUG/wsMB/8dGAb/PjMF/w8NB/8GBgf/BwcH/wcHB/8HBwf/BwcH/wcHB/8ICAj/CAgI/wgICP8ICAj/CQkI/xMWB/85MAb/JR4H/wsNCP8TFgf/CQoI/wgHCP8ICAj/CAgI/wgICP8ICAj/CAgI/wgICP8ICAj/CAgI/wgHCP8JCgj/ExYH/wsNCP8lHgf/OTAG/xMWB/8JCQj/CAgI/wgICP8ICAj/CAgI/wkJCf8JCQn/CQkJ/wkJCf8ICAn/KykH/z01B/8LDAn/FBcI/woKCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8KCgn/FBcI/wsMCf89NQf/KykH/wgICf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/woKCf88MQf/GRYI/xIVCf8ODwn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8ODwn/EhUJ/xkWCP88MQf/CgoJ/wkJCf8JCQn/CQkJ/wkJCf8KCgr/CgoK/woKCv8JCQr/GBUJ/zwyCP8ODgr/FRcK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8UFwr/Dg4K/zwyCP8YFQn/CQkK/woKCv8KCgr/CgoK/wsLC/8LCwv/CwsL/wkKC/8qIwr/LiYJ/xATC/8REwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/xETC/8QEgv/LiYJ/yojCv8JCgv/CwsL/wsLC/8LCwv/DAwM/wwMDP8MDAz/CgoM/zUsCv8jHgv/FBcL/w8QDP8MDAz/DAwM/wwMDP8MDAz/DAwM/wwMDP8MDAz/CwoM/wsKDP8MDAz/DAwM/wwMDP8MDAz/DAwM/wwMDP8MDAz/DxAM/xQXC/8jHgv/NSwK/woKDP8MDAz/DAwM/wwMDP8NDQ3/DQ0N/w0NDf8SFQ3/QTsK/x4bDP8WGQz/Dw8N/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/wwMDf9JWQn/SVkJ/wwMDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/w0NDf8PEA3/FxoM/x4bDP9BOwr/EhUN/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/xMVDf9COwr/HhsM/xYZDP8PDw3/DQ0N/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/CwoN/1ltCP9ZbQj/CwoN/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/w8QDf8XGgz/HhsM/0I7Cv8TFQ3/DQ0N/w0NDf8NDQ3/Dg4O/w4ODv8ODg7/DAwO/zYuDP8lIA3/FhkN/xESDv8ODg7/Dg4O/w4ODv8ODg7/Dg4O/w4ODv8MCw7/Mz0L/zM9C/8MCw7/Dg4O/w4ODv8ODg7/Dg4O/w4ODv8ODg7/ERIO/xYZDf8lIA3/Ni4M/wwMDv8ODg7/Dg4O/w4ODv8PDw//Dw8P/w8PD/8NDg//LScN/zEqDf8UFg//FRcO/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w0MD/81Pwz/NT8M/w0MD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8VFw//FBYP/zEqDf8tJw3/DQ4P/w8PD/8PDw//Dw8P/xAQEP8QEBD/EBAQ/w8PEP8eGw//QTYN/xMUEP8aHQ//EBAQ/xAQEP8QEBD/EBAQ/xAQEP8QEBD/Dg0Q/zZADf82QA3/Dg0Q/xAQEP8QEBD/EBAQ/xAQEP8QEBD/EBAQ/xodD/8TFBD/QTYN/x4bD/8PDxD/EBAQ/xAQEP8QEBD/ERER/xEREf8RERH/ERER/xISEf9CNw3/IB0Q/xkcEP8VFhD/ERER/xEREf8RERH/ERER/xEREf8PDhH/NkAO/zZADv8PDhH/ERER/xEREf8RERH/ERER/xEREf8VFhD/GRwQ/yAdEP9CNw3/EhIR/xEREf8RERH/ERER/xEREf8RERH/ERER/xEREf8RERH/EBAR/zIxD/9EPA7/FBUR/xwfEP8TExH/ERER/xEREf8RERH/ERER/w8OEf82QA7/NkAO/w8OEf8RERH/ERER/xEREf8RERH/ExMR/xwfEP8UFBH/RDwO/zIxD/8QEBH/ERER/xEREf8RERH/ERER/xISEv8SEhL/EhIS/xISEv8TExL/HSAR/0I5D/8uKBD/FhgS/x0gEf8UFBL/EhIS/xISEv8SEhL/EA8S/zdBDv83QQ7/EA8S/xISEv8SEhL/EhIS/xQUEv8dIBH/FhcS/y4oEP9COQ//HSAR/xMTEv8SEhL/EhIS/xISEv8SEhL/ExMT/xMTE/8TExP/ExMT/xMTE/8SEhP/GxkS/0g8D/8oIxH/FxgT/x4hEv8XGRP/ExMT/xMTE/8REBP/OEIP/zhCD/8REBP/ExMT/xMTE/8XGRP/HiES/xcYE/8oIxH/SDwP/xsZEv8SEhP/ExMT/xMTE/8TExP/ExMT/xMTE/8UFBT/FBQU/xQUFP8UFBT/FBQU/xQUFP8TExT/IB0T/0k9D/8vKRL/FhcU/xwfE/8eIRP/GhwT/xUVFP87RRD/O0UQ/xUVFP8aHBP/HiAT/xwfE/8WFxT/LykS/0k9D/8gHRP/ExMU/xQUFP8UFBT/FBQU/xQUFP8UFBT/FBQU/xUVFf8VFRX/FRUV/xUVFf8VFRX/FRUV/xUVFf8UFBX/HBsU/0Q7EP9GPhD/JCAT/xgZFP8aHBT/Gx0U/zpFEP87RhD/Gx0U/xocFP8YGRT/JCAT/0Y+EP9EOxD/HBsU/xQUFf8VFRX/FRUV/xUVFf8VFRX/FRUV/xUVFf8VFRX/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8VFBb/ICMV/zY0Ev9FOxH/RTsR/zcvEv8rJhT/KSYU/ykmFP8rJhT/Ny8S/0U7Ef9FOxH/NjQS/yAjFP8VFBb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8XFxb/FRYW/xcXFv8kIRX/NC0U/z01E/9JQhH/SUIR/z41E/80LRT/JCEV/xcXFv8VFhb/FxcW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xYXF/8VFhf/FRUX/xwfFv8cHxb/FRUX/xUWF/8WFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
				'
			}
			'classes.psm1'  = @{ 
				Priority = 'Critical';  
				Order = 3; 
				Dependencies = @();
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'classes.psm1');
				Base64Content = '
					
				'
			}
			'ini.psm1'      = @{ 
				Priority = 'Critical';  
				Order = 4; 
				Dependencies = @('classes.psm1');
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ini.psm1');
				Base64Content = '
					
				'
			}
			'ui.psm1'       = @{ 
				Priority = 'Critical';  
				Order = 5; 
				Dependencies = @('classes.psm1', 'ini.psm1');
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ui.psm1');
				Base64Content = '
					PCMgdWkucHNtMQ0KICAgIC5TWU5PUFNJUw0KICAgICAgICBVc2VyIEludGVyZmFjZSBNYW5hZ2VyIGZvciBFbnRyb3BpYSBEYXNoYm9hcmQuDQogICAgLkRFU0NSSVBUSU9ODQogICAgICAgIFRoaXMgbW9kdWxlIGNyZWF0ZXMgYW5kIG1hbmFnZXMgdGhlIGNvbXBsZXRlIHVzZXIgaW50ZXJmYWNlIGZvciBFbnRyb3BpYSBEYXNoYm9hcmQ6DQogICAgICAgIC0gQnVpbGRzIHRoZSBtYWluIGFwcGxpY2F0aW9uIHdpbmRvdyBhbmQgYWxsIGRpYWxvZyBmb3Jtcw0KICAgICAgICAtIENyZWF0ZXMgaW50ZXJhY3RpdmUgY29udHJvbHMgKGJ1dHRvbnMsIHBhbmVscywgZ3JpZHMsIHRleHQgYm94ZXMpDQogICAgICAgIC0gSGFuZGxlcyB3aW5kb3cgZHJhZ2dpbmcsIHJlc2l6aW5nLCBhbmQgcG9zaXRpb25pbmcNCiAgICAgICAgLSBNYW5hZ2VzIGNsaWVudCBwcm9jZXNzIG1vbml0b3JpbmcgZGlzcGxheQ0KICAgICAgICAtIEltcGxlbWVudHMgc2V0dGluZ3MgbWFuYWdlbWVudCB0aHJvdWdoIHZpc3VhbCBpbnRlcmZhY2UNCiAgICAgICAgLSBNYWludGFpbnMgcmVzcG9uc2l2ZSBsYXlvdXQgYWNyb3NzIGRpZmZlcmVudCBzY3JlZW4gc2l6ZXMNCiAgICAgICAgLSBQcm92aWRlcyBMYXVuY2ggLyBMb2dpbiAvIEZ0b29sIGF1dG9tYXRpb24NCiAgICAuTk9URVMNCiAgICAgICAgQXV0aG9yOiBJbW1vcnRhbCAvIERpdmluZQ0KICAgICAgICBWZXJzaW9uOiAxLjANCiAgICAgICAgUmVxdWlyZXM6IFBvd2VyU2hlbGwgNS4xKywgLk5FVCBGcmFtZXdvcmsgNC41KywgY2xhc3Nlcy5wc20xLCBpbmkucHNtMSwgZGF0YWdyaWQucHNtMQ0KDQogICAgICAgIERvY3VtZW50YXRpb24gU3RhbmRhcmRzIEZvbGxvd2VkOg0KICAgICAgICAtIE1vZHVsZSBMZXZlbCBEb2N1bWVudGF0aW9uOiBTeW5vcHNpcywgRGVzY3JpcHRpb24sIE5vdGVzLg0KICAgICAgICAtIEZ1bmN0aW9uIExldmVsIERvY3VtZW50YXRpb246IFN5bm9wc2lzLCBQYXJhbWV0ZXIgRGVzY3JpcHRpb25zLCBPdXRwdXQgU3BlY2lmaWNhdGlvbnMuDQogICAgICAgIC0gQ29kZSBPcmdhbml6YXRpb246IExvZ2ljYWwgZ3JvdXBpbmcgdXNpbmcgI3JlZ2lvbiAvICNlbmRyZWdpb24uIEZ1bmN0aW9ucyBvcmdhbml6ZWQgYnkgd29ya2Zsb3cuDQogICAgICAgIC0gU3RlcCBEb2N1bWVudGF0aW9uOiBDb2RlIGJsb2NrcyBlbmNsb3NlZCBpbiAnI3JlZ2lvbiBTdGVwOiBEZXNjcmlwdGlvbicgLyAnI2VuZHJlZ2lvbiBTdGVwOiBEZXNjcmlwdGlvbicuDQogICAgICAgIC0gVmFyaWFibGUgRGVmaW5pdGlvbnM6IElubGluZSBjb21tZW50cyBkZXNjcmliaW5nIHRoZSBwdXJwb3NlIG9mIHNpZ25pZmljYW50IHZhcmlhYmxlcy4NCiAgICAgICAgLSBFcnJvciBIYW5kbGluZzogQ29tcHJlaGVuc2l2ZSB0cnkvY2F0Y2gvZmluYWxseSBibG9ja3Mgd2l0aCBlcnJvciBsb2dnaW5nIGFuZCB1c2VyIG5vdGlmaWNhdGlvbi4NCg0KICAgICAgICBUaGlzIG1vZHVsZSByZWxpZXMgaGVhdmlseSBvbiB0aGUgZ2xvYmFsICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnIG9iamVjdCBmb3Igc3RhdGUgYW5kIGNvbmZpZ3VyYXRpb24uDQojPg0KDQojcmVnaW9uIEhlbHBlciBGdW5jdGlvbnMNCiAgICAjcmVnaW9uIEZ1bmN0aW9uOiBTeW5jLVVJVG9Db25maWcNCglmdW5jdGlvbiBTeW5jLVVJVG9Db25maWcNCgl7DQoJCTwjDQoJCS5TWU5PUFNJUw0KCQkJU3luY2hyb25pemVzIHRoZSBjdXJyZW50IHN0YXRlIG9mIFVJIGlucHV0IGVsZW1lbnRzIHRvIHRoZSBnbG9iYWwgY29uZmlndXJhdGlvbiBvYmplY3QuDQoJCS5PVVRQVVRTDQoJCQlbYm9vbF0gUmV0dXJucyAkdHJ1ZSBpZiBzeW5jaHJvbml6YXRpb24gd2FzIHN1Y2Nlc3NmdWwsICRmYWxzZSBvdGhlcndpc2UuDQoJCS5OT1RFUw0KCQkJUmVhZHMgdmFsdWVzIGZyb20gVUkgY29udHJvbHMgKFRleHRCb3hlcywgQ29tYm9Cb3hlcykgYW5kIHVwZGF0ZXMgdGhlIGNvcnJlc3BvbmRpbmcNCgkJCWtleXMgaW4gdGhlICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZyBoYXNodGFibGUuIEVuc3VyZXMgbmVjZXNzYXJ5IHNlY3Rpb25zIGV4aXN0Lg0KCQkjPg0KCQlbQ21kbGV0QmluZGluZygpXQ0KCQlbT3V0cHV0VHlwZShbYm9vbF0pXQ0KCQlwYXJhbSgpDQoNCgkJI3JlZ2lvbiBTdGVwOiBBdHRlbXB0IHRvIHN5bmMgVUkgc3RhdGUgdG8gZ2xvYmFsIGNvbmZpZw0KCQkJdHJ5DQoJCQl7DQoJCQkJI3JlZ2lvbiBTdGVwOiBMb2cgU3luYyBTdGFydA0KCQkJCQlXcml0ZS1WZXJib3NlICcgIFVJOiBTeW5jaW5nIFVJIHRvIGNvbmZpZycgLUZvcmVncm91bmRDb2xvciBDeWFuDQoJCQkJI2VuZHJlZ2lvbiBTdGVwOiBMb2cgU3luYyBTdGFydA0KDQoJCQkJI3JlZ2lvbiBTdGVwOiBWYWxpZGF0ZSBVSSBhbmQgQ29uZmlnIG9iamVjdHMNCgkJCQkJJFVJID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkNCgkJCQkJaWYgKC1ub3QgKCRVSSAtYW5kICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZykpDQoJCQkJCXsNCgkJCQkJCVdyaXRlLVZlcmJvc2UgJyAgVUk6IFVJIG9yIENvbmZpZyBvYmplY3Qgbm90IGZvdW5kLCBjYW5ub3Qgc3luYy4nIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQlyZXR1cm4gJGZhbHNlDQoJCQkJCX0NCgkJCQkjZW5kcmVnaW9uIFN0ZXA6IFZhbGlkYXRlIFVJIGFuZCBDb25maWcgb2JqZWN0cw0KDQoJCQkJI3JlZ2lvbiBTdGVwOiBFbnN1cmUgcmVxdWlyZWQgY29uZmlnIHNlY3Rpb25zIGV4aXN0DQoJCQkJCSMgRW5zdXJlIHNlY3Rpb25zIGV4aXN0IGluIHRoZSBjb25maWcgaGFzaHRhYmxlIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHdyaXRlIHRvIHRoZW0uDQoJCQkJCUAoJ0xhdW5jaGVyUGF0aCcsICdQcm9jZXNzTmFtZScsICdNYXhDbGllbnRzJywgJ0xvZ2luJykgfCBGb3JFYWNoLU9iamVjdCB7DQoJCQkJCQlpZiAoLW5vdCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcuQ29udGFpbnMoJF8pKQ0KCQkJCQkJew0KCQkJCQkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skX10gPSBbb3JkZXJlZF1Ae30NCgkJCQkJCX0NCgkJCQkJfQ0KCQkJCSNlbmRyZWdpb24gU3RlcDogRW5zdXJlIHJlcXVpcmVkIGNvbmZpZyBzZWN0aW9ucyBleGlzdA0KDQoJCQkJI3JlZ2lvbiBTdGVwOiBTeW5jIGJhc2ljIFVJIGNvbnRyb2wgdmFsdWVzIHRvIGNvbmZpZw0KCQkJCQkjIFJlYWQgdmFsdWVzIGZyb20gVGV4dEJveGVzIGFuZCB1cGRhdGUgdGhlIGNvbmZpZy4NCgkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMYXVuY2hlclBhdGgnXVsnTGF1bmNoZXJQYXRoJ10gPSAkVUkuSW5wdXRMYXVuY2hlci5UZXh0DQoJCQkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snUHJvY2Vzc05hbWUnXVsnUHJvY2Vzc05hbWUnXSA9ICRVSS5JbnB1dFByb2Nlc3MuVGV4dA0KCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ01heENsaWVudHMnXVsnTWF4Q2xpZW50cyddID0gJFVJLklucHV0TWF4LlRleHQNCgkJCQkjZW5kcmVnaW9uIFN0ZXA6IFN5bmMgYmFzaWMgVUkgY29udHJvbCB2YWx1ZXMgdG8gY29uZmlnDQoNCgkJCQkjcmVnaW9uIFN0ZXA6IFN5bmMgbG9naW4gcG9zaXRpb24gQ29tYm9Cb3ggc2VsZWN0aW9ucyB0byBjb25maWcNCgkJCQkJIyBDb2xsZWN0IHNlbGVjdGVkIGl0ZW1zIGZyb20gbG9naW4gcG9zaXRpb24gQ29tYm9Cb3hlcy4NCgkJCQkJJGxvZ2luUG9zID0gQCgpDQoJCQkJCSRVSS5Mb2dpbi5LZXlzIHwgU29ydC1PYmplY3QgeyBbaW50XSgkXyAtcmVwbGFjZSAnTG9naW4nLCAnJykgfSB8IEZvckVhY2gtT2JqZWN0IHsNCgkJCQkJCSRjb21ibyA9ICRVSS5Mb2dpblskX10NCgkJCQkJCSRsb2dpblBvcyArPSBpZiAoJGNvbWJvLlNlbGVjdGVkSXRlbSkNCgkJCQkJCXsNCgkJCQkJCQkkY29tYm8uU2VsZWN0ZWRJdGVtDQoJCQkJCQl9DQoJCQkJCQllbHNlDQoJCQkJCQl7DQoJCQkJCQkJJzEnICMgRGVmYXVsdCB0byAnMScgaWYgbm90aGluZyBpcyBzZWxlY3RlZA0KCQkJCQkJfQ0KCQkJCQl9DQoJCQkJCSMgU3RvcmUgdGhlIGNvbGxlY3RlZCBwb3NpdGlvbnMgYXMgYSBjb21tYS1zZXBhcmF0ZWQgc3RyaW5nIGluIHRoZSBjb25maWcuDQoJCQkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snTG9naW4nXVsnTG9naW4nXSA9ICRsb2dpblBvcyAtam9pbiAnLCcNCgkJCQkjZW5kcmVnaW9uIFN0ZXA6IFN5bmMgbG9naW4gcG9zaXRpb24gQ29tYm9Cb3ggc2VsZWN0aW9ucyB0byBjb25maWcNCg0KCQkJCSNyZWdpb24gU3RlcDogU3luYyBmaW5hbGl6ZSBjb2xsZWN0b3IgbG9naW4gY2hlY2tib3ggdG8gY29uZmlnDQoJCQkJCSMgUmVhZCBjaGVja2JveCBzdGF0ZSBhbmQgc3RvcmUgYXMgc3RyaW5nICgwIGZvciBmYWxzZSwgMSBmb3IgdHJ1ZSkuDQoJCQkJCSRmaW5hbGl6ZUxvZ2luVmFsdWUgPSBpZiAoJFVJLkZpbmFsaXplQ29sbGVjdG9yTG9naW4uQ2hlY2tlZCkgeyAnMScgfSBlbHNlIHsgJzAnIH0NCgkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMb2dpbiddWydGaW5hbGl6ZUNvbGxlY3RvckxvZ2luJ10gPSAkZmluYWxpemVMb2dpblZhbHVlDQoJCQkJI2VuZHJlZ2lvbiBTdGVwOiBTeW5jIGZpbmFsaXplIGNvbGxlY3RvciBsb2dpbiBjaGVja2JveCB0byBjb25maWcNCg0KCQkJCSNyZWdpb24gU3RlcDogTG9nIFN5bmMgU3VjY2Vzcw0KCQkJCQlXcml0ZS1WZXJib3NlICcgIFVJOiBVSSBzeW5jZWQgdG8gY29uZmlnJyAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQoJCQkJCXJldHVybiAkdHJ1ZQ0KCQkJCSNlbmRyZWdpb24gU3RlcDogTG9nIFN5bmMgU3VjY2Vzcw0KCQkJfQ0KCQkJY2F0Y2gNCgkJCXsNCgkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBlcnJvcnMgZHVyaW5nIHN5bmMNCgkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRmFpbGVkIHRvIHN5bmMgVUkgdG8gY29uZmlnOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJcmV0dXJuICRmYWxzZQ0KCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIGVycm9ycyBkdXJpbmcgc3luYw0KCQkJfQ0KCQkjZW5kcmVnaW9uIFN0ZXA6IEF0dGVtcHQgdG8gc3luYyBVSSBzdGF0ZSB0byBnbG9iYWwgY29uZmlnDQoJfQ0KI2VuZHJlZ2lvbiBGdW5jdGlvbjogU3luYy1VSVRvQ29uZmlnDQoNCiNyZWdpb24gRnVuY3Rpb246IFN5bmMtQ29uZmlnVG9VSQ0KCWZ1bmN0aW9uIFN5bmMtQ29uZmlnVG9VSQ0KCXsNCgkJPCMNCgkJLlNZTk9QU0lTDQoJCQlTeW5jaHJvbml6ZXMgdGhlIGdsb2JhbCBjb25maWd1cmF0aW9uIG9iamVjdCB2YWx1ZXMgdG8gdGhlIFVJIGVsZW1lbnRzLg0KCQkuT1VUUFVUUw0KCQkJW2Jvb2xdIFJldHVybnMgJHRydWUgaWYgc3luY2hyb25pemF0aW9uIHdhcyBzdWNjZXNzZnVsLCAkZmFsc2Ugb3RoZXJ3aXNlLg0KCQkuTk9URVMNCgkJCVJlYWRzIHZhbHVlcyBmcm9tIHRoZSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcgaGFzaHRhYmxlIGFuZCB1cGRhdGVzIHRoZQ0KCQkJY29ycmVzcG9uZGluZyBVSSBjb250cm9scyAoVGV4dEJveGVzLCBDb21ib0JveGVzKS4gSGFuZGxlcyBjYXNlcyB3aGVyZSBjb25maWcgdmFsdWVzIG1pZ2h0IGJlIG1pc3NpbmcuDQoJCSM+DQoJCVtDbWRsZXRCaW5kaW5nKCldDQoJCVtPdXRwdXRUeXBlKFtib29sXSldDQoJCXBhcmFtKCkNCg0KCQkjcmVnaW9uIFN0ZXA6IEF0dGVtcHQgdG8gc3luYyBnbG9iYWwgY29uZmlnIHRvIFVJIHN0YXRlDQoJCQl0cnkNCgkJCXsNCgkJCQkjcmVnaW9uIFN0ZXA6IExvZyBTeW5jIFN0YXJ0DQoJCQkJCVdyaXRlLVZlcmJvc2UgJyAgVUk6IFN5bmNpbmcgY29uZmlnIHRvIFVJJyAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCgkJCQkjZW5kcmVnaW9uIFN0ZXA6IExvZyBTeW5jIFN0YXJ0DQoNCgkJCQkjcmVnaW9uIFN0ZXA6IFZhbGlkYXRlIFVJIGFuZCBDb25maWcgb2JqZWN0cw0KCQkJCQkkVUkgPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSQ0KCQkJCQlpZiAoLW5vdCAoJFVJIC1hbmQgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnKSkNCgkJCQkJew0KCQkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogVUkgb3IgQ29uZmlnIG9iamVjdCBub3QgZm91bmQsIGNhbm5vdCBzeW5jLicgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJCQkJCXJldHVybiAkZmFsc2UNCgkJCQkJfQ0KCQkJCSNlbmRyZWdpb24gU3RlcDogVmFsaWRhdGUgVUkgYW5kIENvbmZpZyBvYmplY3RzDQoNCgkJCQkjcmVnaW9uIFN0ZXA6IFN5bmMgTGF1bmNoZXJQYXRoIGZyb20gY29uZmlnIHRvIFVJDQoJCQkJCSMgVXBkYXRlIExhdW5jaGVyIFBhdGggVGV4dEJveCBpZiB0aGUgY29uZmlnIHZhbHVlIGV4aXN0cy4NCgkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snTGF1bmNoZXJQYXRoJ11bJ0xhdW5jaGVyUGF0aCddKQ0KCQkJCQl7DQoJCQkJCQkkVUkuSW5wdXRMYXVuY2hlci5UZXh0ID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMYXVuY2hlclBhdGgnXVsnTGF1bmNoZXJQYXRoJ10NCgkJCQkJfQ0KCQkJCSNlbmRyZWdpb24gU3RlcDogU3luYyBMYXVuY2hlclBhdGggZnJvbSBjb25maWcgdG8gVUkNCg0KCQkJCSNyZWdpb24gU3RlcDogU3luYyBQcm9jZXNzTmFtZSBmcm9tIGNvbmZpZyB0byBVSQ0KCQkJCQkjIFVwZGF0ZSBQcm9jZXNzIE5hbWUgVGV4dEJveCBpZiB0aGUgY29uZmlnIHZhbHVlIGV4aXN0cy4NCgkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snUHJvY2Vzc05hbWUnXVsnUHJvY2Vzc05hbWUnXSkNCgkJCQkJew0KCQkJCQkJJFVJLklucHV0UHJvY2Vzcy5UZXh0ID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydQcm9jZXNzTmFtZSddWydQcm9jZXNzTmFtZSddDQoJCQkJCX0NCgkJCQkjZW5kcmVnaW9uIFN0ZXA6IFN5bmMgUHJvY2Vzc05hbWUgZnJvbSBjb25maWcgdG8gVUkNCg0KCQkJCSNyZWdpb24gU3RlcDogU3luYyBNYXhDbGllbnRzIGZyb20gY29uZmlnIHRvIFVJDQoJCQkJCSMgVXBkYXRlIE1heCBDbGllbnRzIFRleHRCb3ggaWYgdGhlIGNvbmZpZyB2YWx1ZSBleGlzdHMuDQoJCQkJCWlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ01heENsaWVudHMnXVsnTWF4Q2xpZW50cyddKQ0KCQkJCQl7DQoJCQkJCQkkVUkuSW5wdXRNYXguVGV4dCA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snTWF4Q2xpZW50cyddWydNYXhDbGllbnRzJ10NCgkJCQkJfQ0KCQkJCSNlbmRyZWdpb24gU3RlcDogU3luYyBNYXhDbGllbnRzIGZyb20gY29uZmlnIHRvIFVJDQoNCgkJCQkjcmVnaW9uIFN0ZXA6IFN5bmMgbG9naW4gcG9zaXRpb24gY29uZmlnIHRvIENvbWJvQm94IHNlbGVjdGlvbnMNCgkJCQkJIyBVcGRhdGUgTG9naW4gUG9zaXRpb24gQ29tYm9Cb3hlcyBiYXNlZCBvbiB0aGUgY29tbWEtc2VwYXJhdGVkIGNvbmZpZyBzdHJpbmcuDQoJCQkJCWlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ0xvZ2luJ11bJ0xvZ2luJ10pDQoJCQkJCXsNCgkJCQkJCSRwb3NpdGlvbnMgPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ0xvZ2luJ11bJ0xvZ2luJ10gLXNwbGl0ICcsJw0KDQoJCQkJCQkjIEl0ZXJhdGUgdGhyb3VnaCBDb21ib0JveGVzIGFuZCBzZXQgc2VsZWN0ZWQgaXRlbSBiYXNlZCBvbiBjb25maWcuDQoJCQkJCQlmb3IgKCRpID0gMDsgJGkgLWx0IFtNYXRoXTo6TWluKCRVSS5Mb2dpbi5Db3VudCwgJHBvc2l0aW9ucy5Db3VudCk7ICRpKyspDQoJCQkJCQl7DQoJCQkJCQkJJGtleSA9ICJMb2dpbiQoJGkrMSkiDQoJCQkJCQkJJHZhbHVlID0gJHBvc2l0aW9uc1skaV0NCgkJCQkJCQkkY29tYm8gPSAkVUkuTG9naW5bJGtleV0NCg0KCQkJCQkJCSMgU2V0IHNlbGVjdGVkIGl0ZW0gb25seSBpZiB0aGUgQ29tYm9Cb3ggZXhpc3RzIGFuZCB0aGUgdmFsdWUgaXMgdmFsaWQuDQoJCQkJCQkJaWYgKCRjb21ibyAtYW5kICRjb21iby5JdGVtcy5Db250YWlucygkdmFsdWUpKQ0KCQkJCQkJCXsNCgkJCQkJCQkJJGNvbWJvLlNlbGVjdGVkSXRlbSA9ICR2YWx1ZQ0KCQkJCQkJCX0NCgkJCQkJCX0NCgkJCQkJfQ0KCQkJCSNlbmRyZWdpb24gU3RlcDogU3luYyBsb2dpbiBwb3NpdGlvbiBjb25maWcgdG8gQ29tYm9Cb3ggc2VsZWN0aW9ucw0KDQoJCQkJI3JlZ2lvbiBTdGVwOiBTeW5jIGZpbmFsaXplIGNvbGxlY3RvciBsb2dpbiBjb25maWcgdG8gY2hlY2tib3gNCgkJCQkJIyBVcGRhdGUgRmluYWxpemVDb2xsZWN0b3JMb2dpbiBDaGVja0JveCBpZiB0aGUgY29uZmlnIHZhbHVlIGV4aXN0cy4NCgkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snTG9naW4nXVsnRmluYWxpemVDb2xsZWN0b3JMb2dpbiddKQ0KCQkJCQl7DQoJCQkJCQkkVUkuRmluYWxpemVDb2xsZWN0b3JMb2dpbi5DaGVja2VkID0gKFtpbnRdJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMb2dpbiddWydGaW5hbGl6ZUNvbGxlY3RvckxvZ2luJ10pIC1lcSAxDQoJCQkJCX0NCgkJCQkJZWxzZQ0KCQkJCQl7DQoJCQkJCQkjIERlZmF1bHQgdG8gdW5jaGVja2VkIGlmIHNldHRpbmcgZG9lc24ndCBleGlzdA0KCQkJCQkJJFVJLkZpbmFsaXplQ29sbGVjdG9yTG9naW4uQ2hlY2tlZCA9ICRmYWxzZQ0KCQkJCQl9DQoJCQkJI2VuZHJlZ2lvbiBTdGVwOiBTeW5jIGZpbmFsaXplIGNvbGxlY3RvciBsb2dpbiBjb25maWcgdG8gY2hlY2tib3gNCg0KCQkJCSNyZWdpb24gU3RlcDogTG9nIFN5bmMgU3VjY2Vzcw0KCQkJCQlXcml0ZS1WZXJib3NlICcgIFVJOiBDb25maWcgc3luY2VkIHRvIFVJJyAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQoJCQkJCXJldHVybiAkdHJ1ZQ0KCQkJCSNlbmRyZWdpb24gU3RlcDogTG9nIFN5bmMgU3VjY2Vzcw0KCQkJfQ0KCQkJY2F0Y2gNCgkJCXsNCgkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBlcnJvcnMgZHVyaW5nIHN5bmMNCgkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRmFpbGVkIHRvIHN5bmMgY29uZmlnIHRvIFVJOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJcmV0dXJuICRmYWxzZQ0KCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIGVycm9ycyBkdXJpbmcgc3luYw0KCQkJfQ0KCQkjZW5kcmVnaW9uIFN0ZXA6IEF0dGVtcHQgdG8gc3luYyBnbG9iYWwgY29uZmlnIHRvIFVJIHN0YXRlDQoJfQ0KI2VuZHJlZ2lvbiBGdW5jdGlvbjogU3luYy1Db25maWdUb1VJDQojZW5kcmVnaW9uIEhlbHBlciBGdW5jdGlvbnMNCg0KI3JlZ2lvbiBDb3JlIFVJIEZ1bmN0aW9ucw0KDQojcmVnaW9uIEZ1bmN0aW9uOiBJbml0aWFsaXplLVVJDQoJZnVuY3Rpb24gSW5pdGlhbGl6ZS1VSQ0KCXsNCgkJPCMNCgkJLlNZTk9QU0lTDQoJCQlJbml0aWFsaXplcyBhbGwgVUkgY29tcG9uZW50cyBmb3IgdGhlIGRhc2hib2FyZCBhcHBsaWNhdGlvbi4NCgkJLk9VVFBVVFMNCgkJCVtib29sXSBSZXR1cm5zICR0cnVlIGlmIFVJIGluaXRpYWxpemF0aW9uIHdhcyBzdWNjZXNzZnVsLCAkZmFsc2Ugb3RoZXJ3aXNlICh0aG91Z2ggY3VycmVudGx5IGFsd2F5cyByZXR1cm5zICR0cnVlIG9yIHRocm93cykuDQoJCS5OT1RFUw0KCQkJQ3JlYXRlcyB0aGUgbWFpbiBmb3JtLCBzZXR0aW5ncyBmb3JtLCBhbGwgYnV0dG9ucywgbGFiZWxzLCB0ZXh0IGJveGVzLCBkYXRhIGdyaWRzLA0KCQkJYW5kIGNvbnRleHQgbWVudXMuIFBvcHVsYXRlcyB0aGUgZ2xvYmFsICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJIG9iamVjdCB3aXRoIHJlZmVyZW5jZXMNCgkJCXRvIHRoZXNlIGVsZW1lbnRzLiBDYWxscyBSZWdpc3Rlci1VSUV2ZW50SGFuZGxlcnMgYXQgdGhlIGVuZC4NCgkJIz4NCgkJW0NtZGxldEJpbmRpbmcoKV0NCgkJcGFyYW0oKQ0KDQoJCSNyZWdpb24gU3RlcDogTG9nIFVJIGluaXRpYWxpemF0aW9uIHN0YXJ0DQoJCQlXcml0ZS1WZXJib3NlICcgIFVJOiBJbml0aWFsaXppbmcgVUkuLi4nIC1Gb3JlZ3JvdW5kQ29sb3IgQ3lhbg0KCQkjZW5kcmVnaW9uIFN0ZXA6IExvZyBVSSBpbml0aWFsaXphdGlvbiBzdGFydA0KDQoJCSNyZWdpb24gU3RlcDogQ3JlYXRlIE1haW4gVUkgRWxlbWVudHMNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIE1haW4gQXBwbGljYXRpb24gRm9ybQ0KCQkJCSMgJG1haW5Gb3JtUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgbWFpbiBhcHBsaWNhdGlvbiB3aW5kb3cuDQoJCQkJJG1haW5Gb3JtUHJvcHMgPSBAew0KCQkJCQl0eXBlICAgICAgICAgICAgPSAnRm9ybScNCgkJCQkJdmlzaWJsZSAgICAgICAgID0gJGZhbHNlICMgU3RhcnQgaGlkZGVuLCBzaG93biBsYXRlcg0KCQkJCQl3aWR0aCAgICAgICAgICAgPSA0NzANCgkJCQkJaGVpZ2h0ICAgICAgICAgID0gNDQwDQoJCQkJCWJnICAgICAgICAgICAgICA9IEAoMzAsIDMwLCAzMCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIERhcmsgYmFja2dyb3VuZA0KCQkJCQlpZCAgICAgICAgICAgICAgPSAnTWFpbkZvcm0nDQoJCQkJCXRleHQgICAgICAgICAgICA9ICdFbnRyb3BpYSBEYXNoYm9hcmQnDQoJCQkJCXN0YXJ0UG9zaXRpb24gICA9ICdDZW50ZXJTY3JlZW4nICMgUG9zaXRpb24gY29udHJvbGxlZCBtYW51YWxseSBvciBieSBzYXZlZCBzdGF0ZQ0KCQkJCQlmb3JtQm9yZGVyU3R5bGUgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybUJvcmRlclN0eWxlXTo6Tm9uZSAgIyBCb3JkZXJsZXNzIHdpbmRvdw0KCQkJCX0NCgkJCQkkbWFpbkZvcm0gPSBTZXQtVUlFbGVtZW50IEBtYWluRm9ybVByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYWluIEFwcGxpY2F0aW9uIEZvcm0NCg0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgU2V0dGluZ3MgRm9ybQ0KCQkJCSMgJHNldHRpbmdzRm9ybVByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIHNldHRpbmdzIGRpYWxvZyB3aW5kb3cuDQoJCQkJJHNldHRpbmdzRm9ybVByb3BzID0gQHsNCgkJCQkJdHlwZSAgICAgICAgICAgID0gJ0Zvcm0nDQoJCQkJCXZpc2libGUgICAgICAgICA9ICRmYWxzZSAjIFN0YXJ0IGhpZGRlbg0KCQkJCQl3aWR0aCAgICAgICAgICAgPSA0NzANCgkJCQkJaGVpZ2h0ICAgICAgICAgID0gNDQwDQoJCQkJCWJnICAgICAgICAgICAgICA9IEAoMzAsIDMwLCAzMCkNCgkJCQkJaWQgICAgICAgICAgICAgID0gJ1NldHRpbmdzRm9ybScNCgkJCQkJdGV4dCAgICAgICAgICAgID0gJ1NldHRpbmdzJw0KCQkJCQlzdGFydFBvc2l0aW9uICAgPSAnTWFudWFsJw0KCQkJCQlmb3JtQm9yZGVyU3R5bGUgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybUJvcmRlclN0eWxlXTo6Tm9uZQ0KCQkJCQlvcGFjaXR5ICAgICAgICAgPSAwICMgU3RhcnQgaW52aXNpYmxlIGZvciBmYWRlLWluIGVmZmVjdA0KCQkJCQl0b3BNb3N0ICAgICAgICAgPSAkdHJ1ZSAjIEFsd2F5cyBvbiB0b3Agb2YgbWFpbiBmb3JtIHdoZW4gdmlzaWJsZQ0KCQkJCX0NCgkJCQkkc2V0dGluZ3NGb3JtID0gU2V0LVVJRWxlbWVudCBAc2V0dGluZ3NGb3JtUHJvcHMNCgkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFNldHRpbmdzIEZvcm0NCg0KCQkJI3JlZ2lvbiBTdGVwOiBMb2FkIGN1c3RvbSBpY29uIGlmIHNwZWNpZmllZCBhbmQgZXhpc3RzDQoJCQkJIyBBdHRlbXB0IHRvIGxvYWQgYSBjdXN0b20gaWNvbiBmcm9tIHRoZSBwYXRoIGRlZmluZWQgaW4gZ2xvYmFsIGNvbmZpZy4NCgkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUGF0aHMuSWNvbiAtYW5kIChUZXN0LVBhdGggJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUGF0aHMuSWNvbikpDQoJCQkJew0KCQkJCQl0cnkNCgkJCQkJew0KCQkJCQkJJGljb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkljb24oJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUGF0aHMuSWNvbikNCgkJCQkJCSRtYWluRm9ybS5JY29uID0gJGljb24NCgkJCQkJCSRzZXR0aW5nc0Zvcm0uSWNvbiA9ICRpY29uDQoJCQkJCX0NCgkJCQkJY2F0Y2gNCgkJCQkJew0KCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRmFpbGVkIHRvIGxvYWQgaWNvbiBmcm9tICQoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUGF0aHMuSWNvbik6ICRfIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJCQl9DQoJCQkJfQ0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBMb2FkIGN1c3RvbSBpY29uIGlmIHNwZWNpZmllZCBhbmQgZXhpc3RzDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIFRvcCBCYXIgUGFuZWwNCgkJCQkjICR0b3BCYXJQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBwYW5lbCB1c2VkIGFzIGEgY3VzdG9tIHRpdGxlL2RyYWcgYmFyLg0KCQkJCSR0b3BCYXJQcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnUGFuZWwnDQoJCQkJCXdpZHRoICAgPSA0NzANCgkJCQkJaGVpZ2h0ICA9IDMwDQoJCQkJCWJnICAgICAgPSBAKDIwLCAyMCwgMjApICMgRGFyayBiYWNrZ3JvdW5kDQoJCQkJCWlkICAgICAgPSAnVG9wQmFyJw0KCQkJCX0NCgkJCQkkdG9wQmFyID0gU2V0LVVJRWxlbWVudCBAdG9wQmFyUHJvcHMNCgkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFRvcCBCYXIgUGFuZWwNCg0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgVGl0bGUgTGFiZWwNCgkJCQkjICR0aXRsZUxhYmVsUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgYXBwbGljYXRpb24gdGl0bGUgbGFiZWwgb24gdGhlIHRvcCBiYXIuDQoJCQkJJHRpdGxlTGFiZWxQcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnTGFiZWwnDQoJCQkJCXdpZHRoICAgPSAxNDANCgkJCQkJaGVpZ2h0ICA9IDEyDQoJCQkJCXRvcCAgICAgPSA1DQoJCQkJCWxlZnQgICAgPSAxMA0KCQkJCQlmZyAgICAgID0gQCgyNDAsIDI0MCwgMjQwKQ0KCQkJCQlpZCAgICAgID0gJ1RpdGxlTGFiZWwnDQoJCQkJCXRleHQgICAgPSAnRW50cm9waWEgRGFzaGJvYXJkJw0KCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDgsIFtTeXN0ZW0uRHJhd2luZy5Gb250U3R5bGVdOjpCb2xkKQ0KCQkJCX0NCgkJCQkkdGl0bGVMYWJlbEZvcm0gPSBTZXQtVUlFbGVtZW50IEB0aXRsZUxhYmVsUHJvcHMNCgkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFRpdGxlIExhYmVsDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIENvcHlyaWdodCBMYWJlbA0KCQkJCSMgJGNvcHlyaWdodExhYmVsUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgYXBwbGljYXRpb24gY29weXJpZ2h0IGxhYmVsIG9uIHRoZSB0b3AgYmFyLg0KCQkJCSRjb3B5cmlnaHRMYWJlbFByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdMYWJlbCcNCgkJCQkJd2lkdGggICA9IDE0MA0KCQkJCQloZWlnaHQgID0gMTANCgkJCQkJdG9wICAgICA9IDE2DQoJCQkJCWxlZnQgICAgPSAxMA0KCQkJCQlmZyAgICAgID0gQCgyMzAsIDIzMCwgMjMwKQ0KCQkJCQlpZCAgICAgID0gJ0NvcHlyaWdodExhYmVsJw0KCQkJCQl0ZXh0ICAgID0gW2NoYXJdMHgwMEE5ICsgJyBJbW1vcnRhbCAvIERpdmluZSAyMDI1IC0gdjEuMCcNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA2LCBbU3lzdGVtLkRyYXdpbmcuRm9udFN0eWxlXTo6SXRhbGljKQ0KCQkJCX0NCgkJCQkkY29weXJpZ2h0TGFiZWxGb3JtID0gU2V0LVVJRWxlbWVudCBAY29weXJpZ2h0TGFiZWxQcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgQ29weXJpZ2h0IExhYmVsDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIE1pbmltaXplIEJ1dHRvbg0KCQkJCSMgJG1pbkZvcm1Qcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBtaW5pbWl6ZSB3aW5kb3cgYnV0dG9uLg0KCQkJCSRtaW5Gb3JtUHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ0J1dHRvbicNCgkJCQkJd2lkdGggICA9IDMwDQoJCQkJCWhlaWdodCAgPSAzMA0KCQkJCQlsZWZ0ICAgID0gNDEwDQoJCQkJCWJnICAgICAgPSBAKDQwLCA0MCwgNDApDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnTWluRm9ybScNCgkJCQkJdGV4dCAgICA9ICdfJw0KCQkJCQlmcyAgICAgID0gJ0ZsYXQnICMgRmxhdCBhcHBlYXJhbmNlDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgMTEsIFtTeXN0ZW0uRHJhd2luZy5Gb250U3R5bGVdOjpCb2xkKQ0KCQkJCX0NCgkJCQkkYnRuTWluaW1pemVGb3JtID0gU2V0LVVJRWxlbWVudCBAbWluRm9ybVByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBNaW5pbWl6ZSBCdXR0b24NCg0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgQ2xvc2UgQnV0dG9uDQoJCQkJIyAkY2xvc2VGb3JtUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgY2xvc2Ugd2luZG93IGJ1dHRvbi4NCgkJCQkkY2xvc2VGb3JtUHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ0J1dHRvbicNCgkJCQkJd2lkdGggICA9IDMwDQoJCQkJCWhlaWdodCAgPSAzMA0KCQkJCQlsZWZ0ICAgID0gNDQwDQoJCQkJCWJnICAgICAgPSBAKDIxMCwgNDUsIDQ1KSAjIFJlZCBjb2xvciBmb3IgbW91c2Ugb3ZlciAoaW4gMS4xKQ0KCQkJCQlmZyAgICAgID0gQCgyNDAsIDI0MCwgMjQwKQ0KCQkJCQlpZCAgICAgID0gJ0Nsb3NlRm9ybScNCgkJCQkJdGV4dCAgICA9IFtjaGFyXTB4MTY2RCAjICdYJyBzeW1ib2wNCgkJCQkJZnMgICAgICA9ICdGbGF0Jw0KCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDExLCBbU3lzdGVtLkRyYXdpbmcuRm9udFN0eWxlXTo6Qm9sZCkNCgkJCQl9DQoJCQkJJGJ0bkNsb3NlRm9ybSA9IFNldC1VSUVsZW1lbnQgQGNsb3NlRm9ybVByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBDbG9zZSBCdXR0b24NCgkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgTWFpbiBVSSBFbGVtZW50cw0KDQoJCSNyZWdpb24gU3RlcDogQ3JlYXRlIE1haW4gRm9ybSBBY3Rpb24gQnV0dG9ucw0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgTGF1bmNoIEJ1dHRvbg0KCQkJCSMgJGxhdW5jaFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIExhdW5jaCBidXR0b24uDQoJCQkJJGxhdW5jaFByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdCdXR0b24nDQoJCQkJCXdpZHRoICAgPSAxMjUNCgkJCQkJaGVpZ2h0ICA9IDMwDQoJCQkJCXRvcCAgICAgPSA0MA0KCQkJCQlsZWZ0ICAgID0gMTUNCgkJCQkJYmcgICAgICA9IEAoMzUsIDE3NSwgNzUpICMgR3JlZW4gY29sb3IgZm9yIGFjdGl2ZSBzdGF0dXMNCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdMYXVuY2gnDQoJCQkJCXRleHQgICAgPSAnTGF1bmNoJw0KCQkJCQlmcyAgICAgID0gJ0ZsYXQnDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQl9DQoJCQkJJGJ0bkxhdW5jaCA9IFNldC1VSUVsZW1lbnQgQGxhdW5jaFByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBMYXVuY2ggQnV0dG9uDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIExvZ2luIEJ1dHRvbg0KCQkJCSMgJGxvZ2luUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgTG9naW4gYnV0dG9uLg0KCQkJCSRsb2dpblByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdCdXR0b24nDQoJCQkJCXdpZHRoICAgPSAxMjUNCgkJCQkJaGVpZ2h0ICA9IDMwDQoJCQkJCXRvcCAgICAgPSA0MA0KCQkJCQlsZWZ0ICAgID0gMTUwDQoJCQkJCWJnICAgICAgPSBAKDM1LCAxNzUsIDc1KSAjIEdyZWVuIGNvbG9yIGZvciBhY3RpdmUgc3RhdHVzDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnTG9naW4nDQoJCQkJCXRleHQgICAgPSAnTG9naW4nDQoJCQkJCWZzICAgICAgPSAnRmxhdCcNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KCQkJCX0NCgkJCQkkYnRuTG9naW4gPSBTZXQtVUlFbGVtZW50IEBsb2dpblByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBMb2dpbiBCdXR0b24NCg0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgU2V0dGluZ3MgQnV0dG9uDQoJCQkJIyAkc2V0dGluZ3NQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBTZXR0aW5ncyBidXR0b24uDQoJCQkJJHNldHRpbmdzUHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ0J1dHRvbicNCgkJCQkJd2lkdGggICA9IDgwDQoJCQkJCWhlaWdodCAgPSAzMA0KCQkJCQl0b3AgICAgID0gNDANCgkJCQkJbGVmdCAgICA9IDI4NQ0KCQkJCQliZyAgICAgID0gQCgyNTUsIDE2NSwgMCkgIyBPcmFuZ2UgY29sb3IgZm9yIGludmFsaWQgc2V0dGluZ3MgKGluIDEuMSkNCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdTZXR0aW5ncycNCgkJCQkJdGV4dCAgICA9ICdTZXR0aW5ncycNCgkJCQkJZnMgICAgICA9ICdGbGF0Jw0KCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQoJCQkJfQ0KCQkJCSRidG5TZXR0aW5ncyA9IFNldC1VSUVsZW1lbnQgQHNldHRpbmdzUHJvcHMNCgkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFNldHRpbmdzIEJ1dHRvbg0KDQoJCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBUZXJtaW5hdGUgQnV0dG9uIChUZXJtaW5hdGUgU2VsZWN0ZWQpDQoJCQkJIyAkZXhpdFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIGJ1dHRvbiB0byB0ZXJtaW5hdGUgc2VsZWN0ZWQgcHJvY2Vzc2VzLg0KCQkJCSRleGl0UHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ0J1dHRvbicNCgkJCQkJd2lkdGggICA9IDgwDQoJCQkJCWhlaWdodCAgPSAzMA0KCQkJCQl0b3AgICAgID0gNDANCgkJCQkJbGVmdCAgICA9IDM3NQ0KCQkJCQliZyAgICAgID0gQCgyMTAsIDQ1LCA0NSkgIyBSZWQgY29sb3IgZm9yIG1vdXNlIG92ZXIgKGluIDEuMSkNCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdUZXJtaW5hdGUnDQoJCQkJCXRleHQgICAgPSAnVGVybWluYXRlJw0KCQkJCQlmcyAgICAgID0gJ0ZsYXQnDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQl9DQoJCQkJJGJ0blN0b3AgPSBTZXQtVUlFbGVtZW50IEBleGl0UHJvcHMNCgkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFRlcm1pbmF0ZSBCdXR0b24gKFRlcm1pbmF0ZSBTZWxlY3RlZCkNCg0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgRnRvb2wgQnV0dG9uDQoJCQkJIyAkZnRvb2xQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBtYWluIEZ0b29sIGJ1dHRvbi4NCgkJCQkkZnRvb2xQcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnQnV0dG9uJw0KCQkJCQl3aWR0aCAgID0gNDQwDQoJCQkJCWhlaWdodCAgPSAzMA0KCQkJCQl0b3AgICAgID0gNzUNCgkJCQkJbGVmdCAgICA9IDE1DQoJCQkJCWJnICAgICAgPSBAKDQwLCA0MCwgNDApDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnRnRvb2wnDQoJCQkJCXRleHQgICAgPSAnRnRvb2wnDQoJCQkJCWZzICAgICAgPSAnRmxhdCcNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KCQkJCX0NCgkJCQkkYnRuRnRvb2wgPSBTZXQtVUlFbGVtZW50IEBmdG9vbFByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBGdG9vbCBCdXR0b24NCgkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgTWFpbiBGb3JtIEFjdGlvbiBCdXR0b25zDQoNCgkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgU2V0dGluZ3MgRm9ybSBDb250cm9scw0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgU2F2ZSBTZXR0aW5ncyBCdXR0b24NCgkJCQkjICRzYXZlUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgU2F2ZSBidXR0b24gb24gdGhlIHNldHRpbmdzIGZvcm0uDQoJCQkJJHNhdmVQcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnQnV0dG9uJw0KCQkJCQl3aWR0aCAgID0gMTIwDQoJCQkJCWhlaWdodCAgPSA0MA0KCQkJCQl0b3AgICAgID0gMzQwDQoJCQkJCWxlZnQgICAgPSAyMA0KCQkJCQliZyAgICAgID0gQCgzNSwgMTc1LCA3NSkgIyBHcmVlbiBjb2xvciBmb3IgdmFsaWQgc2V0dGluZ3MgKGluIDEuMSkNCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdTYXZlJw0KCQkJCQl0ZXh0ICAgID0gJ1NhdmUnDQoJCQkJCWZzICAgICAgPSAnRmxhdCcNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KCQkJCX0NCgkJCQkkYnRuU2F2ZSA9IFNldC1VSUVsZW1lbnQgQHNhdmVQcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgU2F2ZSBTZXR0aW5ncyBCdXR0b24NCg0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgQ2FuY2VsIFNldHRpbmdzIEJ1dHRvbg0KCQkJCSMgJGNhbmNlbFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIENhbmNlbCBidXR0b24gb24gdGhlIHNldHRpbmdzIGZvcm0uDQoJCQkJJGNhbmNlbFByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdCdXR0b24nDQoJCQkJCXdpZHRoICAgPSAxMjANCgkJCQkJaGVpZ2h0ICA9IDQwDQoJCQkJCXRvcCAgICAgPSAzNDANCgkJCQkJbGVmdCAgICA9IDE1MA0KCQkJCQliZyAgICAgID0gQCgyMTAsIDQ1LCA0NSkgIyBSZWQgY29sb3IgZm9yIG1vdXNlIG92ZXIgKGluIDEuMSkNCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdDYW5jZWwnDQoJCQkJCXRleHQgICAgPSAnQ2FuY2VsJw0KCQkJCQlmcyAgICAgID0gJ0ZsYXQnDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQl9DQoJCQkJJGJ0bkNhbmNlbCA9IFNldC1VSUVsZW1lbnQgQGNhbmNlbFByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBDYW5jZWwgU2V0dGluZ3MgQnV0dG9uDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIEJyb3dzZSBMYXVuY2hlciBQYXRoIEJ1dHRvbg0KCQkJCSMgJGJyb3dzZUxhdW5jaGVyUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgQnJvd3NlIGJ1dHRvbiBuZXh0IHRvIHRoZSBsYXVuY2hlciBwYXRoIGlucHV0Lg0KCQkJCSRicm93c2VMYXVuY2hlclByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdCdXR0b24nDQoJCQkJCXdpZHRoICAgPSA1NQ0KCQkJCQloZWlnaHQgID0gMjUNCgkJCQkJdG9wICAgICA9IDIwDQoJCQkJCWxlZnQgICAgPSAxMTANCgkJCQkJYmcgICAgICA9IEAoNDAsIDQwLCA0MCkgDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnQnJvd3NlJw0KCQkJCQl0ZXh0ICAgID0gJ0Jyb3dzZScNCgkJCQkJZnMgICAgICA9ICdGbGF0Jw0KCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQoJCQkJfQ0KCQkJCSRidG5Ccm93c2VMYXVuY2hlciA9IFNldC1VSUVsZW1lbnQgQGJyb3dzZUxhdW5jaGVyUHJvcHMNCgkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIEJyb3dzZSBMYXVuY2hlciBQYXRoIEJ1dHRvbg0KDQoJCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBMYXVuY2hlciBQYXRoIExhYmVsDQoJCQkJIyAkbGF1bmNoZXJMYWJlbFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIGxhYmVsIGFzc29jaWF0ZWQgd2l0aCB0aGUgbGF1bmNoZXIgcGF0aCBpbnB1dC4NCgkJCQkkbGF1bmNoZXJMYWJlbFByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdMYWJlbCcNCgkJCQkJd2lkdGggICA9IDg1DQoJCQkJCWhlaWdodCAgPSAyMA0KCQkJCQl0b3AgICAgID0gMjUNCgkJCQkJbGVmdCAgICA9IDIwDQoJCQkJCWJnICAgICAgPSBAKDQwLCA0MCwgNDAsIDApICMgVHJhbnNwYXJlbnQgYmFja2dyb3VuZA0KCQkJCQlmZyAgICAgID0gQCgyNDAsIDI0MCwgMjQwKQ0KCQkJCQlpZCAgICAgID0gJ0xhYmVsTGF1bmNoZXInDQoJCQkJCXRleHQgICAgPSAnTGF1bmNoZXIgUGF0aDonDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQl9DQoJCQkJJGxibExhdW5jaGVyID0gU2V0LVVJRWxlbWVudCBAbGF1bmNoZXJMYWJlbFByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBMYXVuY2hlciBQYXRoIExhYmVsDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIFByb2Nlc3MgTmFtZSBMYWJlbA0KCQkJCSMgJHByb2Nlc3NOYW1lTGFiZWxQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBsYWJlbCBhc3NvY2lhdGVkIHdpdGggdGhlIHByb2Nlc3MgbmFtZSBpbnB1dC4NCgkJCQkkcHJvY2Vzc05hbWVMYWJlbFByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdMYWJlbCcNCgkJCQkJd2lkdGggICA9IDg1DQoJCQkJCWhlaWdodCAgPSAyMA0KCQkJCQl0b3AgICAgID0gOTUNCgkJCQkJbGVmdCAgICA9IDIwDQoJCQkJCWJnICAgICAgPSBAKDQwLCA0MCwgNDAsIDApICMgVHJhbnNwYXJlbnQgYmFja2dyb3VuZA0KCQkJCQlmZyAgICAgID0gQCgyNDAsIDI0MCwgMjQwKQ0KCQkJCQlpZCAgICAgID0gJ0xhYmVsUHJvY2VzcycNCgkJCQkJdGV4dCAgICA9ICdQcm9jZXNzIE5hbWU6Jw0KCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQoJCQkJfQ0KCQkJCSRsYmxQcm9jZXNzTmFtZSA9IFNldC1VSUVsZW1lbnQgQHByb2Nlc3NOYW1lTGFiZWxQcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgUHJvY2VzcyBOYW1lIExhYmVsDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIE1heCBDbGllbnRzIExhYmVsDQoJCQkJIyAkbWF4Q2xpZW50c0xhYmVsUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgbGFiZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBtYXggY2xpZW50cyBpbnB1dC4NCgkJCQkkbWF4Q2xpZW50c0xhYmVsUHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ0xhYmVsJw0KCQkJCQl3aWR0aCAgID0gODUNCgkJCQkJaGVpZ2h0ICA9IDIwDQoJCQkJCXRvcCAgICAgPSAxNjUNCgkJCQkJbGVmdCAgICA9IDIwDQoJCQkJCWJnICAgICAgPSBAKDQwLCA0MCwgNDAsIDApICMgVHJhbnNwYXJlbnQgYmFja2dyb3VuZA0KCQkJCQlmZyAgICAgID0gQCgyNDAsIDI0MCwgMjQwKQ0KCQkJCQlpZCAgICAgID0gJ0xhYmVsTWF4Jw0KCQkJCQl0ZXh0ICAgID0gJ01heCBDbGllbnRzOicNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KCQkJCX0NCgkJCQkkbGJsTWF4Q2xpZW50cyA9IFNldC1VSUVsZW1lbnQgQG1heENsaWVudHNMYWJlbFByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYXggQ2xpZW50cyBMYWJlbA0KCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBTZXR0aW5ncyBGb3JtIENvbnRyb2xzDQoNCgkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgU2V0dGluZ3MgRm9ybSBJbnB1dCBDb250cm9scw0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgTGF1bmNoZXIgUGF0aCBUZXh0Qm94DQoJCQkJIyAkbGF1bmNoZXJUZXh0Qm94UHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgVGV4dEJveCB0byBpbnB1dCB0aGUgbGF1bmNoZXIgcGF0aC4NCgkJCQkkbGF1bmNoZXJUZXh0Qm94UHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ1RleHRCb3gnDQoJCQkJCXdpZHRoICAgPSAxNTANCgkJCQkJaGVpZ2h0ICA9IDMwDQoJCQkJCXRvcCAgICAgPSA1MA0KCQkJCQlsZWZ0ICAgID0gMjANCgkJCQkJYmcgICAgICA9IEAoNDAsIDQwLCA0MCkNCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdJbnB1dExhdW5jaGVyJw0KCQkJCQl0ZXh0ICAgID0gJycNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KCQkJCX0NCgkJCQkkdHh0TGF1bmNoZXIgPSBTZXQtVUlFbGVtZW50IEBsYXVuY2hlclRleHRCb3hQcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgTGF1bmNoZXIgUGF0aCBUZXh0Qm94DQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIFByb2Nlc3MgTmFtZSBUZXh0Qm94DQoJCQkJIyAkcHJvY2Vzc05hbWVUZXh0Qm94UHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgVGV4dEJveCB0byBpbnB1dCB0aGUgdGFyZ2V0IHByb2Nlc3MgbmFtZS4NCgkJCQkkcHJvY2Vzc05hbWVUZXh0Qm94UHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ1RleHRCb3gnDQoJCQkJCXdpZHRoICAgPSAxNTANCgkJCQkJaGVpZ2h0ICA9IDMwDQoJCQkJCXRvcCAgICAgPSAxMjANCgkJCQkJbGVmdCAgICA9IDIwDQoJCQkJCWJnICAgICAgPSBAKDQwLCA0MCwgNDApDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnSW5wdXRQcm9jZXNzJw0KCQkJCQl0ZXh0ICAgID0gJycNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KCQkJCX0NCgkJCQkkdHh0UHJvY2Vzc05hbWUgPSBTZXQtVUlFbGVtZW50IEBwcm9jZXNzTmFtZVRleHRCb3hQcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgUHJvY2VzcyBOYW1lIFRleHRCb3gNCg0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgTWF4IENsaWVudHMgVGV4dEJveA0KCQkJCSMgJG1heENsaWVudHNUZXh0Qm94UHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgVGV4dEJveCB0byBpbnB1dCB0aGUgbWF4aW11bSBudW1iZXIgb2YgY2xpZW50cy4NCgkJCQkkbWF4Q2xpZW50c1RleHRCb3hQcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnVGV4dEJveCcNCgkJCQkJd2lkdGggICA9IDE1MA0KCQkJCQloZWlnaHQgID0gMzANCgkJCQkJdG9wICAgICA9IDE5MA0KCQkJCQlsZWZ0ICAgID0gMjANCgkJCQkJYmcgICAgICA9IEAoNDAsIDQwLCA0MCkNCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdJbnB1dE1heCcNCgkJCQkJdGV4dCAgICA9ICcnDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQl9DQoJCQkJJHR4dE1heENsaWVudHMgPSBTZXQtVUlFbGVtZW50IEBtYXhDbGllbnRzVGV4dEJveFByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYXggQ2xpZW50cyBUZXh0Qm94DQoNCgkJCSNyZWdpb24gU3RlcDogRGVmaW5lIFNsb3QgT3B0aW9ucyBmb3IgTG9naW4gUG9zaXRpb25zDQoJCQkJIyAkc2xvdE9wdGlvbnM6IEFycmF5IGRlZmluaW5nIHRoZSBhdmFpbGFibGUgY2hvaWNlcyBmb3IgbG9naW4gcG9zaXRpb24gQ29tYm9Cb3hlcy4NCgkJCQkkc2xvdE9wdGlvbnMgPSBAKCcxJywgJzInLCAnMycpDQoJCQkJIyAkTG9naW5Db21ib3M6IE9yZGVyZWQgZGljdGlvbmFyeSB0byBzdG9yZSByZWZlcmVuY2VzIHRvIHRoZSBjcmVhdGVkIGxvZ2luIENvbWJvQm94ZXMuDQoJCQkJJExvZ2luQ29tYm9zID0gW29yZGVyZWRdQHt9DQoJCQkjZW5kcmVnaW9uIFN0ZXA6IERlZmluZSBTbG90IE9wdGlvbnMgZm9yIExvZ2luIFBvc2l0aW9ucw0KDQoJCQkjcmVnaW9uIFN0ZXA6IER5bmFtaWNhbGx5IENyZWF0ZSBMb2dpbiBQb3NpdGlvbiBMYWJlbHMgYW5kIENvbWJvQm94ZXMNCgkJCQkjIExvb3AgdG8gY3JlYXRlIGEgbGFiZWwgYW5kIENvbWJvQm94IGZvciBlYWNoIHBvdGVudGlhbCBsb2dpbiBwb3NpdGlvbiAoMSB0byAxMCkuDQoJCQkJMS4uMTAgfCBGb3JFYWNoLU9iamVjdCB7DQoJCQkJCSRpID0gJF8NCgkJCQkJJHBvc2l0aW9uS2V5ID0gIkxvZ2luJGkiDQoNCgkJCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgTGFiZWwgZm9yIFBvc2l0aW9uICRpDQoJCQkJCQkjICRsYmxQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBsYWJlbCBmb3IgdGhlIGN1cnJlbnQgbG9naW4gcG9zaXRpb24uDQoJCQkJCQkkbGJsUHJvcHMgPSBAew0KCQkJCQkJCXR5cGUgICAgPSAnTGFiZWwnDQoJCQkJCQkJdmlzaWJsZSA9ICR0cnVlDQoJCQkJCQkJd2lkdGggICA9IDExMA0KCQkJCQkJCWhlaWdodCAgPSAyMA0KCQkJCQkJCXRvcCAgICAgPSAoMjUgKyAoKCRpIC0gMSkgKiAzMCkpICMgQ2FsY3VsYXRlIHZlcnRpY2FsIHBvc2l0aW9uDQoJCQkJCQkJbGVmdCAgICA9IDE4MA0KCQkJCQkJCWJnICAgICAgPSBAKDMwLCAzMCwgMzAsIDApICMgVHJhbnNwYXJlbnQgYmFja2dyb3VuZA0KCQkJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCQkJaWQgICAgICA9ICJMYWJlbFBvcyRpIg0KCQkJCQkJCXRleHQgICAgPSAiTG9naW4gUG9zaXRpb24gJGlgOiINCgkJCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQoJCQkJCQl9DQoJCQkJCQkkbGJsID0gU2V0LVVJRWxlbWVudCBAbGJsUHJvcHMNCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgTGFiZWwgZm9yIFBvc2l0aW9uICRpDQoNCgkJCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgQ29tYm9Cb3ggZm9yIFBvc2l0aW9uICRpDQoJCQkJCQkjICRjbWJQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBDb21ib0JveCBmb3IgdGhlIGN1cnJlbnQgbG9naW4gcG9zaXRpb24uDQoJCQkJCQkkY21iUHJvcHMgPSBAew0KCQkJCQkJCXR5cGUgICAgICAgICAgPSAnQ29tYm9Cb3gnDQoJCQkJCQkJdmlzaWJsZSAgICAgICA9ICR0cnVlDQoJCQkJCQkJd2lkdGggICAgICAgICA9IDE1MA0KCQkJCQkJCWhlaWdodCAgICAgICAgPSAyNQ0KCQkJCQkJCXRvcCAgICAgICAgICAgPSAoMjUgKyAoKCRpIC0gMSkgKiAzMCkpICMgQ2FsY3VsYXRlIHZlcnRpY2FsIHBvc2l0aW9uDQoJCQkJCQkJbGVmdCAgICAgICAgICA9IDI5MA0KCQkJCQkJCWJnICAgICAgICAgICAgPSBAKDQwLCA0MCwgNDApDQoJCQkJCQkJZmcgICAgICAgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJCQlmcyAgICAgICAgICAgID0gJ0ZsYXQnDQoJCQkJCQkJaWQgICAgICAgICAgICA9ICJMb2dpbiRpIg0KCQkJCQkJCWZvbnQgICAgICAgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQkJCQlkcm9wZG93bnN0eWxlID0gJ0Ryb3BEb3duTGlzdCcgIyBVc2VyIGNhbm5vdCB0eXBlIGN1c3RvbSB2YWx1ZXMNCgkJCQkJCX0NCgkJCQkJCSRjbWIgPSBTZXQtVUlFbGVtZW50IEBjbWJQcm9wcw0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBDb21ib0JveCBmb3IgUG9zaXRpb24gJGkNCg0KCQkJCQkjcmVnaW9uIFN0ZXA6IEFkZCBTbG90IE9wdGlvbnMgdG8gQ29tYm9Cb3gNCgkJCQkJCSMgUG9wdWxhdGUgdGhlIGNyZWF0ZWQgQ29tYm9Cb3ggd2l0aCB0aGUgZGVmaW5lZCBzbG90IG9wdGlvbnMuDQoJCQkJCQkkc2xvdE9wdGlvbnMgfCBGb3JFYWNoLU9iamVjdCB7DQoJCQkJCQkJJGNtYi5JdGVtcy5BZGQoJF8pDQoJCQkJCQl9DQoJCQkJCSNlbmRyZWdpb24gU3RlcDogQWRkIFNsb3QgT3B0aW9ucyB0byBDb21ib0JveA0KDQoJCQkJCSNyZWdpb24gU3RlcDogQWRkIENvbnRyb2xzIHRvIFNldHRpbmdzIEZvcm0gYW5kIFN0b3JlIENvbWJvQm94DQoJCQkJCQkjIEFkZCB0aGUgbmV3bHkgY3JlYXRlZCBsYWJlbCBhbmQgQ29tYm9Cb3ggdG8gdGhlIHNldHRpbmdzIGZvcm0ncyBjb250cm9scyBjb2xsZWN0aW9uLg0KCQkJCQkJJHNldHRpbmdzRm9ybS5Db250cm9scy5BZGQoJGxibCkNCgkJCQkJCSRzZXR0aW5nc0Zvcm0uQ29udHJvbHMuQWRkKCRjbWIpDQoJCQkJCQkjIFN0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSBDb21ib0JveCBpbiB0aGUgJExvZ2luQ29tYm9zIGRpY3Rpb25hcnkuDQoJCQkJCQkkTG9naW5Db21ib3NbJHBvc2l0aW9uS2V5XSA9ICRjbWINCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBBZGQgQ29udHJvbHMgdG8gU2V0dGluZ3MgRm9ybSBhbmQgU3RvcmUgQ29tYm9Cb3gNCgkJCQl9DQoJCQkjZW5kcmVnaW9uIFN0ZXA6IER5bmFtaWNhbGx5IENyZWF0ZSBMb2dpbiBQb3NpdGlvbiBMYWJlbHMgYW5kIENvbWJvQm94ZXMNCg0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgRmluYWxpemUgQ29sbGVjdG9yIExvZ2luIENoZWNrQm94DQoJCQkJIyAkZmluYWxpemVDaGVja0JveFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIENoZWNrQm94IHRvIGVuYWJsZS9kaXNhYmxlIGZpbmFsaXplIGNvbGxlY3RvciBsb2dpbi4NCgkJCQkkZmluYWxpemVDaGVja0JveFByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdDaGVja0JveCcNCgkJCQkJd2lkdGggICA9IDIwMA0KCQkJCQloZWlnaHQgID0gMjANCgkJCQkJdG9wICAgICA9IDMxMA0KCQkJCQlsZWZ0ICAgID0gMA0KCQkJCQliZyAgICAgID0gQCgzMCwgMzAsIDMwKQ0KCQkJCQlmZyAgICAgID0gQCgyNDAsIDI0MCwgMjQwKQ0KCQkJCQlpZCAgICAgID0gJ0ZpbmFsaXplQ29sbGVjdG9yTG9naW4nDQoJCQkJCXRleHQgICAgPSAnU3RhcnQgQ29sbGVjdG9yIGFmdGVyIExvZ2luJw0KCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQoJCQkJfQ0KCQkJCSRjaGtGaW5hbGl6ZUxvZ2luID0gU2V0LVVJRWxlbWVudCBAZmluYWxpemVDaGVja0JveFByb3BzDQoJCQkJJHNldHRpbmdzRm9ybS5Db250cm9scy5BZGQoJGNoa0ZpbmFsaXplTG9naW4pDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBGaW5hbGl6ZSBDb2xsZWN0b3IgTG9naW4gQ2hlY2tCb3gNCg0KCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBTZXR0aW5ncyBGb3JtIElucHV0IENvbnRyb2xzDQoNCgkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgTWFpbiBGb3JtIERhdGFHcmlkIERpc3BsYXkgQ29udHJvbHMNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIE1haW4gRGF0YUdyaWQgKFByb2Nlc3MgTGlzdCkgKGluIDEuMSkNCgkJCQkjICRkYXRhR3JpZE1haW5Qcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBwcmltYXJ5IERhdGFHcmlkVmlldyBkaXNwbGF5aW5nIHByb2Nlc3MgaW5mby4NCgkJCQkkZGF0YUdyaWRNYWluUHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ0RhdGFHcmlkVmlldycNCgkJCQkJdmlzaWJsZSA9ICRmYWxzZQ0KCQkJCQl3aWR0aCAgID0gMTU1DQoJCQkJCWhlaWdodCAgPSAzMjANCgkJCQkJdG9wICAgICA9IDExNQ0KCQkJCQlsZWZ0ICAgID0gNQ0KCQkJCQliZyAgICAgID0gQCg0MCwgNDAsIDQwKQ0KCQkJCQlmZyAgICAgID0gQCgyNDAsIDI0MCwgMjQwKQ0KCQkJCQlpZCAgICAgID0gJ0RhdGFHcmlkTWFpbicNCgkJCQkJdGV4dCAgICA9ICcnDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQl9DQoJCQkJJERhdGFHcmlkTWFpbiA9IFNldC1VSUVsZW1lbnQgQGRhdGFHcmlkTWFpblByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYWluIERhdGFHcmlkIChQcm9jZXNzIExpc3QpIChpbiAxLjEpDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIEZpbGxlciBEYXRhR3JpZA0KCQkJCSMgJGRhdGFHcmlkRmlsbGVyUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgc2Vjb25kYXJ5IERhdGFHcmlkVmlldyAocHVycG9zZSBtaWdodCBiZSBzcGVjaWZpYykuDQoJCQkJJGRhdGFHcmlkRmlsbGVyUHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ0RhdGFHcmlkVmlldycNCgkJCQkJd2lkdGggICA9IDQ1MA0KCQkJCQloZWlnaHQgID0gMzIwDQoJCQkJCXRvcCAgICAgPSAxMTUNCgkJCQkJbGVmdCAgICA9IDEwDQoJCQkJCWJnICAgICAgPSBAKDQwLCA0MCwgNDApDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnRGF0YUdyaWRGaWxsZXInDQoJCQkJCXRleHQgICAgPSAnJw0KCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQoJCQkJfQ0KCQkJCSREYXRhR3JpZEZpbGxlciA9IFNldC1VSUVsZW1lbnQgQGRhdGFHcmlkRmlsbGVyUHJvcHMNCgkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIEZpbGxlciBEYXRhR3JpZA0KCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYWluIEZvcm0gRGF0YUdyaWQgRGlzcGxheSBDb250cm9scw0KDQoJCSNyZWdpb24gU3RlcDogQ3JlYXRlIENvbnRleHQgTWVudSBhbmQgTG9naW4gUG9zaXRpb24gQ29udHJvbHMNCg0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgQ29udGV4dCBNZW51IGZvciBEYXRhR3JpZHMNCgkJCQkjIENyZWF0ZSB0aGUgY29udGV4dCBtZW51IHN0cmlwIGFuZCBpdHMgaXRlbXMgZm9yIERhdGFHcmlkIGludGVyYWN0aW9ucy4NCgkJCQkkY3R4TWVudSA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQ29udGV4dE1lbnVTdHJpcA0KCQkJCSRpdG1Gcm9udCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuVG9vbFN0cmlwTWVudUl0ZW0oJ1Nob3cnKQ0KCQkJCSRpdG1CYWNrID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Ub29sU3RyaXBNZW51SXRlbSgnTWluaW1pemUnKQ0KCQkJCSRpdG1SZXNpemVDZW50ZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlRvb2xTdHJpcE1lbnVJdGVtKCdSZXNpemUnKQ0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgQ29udGV4dCBNZW51IGZvciBEYXRhR3JpZHMNCg0KCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBDb250ZXh0IE1lbnUgYW5kIExvZ2luIFBvc2l0aW9uIENvbnRyb2xzDQoNCgkJI3JlZ2lvbiBTdGVwOiBTZXQgVXAgQ29udHJvbCBIaWVyYXJjaHkgYW5kIENvbnRleHQgTWVudXMNCgkJCSNyZWdpb24gU3RlcDogQWRkIENvbnRyb2xzIHRvIE1haW4gRm9ybQ0KCQkJCSMgQWRkIHRoZSBwcmltYXJ5IGNvbnRyb2xzIHRvIHRoZSBtYWluIGFwcGxpY2F0aW9uIGZvcm0uDQoJCQkJJG1haW5Gb3JtLkNvbnRyb2xzLkFkZFJhbmdlKEAoJHRvcEJhciwgJGJ0bkxvZ2luLCAkYnRuRnRvb2wsICRidG5MYXVuY2gsICRidG5TZXR0aW5ncywgJGJ0blN0b3AsICREYXRhR3JpZE1haW4sICREYXRhR3JpZEZpbGxlcikpDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IEFkZCBDb250cm9scyB0byBNYWluIEZvcm0NCg0KCQkJI3JlZ2lvbiBTdGVwOiBBZGQgQ29udHJvbHMgdG8gVG9wIEJhcg0KCQkJCSMgQWRkIHRoZSB0aXRsZSBsYWJlbCBhbmQgd2luZG93IGNvbnRyb2wgYnV0dG9ucyB0byB0aGUgdG9wIGJhciBwYW5lbC4NCgkJCQkkdG9wQmFyLkNvbnRyb2xzLkFkZFJhbmdlKEAoJHRpdGxlTGFiZWxGb3JtLCAkY29weXJpZ2h0TGFiZWxGb3JtLCAkYnRuTWluaW1pemVGb3JtLCAkYnRuQ2xvc2VGb3JtKSkNCgkJCSNlbmRyZWdpb24gU3RlcDogQWRkIENvbnRyb2xzIHRvIFRvcCBCYXINCg0KCQkJI3JlZ2lvbiBTdGVwOiBTZXQgVXAgQ29udGV4dCBNZW51IGZvciBEYXRhR3JpZHMNCgkJCQkjIEFkZCB0aGUgcHJldmlvdXNseSBjcmVhdGVkIGl0ZW1zIHRvIHRoZSBjb250ZXh0IG1lbnUgc3RyaXAuDQoJCQkJJGN0eE1lbnUuSXRlbXMuQWRkUmFuZ2UoQCgkaXRtRnJvbnQsICRpdG1CYWNrLCAkaXRtUmVzaXplQ2VudGVyKSkNCgkJCQkjIEFzc2lnbiB0aGUgY29udGV4dCBtZW51IHRvIGJvdGggRGF0YUdyaWRWaWV3IGNvbnRyb2xzLg0KCQkJCSREYXRhR3JpZE1haW4uQ29udGV4dE1lbnVTdHJpcCA9ICRjdHhNZW51DQoJCQkJJERhdGFHcmlkRmlsbGVyLkNvbnRleHRNZW51U3RyaXAgPSAkY3R4TWVudQ0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBTZXQgVXAgQ29udGV4dCBNZW51IGZvciBEYXRhR3JpZHMNCg0KCQkJI3JlZ2lvbiBTdGVwOiBBZGQgQ29udHJvbHMgdG8gU2V0dGluZ3MgRm9ybQ0KCQkJCSMgQWRkIHRoZSBwcmltYXJ5IGNvbnRyb2xzIHRvIHRoZSBzZXR0aW5ncyBmb3JtLiAoTG9naW4gcG9zaXRpb24gY29udHJvbHMgd2VyZSBhZGRlZCBkeW5hbWljYWxseSBlYXJsaWVyKS4NCgkJCQkkc2V0dGluZ3NGb3JtLkNvbnRyb2xzLkFkZFJhbmdlKEAoJGJ0blNhdmUsICRidG5DYW5jZWwsICRsYmxMYXVuY2hlciwgJHR4dExhdW5jaGVyLCAkYnRuQnJvd3NlTGF1bmNoZXIsICRsYmxQcm9jZXNzTmFtZSwgJHR4dFByb2Nlc3NOYW1lLCAkbGJsTWF4Q2xpZW50cywgJHR4dE1heENsaWVudHMpKQ0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBBZGQgQ29udHJvbHMgdG8gU2V0dGluZ3MgRm9ybQ0KCQkjZW5kcmVnaW9uIFN0ZXA6IFNldCBVcCBDb250cm9sIEhpZXJhcmNoeSBhbmQgQ29udGV4dCBNZW51cw0KDQoJCSNyZWdpb24gU3RlcDogQ3JlYXRlIEdsb2JhbCBVSSBPYmplY3QgZm9yIEVsZW1lbnQgQWNjZXNzDQoJCQkjICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJOiBBIGNlbnRyYWwgUFNDdXN0b21PYmplY3QgaG9sZGluZyByZWZlcmVuY2VzIHRvIGFsbCBjcmVhdGVkIFVJIGVsZW1lbnRzIGZvciBlYXN5IGFjY2VzcyB0aHJvdWdob3V0IHRoZSBhcHBsaWNhdGlvbi4NCgkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJID0gW1BTQ3VzdG9tT2JqZWN0XUB7DQoJCQkJIyBNYWluIGZvcm0gYW5kIGNvbnRhaW5lcnMNCgkJCQlNYWluRm9ybSAgICAgICAgICAgICAgICAgICA9ICRtYWluRm9ybQ0KCQkJCVNldHRpbmdzRm9ybSAgICAgICAgICAgICAgID0gJHNldHRpbmdzRm9ybQ0KCQkJCVRvcEJhciAgICAgICAgICAgICAgICAgICAgID0gJHRvcEJhcg0KDQoJCQkJIyBXaW5kb3cgY29udHJvbCBidXR0b25zDQoJCQkJQ2xvc2VGb3JtICAgICAgICAgICAgICAgICAgPSAkYnRuQ2xvc2VGb3JtDQoJCQkJTWluRm9ybSAgICAgICAgICAgICAgICAgICAgPSAkYnRuTWluaW1pemVGb3JtDQoNCgkJCQkjIE1haW4gZGlzcGxheSBlbGVtZW50cw0KCQkJCURhdGFHcmlkTWFpbiAgICAgICAgICAgICAgID0gJERhdGFHcmlkTWFpbg0KCQkJCURhdGFHcmlkRmlsbGVyICAgICAgICAgICAgID0gJERhdGFHcmlkRmlsbGVyDQoNCgkJCQkjIE1haW4gYWN0aW9uIGJ1dHRvbnMNCgkJCQlMb2dpbkJ1dHRvbiAgICAgICAgICAgICAgICA9ICRidG5Mb2dpbg0KCQkJCUZ0b29sICAgICAgICAgICAgICAgICAgICAgID0gJGJ0bkZ0b29sDQoJCQkJU2V0dGluZ3MgICAgICAgICAgICAgICAgICAgPSAkYnRuU2V0dGluZ3MNCgkJCQlFeGl0ICAgICAgICAgICAgICAgICAgICAgICA9ICRidG5TdG9wDQoJCQkJTGF1bmNoICAgICAgICAgICAgICAgICAgICAgPSAkYnRuTGF1bmNoDQoNCgkJCQkjIFNldHRpbmdzIGZvcm0gbGFiZWxzDQoJCQkJTGFiZWxMYXVuY2hlciAgICAgICAgICAgICAgPSAkbGJsTGF1bmNoZXINCgkJCQlMYWJlbFByb2Nlc3MgICAgICAgICAgICAgICA9ICRsYmxQcm9jZXNzTmFtZQ0KCQkJCUxhYmVsTWF4ICAgICAgICAgICAgICAgICAgID0gJGxibE1heENsaWVudHMNCg0KCQkJCSMgU2V0dGluZ3MgZm9ybSBpbnB1dHMNCgkJCQlJbnB1dExhdW5jaGVyICAgICAgICAgICAgICA9ICR0eHRMYXVuY2hlcg0KCQkJCUlucHV0UHJvY2VzcyAgICAgICAgICAgICAgID0gJHR4dFByb2Nlc3NOYW1lDQoJCQkJSW5wdXRNYXggICAgICAgICAgICAgICAgICAgPSAkdHh0TWF4Q2xpZW50cw0KCQkJCUJyb3dzZSAgICAgICAgICAgICAgICAgICAgID0gJGJ0bkJyb3dzZUxhdW5jaGVyDQoJCQkJU2F2ZSAgICAgICAgICAgICAgICAgICAgICAgPSAkYnRuU2F2ZQ0KCQkJCUNhbmNlbCAgICAgICAgICAgICAgICAgICAgID0gJGJ0bkNhbmNlbA0KDQoJCQkJIyBMb2dpbiBwb3NpdGlvbiBjb250cm9scw0KCQkJCVBvc1JhbmdlICAgICAgICAgICAgICAgICAgID0gJHNsb3RPcHRpb25zICMgQXZhaWxhYmxlIHBvc2l0aW9uIG51bWJlcnMNCgkJCQlMb2dpbiAgICAgICAgICAgICAgICAgICAgICA9ICRMb2dpbkNvbWJvcyAjIERpY3Rpb25hcnkgb2YgTG9naW4gQ29tYm9Cb3hlcw0KCQkJCUZpbmFsaXplQ29sbGVjdG9yTG9naW4gICAgID0gJGNoa0ZpbmFsaXplTG9naW4gIyBDaGVja2JveCBmb3IgZmluYWxpemUgY29sbGVjdG9yIGxvZ2luDQoNCgkJCQkjIENvbnRleHQgbWVudSBpdGVtcw0KCQkJCUNvbnRleHRNZW51ICAgICAgICAgICAgICAgID0gJGN0eE1lbnUNCgkJCQlDb250ZXh0TWVudUZyb250ICAgICAgICAgICA9ICRpdG1Gcm9udA0KCQkJCUNvbnRleHRNZW51QmFjayAgICAgICAgICAgID0gJGl0bUJhY2sNCgkJCQlDb250ZXh0TWVudVJlc2l6ZUFuZENlbnRlciA9ICRpdG1SZXNpemVDZW50ZXINCgkJCX0NCgkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgR2xvYmFsIFVJIE9iamVjdCBmb3IgRWxlbWVudCBBY2Nlc3MNCg0KCQkjcmVnaW9uIFN0ZXA6IFJlZ2lzdGVyIEFsbCBVSSBFdmVudCBIYW5kbGVycw0KCQkJIyBDYWxsIHRoZSBmdW5jdGlvbiB0byBhdHRhY2ggZXZlbnQgaGFuZGxlcnMgdG8gdGhlIGNyZWF0ZWQgVUkgZWxlbWVudHMuDQoJCQlSZWdpc3Rlci1VSUV2ZW50SGFuZGxlcnMNCgkJI2VuZHJlZ2lvbiBTdGVwOiBSZWdpc3RlciBBbGwgVUkgRXZlbnQgSGFuZGxlcnMNCg0KCQkjcmVnaW9uIFN0ZXA6IFJldHVybiBTdWNjZXNzIFN0YXR1cw0KCQkJcmV0dXJuICR0cnVlDQoJCSNlbmRyZWdpb24gU3RlcDogUmV0dXJuIFN1Y2Nlc3MgU3RhdHVzDQoJfQ0KI2VuZHJlZ2lvbiBGdW5jdGlvbjogSW5pdGlhbGl6ZS1VSQ0KDQojcmVnaW9uIEZ1bmN0aW9uOiBSZWdpc3Rlci1VSUV2ZW50SGFuZGxlcnMNCglmdW5jdGlvbiBSZWdpc3Rlci1VSUV2ZW50SGFuZGxlcnMNCgl7DQoJCTwjDQoJCS5TWU5PUFNJUw0KCQkJUmVnaXN0ZXJzIGFsbCBuZWNlc3NhcnkgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBVSSBlbGVtZW50cy4NCgkJLk5PVEVTDQoJCQlEZWZpbmVzIGEgbWFwcGluZyBvZiBVSSBlbGVtZW50IG5hbWVzIHRvIHRoZWlyIGV2ZW50cyBhbmQgY29ycmVzcG9uZGluZyBzY3JpcHQgYmxvY2tzIChhY3Rpb25zKS4NCgkJCVVzZXMgUmVnaXN0ZXItT2JqZWN0RXZlbnQgdG8gYXR0YWNoIHRoZXNlIGhhbmRsZXJzLiBJbmNsdWRlcyBsb2dpYyBmb3IgZm9ybSBsb2FkaW5nLCBjbG9zaW5nLA0KCQkJcmVzaXppbmcsIGJ1dHRvbiBjbGlja3MsIGNvbnRleHQgbWVudSBhY3Rpb25zLCBldGMuIEVuc3VyZXMgcHJldmlvdXMgaGFuZGxlcnMgd2l0aCB0aGUgc2FtZQ0KCQkJc291cmNlIGlkZW50aWZpZXIgYXJlIHVucmVnaXN0ZXJlZCBmaXJzdC4NCgkJIz4NCgkJW0NtZGxldEJpbmRpbmcoKV0NCgkJcGFyYW0oKQ0KDQoJCSNyZWdpb24gU3RlcDogVmFsaWRhdGUgR2xvYmFsIFVJIE9iamVjdCBFeGlzdGVuY2UNCgkJCSMgRW5zdXJlIHRoZSBVSSBvYmplY3QgaGFzIGJlZW4gaW5pdGlhbGl6ZWQgYmVmb3JlIGF0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgZXZlbnRzLg0KCQkJaWYgKCRudWxsIC1lcSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSSkNCgkJCXsNCgkJCQlXcml0ZS1WZXJib3NlICcgIFVJOiBHbG9iYWwgVUkgaXMgbnVsbCwgZXhpdGluZyBldmVudCByZWdpc3RyYXRpb24nIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJcmV0dXJuDQoJCQl9DQoJCSNlbmRyZWdpb24gU3RlcDogVmFsaWRhdGUgR2xvYmFsIFVJIE9iamVjdCBFeGlzdGVuY2UNCg0KCQkjcmVnaW9uIFN0ZXA6IERlZmluZSBFdmVudCBIYW5kbGVyIE1hcHBpbmdzDQoJCQkjICRldmVudE1hcHBpbmdzOiBIYXNodGFibGUgZGVmaW5pbmcgd2hpY2ggc2NyaXB0IGJsb2NrIHRvIGV4ZWN1dGUgZm9yIHNwZWNpZmljIGV2ZW50cyBvbiBzcGVjaWZpYyBVSSBlbGVtZW50cy4NCgkJCSRldmVudE1hcHBpbmdzID0gQHsNCgkJCQkjIE1haW4gZm9ybSBldmVudHMNCgkJCQlNYWluRm9ybSAgICAgICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIE1haW5Gb3JtIExvYWQgRXZlbnQNCgkJCQkJCSMgSW5pdGlhbGl6ZSBmb3JtIG9uIGxvYWQNCgkJCQkJCUxvYWQgICAgICAgID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogTG9hZCBDb25maWd1cmF0aW9uIGZyb20gSU5JIEZpbGUgb24gRm9ybSBMb2FkDQoJCQkJCQkJCSMgTG9hZCBzZXR0aW5ncyBmcm9tIHRoZSBJTkkgZmlsZSBpZiB0aGUgcGF0aCBpcyBjb25maWd1cmVkLg0KCQkJCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUGF0aHMuSW5pKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQkjIENoZWNrIGlmIElOSSBmaWxlIGV4aXN0cw0KCQkJCQkJCQkJJGluaUV4aXN0cyA9IFRlc3QtUGF0aCAtUGF0aCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5QYXRocy5JbmkNCgkJCQkJCQkJCWlmICgkaW5pRXhpc3RzKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IElOSSBmaWxlIGV4aXN0cyBhdDogJCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5QYXRocy5JbmkpIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoNCgkJCQkJCQkJCQkjIENoZWNrIGZpbGUgc2l6ZSAoZm9yIGRlYnVnZ2luZykNCgkJCQkJCQkJCQkkZmlsZUluZm8gPSBHZXQtSXRlbSAtUGF0aCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5QYXRocy5JbmkNCgkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBJTkkgZmlsZSBzaXplOiAkKCRmaWxlSW5mby5MZW5ndGgpIGJ5dGVzIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoNCgkJCQkJCQkJCQkjIFRyeSB0byByZWFkIHJhdyBjb250ZW50IGZvciBkZWJ1Z2dpbmcNCgkJCQkJCQkJCQl0cnkNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCSRyYXdDb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUGF0aHMuSW5pIC1SYXcNCgkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogSU5JIGNvbnRlbnQ6IGByYG4kKCRyYXdDb250ZW50LlN1YnN0cmluZygwLCBbTWF0aF06Ok1pbigxMDAwLCAkcmF3Q29udGVudC5MZW5ndGgpKSkgYHJgbi4uLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQljYXRjaA0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogQ291bGQgbm90IHJlYWQgcmF3IElOSSBjb250ZW50OiAkXyIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJCQkJCQkJCQl9DQoNCgkJCQkJCQkJCQkjIFVzZSBHZXQtSW5pRmlsZUNvbnRlbnQgdG8gcmVhZCBhbGwgc2V0dGluZ3MgYXQgb25jZQ0KCQkJCQkJCQkJCSRpbmlTZXR0aW5ncyA9IEdldC1JbmlGaWxlQ29udGVudCAtSW5pICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkluaQ0KDQoJCQkJCQkJCQkJIyBDaGVjayBpZiB3ZSBnb3QgYW55IHNldHRpbmdzDQoJCQkJCQkJCQkJaWYgKCRpbmlTZXR0aW5ncy5Db3VudCAtZ3QgMCkNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgJyAgVUk6IFN1Y2Nlc3NmdWxseSByZWFkIHNldHRpbmdzIGZyb20gSU5JIGZpbGUnIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCg0KCQkJCQkJCQkJCQkjIFN0b3JlIHNldHRpbmdzIGluIGdsb2JhbCB2YXJpYWJsZQ0KCQkJCQkJCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcgPSAkaW5pU2V0dGluZ3MNCg0KCQkJCQkJCQkJCQkjIExvZyBsb2FkZWQgc2V0dGluZ3MgKGZvciBkZWJ1Z2dpbmcpDQoJCQkJCQkJCQkJCWZvcmVhY2ggKCRzZWN0aW9uIGluICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZy5LZXlzKQ0KCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWyRzZWN0aW9uXSAtYW5kICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skc2VjdGlvbl0uS2V5cy5Db3VudCAtZ3QgMCkNCgkJCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJCQlmb3JlYWNoICgka2V5IGluICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skc2VjdGlvbl0uS2V5cykNCgkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IExvYWRlZCBzZXR0aW5nICRzZWN0aW9uLiRrZXkgPSAkKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skc2VjdGlvbl1bJGtleV0pIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmV5DQoJCQkJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCQkJZWxzZQ0KCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IFNlY3Rpb24gJHNlY3Rpb24gaGFzIG5vIGtleXMiIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJZWxzZQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogTm8gc2V0dGluZ3MgZm91bmQgaW4gSU5JIGZpbGUnIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkJZWxzZQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IElOSSBmaWxlIGRvZXMgbm90IGV4aXN0IGF0OiAkKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkluaSkiIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQkJCQl9DQoNCgkJCQkJCQkJCSMgVXBkYXRlIFVJIHdpdGggbG9hZGVkIHNldHRpbmdzDQoJCQkJCQkJCQlTeW5jLUNvbmZpZ1RvVUkNCgkJCQkJCQkJfQ0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogTG9hZCBDb25maWd1cmF0aW9uIGZyb20gSU5JIEZpbGUgb24gRm9ybSBMb2FkDQoNCgkJCQkJCQkjcmVnaW9uIFN0ZXA6IFN0b3JlIEluaXRpYWwgQ29udHJvbCBQcm9wZXJ0aWVzIGZvciBSZXNpemluZw0KCQkJCQkJCQkjIFN0b3JlIGluaXRpYWwgZGltZW5zaW9ucyBhbmQgcG9zaXRpb25zIGZvciBkeW5hbWljIHJlc2l6aW5nLg0KCQkJCQkJCQkkc2NyaXB0OmluaXRpYWxDb250cm9sUHJvcHMgPSBAe30NCgkJCQkJCQkJJHNjcmlwdDppbml0aWFsRm9ybVdpZHRoID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTWFpbkZvcm0uV2lkdGgNCgkJCQkJCQkJJHNjcmlwdDppbml0aWFsRm9ybUhlaWdodCA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtLkhlaWdodA0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogU3RvcmUgSW5pdGlhbCBDb250cm9sIFByb3BlcnRpZXMgZm9yIFJlc2l6aW5nDQoNCgkJCQkJCQkjcmVnaW9uIFN0ZXA6IERlZmluZSBDb250cm9scyB0byBTY2FsZSBhbmQgU3RvcmUgSW5pdGlhbCBQcm9wZXJ0aWVzDQoJCQkJCQkJCSMgRGVmaW5lIHdoaWNoIGNvbnRyb2xzIHNob3VsZCBiZSBzY2FsZWQgZHVyaW5nIGZvcm0gcmVzaXplLg0KCQkJCQkJCQkkY29udHJvbHNUb1NjYWxlID0gQCgnVG9wQmFyJywgJ0xvZ2luJywgJ0Z0b29sJywgJ1NldHRpbmdzJywgJ0V4aXQnLCAnTGF1bmNoJywgJ0RhdGFHcmlkTWFpbicsICdEYXRhR3JpZEZpbGxlcicsICdNaW5Gb3JtJywgJ0Nsb3NlRm9ybScpDQoNCgkJCQkJCQkJIyBTdG9yZSBpbml0aWFsIHByb3BlcnRpZXMgZm9yIGVhY2ggc2NhbGFibGUgY29udHJvbC4NCgkJCQkJCQkJZm9yZWFjaCAoJGNvbnRyb2xOYW1lIGluICRjb250cm9sc1RvU2NhbGUpDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSRjb250cm9sID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuJGNvbnRyb2xOYW1lDQoJCQkJCQkJCQlpZiAoJGNvbnRyb2wpDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJJHNjcmlwdDppbml0aWFsQ29udHJvbFByb3BzWyRjb250cm9sTmFtZV0gPSBAew0KCQkJCQkJCQkJCQlMZWZ0ICAgICAgICAgICAgID0gJGNvbnRyb2wuTGVmdA0KCQkJCQkJCQkJCQlUb3AgICAgICAgICAgICAgID0gJGNvbnRyb2wuVG9wDQoJCQkJCQkJCQkJCVdpZHRoICAgICAgICAgICAgPSAkY29udHJvbC5XaWR0aA0KCQkJCQkJCQkJCQlIZWlnaHQgICAgICAgICAgID0gJGNvbnRyb2wuSGVpZ2h0DQoJCQkJCQkJCQkJCUlzU2NhbGFibGVCb3R0b20gPSAoJGNvbnRyb2xOYW1lIC1lcSAnRGF0YUdyaWRGaWxsZXInIC1vciAkY29udHJvbE5hbWUgLWVxICdEYXRhR3JpZE1haW4nKSAjIE1hcmsgZ3JpZHMgZm9yIHZlcnRpY2FsIHNjYWxpbmcNCgkJCQkJCQkJCQl9DQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IERlZmluZSBDb250cm9scyB0byBTY2FsZSBhbmQgU3RvcmUgSW5pdGlhbCBQcm9wZXJ0aWVzDQoJCQkJCQl9DQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIE1haW5Gb3JtIExvYWQgRXZlbnQNCg0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBNYWluRm9ybSBTaG93biBFdmVudA0KCQkJCQkJIyBTdGFydCB1cGRhdGUgdGltZXIgd2hlbiBmb3JtIGlzIGFjdHVhbGx5IHNob3duDQoJCQkJCQlTaG93biAgICAgICA9IHsNCgkJCQkJCQkjcmVnaW9uIFN0ZXA6IFN0YXJ0IERhdGFHcmlkIFVwZGF0ZSBUaW1lciBXaGVuIEZvcm0gaXMgU2hvd24NCgkJCQkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQl0cnkNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQlTdGFydC1EYXRhR3JpZFVwZGF0ZVRpbWVyDQoJCQkJCQkJCQl9DQoJCQkJCQkJCQljYXRjaA0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCSMgU2lsZW50IGVycm9yIGhhbmRsaW5nIGlmIHRpbWVyIHN0YXJ0IGZhaWxzDQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRmFpbGVkIHRvIHN0YXJ0IERhdGFHcmlkIHVwZGF0ZSB0aW1lcjogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IFN0YXJ0IERhdGFHcmlkIFVwZGF0ZSBUaW1lciBXaGVuIEZvcm0gaXMgU2hvd24NCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgTWFpbkZvcm0gU2hvd24gRXZlbnQNCg0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBNYWluRm9ybSBGb3JtQ2xvc2luZyBFdmVudA0KCQkJCQkJIyBDbGVhbiB1cCByZXNvdXJjZXMgd2hlbiBmb3JtIGlzIGNsb3NpbmcNCgkJCQkJCUZvcm1DbG9zaW5nID0gew0KCQkJCQkJCXBhcmFtKCRzcmMsICRlKQ0KDQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBDbGVhbiBVcCBSZXNvdXJjZXMgb24gRm9ybSBDbG9zaW5nDQoJCQkJCQkJCVdyaXRlLVZlcmJvc2UgJyAgVUk6IEZvcm0gY2xvc2luZyAtIGNsZWFuaW5nIHVwIHJlc291cmNlcycgLUZvcmVncm91bmRDb2xvciBDeWFuDQoNCgkJCQkJCQkJI3JlZ2lvbiBTdGVwOiBDbGVhbiBVcCBGdG9vbCBJbnN0YW5jZXMNCgkJCQkJCQkJCSMgQ2xlYW4gdXAgYW55IHJ1bm5pbmcgZnRvb2wgZm9ybXMgYW5kIHRoZWlyIGFzc29jaWF0ZWQgcmVzb3VyY2VzLg0KCQkJCQkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5GdG9vbEZvcm1zIC1hbmQgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLkZ0b29sRm9ybXMuQ291bnQgLWd0IDApDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogQ2xlYW5pbmcgdXAgZnRvb2wgaW5zdGFuY2VzOiAkKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5GdG9vbEZvcm1zLkNvdW50KSBmb3JtcyIgLUZvcmVncm91bmRDb2xvciBDeWFuDQoNCgkJCQkJCQkJCQkjIEdldCBhIGNvcHkgb2YgdGhlIGtleXMgdG8gYXZvaWQgY29sbGVjdGlvbiBtb2RpZmljYXRpb24gaXNzdWVzIGR1cmluZyBpdGVyYXRpb24uDQoJCQkJCQkJCQkJJGluc3RhbmNlSWRzID0gQCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuRnRvb2xGb3Jtcy5LZXlzKQ0KDQoJCQkJCQkJCQkJZm9yZWFjaCAoJGluc3RhbmNlSWQgaW4gJGluc3RhbmNlSWRzKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogQ2xlYW5pbmcgdXAgZnRvb2wgaW5zdGFuY2U6ICRpbnN0YW5jZUlkIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJCQkJCQkJCSRmb3JtID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLkZ0b29sRm9ybXNbJGluc3RhbmNlSWRdDQoNCgkJCQkJCQkJCQkJaWYgKCRmb3JtIC1hbmQgLW5vdCAkZm9ybS5Jc0Rpc3Bvc2VkKQ0KCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkjIFVzZSBTdG9wLUZ0b29sRm9ybSBpZiBhdmFpbGFibGUgZm9yIHByb3BlciBjbGVhbnVwLg0KCQkJCQkJCQkJCQkJaWYgKEdldC1Db21tYW5kIC1OYW1lIFN0b3AtRnRvb2xGb3JtIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKQ0KCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCVN0b3AtRnRvb2xGb3JtIC1Gb3JtICRmb3JtDQoJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCQllbHNlDQoJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJIyBGYWxsYmFjayBjbGVhbnVwIGlmIFN0b3AtRnRvb2xGb3JtIGlzIG5vdCBmb3VuZC4NCgkJCQkJCQkJCQkJCQkkZGF0YSA9ICRmb3JtLlRhZw0KCQkJCQkJCQkJCQkJCWlmICgkZGF0YSkNCgkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCSMgQ2xlYW4gdXAgcnVubmluZyBzcGFtbWVyIHRpbWVyIGlmIGV4aXN0cy4NCgkJCQkJCQkJCQkJCQkJaWYgKCRkYXRhLlJ1bm5pbmdTcGFtbWVyKQ0KCQkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCQkkZGF0YS5SdW5uaW5nU3BhbW1lci5TdG9wKCkNCgkJCQkJCQkJCQkJCQkJCSRkYXRhLlJ1bm5pbmdTcGFtbWVyLkRpc3Bvc2UoKQ0KCQkJCQkJCQkJCQkJCQl9DQoNCgkJCQkJCQkJCQkJCQkJIyBDbGVhbiB1cCBmb3JtLXNwZWNpZmljIHRpbWVycy4NCgkJCQkJCQkJCQkJCQkJaWYgKCRkYXRhLlRpbWVycyAtYW5kICRkYXRhLlRpbWVycy5Db3VudCAtZ3QgMCkNCgkJCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCQkJZm9yZWFjaCAoJHRpbWVyS2V5IGluIEAoJGRhdGEuVGltZXJzLktleXMpKQ0KCQkJCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCQkJCSR0aW1lciA9ICRkYXRhLlRpbWVyc1skdGltZXJLZXldDQoJCQkJCQkJCQkJCQkJCQkJaWYgKCR0aW1lcikNCgkJCQkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCQkJCSR0aW1lci5TdG9wKCkNCgkJCQkJCQkJCQkJCQkJCQkJJHRpbWVyLkRpc3Bvc2UoKQ0KCQkJCQkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCQkJCX0NCg0KCQkJCQkJCQkJCQkJCSMgQ2xvc2UgYW5kIGRpc3Bvc2UgZm9ybS4NCgkJCQkJCQkJCQkJCQkkZm9ybS5DbG9zZSgpDQoJCQkJCQkJCQkJCQkJJGZvcm0uRGlzcG9zZSgpDQoJCQkJCQkJCQkJCQkJIyBUaGlzIG1pZ2h0IGJlIHRvbyBhZ2dyZXNzaXZlIGhlcmUsIGNvbnNpZGVyIGlmIG5lZWRlZC4NCgkJCQkJCQkJCQkJCQkjIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5BcHBsaWNhdGlvbl06OkV4aXQoKQ0KCQkJCQkJCQkJCQkJfQ0KDQoJCQkJCQkJCQkJCQkjIFJlbW92ZSB0aGUgZm9ybSByZWZlcmVuY2UgZnJvbSB0aGUgZ2xvYmFsIGNvbGxlY3Rpb24uDQoJCQkJCQkJCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuRnRvb2xGb3Jtcy5SZW1vdmUoJGluc3RhbmNlSWQpDQoJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQl9DQoJCQkJCQkJCQl9DQoJCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogQ2xlYW4gVXAgRnRvb2wgSW5zdGFuY2VzDQoNCgkJCQkJCQkJI3JlZ2lvbiBTdGVwOiBDbGVhbiBVcCBHbG9iYWwgVGltZXJzDQoJCQkJCQkJCQkjIENsZWFuIHVwIGFsbCByZWdpc3RlcmVkIHRpbWVycyBzdG9yZWQgaW4gdGhlIGdsb2JhbCByZXNvdXJjZXMuDQoJCQkJCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLlRpbWVycyAtYW5kICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5UaW1lcnMuQ291bnQgLWd0IDApDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogQ2xlYW5pbmcgdXAgJCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuVGltZXJzLkNvdW50KSB0aW1lcnMiIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCg0KCQkJCQkJCQkJCSMgSGFuZGxlIG5lc3RlZCB0aW1lciBjb2xsZWN0aW9ucyBmaXJzdCAoZS5nLiwgdGltZXJzIHdpdGhpbiBmdG9vbCBkYXRhKS4NCgkJCQkJCQkJCQlmb3JlYWNoICgkY29sbGVjdGlvbktleSBpbiBAKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5UaW1lcnMuS2V5cykpDQoJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkkY29sbGVjdGlvbiA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5UaW1lcnNbJGNvbGxlY3Rpb25LZXldDQoNCgkJCQkJCQkJCQkJaWYgKCRjb2xsZWN0aW9uIC1pcyBbU3lzdGVtLkNvbGxlY3Rpb25zLkhhc2h0YWJsZV0gLW9yICRjb2xsZWN0aW9uIC1pcyBbU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5XSkNCgkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJJG5lc3RlZEtleXMgPSBAKCRjb2xsZWN0aW9uLktleXMpDQoJCQkJCQkJCQkJCQlmb3JlYWNoICgkbmVzdGVkS2V5IGluICRuZXN0ZWRLZXlzKQ0KCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCSR0aW1lciA9ICRjb2xsZWN0aW9uWyRuZXN0ZWRLZXldDQoJCQkJCQkJCQkJCQkJaWYgKCR0aW1lciAtaXMgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLlRpbWVyXSkNCgkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCWlmICgkdGltZXIuRW5hYmxlZCkgeyAkdGltZXIuU3RvcCgpIH0NCgkJCQkJCQkJCQkJCQkJJHRpbWVyLkRpc3Bvc2UoKQ0KCQkJCQkJCQkJCQkJCQkkY29sbGVjdGlvbi5SZW1vdmUoJG5lc3RlZEtleSkNCgkJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQl9DQoNCgkJCQkJCQkJCQkjIEhhbmRsZSBkaXJlY3QgdGltZXJzIHN0b3JlZCBpbiB0aGUgbWFpbiBUaW1lcnMgY29sbGVjdGlvbi4NCgkJCQkJCQkJCQkkdGltZXJLZXlzID0gQCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuVGltZXJzLktleXMpDQoJCQkJCQkJCQkJZm9yZWFjaCAoJGtleSBpbiAkdGltZXJLZXlzKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJJHRpbWVyID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLlRpbWVyc1ska2V5XQ0KCQkJCQkJCQkJCQlpZiAoJHRpbWVyIC1pcyBbU3lzdGVtLldpbmRvd3MuRm9ybXMuVGltZXJdKQ0KCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQlpZiAoJHRpbWVyLkVuYWJsZWQpIHsgJHRpbWVyLlN0b3AoKSB9DQoJCQkJCQkJCQkJCQkkdGltZXIuRGlzcG9zZSgpDQoJCQkJCQkJCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuVGltZXJzLlJlbW92ZSgka2V5KQ0KCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IENsZWFuIFVwIEdsb2JhbCBUaW1lcnMNCg0KCQkJCQkJCQkjcmVnaW9uIFN0ZXA6IENsZWFuIFVwIEJhY2tncm91bmQgSm9icw0KCQkJCQkJCQkJIyBTdG9wIGFuZCByZW1vdmUgYW55IHJ1bm5pbmcgUG93ZXJTaGVsbCBiYWNrZ3JvdW5kIGpvYnMuDQoJCQkJCQkJCQl0cnkNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQkkcnVubmluZ0pvYnMgPSBHZXQtSm9iIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgV2hlcmUtT2JqZWN0IHsgJF8uU3RhdGUgLW5lICdDb21wbGV0ZWQnIH0NCgkJCQkJCQkJCQlpZiAoJHJ1bm5pbmdKb2JzIC1hbmQgJHJ1bm5pbmdKb2JzLkNvdW50IC1ndCAwKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogU3RvcHBpbmcgJCgkcnVubmluZ0pvYnMuQ291bnQpIGJhY2tncm91bmQgam9icy4iIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkJCQkJCQkJJHJ1bm5pbmdKb2JzIHwgU3RvcC1Kb2IgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCgkJCQkJCQkJCQkJR2V0LUpvYiAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFJlbW92ZS1Kb2IgLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkJY2F0Y2gNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBFcnJvciBjbGVhbmluZyB1cCBiYWNrZ3JvdW5kIGpvYnM6ICRfIi1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQkJCQl9DQoJCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogQ2xlYW4gVXAgQmFja2dyb3VuZCBKb2JzDQoNCgkJCQkJCQkJI3JlZ2lvbiBTdGVwOiBDbGVhbiBVcCBSdW5zcGFjZXMNCgkJCQkJCQkJCSMgRGlzcG9zZSBvZiBhbnkgYWN0aXZlIHJ1bnNwYWNlcy4NCgkJCQkJCQkJCWlmICgkZ2xvYmFsOnJ1bnNwYWNlcyAtYW5kICRnbG9iYWw6cnVuc3BhY2VzLkNvdW50IC1ndCAwKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IERpc3Bvc2luZyAkKCRnbG9iYWw6cnVuc3BhY2VzLkNvdW50KSBydW5zcGFjZXMuIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJCQkJCQkJZm9yZWFjaCAoJHJzIGluICRnbG9iYWw6cnVuc3BhY2VzKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJdHJ5DQoJCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJCWlmICgkcnMuUnVuc3BhY2UuUnVuc3BhY2VTdGF0ZUluZm8uU3RhdGUgLW5lICdDbG9zZWQnKQ0KCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCSRycy5Qb3dlclNoZWxsLkRpc3Bvc2UoKQ0KCQkJCQkJCQkJCQkJCSRycy5SdW5zcGFjZS5EaXNwb3NlKCkNCgkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCQljYXRjaA0KCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBFcnJvciBkaXNwb3NpbmcgcnVuc3BhY2U6ICRfIi1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJJGdsb2JhbDpydW5zcGFjZXMuQ2xlYXIoKQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IENsZWFuIFVwIFJ1bnNwYWNlcw0KDQoJCQkJCQkJCSNyZWdpb24gU3RlcDogQ2xlYW4gVXAgTGF1bmNoIFJlc291cmNlcw0KCQkJCQkJCQkJIyBTdG9wIGFueSBvbmdvaW5nIGNsaWVudCBsYXVuY2ggcHJvY2Vzc2VzLg0KCQkJCQkJCQkJU3RvcC1DbGllbnRMYXVuY2gNCgkJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBDbGVhbiBVcCBMYXVuY2ggUmVzb3VyY2VzDQoNCgkJCQkJCQkJI3JlZ2lvbiBTdGVwOiBGb3JjZSBHYXJiYWdlIENvbGxlY3Rpb24NCgkJCQkJCQkJCSMgRXhwbGljaXRseSBydW4gZ2FyYmFnZSBjb2xsZWN0aW9uIHRvIHJlbGVhc2UgbWVtb3J5Lg0KCQkJCQkJCQkJW1N5c3RlbS5HQ106OkNvbGxlY3QoKQ0KCQkJCQkJCQkJW1N5c3RlbS5HQ106OldhaXRGb3JQZW5kaW5nRmluYWxpemVycygpDQoJCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogRm9yY2UgR2FyYmFnZSBDb2xsZWN0aW9uDQoJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBDbGVhbiBVcCBSZXNvdXJjZXMgb24gRm9ybSBDbG9zaW5nDQoJCQkJCQl9DQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIE1haW5Gb3JtIEZvcm1DbG9zaW5nIEV2ZW50DQoNCgkJCQkJI3JlZ2lvbiBTdGVwOiBIYW5kbGUgTWFpbkZvcm0gUmVzaXplIEV2ZW50DQoJCQkJCQkjIEhhbmRsZSBmb3JtIHJlc2l6aW5nIHRvIGR5bmFtaWNhbGx5IGFkanVzdCBjb250cm9sIHBvc2l0aW9ucyBhbmQgc2l6ZXMNCgkJCQkJCVJlc2l6ZSAgICAgID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIEZvcm0gUmVzaXppbmcgYW5kIFNjYWxlIENvbnRyb2xzDQoJCQkJCQkJCSMgU2tpcCBpZiBpbml0aWFsaXphdGlvbiBkYXRhIGlzIG1pc3NpbmcNCgkJCQkJCQkJaWYgKC1ub3QgJHNjcmlwdDppbml0aWFsQ29udHJvbFByb3BzIC1vciAtbm90ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQlyZXR1cm4NCgkJCQkJCQkJfQ0KDQoJCQkJCQkJCSMgQ2FsY3VsYXRlIHNjYWxpbmcgZmFjdG9ycyBiYXNlZCBvbiBjdXJyZW50IHZzIGluaXRpYWwgc2l6ZQ0KCQkJCQkJCQkkY3VycmVudEZvcm1XaWR0aCA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtLkNsaWVudFNpemUuV2lkdGgNCgkJCQkJCQkJJGN1cnJlbnRGb3JtSGVpZ2h0ID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTWFpbkZvcm0uQ2xpZW50U2l6ZS5IZWlnaHQNCgkJCQkJCQkJJHNjYWxlVyA9ICRjdXJyZW50Rm9ybVdpZHRoIC8gJHNjcmlwdDppbml0aWFsRm9ybVdpZHRoDQoNCgkJCQkJCQkJIyBEZWZpbmUgZml4ZWQgYXJlYXMgKGUuZy4sIGhlaWdodCBvZiB0aGUgdG9wIGJ1dHRvbiBiYXIgYXJlYSkNCgkJCQkJCQkJJGZpeGVkVG9wSGVpZ2h0ID0gMTI1DQoJCQkJCQkJCSRib3R0b21NYXJnaW4gPSAxMA0KDQoJCQkJCQkJCSMgUmVzaXplIGFuZCByZXBvc2l0aW9uIGVhY2ggc2NhbGFibGUgY29udHJvbA0KCQkJCQkJCQlmb3JlYWNoICgkY29udHJvbE5hbWUgaW4gJHNjcmlwdDppbml0aWFsQ29udHJvbFByb3BzLktleXMpDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSRjb250cm9sID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuJGNvbnRyb2xOYW1lDQoJCQkJCQkJCQlpZiAoJGNvbnRyb2wpDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJJGluaXRpYWxQcm9wcyA9ICRzY3JpcHQ6aW5pdGlhbENvbnRyb2xQcm9wc1skY29udHJvbE5hbWVdDQoNCgkJCQkJCQkJCQkjIENhbGN1bGF0ZSBuZXcgcG9zaXRpb24gYW5kIHdpZHRoIGJhc2VkIG9uIGhvcml6b250YWwgc2NhbGUNCgkJCQkJCQkJCQkkbmV3TGVmdCA9IFtpbnRdKCRpbml0aWFsUHJvcHMuTGVmdCAqICRzY2FsZVcpDQoJCQkJCQkJCQkJJG5ld1dpZHRoID0gW2ludF0oJGluaXRpYWxQcm9wcy5XaWR0aCAqICRzY2FsZVcpDQoNCgkJCQkJCQkJCQkjIEhhbmRsZSBzcGVjaWFsIGNhc2UgZm9yIGJvdHRvbS1hbmNob3JlZCBjb250cm9scyAoRGF0YUdyaWRzKQ0KCQkJCQkJCQkJCWlmICgkaW5pdGlhbFByb3BzLklzU2NhbGFibGVCb3R0b20pDQoJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkkY29udHJvbC5Ub3AgPSAkZml4ZWRUb3BIZWlnaHQNCgkJCQkJCQkJCQkJIyBBZGp1c3QgaGVpZ2h0IGJhc2VkIG9uIHJlbWFpbmluZyBmb3JtIGhlaWdodA0KCQkJCQkJCQkJCQkkY29udHJvbC5IZWlnaHQgPSBbTWF0aF06Ok1heCgxMDAsICRjdXJyZW50Rm9ybUhlaWdodCAtICRmaXhlZFRvcEhlaWdodCAtICRib3R0b21NYXJnaW4pDQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCWVsc2UNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCSMgS2VlcCBvcmlnaW5hbCB0b3AgYW5kIGhlaWdodCBmb3Igbm9uLXZlcnRpY2FsbHktc2NhbGluZyBjb250cm9scw0KCQkJCQkJCQkJCQkkY29udHJvbC5Ub3AgPSAkaW5pdGlhbFByb3BzLlRvcA0KCQkJCQkJCQkJCQkkY29udHJvbC5IZWlnaHQgPSAkaW5pdGlhbFByb3BzLkhlaWdodA0KCQkJCQkJCQkJCX0NCg0KCQkJCQkJCQkJCSMgQXBwbHkgbmV3IHBvc2l0aW9uIGFuZCB3aWR0aA0KCQkJCQkJCQkJCSRjb250cm9sLkxlZnQgPSAkbmV3TGVmdA0KCQkJCQkJCQkJCSRjb250cm9sLldpZHRoID0gJG5ld1dpZHRoDQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBGb3JtIFJlc2l6aW5nIGFuZCBTY2FsZSBDb250cm9scw0KCQkJCQkJfQ0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBNYWluRm9ybSBSZXNpemUgRXZlbnQNCg0KCQkJCX0NCg0KCQkJCSMgU2V0dGluZ3MgZm9ybSBldmVudHMNCgkJCQlTZXR0aW5nc0Zvcm0gICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIFNldHRpbmdzRm9ybSBMb2FkIEV2ZW50DQoJCQkJCQkjIEluaXRpYWxpemUgZm9ybSBvbiBsb2FkDQoJCQkJCQlMb2FkID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogU3luYyBDb25maWcgdG8gVUkgV2hlbiBTZXR0aW5ncyBGb3JtIExvYWRzDQoJCQkJCQkJCXRyeQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQkjIFBvcHVsYXRlIFVJIGNvbnRyb2xzIHdpdGggY3VycmVudCBjb25maWcgdmFsdWVzIHdoZW4gdGhlIGZvcm0gbG9hZHMuDQoJCQkJCQkJCQlTeW5jLUNvbmZpZ1RvVUkNCgkJCQkJCQkJfQ0KCQkJCQkJCQljYXRjaA0KCQkJCQkJCQl7DQoJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBFcnJvciBsb2FkaW5nIHNldHRpbmdzIGZvcm06ICRfIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJCQkJCQkJW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJGYWlsZWQgdG8gbG9hZCBzZXR0aW5nczogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiLCAnRXJyb3InLA0KCQkJCQkJCQkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikNCgkJCQkJCQkJfQ0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogU3luYyBDb25maWcgdG8gVUkgV2hlbiBTZXR0aW5ncyBGb3JtIExvYWRzDQoJCQkJCQl9DQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIFNldHRpbmdzRm9ybSBMb2FkIEV2ZW50DQoJCQkJfQ0KDQoJCQkJIyBNaW5pbWl6ZSBidXR0b24gZXZlbnQNCgkJCQlNaW5Gb3JtICAgICAgICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIE1pbkZvcm0gQ2xpY2sgRXZlbnQNCgkJCQkJCUNsaWNrID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogTWluaW1pemUgTWFpbiBGb3JtDQoJCQkJCQkJCSMgTWluaW1pemUgdGhlIG1haW4gYXBwbGljYXRpb24gd2luZG93Lg0KCQkJCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5NYWluRm9ybS5XaW5kb3dTdGF0ZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtV2luZG93U3RhdGVdOjpNaW5pbWl6ZWQNCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IE1pbmltaXplIE1haW4gRm9ybQ0KCQkJCQkJfQ0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBNaW5Gb3JtIENsaWNrIEV2ZW50DQoJCQkJfQ0KDQoJCQkJIyBDbG9zZSBidXR0b24gZXZlbnQNCgkJCQlDbG9zZUZvcm0gICAgICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIENsb3NlRm9ybSBDbGljayBFdmVudA0KCQkJCQkJQ2xpY2sgPSB7DQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBDbG9zZSBNYWluIEZvcm0gYW5kIEV4aXQgQXBwbGljYXRpb24NCgkJCQkJCQkJdHJ5DQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgQ2xvc2UgdGhlIG1haW4gZm9ybSwgd2hpY2ggdHJpZ2dlcnMgdGhlIEZvcm1DbG9zaW5nIGV2ZW50IGZvciBjbGVhbnVwLg0KCQkJCQkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTWFpbkZvcm0uQ2xvc2UoKQ0KCQkJCQkJCQkJIyBBdHRlbXB0IHRvIGV4aXQgdGhlIGFwcGxpY2F0aW9uIG1lc3NhZ2UgbG9vcC4NCgkJCQkJCQkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5BcHBsaWNhdGlvbl06OkV4aXQoKQ0KCQkJCQkJCQkJIyBGb3JjZWZ1bGx5IHN0b3AgdGhlIGN1cnJlbnQgUG93ZXJTaGVsbCBwcm9jZXNzIGFzIGEgZmluYWwgbWVhc3VyZS4NCgkJCQkJCQkJCVN0b3AtUHJvY2VzcyAtSWQgJFBJRCAtRm9yY2UNCgkJCQkJCQkJfQ0KCQkJCQkJCQljYXRjaA0KCQkJCQkJCQl7DQoJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkZhaWxlZCB0byBjbG9zZSB0aGUgYXBwbGljYXRpb246ICQoJF8uRXhjZXB0aW9uLk1lc3NhZ2UpIiwgJ0Vycm9yJywNCgkJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6RXJyb3IpDQoJCQkJCQkJCX0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IENsb3NlIE1haW4gRm9ybSBhbmQgRXhpdCBBcHBsaWNhdGlvbg0KCQkJCQkJfQ0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBDbG9zZUZvcm0gQ2xpY2sgRXZlbnQNCgkJCQl9DQoNCgkJCQkjIFRvcCBiYXIgZHJhZyBldmVudA0KCQkJCVRvcEJhciAgICAgICAgICAgICAgICAgICAgID0gQHsNCgkJCQkJI3JlZ2lvbiBTdGVwOiBIYW5kbGUgVG9wQmFyIE1vdXNlRG93biBFdmVudA0KCQkJCQkJTW91c2VEb3duID0gew0KCQkJCQkJCXBhcmFtKCRzcmMsICRlKQ0KCQkJCQkJCSNyZWdpb24gU3RlcDogRW5hYmxlIEZvcm0gRHJhZ2dpbmcgdmlhIFRvcCBCYXINCgkJCQkJCQkJIyBVc2UgbmF0aXZlIFdpbmRvd3MgbWVzc2FnZXMgdG8gYWxsb3cgZHJhZ2dpbmcgdGhlIGJvcmRlcmxlc3MgZm9ybSBieSBpdHMgdG9wIGJhci4NCgkJCQkJCQkJW05hdGl2ZV06OlJlbGVhc2VDYXB0dXJlKCkNCgkJCQkJCQkJW05hdGl2ZV06OlNlbmRNZXNzYWdlKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtLkhhbmRsZSwgMHhBMSwgMHgyLCAwKSAjIFdNX05DTEJVVFRPTkRPV04sIEhUQ0FQVElPTg0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogRW5hYmxlIEZvcm0gRHJhZ2dpbmcgdmlhIFRvcCBCYXINCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgVG9wQmFyIE1vdXNlRG93biBFdmVudA0KCQkJCX0NCg0KCQkJCSMgU2V0dGluZ3MgYnV0dG9uIGV2ZW50DQoJCQkJU2V0dGluZ3MgICAgICAgICAgICAgICAgICAgPSBAew0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBTZXR0aW5ncyBCdXR0b24gQ2xpY2sgRXZlbnQNCgkJCQkJCUNsaWNrID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogU2hvdyBTZXR0aW5ncyBGb3JtDQoJCQkJCQkJCSMgQ2FsbCB0aGUgZnVuY3Rpb24gdG8gZGlzcGxheSB0aGUgc2V0dGluZ3MgZm9ybSB3aXRoIGEgZmFkZS1pbiBlZmZlY3QuDQoJCQkJCQkJCVNob3ctU2V0dGluZ3NGb3JtDQoJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBTaG93IFNldHRpbmdzIEZvcm0NCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgU2V0dGluZ3MgQnV0dG9uIENsaWNrIEV2ZW50DQoJCQkJfQ0KDQoJCQkJIyBTYXZlIGJ1dHRvbiBldmVudCAoaW4gU2V0dGluZ3MgRm9ybSkNCgkJCQlTYXZlICAgICAgICAgICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIFNhdmUgQnV0dG9uIENsaWNrIEV2ZW50DQoJCQkJCQlDbGljayA9IHsNCgkJCQkJCQkjcmVnaW9uIFN0ZXA6IFNhdmUgU2V0dGluZ3MgZnJvbSBVSSB0byBDb25maWcgRmlsZQ0KCQkJCQkJCQl0cnkNCgkJCQkJCQkJew0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogVXBkYXRpbmcgc2V0dGluZ3MgZnJvbSBVSScgLUZvcmVncm91bmRDb2xvciBDeWFuDQoNCgkJCQkJCQkJCSMgU3luYyBVSSB2YWx1ZXMgYmFjayB0byB0aGUgZ2xvYmFsIGNvbmZpZyBvYmplY3QuDQoJCQkJCQkJCQlTeW5jLVVJVG9Db25maWcNCgkJCQkJCQkJCSMgV3JpdGUgdGhlIHVwZGF0ZWQgY29uZmlnIG9iamVjdCB0byB0aGUgSU5JIGZpbGUuDQoJCQkJCQkJCQkkcmVzdWx0ID0gV3JpdGUtQ29uZmlnDQoNCgkJCQkJCQkJCSMgTG9nIHRoZSBzZXR0aW5ncyBiZWluZyBzYXZlZCAoZm9yIGRlYnVnZ2luZykuDQoJCQkJCQkJCQlXcml0ZS1WZXJib3NlICcgIFVJOiBTZXR0aW5ncyB0byBzYXZlOicgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJZm9yZWFjaCAoJHNlY3Rpb24gaW4gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnLktleXMpDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJZm9yZWFjaCAoJGtleSBpbiAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJHNlY3Rpb25dLktleXMpDQoJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiAkc2VjdGlvbi4ka2V5ID0gJCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJHNlY3Rpb25dWyRrZXldKSIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJCX0NCgkJCQkJCQkJCX0NCg0KCQkJCQkJCQkJIyBDaGVjayBpZiB3cml0aW5nIHRoZSBjb25maWcgd2FzIHN1Y2Nlc3NmdWwuDQoJCQkJCQkJCQlpZiAoISgkcmVzdWx0KSkNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICcgIFVJOiBGYWlsZWQgdG8gc2F2ZSBzZXR0aW5ncyB0byBJTkkgZmlsZScgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkZhaWxlZCB0byBzYXZlIHNldHRpbmdzLiIsICdFcnJvcicsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikNCgkJCQkJCQkJCQlyZXR1cm4NCgkJCQkJCQkJCX0NCg0KCQkJCQkJCQkJIyBIaWRlIHNldHRpbmdzIGZvcm0gd2l0aCBmYWRlLW91dCBlZmZlY3QgdXBvbiBzdWNjZXNzZnVsIHNhdmUuDQoJCQkJCQkJCQlIaWRlLVNldHRpbmdzRm9ybQ0KCQkJCQkJCQl9DQoJCQkJCQkJCWNhdGNoDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgU2hvdyBlcnJvciBtZXNzYWdlIGlmIHNhdmluZyBmYWlscy4NCgkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IEZhaWxlZCB0byBzYXZlIHNldHRpbmdzIHRvIElOSSBmaWxlOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygiRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3M6ICQoJF8uRXhjZXB0aW9uLk1lc3NhZ2UpIiwgJ0Vycm9yJywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkVycm9yKQ0KCQkJCQkJCQl9DQoJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBTYXZlIFNldHRpbmdzIGZyb20gVUkgdG8gQ29uZmlnIEZpbGUNCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgU2F2ZSBCdXR0b24gQ2xpY2sgRXZlbnQNCgkJCQl9DQoNCgkJCQkjIENhbmNlbCBidXR0b24gZXZlbnQgKGluIFNldHRpbmdzIEZvcm0pDQoJCQkJQ2FuY2VsICAgICAgICAgICAgICAgICAgICAgPSBAew0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBDYW5jZWwgQnV0dG9uIENsaWNrIEV2ZW50DQoJCQkJCQlDbGljayA9IHsNCgkJCQkJCQkjcmVnaW9uIFN0ZXA6IEhpZGUgU2V0dGluZ3MgRm9ybQ0KCQkJCQkJCQkjIENhbGwgdGhlIGZ1bmN0aW9uIHRvIGhpZGUgdGhlIHNldHRpbmdzIGZvcm0gd2l0aG91dCBzYXZpbmcgY2hhbmdlcy4NCgkJCQkJCQkJSGlkZS1TZXR0aW5nc0Zvcm0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhpZGUgU2V0dGluZ3MgRm9ybQ0KCQkJCQkJfQ0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBDYW5jZWwgQnV0dG9uIENsaWNrIEV2ZW50DQoJCQkJfQ0KDQoJCQkJIyBCcm93c2UgYnV0dG9uIGV2ZW50IChpbiBTZXR0aW5ncyBGb3JtKQ0KCQkJCUJyb3dzZSAgICAgICAgICAgICAgICAgICAgID0gQHsNCgkJCQkJI3JlZ2lvbiBTdGVwOiBIYW5kbGUgQnJvd3NlIEJ1dHRvbiBDbGljayBFdmVudA0KCQkJCQkJQ2xpY2sgPSB7DQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBTaG93IE9wZW5GaWxlRGlhbG9nIGZvciBMYXVuY2hlciBQYXRoDQoJCQkJCQkJCSMgT3BlbiBhIHN0YW5kYXJkIGZpbGUgZGlhbG9nIHRvIHNlbGVjdCB0aGUgZ2FtZSBsYXVuY2hlciBleGVjdXRhYmxlLg0KCQkJCQkJCQkkZCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuT3BlbkZpbGVEaWFsb2cNCgkJCQkJCQkJJGQuRmlsdGVyID0gJ0V4ZWN1dGFibGUgRmlsZXMgKCouZXhlKXwqLmV4ZXxBbGwgRmlsZXMgKCouKil8Ki4qJw0KCQkJCQkJCQlpZiAoJGQuU2hvd0RpYWxvZygpIC1lcSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuRGlhbG9nUmVzdWx0XTo6T0spDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgVXBkYXRlIHRoZSBsYXVuY2hlciBwYXRoIFRleHRCb3ggd2l0aCB0aGUgc2VsZWN0ZWQgZmlsZS4NCgkJCQkJCQkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLklucHV0TGF1bmNoZXIuVGV4dCA9ICRkLkZpbGVOYW1lDQoJCQkJCQkJCX0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IFNob3cgT3BlbkZpbGVEaWFsb2cgZm9yIExhdW5jaGVyIFBhdGgNCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgQnJvd3NlIEJ1dHRvbiBDbGljayBFdmVudA0KCQkJCX0NCg0KCQkJCSMgRGF0YUdyaWQgZXZlbnRzDQoJCQkJRGF0YUdyaWRGaWxsZXIgPSBAew0KDQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIERhdGFHcmlkIERvdWJsZUNsaWNrIEV2ZW50DQoJCQkJCQkjIEhhbmRsZSBkb3VibGUtY2xpY2sgdG8gYnJpbmcgdGhlIGNvcnJlc3BvbmRpbmcgcHJvY2VzcyB3aW5kb3cgdG8gdGhlIGZyb250DQoJCQkJCQlEb3VibGVDbGljayA9IHsNCgkJCQkJCQlwYXJhbSgkc3JjLCAkZSkNCgkJCQkJCQl0cnkgew0KCQkJCQkJCQkkZ3JpZCA9ICRzcmMNCgkJCQkJCQkJaWYgKC1ub3QgJGdyaWQpIHsgcmV0dXJuIH0NCgkJCQkJCQkJIyBEZXRlcm1pbmUgd2hpY2ggcm93IHdhcyBkb3VibGUtY2xpY2tlZC4NCgkJCQkJCQkJJGhpdFRlc3RJbmZvID0gJGdyaWQuSGl0VGVzdCgkZS5YLCAkZS5ZKQ0KCQkJCQkJCQlpZiAoJGhpdFRlc3RJbmZvLlJvd0luZGV4IC1nZSAwKSB7DQoJCQkJCQkJCQkkcm93ID0gJGdyaWQuUm93c1skaGl0VGVzdEluZm8uUm93SW5kZXhdDQoJCQkJCQkJCQkjIENoZWNrIGlmIHRoZSByb3cgaGFzIGFzc29jaWF0ZWQgcHJvY2VzcyBpbmZvIGFuZCBhIHZhbGlkIHdpbmRvdyBoYW5kbGUuDQoJCQkJCQkJCQkjIEFzc3VtaW5nICRyb3cuVGFnIGhvbGRzIGEgcHJvY2VzcyBvYmplY3Qgb3Igc2ltaWxhciB3aXRoIE1haW5XaW5kb3dIYW5kbGUNCgkJCQkJCQkJCWlmICgkcm93LlRhZyAtYW5kICRyb3cuVGFnLkdldFR5cGUoKS5HZXRQcm9wZXJ0eSgnTWFpbldpbmRvd0hhbmRsZScpIC1hbmQgJHJvdy5UYWcuTWFpbldpbmRvd0hhbmRsZSAtbmUgW0ludFB0cl06Olplcm8pIHsNCgkJCQkJCQkJCQkjIFVzZSBoZWxwZXIgZnVuY3Rpb24vbmF0aXZlIG1ldGhvZHMgaWYgYXZhaWxhYmxlDQoJCQkJCQkJCQkJW05hdGl2ZV06OkJyaW5nVG9Gcm9udCgkcm93LlRhZy5NYWluV2luZG93SGFuZGxlKQ0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IERvdWJsZUNsaWNrIC0gQnJpbmdpbmcgd2luZG93IGhhbmRsZSAkKCRyb3cuVGFnLk1haW5XaW5kb3dIYW5kbGUpIHRvIGZyb250LiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJfSBlbHNlaWYgKCRyb3cuVGFnIC1hbmQgJHJvdy5UYWcuR2V0VHlwZSgpLkdldFByb3BlcnR5KCdNYWluV2luZG93SGFuZGxlJykpIHsNCgkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBEb3VibGVDbGljayAtIFJvdyAkKCRoaXRUZXN0SW5mby5Sb3dJbmRleCkgaGFzIHRhZywgYnV0IE1haW5XaW5kb3dIYW5kbGUgaXMgWmVyby4iIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkJCQkJCX0gZWxzZSB7DQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRG91YmxlQ2xpY2sgLSBSb3cgJCgkaGl0VGVzdEluZm8uUm93SW5kZXgpIGRvZXMgbm90IGhhdmUgYSB2YWxpZCBUYWcgd2l0aCBNYWluV2luZG93SGFuZGxlLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQl9DQoJCQkJCQkJfSBjYXRjaCB7DQoJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IEVycm9yIGluIERhdGFHcmlkRmlsbGVyIERvdWJsZUNsaWNrOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQl9DQoJCQkJCQl9DQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIERhdGFHcmlkIERvdWJsZUNsaWNrIEV2ZW50DQoNCgkJCQkJI3JlZ2lvbiBTdGVwOiBIYW5kbGUgRGF0YUdyaWQgTW91c2VEb3duIEV2ZW50DQoJCQkJCQkjIEhhbmRsZSByaWdodC1jbGljayBmb3IgY29udGV4dCBtZW51LCBsZWZ0LWNsaWNrIGZvciBzZWxlY3Rpb24sIEFsdCtMZWZ0LWNsaWNrIGZvciBkcmFnIGluaXRpYXRpb24NCgkJCQkJCU1vdXNlRG93biA9IHsNCgkJCQkJCQlwYXJhbSgkc3JjLCAkZSkgIyAkc3JjIGlzIHRoZSBEYXRhR3JpZFZpZXcgY29udHJvbCBpdHNlbGYNCg0KCQkJCQkJCXRyeSB7DQoJCQkJCQkJCSRncmlkID0gJHNyYyAjIFVzZSB0aGUgc291cmNlIGNvbnRyb2wgcGFzc2VkIHRvIHRoZSBldmVudA0KCQkJCQkJCQlpZiAoLW5vdCAkZ3JpZCkgew0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogTW91c2VEb3duIC0gU291cmNlIGdyaWQgb2JqZWN0IGlzIG51bGwuIiAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KCQkJCQkJCQkJcmV0dXJuDQoJCQkJCQkJCX0NCg0KCQkJCQkJCQkkaGl0VGVzdEluZm8gPSAkZ3JpZC5IaXRUZXN0KCRlLlgsICRlLlkpDQoNCgkJCQkJCQkJIyAtLS0gUmlnaHQtQ2xpY2sgSGFuZGxpbmcgLS0tDQoJCQkJCQkJCWlmICgkZS5CdXR0b24gLWVxIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Nb3VzZUJ1dHRvbnNdOjpSaWdodCkgew0KCQkJCQkJCQkJaWYgKCRoaXRUZXN0SW5mby5Sb3dJbmRleCAtZ2UgMCkgew0KCQkJCQkJCQkJCSMgRW5zdXJlIHRoZSBjbGlja2VkIHJvdyBpcyBzZWxlY3RlZCBiZWZvcmUgc2hvd2luZyB0aGUgY29udGV4dCBtZW51Lg0KCQkJCQkJCQkJCWlmICgtbm90IChbU3lzdGVtLldpbmRvd3MuRm9ybXMuQ29udHJvbF06Ok1vZGlmaWVyS2V5cyAtYmFuZCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuS2V5c106OkNvbnRyb2wpKSB7DQoJCQkJCQkJCQkJCWlmICgtbm90ICRncmlkLlJvd3NbJGhpdFRlc3RJbmZvLlJvd0luZGV4XS5TZWxlY3RlZCkgew0KCQkJCQkJCQkJCQkJJGdyaWQuQ2xlYXJTZWxlY3Rpb24oKQ0KCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCSRncmlkLlJvd3NbJGhpdFRlc3RJbmZvLlJvd0luZGV4XS5TZWxlY3RlZCA9ICR0cnVlDQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogUmlnaHQtY2xpY2tlZCByb3cgJCgkaGl0VGVzdEluZm8uUm93SW5kZXgpLCBlbnN1cmluZyBzZWxlY3Rpb24uIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0NCgkJCQkJCQkJIyAtLS0gTGVmdC1DbGljayBIYW5kbGluZyAtLS0NCgkJCQkJCQkJZWxzZWlmICgkZS5CdXR0b24gLWVxIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Nb3VzZUJ1dHRvbnNdOjpMZWZ0KSB7DQoJCQkJCQkJCQlpZiAoJGhpdFRlc3RJbmZvLlJvd0luZGV4IC1nZSAwKSB7ICMgQ2xpY2tlZCBvbiBhIHJvdw0KCQkJCQkJCQkJCSRjbGlja2VkUm93ID0gJGdyaWQuUm93c1skaGl0VGVzdEluZm8uUm93SW5kZXhdDQoNCgkJCQkJCQkJCQkjIC0tLSBOb3JtYWwgTGVmdCBDbGljayBmb3IgU2VsZWN0aW9uIC0tLQ0KCQkJDQoJCQkJCQkJCQkJCSMgU3RhbmRhcmQgYmVoYXZpb3I6IENsZWFyIHByZXZpb3VzIHNlbGVjdGlvbiBpZiBDdHJsIGlzIE5PVCBoZWxkLg0KCQkJCQkJCQkJCQlpZiAoLW5vdCAoW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkNvbnRyb2xdOjpNb2RpZmllcktleXMgLWJhbmQgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLktleXNdOjpDb250cm9sKSkgew0KCQkJCQkJCQkJCQkJIyBPbmx5IGNsZWFyIGlmIHRoZSBjbGlja2VkIHJvdyBpc24ndCB0aGUgKm9ubHkqIHNlbGVjdGVkIHJvdw0KCQkJCQkJCQkJCQkJaWYgKCRncmlkLlNlbGVjdGVkUm93cy5Db3VudCAtbmUgMSAtb3IgLW5vdCAkY2xpY2tlZFJvdy5TZWxlY3RlZCkgew0KCQkJCQkJCQkJCQkJCSRncmlkLkNsZWFyU2VsZWN0aW9uKCkNCgkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCQkjIFRvZ2dsZSBzZWxlY3Rpb24gaWYgQ3RybCBpcyBwcmVzc2VkLCBvdGhlcndpc2UganVzdCBzZWxlY3QuDQoJCQkJCQkJCQkJCWlmICgoW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkNvbnRyb2xdOjpNb2RpZmllcktleXMgLWJhbmQgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLktleXNdOjpDb250cm9sKSkgew0KCQkJCQkJCQkJCQkJIyBJZiBDdHJsIGlzIGhlbGQsIHRvZ2dsZSBzZWxlY3Rpb24NCg0KCQkJCQkJCQkJCQl9DQoNCg0KCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBMZWZ0LWNsaWNrZWQgcm93ICQoJGhpdFRlc3RJbmZvLlJvd0luZGV4KS4gU2VsZWN0ZWQ6ICQoJGNsaWNrZWRSb3cuU2VsZWN0ZWQpIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkNCgkJCQkJCQkJCX0NCgkJCQkJCQkJCWVsc2VpZiAoJGhpdFRlc3RJbmZvLlR5cGUgLWVxIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EYXRhR3JpZFZpZXdIaXRUZXN0VHlwZV06Ok5vbmUpIHsgIyBDbGlja2VkIG9uIGVtcHR5IHNwYWNlDQoJCQkJCQkJCQkJJGdyaWQuQ2xlYXJTZWxlY3Rpb24oKQ0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IENsaWNrZWQgb24gZW1wdHkgRGF0YUdyaWQgYXJlYSwgY2xlYXJlZCBzZWxlY3Rpb24uIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0NCgkJCQkJCQl9IGNhdGNoIHsNCgkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRXJyb3IgaW4gRGF0YUdyaWRGaWxsZXIgTW91c2VEb3duOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQl9DQoJCQkJCQl9DQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIERhdGFHcmlkIE1vdXNlRG93biBFdmVudCAoSW5pdGlhdGVzIERyYWcpDQoNCgkJCQl9DQoNCgkJCQkjIENvbnRleHQgbWVudSBpdGVtIGV2ZW50cw0KCQkJCUNvbnRleHRNZW51RnJvbnQgICAgICAgICAgID0gQHsNCgkJCQkJI3JlZ2lvbiBTdGVwOiBIYW5kbGUgQ29udGV4dE1lbnVGcm9udCBDbGljayBFdmVudA0KCQkJCQkJQ2xpY2sgPSB7DQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBCcmluZyBTZWxlY3RlZCBQcm9jZXNzIFdpbmRvd3MgdG8gRnJvbnQNCgkJCQkJCQkJIyBJdGVyYXRlIHRocm91Z2ggc2VsZWN0ZWQgcm93cyBpbiB0aGUgRGF0YUdyaWQuDQoJCQkJCQkJCWlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5EYXRhR3JpZEZpbGxlci5TZWxlY3RlZFJvd3MuQ291bnQgLWd0IDApDQoJCQkJCQkJCXsNCgkJCQkJCQkJCWZvcmVhY2ggKCRyb3cgaW4gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCSMgQ2hlY2sgZm9yIHZhbGlkIHByb2Nlc3MgaW5mbyBhbmQgd2luZG93IGhhbmRsZS4NCgkJCQkJCQkJCQlpZiAoJHJvdy5UYWcgLWFuZCAkcm93LlRhZy5NYWluV2luZG93SGFuZGxlIC1uZSBbSW50UHRyXTo6WmVybykNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCSMgQnJpbmcgdGhlIHdpbmRvdyB0byB0aGUgZm9yZWdyb3VuZC4NCgkJCQkJCQkJCQkJW05hdGl2ZV06OkJyaW5nVG9Gcm9udCgkcm93LlRhZy5NYWluV2luZG93SGFuZGxlKQ0KCQkJCQkJCQkJCX0NCgkJCQkJCQkJCX0NCgkJCQkJCQkJfQ0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogQnJpbmcgU2VsZWN0ZWQgUHJvY2VzcyBXaW5kb3dzIHRvIEZyb250DQoJCQkJCQl9DQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIENvbnRleHRNZW51RnJvbnQgQ2xpY2sgRXZlbnQNCgkJCQl9DQoJCQkJDQoJCQkJQ29udGV4dE1lbnVCYWNrICAgICAgICAgICAgPSBAew0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBDb250ZXh0TWVudUJhY2sgQ2xpY2sgRXZlbnQNCgkJCQkJCUNsaWNrID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogU2VuZCBTZWxlY3RlZCBQcm9jZXNzIFdpbmRvd3MgdG8gQmFjayAoTWluaW1pemUpDQoJCQkJCQkJCSMgSXRlcmF0ZSB0aHJvdWdoIHNlbGVjdGVkIHJvd3MgaW4gdGhlIERhdGFHcmlkLg0KCQkJCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzLkNvdW50IC1ndCAwKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQlmb3JlYWNoICgkcm93IGluICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyLlNlbGVjdGVkUm93cykNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQkjIENoZWNrIGZvciB2YWxpZCBwcm9jZXNzIGluZm8gYW5kIHdpbmRvdyBoYW5kbGUuDQoJCQkJCQkJCQkJaWYgKCRyb3cuVGFnIC1hbmQgJHJvdy5UYWcuTWFpbldpbmRvd0hhbmRsZSAtbmUgW0ludFB0cl06Olplcm8pDQoJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICdVSTogTWluaW1pemluZy4uLicgLUZvcmVncm91bmRDb2xvciBDeWFuDQoJCQkJCQkJCQkJCVtOYXRpdmVdOjpTZW5kVG9CYWNrKCRyb3cuVGFnLk1haW5XaW5kb3dIYW5kbGUpDQoJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgJ1VJOiBPcHRpbWl6aW5nLi4uJyAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCgkJCQkJCQkJCQkJW05hdGl2ZV06OkVtcHR5V29ya2luZ1NldCgkcm93LlRhZy5IYW5kbGUpDQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQl9DQoJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBTZW5kIFNlbGVjdGVkIFByb2Nlc3MgV2luZG93cyB0byBCYWNrIChNaW5pbWl6ZSkNCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgQ29udGV4dE1lbnVCYWNrIENsaWNrIEV2ZW50DQoJCQkJfQ0KDQoJCQkJQ29udGV4dE1lbnVSZXNpemVBbmRDZW50ZXIgPSBAew0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBDb250ZXh0TWVudVJlc2l6ZUFuZENlbnRlciBDbGljayBFdmVudA0KCQkJCQkJQ2xpY2sgPSB7DQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBSZXNpemUgU2VsZWN0ZWQgUHJvY2VzcyBXaW5kb3dzIHRvIFN0YW5kYXJkIFNpemUNCgkJCQkJCQkJIyBJdGVyYXRlIHRocm91Z2ggc2VsZWN0ZWQgcm93cyBpbiB0aGUgRGF0YUdyaWQuDQoJCQkJCQkJCWlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5EYXRhR3JpZEZpbGxlci5TZWxlY3RlZFJvd3MuQ291bnQgLWd0IDApDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgR2V0IHNjcmVlbiBkaW1lbnNpb25zIGFuZCBkZWZpbmUgc3RhbmRhcmQgd2luZG93IHNpemUuDQoJCQkJCQkJCQkkc2NyID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLlNjcmVlbl06OlByaW1hcnlTY3JlZW4uV29ya2luZ0FyZWENCgkJCQkJCQkJCSR3aWR0aCA9IDEwNDANCgkJCQkJCQkJCSRoZWlnaHQgPSA4MDcNCg0KCQkJCQkJCQkJZm9yZWFjaCAoJHJvdyBpbiAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5EYXRhR3JpZEZpbGxlci5TZWxlY3RlZFJvd3MpDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJIyBDaGVjayBmb3IgdmFsaWQgcHJvY2VzcyBpbmZvIGFuZCB3aW5kb3cgaGFuZGxlLg0KCQkJCQkJCQkJCWlmICgkcm93LlRhZyAtYW5kICRyb3cuVGFnLk1haW5XaW5kb3dIYW5kbGUgLW5lIFtJbnRQdHJdOjpaZXJvKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJIyBVc2UgbmF0aXZlIGZ1bmN0aW9uIHRvIHJlc2l6ZSBhbmQgY2VudGVyIHRoZSB3aW5kb3cuDQoJCQkJCQkJCQkJCVtOYXRpdmVdOjpQb3NpdGlvbldpbmRvdygNCgkJCQkJCQkJCQkJCSRyb3cuVGFnLk1haW5XaW5kb3dIYW5kbGUsDQoJCQkJCQkJCQkJCQlbTmF0aXZlXTo6VG9wV2luZG93SGFuZGxlLA0KCQkJCQkJCQkJCQkJW2ludF0oKCRzY3IuV2lkdGggLSAkd2lkdGgpIC8gMiksICAjIENlbnRlciBYDQoJCQkJCQkJCQkJCQlbaW50XSgoJHNjci5IZWlnaHQgLSAkaGVpZ2h0KSAvIDIpLCAjIENlbnRlciBZDQoJCQkJCQkJCQkJCQkkd2lkdGgsDQoJCQkJCQkJCQkJCQkkaGVpZ2h0LA0KCQkJCQkJCQkJCQkJIyBGbGFnczogRG9uJ3QgYWN0aXZhdGUNCgkJCQkJCQkJCQkJCVtOYXRpdmUrV2luZG93UG9zaXRpb25PcHRpb25zXTo6RG9Ob3RBY3RpdmF0ZQ0KCQkJCQkJCQkJCQkpDQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQl9DQoJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBSZXNpemUgU2VsZWN0ZWQgUHJvY2VzcyBXaW5kb3dzIHRvIFN0YW5kYXJkIFNpemUNCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgQ29udGV4dE1lbnVSZXNpemVBbmRDZW50ZXIgQ2xpY2sgRXZlbnQNCgkJCQl9DQoNCgkJCQkjIExhdW5jaCBidXR0b24gZXZlbnQNCgkJCQlMYXVuY2ggICAgICAgICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIExhdW5jaCBCdXR0b24gQ2xpY2sgRXZlbnQNCgkJCQkJCUNsaWNrID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogSW5pdGlhbGl6ZSBDbGllbnQgTGF1bmNoIFByb2Nlc3MNCgkJCQkJCQkJdHJ5DQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgQ2FsbCB0aGUgZnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIHN0YXJ0aW5nIHRoZSBjbGllbnQgbGF1bmNoIHNlcXVlbmNlLg0KCQkJCQkJCQkJU3RhcnQtQ2xpZW50TGF1bmNoDQoNCgkJCQkJCQkJfQ0KCQkJCQkJCQljYXRjaA0KCQkJCQkJCQl7DQoJCQkJCQkJCQkjIEhhbmRsZSBlcnJvcnMgZHVyaW5nIGxhdW5jaCBpbml0aWFsaXphdGlvbi4NCgkJCQkJCQkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlN0YXRlLkxhdW5jaEFjdGl2ZSA9ICRmYWxzZQ0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogTGF1bmNoIGluaXRpYWxpemF0aW9uIGZhaWxlZDogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkFuIGVycm9yIG9jY3VycmVkIGR1cmluZyBsYXVuY2g6ICQoJF8uRXhjZXB0aW9uLk1lc3NhZ2UpIiwgJ0Vycm9yJywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkVycm9yKQ0KCQkJCQkJCQl9DQoJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBJbml0aWFsaXplIENsaWVudCBMYXVuY2ggUHJvY2Vzcw0KCQkJCQkJfQ0KCQkJCQkJDQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIExhdW5jaCBCdXR0b24gQ2xpY2sgRXZlbnQNCgkJCQl9DQoNCgkJCQkjIExvZ2luIGJ1dHRvbiBldmVudA0KCQkJCUxvZ2luQnV0dG9uICAgICAgICAgICAgICAgID0gQHsNCgkJCQkJI3JlZ2lvbiBTdGVwOiBIYW5kbGUgTG9naW4gQnV0dG9uIENsaWNrIEV2ZW50DQoJCQkJCQlDbGljayA9IHsNCgkJCQkJCQkjcmVnaW9uIFN0ZXA6IEluaXRpYXRlIExvZ2luIFByb2Nlc3MgZm9yIFNlbGVjdGVkIENsaWVudHMNCgkJCQkJCQkJdHJ5DQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgQ2hlY2sgaWYgdGhlIExvZ2luU2VsZWN0ZWRSb3cgZnVuY3Rpb24gKGxpa2VseSBmcm9tIGxvZ2luLnBzbTEpIGlzIGF2YWlsYWJsZS4NCgkJCQkJCQkJCWlmIChHZXQtQ29tbWFuZCAtTmFtZSBMb2dpblNlbGVjdGVkUm93IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCSMgRW5zdXJlIGF0IGxlYXN0IG9uZSBjbGllbnQgcm93IGlzIHNlbGVjdGVkIGluIHRoZSBEYXRhR3JpZC4NCgkJCQkJCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzLkNvdW50IC1lcSAwKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogTm8gY2xpZW50cyBzZWxlY3RlZCBmb3IgbG9naW4nIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQkJCQkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygnUGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgY2xpZW50IHRvIGxvZyBpbi4nLCAnTG9naW4nLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6SW5mb3JtYXRpb24pDQoJCQkJCQkJCQkJCXJldHVybg0KCQkJCQkJCQkJCX0NCg0KCQkJCQkJCQkJCSMgRGV0ZXJtaW5lIGxvZyBmaWxlIHBhdGggYmFzZWQgb24gbGF1bmNoZXIgcGF0aC4NCgkJCQkJCQkJCQkkTG9nRm9sZGVyID0gKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snTGF1bmNoZXJQYXRoJ11bJ0xhdW5jaGVyUGF0aCddIC1yZXBsYWNlICdcXExhdW5jaGVyXC5leGUkJywgJycpDQoJCQkJCQkJCQkJJExvZ0ZpbGVQYXRoID0gSm9pbi1QYXRoIC1QYXRoICRMb2dGb2xkZXIgLUNoaWxkUGF0aCAiTG9nXG5ldHdvcmtfJChHZXQtRGF0ZSAtRm9ybWF0ICd5eXl5TU1kZCcpLmxvZyINCg0KCQkJCQkJCQkJCSMgQ2FsbCB0aGUgbG9naW4gZnVuY3Rpb24sIHBhc3NpbmcgdGhlIGxvZyBmaWxlIHBhdGguDQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogU3RhcnRpbmcgbG9naW4gcHJvY2VzcyBmb3Igc2VsZWN0ZWQgY2xpZW50cy4uLicgLUZvcmVncm91bmRDb2xvciBDeWFuDQoJCQkJCQkJCQkJTG9naW5TZWxlY3RlZFJvdyAtTG9nRmlsZVBhdGggJExvZ0ZpbGVQYXRoDQoNCgkJCQkJCQkJCX0NCgkJCQkJCQkJCWVsc2UNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICcgIFVJOiBMb2dpbiBtb2R1bGUgKExvZ2luU2VsZWN0ZWRSb3cgY29tbWFuZCkgbm90IGF2YWlsYWJsZScgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coJ0xvZ2luIGZ1bmN0aW9uYWxpdHkgaXMgbm90IGF2YWlsYWJsZS4nLCAnRXJyb3InLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6RXJyb3IpDQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0NCgkJCQkJCQkJY2F0Y2gNCgkJCQkJCQkJew0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRXJyb3IgaW4gbG9naW4gcHJvY2VzczogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkFuIGVycm9yIG9jY3VycmVkIGR1cmluZyBsb2dpbjogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiLCAnRXJyb3InLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6RXJyb3IpDQoJCQkJCQkJCX0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEluaXRpYXRlIExvZ2luIFByb2Nlc3MgZm9yIFNlbGVjdGVkIENsaWVudHMNCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgTG9naW4gQnV0dG9uIENsaWNrIEV2ZW50DQoJCQkJfQ0KDQoJCQkJIyBGdG9vbCBidXR0b24gZXZlbnQNCgkJCQlGdG9vbCAgICAgICAgICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIEZ0b29sIEJ1dHRvbiBDbGljayBFdmVudA0KCQkJCQkJQ2xpY2sgPSB7DQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBJbml0aWF0ZSBGdG9vbCBQcm9jZXNzIGZvciBTZWxlY3RlZCBDbGllbnRzDQoJCQkJCQkJDQoJCQkJCQkJCXRyeQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQkjIFZhbGlkYXRlIERhdGFHcmlkIGV4aXN0cy4NCgkJCQkJCQkJCWlmICgtbm90ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgJyAgVUk6IERhdGFHcmlkIG5vdCBmb3VuZCBmb3IgRnRvb2wgYWN0aW9uJyAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJCQkJCQkJCXJldHVybg0KCQkJCQkJCQkJfQ0KDQoJCQkJCQkJCQkjIEVuc3VyZSBhdCBsZWFzdCBvbmUgcm93IGlzIHNlbGVjdGVkLg0KCQkJCQkJCQkJJHNlbGVjdGVkUm93cyA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyLlNlbGVjdGVkUm93cw0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRnRvb2wgYnV0dG9uIGNsaWNrZWQsIHNlbGVjdGVkIHJvd3MgY291bnQ6ICQoJHNlbGVjdGVkUm93cy5Db3VudCkiIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCg0KCQkJCQkJCQkJaWYgKCRzZWxlY3RlZFJvd3MuQ291bnQgLWVxIDApDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCdQbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBjbGllbnQgcm93IHRvIHVzZSBGdG9vbC4nLCAnRnRvb2wnLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6SW5mb3JtYXRpb24pDQoJCQkJCQkJCQkJcmV0dXJuDQoJCQkJCQkJCQl9DQoNCgkJCQkJCQkJCSMgQ2hlY2sgaWYgRnRvb2xTZWxlY3RlZFJvdyBmdW5jdGlvbiAobGlrZWx5IGZyb20gZnRvb2wucHNtMSkgaXMgYXZhaWxhYmxlLg0KCQkJCQkJCQkJaWYgKC1ub3QgKEdldC1Db21tYW5kIC1OYW1lIEZ0b29sU2VsZWN0ZWRSb3cgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpKSB7DQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogRnRvb2wgbW9kdWxlIChGdG9vbFNlbGVjdGVkUm93IGNvbW1hbmQpIG5vdCBhdmFpbGFibGUnIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQkJCQkJW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCdGdG9vbCBmdW5jdGlvbmFsaXR5IGlzIG5vdCBhdmFpbGFibGUuJywgJ0Vycm9yJywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkVycm9yKQ0KCQkJCQkJCQkJCXJldHVybg0KCQkJCQkJCQkJfQ0KDQoJCQkJCQkJCQkjIFByb2Nlc3MgZWFjaCBzZWxlY3RlZCByb3cgdXNpbmcgdGhlIEZ0b29sIGZ1bmN0aW9uLg0KCQkJCQkJCQkJZm9yZWFjaCAoJHJvdyBpbiAkc2VsZWN0ZWRSb3dzKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCUZ0b29sU2VsZWN0ZWRSb3cgJHJvdw0KCQkJCQkJCQkJfQ0KCQkJCQkJCQl9DQoJCQkJCQkJCWNhdGNoDQoJCQkJCQkJCXsNCgkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IEVycm9yIGluIEZ0b29sIGNsaWNrIGhhbmRsZXI6ICQoJF8uRXhjZXB0aW9uLk1lc3NhZ2UpIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJCQkJCQkJW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJBbiBlcnJvciBvY2N1cnJlZCBpbml0aWF0aW5nIEZ0b29sOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIsICdFcnJvcicsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikNCgkJCQkJCQkJfQ0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogSW5pdGlhdGUgRnRvb2wgUHJvY2VzcyBmb3IgU2VsZWN0ZWQgQ2xpZW50cw0KCQkJCQkJfQ0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBGdG9vbCBCdXR0b24gQ2xpY2sgRXZlbnQNCgkJCQl9DQoNCgkJCQkjIEV4aXQgYnV0dG9uIGV2ZW50IChUZXJtaW5hdGUgU2VsZWN0ZWQpDQoJCQkJRXhpdCAgICAgICAgICAgICAgICAgICAgICAgPSBAew0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBFeGl0IEJ1dHRvbiBDbGljayBFdmVudA0KCQkJCQkJQ2xpY2sgPSB7DQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBUZXJtaW5hdGUgU2VsZWN0ZWQgUHJvY2Vzc2VzDQoJCQkJCQkJCSMgRW5zdXJlIGF0IGxlYXN0IG9uZSByb3cgaXMgc2VsZWN0ZWQuDQoJCQkJCQkJCWlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5EYXRhR3JpZEZpbGxlci5TZWxlY3RlZFJvd3MuQ291bnQgLWd0IDApDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgQ29uZmlybSB0ZXJtaW5hdGlvbiB3aXRoIHRoZSB1c2VyLg0KCQkJCQkJCQkJJHJlc3VsdCA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygNCgkJCQkJCQkJCQknQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHRlcm1pbmF0ZSB0aGUgc2VsZWN0ZWQgcHJvY2Vzc2VzPycsDQoJCQkJCQkJCQkJJ0NvbmZpcm0gVGVybWluYXRpb24nLA0KCQkJCQkJCQkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Olllc05vLA0KCQkJCQkJCQkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06Oldhcm5pbmcNCgkJCQkJCQkJCSkNCg0KCQkJCQkJCQkJaWYgKCRyZXN1bHQgLWVxIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EaWFsb2dSZXN1bHRdOjpZZXMpDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJIyBJdGVyYXRlIHRocm91Z2ggc2VsZWN0ZWQgcm93cyBhbmQgYXR0ZW1wdCB0ZXJtaW5hdGlvbi4NCgkJCQkJCQkJCQlmb3JlYWNoICgkcm93IGluICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyLlNlbGVjdGVkUm93cykNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCWlmICgkcm93LlRhZyAtYW5kICRyb3cuVGFnLklkKQ0KCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkkcHJvY2Vzc0lkID0gJHJvdy5UYWcuSWQNCgkJCQkJCQkJCQkJCXRyeQ0KCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCSMgR2V0IHRoZSBwcm9jZXNzIG9iamVjdC4NCgkJCQkJCQkJCQkJCQkkcHJvY2VzcyA9IEdldC1Qcm9jZXNzIC1JZCAkcHJvY2Vzc0lkIC1FcnJvckFjdGlvbiBTdG9wDQoNCgkJCQkJCQkJCQkJCQkjIFRyeSB0byBjbG9zZSBncmFjZWZ1bGx5IGZpcnN0Lg0KCQkJCQkJCQkJCQkJCWlmICgtbm90ICRwcm9jZXNzLkhhc0V4aXRlZCkNCgkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCSMgUmVzdG9yZSBpZiBtaW5pbWl6ZWQgYmVmb3JlIGNsb3NpbmcgbWFpbiB3aW5kb3cuDQoJCQkJCQkJCQkJCQkJCWlmIChbTmF0aXZlXTo6SXNXaW5kb3dNaW5pbWl6ZWQoJHByb2Nlc3MuTWFpbldpbmRvd0hhbmRsZSkpDQoJCQkJCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJCQkJCVtOYXRpdmVdOjpTaG93V2luZG93KCRwcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUsIFtOYXRpdmVdOjpTV19SRVNUT1JFKQ0KCQkJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCQkJCVN0YXJ0LVNsZWVwIC1NaWxsaVNlY29uZHMgMTAwDQoNCgkJCQkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogQXR0ZW1wdGluZyBncmFjZWZ1bCBzaHV0ZG93biBmb3IgUElEICRwcm9jZXNzSWQuLi4iIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkJCQkJCQkJCQkJJHByb2Nlc3MuQ2xvc2VNYWluV2luZG93KCkgfCBPdXQtTnVsbA0KDQoJCQkJCQkJCQkJCQkJCSMgV2FpdCBicmllZmx5IGZvciBncmFjZWZ1bCBleGl0Lg0KCQkJCQkJCQkJCQkJCQlpZiAoLW5vdCAkcHJvY2Vzcy5XYWl0Rm9yRXhpdCgxMDAwKSkgew0KCQkJCQkJCQkJCQkJCQkJIyBJZiBzdGlsbCBydW5uaW5nLCBmb3JjZSBraWxsLg0KCQkJCQkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogR3JhY2VmdWwgc2h1dGRvd24gZmFpbGVkIGZvciBQSUQgJHByb2Nlc3NJZC4gRm9yY2luZyB0ZXJtaW5hdGlvbi4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQkJCQkJCQkJCQkkcHJvY2Vzcy5LaWxsKCkNCgkJCQkJCQkJCQkJCQkJfSBlbHNlIHsNCgkJCQkJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IFByb2Nlc3MgUElEICRwcm9jZXNzSWQgZXhpdGVkIGdyYWNlZnVsbHkuIiAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQoJCQkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogU3VjY2Vzc2Z1bGx5IHRlcm1pbmF0ZWQgcHJvY2VzcyBJRCAkcHJvY2Vzc0lkIiAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQoJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCQljYXRjaCBbU3lzdGVtLkFyZ3VtZW50RXhjZXB0aW9uXSB7DQoJCQkJCQkJCQkJCQkJIyBQcm9jZXNzIGFscmVhZHkgZXhpdGVkIG9yIElEIGludmFsaWQNCgkJCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBQcm9jZXNzIElEICRwcm9jZXNzSWQgbm90IGZvdW5kIG9yIGFscmVhZHkgZXhpdGVkLiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJCWNhdGNoIHsNCgkJCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBGYWlsZWQgdG8gdGVybWluYXRlIHByb2Nlc3MgSUQgJCgkcHJvY2Vzc0lkKTogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoNCgkJCQkJCQkJCQkJCQkjIFRyeSBhbHRlcm5hdGl2ZSB0ZXJtaW5hdGlvbiBhcyBmYWxsYmFjay4NCgkJCQkJCQkJCQkJCQl0cnkNCgkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IEF0dGVtcHRpbmcgU3RvcC1Qcm9jZXNzIGZhbGxiYWNrIGZvciBQSUQgJHByb2Nlc3NJZC4uLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJCQkJCQlTdG9wLVByb2Nlc3MgLUlkICRwcm9jZXNzSWQgLUZvcmNlIC1FcnJvckFjdGlvbiBTdG9wDQoJCQkJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IFRlcm1pbmF0ZWQgcHJvY2VzcyBJRCAkcHJvY2Vzc0lkIHVzaW5nIFN0b3AtUHJvY2VzcyIgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KCQkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJCQljYXRjaA0KCQkJCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRmFpbGVkIHRvIHRlcm1pbmF0ZSBwcm9jZXNzIElEICRwcm9jZXNzSWQgdXNpbmcgU3RvcC1Qcm9jZXNzOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQl9DQoNCgkJCQkJCQkJCQkjIFJlZnJlc2ggdGhlIGdyaWQgYWZ0ZXIgdGVybWluYXRpb24gYXR0ZW1wdHMuDQoJCQkJCQkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyLlJlZnJlc2hNZXRob2QpDQoJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBSZWZyZXNoaW5nIERhdGFHcmlkIGFmdGVyIHRlcm1pbmF0aW9uIGF0dGVtcHRzLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJCQkmICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyLlJlZnJlc2hNZXRob2QNCgkJCQkJCQkJCQl9DQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0gZWxzZSB7DQoJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coJ1BsZWFzZSBzZWxlY3QgYXQgbGVhc3Qgb25lIHByb2Nlc3MgdG8gdGVybWluYXRlLicsICdUZXJtaW5hdGUgUHJvY2VzcycsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpJbmZvcm1hdGlvbikNCgkJCQkJCQkJfQ0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogVGVybWluYXRlIFNlbGVjdGVkIFByb2Nlc3Nlcw0KCQkJCQkJfQ0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBFeGl0IEJ1dHRvbiBDbGljayBFdmVudA0KCQkJCX0NCgkJCX0NCgkJI2VuZHJlZ2lvbiBTdGVwOiBEZWZpbmUgRXZlbnQgSGFuZGxlciBNYXBwaW5ncw0KDQoJCSNyZWdpb24gU3RlcDogUmVnaXN0ZXIgRGVmaW5lZCBFdmVudCBIYW5kbGVycyBmb3IgRWFjaCBVSSBFbGVtZW50DQoJCQkjIEl0ZXJhdGUgdGhyb3VnaCB0aGUgZXZlbnQgbWFwcGluZ3MgYW5kIHJlZ2lzdGVyIGVhY2ggaGFuZGxlci4NCgkJCWZvcmVhY2ggKCRlbGVtZW50TmFtZSBpbiAkZXZlbnRNYXBwaW5ncy5LZXlzKQ0KCQkJew0KCQkJCSRlbGVtZW50ID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuJGVsZW1lbnROYW1lDQoJCQkJaWYgKCRlbGVtZW50KQ0KCQkJCXsNCgkJCQkJZm9yZWFjaCAoJGUgaW4gJGV2ZW50TWFwcGluZ3NbJGVsZW1lbnROYW1lXS5LZXlzKQ0KCQkJCQl7DQoJCQkJCQkjIENyZWF0ZSBhIHVuaXF1ZSBzb3VyY2UgaWRlbnRpZmllciBmb3IgZWFjaCBldmVudCBzdWJzY3JpcHRpb24uDQoJCQkJCQkkc291cmNlSWRlbnRpZmllciA9ICJFbnRyb3BpYURhc2hib2FyZC4kZWxlbWVudE5hbWUuJGUiDQoNCgkJCQkJCSMgVW5yZWdpc3RlciBhbnkgZXhpc3RpbmcgZXZlbnQgaGFuZGxlciB3aXRoIHRoZSBzYW1lIGlkZW50aWZpZXIgdG8gcHJldmVudCBkdXBsaWNhdGVzLg0KCQkJCQkJR2V0LUV2ZW50U3Vic2NyaWJlciAtU291cmNlSWRlbnRpZmllciAkc291cmNlSWRlbnRpZmllciAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFVucmVnaXN0ZXItRXZlbnQNCg0KCQkJCQkJIyBSZWdpc3RlciB0aGUgbmV3IGV2ZW50IGhhbmRsZXIuDQoJCQkJCQlSZWdpc3Rlci1PYmplY3RFdmVudCAtSW5wdXRPYmplY3QgJGVsZW1lbnQgYA0KCQkJCQkJCS1FdmVudE5hbWUgJGUgYA0KCQkJCQkJCS1BY3Rpb24gJGV2ZW50TWFwcGluZ3NbJGVsZW1lbnROYW1lXVskZV0gYA0KCQkJCQkJCS1Tb3VyY2VJZGVudGlmaWVyICRzb3VyY2VJZGVudGlmaWVyIGANCgkJCQkJCQktRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSAjIENvbnRpbnVlIGlmIHJlZ2lzdHJhdGlvbiBmYWlscyBmb3Igc29tZSByZWFzb24NCgkJCQkJfQ0KCQkJCX0NCgkJCQllbHNlIHsNCgkJCQkJIFdyaXRlLVZlcmJvc2UgIiAgVUk6IEVsZW1lbnQgJyRlbGVtZW50TmFtZScgbm90IGZvdW5kIGluIGdsb2JhbCBVSSBvYmplY3QgZHVyaW5nIGV2ZW50IHJlZ2lzdHJhdGlvbi4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJfQ0KCQkJfQ0KCQkjZW5kcmVnaW9uIFN0ZXA6IFJlZ2lzdGVyIERlZmluZWQgRXZlbnQgSGFuZGxlcnMgZm9yIEVhY2ggVUkgRWxlbWVudA0KDQoJCSNyZWdpb24gU3RlcDogTWFyayBVSSBhcyBJbml0aWFsaXplZA0KCQkJIyBTZXQgYSBmbGFnIGluZGljYXRpbmcgdGhhdCBVSSBpbml0aWFsaXphdGlvbiBhbmQgZXZlbnQgcmVnaXN0cmF0aW9uIGFyZSBjb21wbGV0ZS4NCgkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlN0YXRlLlVJSW5pdGlhbGl6ZWQgPSAkdHJ1ZQ0KCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogRXZlbnQgaGFuZGxlcnMgcmVnaXN0ZXJlZC4nIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCgkJI2VuZHJlZ2lvbiBTdGVwOiBNYXJrIFVJIGFzIEluaXRpYWxpemVkDQoJfQ0KI2VuZHJlZ2lvbiBGdW5jdGlvbjogUmVnaXN0ZXItVUlFdmVudEhhbmRsZXJzDQoNCiNyZWdpb24gRnVuY3Rpb246IFNob3ctU2V0dGluZ3NGb3JtDQoJZnVuY3Rpb24gU2hvdy1TZXR0aW5nc0Zvcm0NCgl7DQoJCTwjDQoJCS5TWU5PUFNJUw0KCQkJU2hvd3MgdGhlIHNldHRpbmdzIGZvcm0gd2l0aCBhIGZhZGUtaW4gYW5pbWF0aW9uIGVmZmVjdC4NCgkJLk5PVEVTDQoJCQlNYWtlcyB0aGUgc2V0dGluZ3MgZm9ybSB2aXNpYmxlLCBwb3NpdGlvbnMgaXQgcmVsYXRpdmUgdG8gdGhlIG1haW4gZm9ybSwNCgkJCWFuZCBpbml0aWF0ZXMgYSB0aW1lci1iYXNlZCBmYWRlLWluIGJ5IGdyYWR1YWxseSBpbmNyZWFzaW5nIG9wYWNpdHkuDQoJCQlQcmV2ZW50cyBjb25jdXJyZW50IGZhZGUgYW5pbWF0aW9ucy4NCgkJIz4NCgkJW0NtZGxldEJpbmRpbmcoKV0NCgkJcGFyYW0oKQ0KDQoJCSNyZWdpb24gU3RlcDogUHJldmVudCBDb25jdXJyZW50IEFuaW1hdGlvbnMNCgkJCSMgQ2hlY2sgaWYgYSBmYWRlLWluIG9yIGZhZGUtb3V0IGFuaW1hdGlvbiBpcyBhbHJlYWR5IGluIHByb2dyZXNzLg0KCQkJaWYgKCgkc2NyaXB0OmZhZGVJblRpbWVyIC1hbmQgJHNjcmlwdDpmYWRlSW5UaW1lci5FbmFibGVkKSAtb3INCgkJCQkoJGdsb2JhbDpmYWRlT3V0VGltZXIgLWFuZCAkZ2xvYmFsOmZhZGVPdXRUaW1lci5FbmFibGVkKSkNCgkJCXsNCgkJCQlyZXR1cm4gIyBFeGl0IGlmIGFuIGFuaW1hdGlvbiBpcyBhY3RpdmUNCgkJCX0NCgkJI2VuZHJlZ2lvbiBTdGVwOiBQcmV2ZW50IENvbmN1cnJlbnQgQW5pbWF0aW9ucw0KDQoJCSNyZWdpb24gU3RlcDogVmFsaWRhdGUgVUkgT2JqZWN0cw0KCQkJIyBFbnN1cmUgdGhlIG5lY2Vzc2FyeSBVSSBlbGVtZW50cyAobWFpbiBmb3JtLCBzZXR0aW5ncyBmb3JtKSBleGlzdC4NCgkJCWlmICgtbm90ICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSSAtYW5kICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybSAtYW5kICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtKSkNCgkJCXsNCgkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBDYW5ub3Qgc2hvdyBzZXR0aW5ncyBmb3JtIC0gVUkgb2JqZWN0cyBtaXNzaW5nLiIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQlyZXR1cm4NCgkJCX0NCgkJI2VuZHJlZ2lvbiBTdGVwOiBWYWxpZGF0ZSBVSSBPYmplY3RzDQoNCgkJJHNldHRpbmdzRm9ybSA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybQ0KDQoJCSNyZWdpb24gU3RlcDogUG9zaXRpb24gYW5kIFNob3cgU2V0dGluZ3MgRm9ybQ0KCQkJIyBPbmx5IHByb2NlZWQgaWYgdGhlIGZvcm0gaXMgbm90IGFscmVhZHkgZnVsbHkgb3BhcXVlIChvciBuZWFybHkgc28pLg0KCQkJaWYgKCRzZXR0aW5nc0Zvcm0uT3BhY2l0eSAtbHQgMC45NSkNCgkJCXsNCgkJCQkjIE1ha2UgdGhlIGZvcm0gdmlzaWJsZSBiZWZvcmUgc3RhcnRpbmcgdGhlIGZhZGUuDQoJCQkJJHNldHRpbmdzRm9ybS5WaXNpYmxlID0gJHRydWUNCg0KCQkJCSMgQ2FsY3VsYXRlIG9wdGltYWwgcG9zaXRpb24gZm9yIHNldHRpbmdzIGZvcm0gcmVsYXRpdmUgdG8gdGhlIG1haW4gZm9ybSwga2VlcGluZyBpdCBvbiBzY3JlZW4uDQoJCQkJJG1haW5Gb3JtTG9jYXRpb24gPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5NYWluRm9ybS5Mb2NhdGlvbg0KCQkJCSRzZXR0aW5nc0Zvcm1XaWR0aCA9ICRzZXR0aW5nc0Zvcm0uV2lkdGgNCgkJCQkkc2V0dGluZ3NGb3JtSGVpZ2h0ID0gJHNldHRpbmdzRm9ybS5IZWlnaHQNCgkJCQkkc2NyZWVuV2lkdGggPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuU2NyZWVuXTo6UHJpbWFyeVNjcmVlbi5Xb3JraW5nQXJlYS5XaWR0aA0KCQkJCSRzY3JlZW5IZWlnaHQgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuU2NyZWVuXTo6UHJpbWFyeVNjcmVlbi5Xb3JraW5nQXJlYS5IZWlnaHQNCg0KCQkJCSMgQXR0ZW1wdCB0byBjZW50ZXIgdGhlIHNldHRpbmdzIGZvcm0gb3ZlciB0aGUgbWFpbiBmb3JtLg0KCQkJCSR4ID0gJG1haW5Gb3JtTG9jYXRpb24uWCArICgoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTWFpbkZvcm0uV2lkdGggLSAkc2V0dGluZ3NGb3JtV2lkdGgpIC8gMikNCgkJCQkkeSA9ICRtYWluRm9ybUxvY2F0aW9uLlkgKyAoKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtLkhlaWdodCAtICRzZXR0aW5nc0Zvcm1IZWlnaHQpIC8gMikNCg0KCQkJCSMgRW5zdXJlIGZvcm0gc3RheXMgd2l0aGluIHNjcmVlbiBib3VuZHMsIGFkZGluZyBhIHNtYWxsIG1hcmdpbi4NCgkJCQkkbWFyZ2luID0gMA0KCQkJCSR4ID0gW01hdGhdOjpNYXgoJG1hcmdpbiwgW01hdGhdOjpNaW4oJHgsICRzY3JlZW5XaWR0aCAtICRzZXR0aW5nc0Zvcm1XaWR0aCAtICRtYXJnaW4pKQ0KCQkJCSR5ID0gW01hdGhdOjpNYXgoJG1hcmdpbiwgW01hdGhdOjpNaW4oJHksICRzY3JlZW5IZWlnaHQgLSAkc2V0dGluZ3NGb3JtSGVpZ2h0IC0gJG1hcmdpbikpDQoNCgkJCQkjIEFwcGx5IHBvc2l0aW9uIGFuZCBicmluZyB0aGUgc2V0dGluZ3MgZm9ybSB0byB0aGUgZnJvbnQuDQoJCQkJJHNldHRpbmdzRm9ybS5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuUG9pbnQoJHgsICR5KQ0KCQkJCSRzZXR0aW5nc0Zvcm0uQnJpbmdUb0Zyb250KCkNCgkJCQkkc2V0dGluZ3NGb3JtLkFjdGl2YXRlKCkgIyBHaXZlIGZvY3VzIHRvIHRoZSBzZXR0aW5ncyBmb3JtDQoJCQl9DQoJCSNlbmRyZWdpb24gU3RlcDogUG9zaXRpb24gYW5kIFNob3cgU2V0dGluZ3MgRm9ybQ0KDQoJCSNyZWdpb24gU3RlcDogQ3JlYXRlIGFuZCBTdGFydCBGYWRlLUluIEFuaW1hdGlvbiBUaW1lcg0KCQkJIyBEaXNwb3NlIHByZXZpb3VzIHRpbWVyIGlmIGl0IGV4aXN0cw0KCQkJaWYgKCRzY3JpcHQ6ZmFkZUluVGltZXIpIHsgJHNjcmlwdDpmYWRlSW5UaW1lci5EaXNwb3NlKCkgfQ0KDQoJCQkjIENyZWF0ZSBhIHRpbWVyIHRvIGhhbmRsZSB0aGUgZmFkZS1pbiBlZmZlY3QuDQoJCQkkc2NyaXB0OmZhZGVJblRpbWVyID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5UaW1lcg0KCQkJJHNjcmlwdDpmYWRlSW5UaW1lci5JbnRlcnZhbCA9IDE1ICMgSW50ZXJ2YWwgZm9yIG9wYWNpdHkgc3RlcHMgKG1pbGxpc2Vjb25kcykNCgkJCSRzY3JpcHQ6ZmFkZUluVGltZXIuQWRkX1RpY2soew0KCQkJCQkjIENoZWNrIGlmIGZvcm0gc3RpbGwgZXhpc3RzIGFuZCBoYXNuJ3QgYmVlbiBkaXNwb3NlZC4NCgkJCQkJaWYgKC1ub3QgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuU2V0dGluZ3NGb3JtIC1vciAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5TZXR0aW5nc0Zvcm0uSXNEaXNwb3NlZCkNCgkJCQkJew0KCQkJCQkJJHNjcmlwdDpmYWRlSW5UaW1lci5TdG9wKCkNCgkJCQkJCSRzY3JpcHQ6ZmFkZUluVGltZXIuRGlzcG9zZSgpDQoJCQkJCQkkc2NyaXB0OmZhZGVJblRpbWVyID0gJG51bGwNCgkJCQkJCXJldHVybg0KCQkJCQl9DQoNCgkJCQkJIyBJbmNyZWFzZSBvcGFjaXR5IGdyYWR1YWxseSB1bnRpbCBpdCByZWFjaGVzIDEuDQoJCQkJCWlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5TZXR0aW5nc0Zvcm0uT3BhY2l0eSAtbHQgMSkNCgkJCQkJew0KCQkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuU2V0dGluZ3NGb3JtLk9wYWNpdHkgKz0gMC4xDQoJCQkJCX0NCgkJCQkJZWxzZQ0KCQkJCQl7DQoJCQkJCQkjIFN0b3AgYW5kIGRpc3Bvc2UgdGhlIHRpbWVyIG9uY2UgZnVsbHkgb3BhcXVlLg0KCQkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuU2V0dGluZ3NGb3JtLk9wYWNpdHkgPSAxICMgRW5zdXJlIGV4YWN0bHkgMQ0KCQkJCQkJJHNjcmlwdDpmYWRlSW5UaW1lci5TdG9wKCkNCgkJCQkJCSRzY3JpcHQ6ZmFkZUluVGltZXIuRGlzcG9zZSgpDQoJCQkJCQkkc2NyaXB0OmZhZGVJblRpbWVyID0gJG51bGwNCgkJCQkJfQ0KCQkJCX0pDQoJCQkjIFN0YXJ0IHRoZSBmYWRlLWluIHRpbWVyLg0KCQkJJHNjcmlwdDpmYWRlSW5UaW1lci5TdGFydCgpDQoJCQkjIFN0b3JlIHRpbWVyIHJlZmVyZW5jZSBmb3IgcG90ZW50aWFsIGNsZWFudXAgbGF0ZXIuDQoJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuVGltZXJzWydmYWRlSW5UaW1lciddID0gJHNjcmlwdDpmYWRlSW5UaW1lcg0KCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBhbmQgU3RhcnQgRmFkZS1JbiBBbmltYXRpb24gVGltZXINCgl9DQojZW5kcmVnaW9uIEZ1bmN0aW9uOiBTaG93LVNldHRpbmdzRm9ybQ0KDQojcmVnaW9uIEZ1bmN0aW9uOiBIaWRlLVNldHRpbmdzRm9ybQ0KCWZ1bmN0aW9uIEhpZGUtU2V0dGluZ3NGb3JtDQoJew0KCQk8Iw0KCQkuU1lOT1BTSVMNCgkJCUhpZGVzIHRoZSBzZXR0aW5ncyBmb3JtIHdpdGggYSBmYWRlLW91dCBhbmltYXRpb24gZWZmZWN0Lg0KCQkuTk9URVMNCgkJCUluaXRpYXRlcyBhIHRpbWVyLWJhc2VkIGZhZGUtb3V0IGJ5IGdyYWR1YWxseSBkZWNyZWFzaW5nIG9wYWNpdHkuDQoJCQlIaWRlcyB0aGUgZm9ybSBjb21wbGV0ZWx5IG9uY2Ugb3BhY2l0eSByZWFjaGVzIHplcm8uDQoJCQlQcmV2ZW50cyBjb25jdXJyZW50IGZhZGUgYW5pbWF0aW9ucy4NCgkJIz4NCgkJW0NtZGxldEJpbmRpbmcoKV0NCgkJcGFyYW0oKQ0KDQoJCSNyZWdpb24gU3RlcDogUHJldmVudCBDb25jdXJyZW50IEFuaW1hdGlvbnMNCgkJCSMgQ2hlY2sgaWYgYSBmYWRlLWluIG9yIGZhZGUtb3V0IGFuaW1hdGlvbiBpcyBhbHJlYWR5IGluIHByb2dyZXNzLg0KCQkJaWYgKCgkc2NyaXB0OmZhZGVJblRpbWVyIC1hbmQgJHNjcmlwdDpmYWRlSW5UaW1lci5FbmFibGVkKSAtb3INCgkJCQkoJGdsb2JhbDpmYWRlT3V0VGltZXIgLWFuZCAkZ2xvYmFsOmZhZGVPdXRUaW1lci5FbmFibGVkKSkNCgkJCXsNCgkJCQlyZXR1cm4gIyBFeGl0IGlmIGFuIGFuaW1hdGlvbiBpcyBhY3RpdmUNCgkJCX0NCgkJI2VuZHJlZ2lvbiBTdGVwOiBQcmV2ZW50IENvbmN1cnJlbnQgQW5pbWF0aW9ucw0KDQoJCSNyZWdpb24gU3RlcDogVmFsaWRhdGUgVUkgT2JqZWN0cw0KCQkJIyBFbnN1cmUgdGhlIHNldHRpbmdzIGZvcm0gb2JqZWN0IGV4aXN0cy4NCgkJCWlmICgtbm90ICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSSAtYW5kICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybSkpDQoJCQl7DQoJCQkJIFdyaXRlLVZlcmJvc2UgIiAgVUk6IENhbm5vdCBoaWRlIHNldHRpbmdzIGZvcm0gLSBVSSBvYmplY3QgbWlzc2luZy4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJcmV0dXJuDQoJCQl9DQoJCSNlbmRyZWdpb24gU3RlcDogVmFsaWRhdGUgVUkgT2JqZWN0cw0KDQoJCSNyZWdpb24gU3RlcDogQ3JlYXRlIGFuZCBTdGFydCBGYWRlLU91dCBBbmltYXRpb24gVGltZXINCgkJCSAjIERpc3Bvc2UgcHJldmlvdXMgdGltZXIgaWYgaXQgZXhpc3RzDQoJCQlpZiAoJGdsb2JhbDpmYWRlT3V0VGltZXIpIHsgJGdsb2JhbDpmYWRlT3V0VGltZXIuRGlzcG9zZSgpIH0NCg0KCQkJIyBDcmVhdGUgYSB0aW1lciB0byBoYW5kbGUgdGhlIGZhZGUtb3V0IGVmZmVjdC4NCgkJCSRnbG9iYWw6ZmFkZU91dFRpbWVyID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5UaW1lcg0KCQkJJGdsb2JhbDpmYWRlT3V0VGltZXIuSW50ZXJ2YWwgPSAxNSAjIEludGVydmFsIGZvciBvcGFjaXR5IHN0ZXBzIChtaWxsaXNlY29uZHMpDQoJCQkkZ2xvYmFsOmZhZGVPdXRUaW1lci5BZGRfVGljayh7DQoJCQkJCSMgQ2hlY2sgaWYgZm9ybSBzdGlsbCBleGlzdHMgYW5kIGhhc24ndCBiZWVuIGRpc3Bvc2VkLg0KCQkJCQlpZiAoLW5vdCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5TZXR0aW5nc0Zvcm0gLW9yICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybS5Jc0Rpc3Bvc2VkKQ0KCQkJCQl7DQoJCQkJCQkkZ2xvYmFsOmZhZGVPdXRUaW1lci5TdG9wKCkNCgkJCQkJCSRnbG9iYWw6ZmFkZU91dFRpbWVyLkRpc3Bvc2UoKQ0KCQkJCQkJJGdsb2JhbDpmYWRlT3V0VGltZXIgPSAkbnVsbA0KCQkJCQkJcmV0dXJuDQoJCQkJCX0NCg0KCQkJCQkjIERlY3JlYXNlIG9wYWNpdHkgZ3JhZHVhbGx5IHVudGlsIGl0IHJlYWNoZXMgMC4NCgkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybS5PcGFjaXR5IC1ndCAwKQ0KCQkJCQl7DQoJCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5TZXR0aW5nc0Zvcm0uT3BhY2l0eSAtPSAwLjENCgkJCQkJfQ0KCQkJCQllbHNlDQoJCQkJCXsNCgkJCQkJCSMgU3RvcCB0aGUgdGltZXIsIGVuc3VyZSBvcGFjaXR5IGlzIDAsIGFuZCBoaWRlIHRoZSBmb3JtLg0KCQkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuU2V0dGluZ3NGb3JtLk9wYWNpdHkgPSAwICMgRW5zdXJlIGV4YWN0bHkgMA0KCQkJCQkJJGdsb2JhbDpmYWRlT3V0VGltZXIuU3RvcCgpDQoJCQkJCQkkZ2xvYmFsOmZhZGVPdXRUaW1lci5EaXNwb3NlKCkNCgkJCQkJCSRnbG9iYWw6ZmFkZU91dFRpbWVyID0gJG51bGwNCgkJCQkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybS5IaWRlKCkNCgkJCQkJfQ0KCQkJCX0pDQoJCQkjIFN0YXJ0IHRoZSBmYWRlLW91dCB0aW1lci4NCgkJCSRnbG9iYWw6ZmFkZU91dFRpbWVyLlN0YXJ0KCkNCgkJCSMgU3RvcmUgdGltZXIgcmVmZXJlbmNlIGZvciBwb3RlbnRpYWwgY2xlYW51cCBsYXRlci4NCgkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5UaW1lcnNbJ2ZhZGVPdXRUaW1lciddID0gJGdsb2JhbDpmYWRlT3V0VGltZXINCgkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgYW5kIFN0YXJ0IEZhZGUtT3V0IEFuaW1hdGlvbiBUaW1lcg0KCX0NCiNlbmRyZWdpb24gRnVuY3Rpb246IEhpZGUtU2V0dGluZ3NGb3JtDQoNCiNyZWdpb24gRnVuY3Rpb246IFNldC1VSUVsZW1lbnQNCglmdW5jdGlvbiBTZXQtVUlFbGVtZW50DQoJew0KCQk8Iw0KCQkuU1lOT1BTSVMNCgkJCUNyZWF0ZXMgYW5kIGNvbmZpZ3VyZXMgdmFyaW91cyBTeXN0ZW0uV2luZG93cy5Gb3JtcyBVSSBlbGVtZW50cyBiYXNlZCBvbiBwcm92aWRlZCBwYXJhbWV0ZXJzLg0KCQkuUEFSQU1FVEVSIHR5cGUNCgkJCVtzdHJpbmddIFRoZSB0eXBlIG9mIFVJIGVsZW1lbnQgdG8gY3JlYXRlLiBWYWxpZCB2YWx1ZXM6ICdGb3JtJywgJ1BhbmVsJywgJ0J1dHRvbicsICdMYWJlbCcsICdEYXRhR3JpZFZpZXcnLCAnVGV4dEJveCcsICdDb21ib0JveCcsICdDaGVja0JveCcuIChNYW5kYXRvcnkpDQoJCS5QQVJBTUVURVIgdmlzaWJsZQ0KCQkJW2Jvb2xdIFNldHMgdGhlIGluaXRpYWwgdmlzaWJpbGl0eSBvZiB0aGUgZWxlbWVudC4NCgkJLlBBUkFNRVRFUiB3aWR0aA0KCQkJW2ludF0gU2V0cyB0aGUgd2lkdGggb2YgdGhlIGVsZW1lbnQgaW4gcGl4ZWxzLg0KCQkuUEFSQU1FVEVSIGhlaWdodA0KCQkJW2ludF0gU2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBlbGVtZW50IGluIHBpeGVscy4NCgkJLlBBUkFNRVRFUiB0b3ANCgkJCVtpbnRdIFNldHMgdGhlIHRvcCBwb3NpdGlvbiAoWS1jb29yZGluYXRlKSBvZiB0aGUgZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgY29udGFpbmVyLg0KCQkuUEFSQU1FVEVSIGxlZnQNCgkJCVtpbnRdIFNldHMgdGhlIGxlZnQgcG9zaXRpb24gKFgtY29vcmRpbmF0ZSkgb2YgdGhlIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIGNvbnRhaW5lci4NCgkJLlBBUkFNRVRFUiBiZw0KCQkJW2FycmF5XSBTZXRzIHRoZSBiYWNrZ3JvdW5kIGNvbG9yIHVzaW5nIGFuIFJHQiBvciBBUkdCIGFycmF5IChlLmcuLCBAKDMwLDMwLDMwKSBvciBAKDI1NSwwLDAsMTI4KSkuDQoJCS5QQVJBTUVURVIgZmcNCgkJCVthcnJheV0gU2V0cyB0aGUgZm9yZWdyb3VuZCAodGV4dCkgY29sb3IgdXNpbmcgYW4gUkdCIGFycmF5IChlLmcuLCBAKDI1NSwyNTUsMjU1KSkuDQoJCS5QQVJBTUVURVIgaWQNCgkJCVtzdHJpbmddIEFuIGlkZW50aWZpZXIgc3RyaW5nIChub3QgZGlyZWN0bHkgdXNlZCBieSBXaW5Gb3JtcywgYnV0IHVzZWZ1bCBmb3IgcmVmZXJlbmNpbmcgaW4gdGhlICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJIG9iamVjdCkuDQoJCS5QQVJBTUVURVIgdGV4dA0KCQkJW3N0cmluZ10gU2V0cyB0aGUgdGV4dCBjb250ZW50IG9yIGNhcHRpb24gb2YgdGhlIGVsZW1lbnQgKGUuZy4sIGJ1dHRvbiB0ZXh0LCBsYWJlbCB0ZXh0LCBmb3JtIHRpdGxlKS4NCgkJLlBBUkFNRVRFUiBmcw0KCQkJW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZsYXRTdHlsZV0gU2V0cyB0aGUgRmxhdFN0eWxlIGZvciBlbGVtZW50cyBsaWtlIEJ1dHRvbnMgYW5kIENvbWJvQm94ZXMgKGUuZy4sICdGbGF0JywgJ1N0YW5kYXJkJykuDQoJCS5QQVJBTUVURVIgZm9udA0KCQkJW1N5c3RlbS5EcmF3aW5nLkZvbnRdIFNldHMgdGhlIGZvbnQgZm9yIHRoZSBlbGVtZW50J3MgdGV4dC4NCgkJLlBBUkFNRVRFUiBzdGFydFBvc2l0aW9uDQoJCQlbc3RyaW5nXSBGb3IgRm9ybXMsIHNldHMgdGhlIGluaXRpYWwgc3RhcnRpbmcgcG9zaXRpb24gKGUuZy4sICdNYW51YWwnLCAnQ2VudGVyU2NyZWVuJykuDQoJCS5QQVJBTUVURVIgZm9ybUJvcmRlclN0eWxlDQoJCQlbaW50XSBGb3IgRm9ybXMsIHNldHMgdGhlIGJvcmRlciBzdHlsZSB1c2luZyB0aGUgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybUJvcmRlclN0eWxlIGVudW1lcmF0aW9uIHZhbHVlLiBEZWZhdWx0cyB0byAnTm9uZScuDQoJCS5QQVJBTUVURVIgb3BhY2l0eQ0KCQkJW2RvdWJsZV0gRm9yIEZvcm1zLCBzZXRzIHRoZSBvcGFjaXR5IGxldmVsICgwLjAgdG8gMS4wKS4gRGVmYXVsdHMgdG8gMS4wLg0KCQkuUEFSQU1FVEVSIHRvcE1vc3QNCgkJCVtib29sXSBGb3IgRm9ybXMsIHNldHMgd2hldGhlciB0aGUgZm9ybSBzaG91bGQgc3RheSBvbiB0b3Agb2Ygb3RoZXIgd2luZG93cy4NCgkJLlBBUkFNRVRFUiBtdWx0aWxpbmUNCgkJCVtzd2l0Y2hdIEZvciBUZXh0Qm94ZXMsIGVuYWJsZXMgbXVsdGktbGluZSBpbnB1dC4NCgkJLlBBUkFNRVRFUiByZWFkT25seQ0KCQkJW3N3aXRjaF0gRm9yIFRleHRCb3hlcyBvciBEYXRhR3JpZFZpZXdzLCBtYWtlcyB0aGUgY29udGVudCByZWFkLW9ubHkuDQoJCS5QQVJBTUVURVIgc2Nyb2xsQmFycw0KCQkJW3N3aXRjaF0gRm9yIFRleHRCb3hlcywgZW5hYmxlcyB2ZXJ0aWNhbCBzY3JvbGxiYXJzIChpZiAkbXVsdGlsaW5lIGlzIGFsc28gdHJ1ZSkuDQoJCS5QQVJBTUVURVIgZHJvcERvd25TdHlsZQ0KCQkJW3N0cmluZ10gRm9yIENvbWJvQm94ZXMsIHNldHMgdGhlIHN0eWxlIChlLmcuLCAnU2ltcGxlJywgJ0Ryb3BEb3duJywgJ0Ryb3BEb3duTGlzdCcpLiBEZWZhdWx0cyB0byAnRHJvcERvd25MaXN0Jy4NCgkJLk9VVFBVVFMNCgkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Db250cm9sXSBSZXR1cm5zIHRoZSBjcmVhdGVkIGFuZCBjb25maWd1cmVkIFVJIGVsZW1lbnQgb2JqZWN0Lg0KCQkuTk9URVMNCgkJCVByb3ZpZGVzIGEgc3RhbmRhcmRpemVkIHdheSB0byBjcmVhdGUgY29tbW9uIFVJIGVsZW1lbnRzIHdpdGggY29uc2lzdGVudCBzdHlsaW5nIGZvciB0aGUgZGFyayB0aGVtZS4NCgkJCUluY2x1ZGVzIHNwZWNpZmljIGNvbmZpZ3VyYXRpb25zIGZvciBEYXRhR3JpZFZpZXdzIGFuZCBjdXN0b20gZHJhd2luZyBsb2dpYyBmb3IgQnV0dG9ucywgVGV4dEJveGVzLCBhbmQgQ29tYm9Cb3hlcw0KCQkJdG8gZW5zdXJlIHZpc3VhbCBjb25zaXN0ZW5jeS4gVXNlcyBhIERhcmtDb21ib0JveCBjdXN0b20gY2xhc3MgZm9yIGJldHRlciBDb21ib0JveCBzdHlsaW5nLg0KCQkjPg0KCQlbQ21kbGV0QmluZGluZygpXQ0KCQlwYXJhbSgNCgkJCVtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0NCgkJCVtWYWxpZGF0ZVNldCgnRm9ybScsICdQYW5lbCcsICdCdXR0b24nLCAnTGFiZWwnLCAnRGF0YUdyaWRWaWV3JywgJ1RleHRCb3gnLCAnQ29tYm9Cb3gnLCAnQ2hlY2tCb3gnKV0NCgkJCVtzdHJpbmddJHR5cGUsDQoJCQlbYm9vbF0kdmlzaWJsZSwNCgkJCVtpbnRdJHdpZHRoLA0KCQkJW2ludF0kaGVpZ2h0LA0KCQkJW2ludF0kdG9wLA0KCQkJW2ludF0kbGVmdCwNCgkJCVthcnJheV0kYmcsDQoJCQlbYXJyYXldJGZnLA0KCQkJW3N0cmluZ10kaWQsICMgVXNlZCBmb3IgcmVmZXJlbmNpbmcsIG5vdCBhIGRpcmVjdCBXaW5Gb3JtcyBwcm9wZXJ0eQ0KCQkJW3N0cmluZ10kdGV4dCwNCgkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5GbGF0U3R5bGVdJGZzLA0KCQkJW1N5c3RlbS5EcmF3aW5nLkZvbnRdJGZvbnQsDQoJCQlbc3RyaW5nXSRzdGFydFBvc2l0aW9uLA0KCQkJW2ludF0kZm9ybUJvcmRlclN0eWxlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm1Cb3JkZXJTdHlsZV06Ok5vbmUsDQoJCQlbZG91YmxlXSRvcGFjaXR5ID0gMS4wLA0KCQkJW2Jvb2xdJHRvcE1vc3QsDQoJCQlbc3dpdGNoXSRtdWx0aWxpbmUsDQoJCQlbc3dpdGNoXSRyZWFkT25seSwNCgkJCVtzd2l0Y2hdJHNjcm9sbEJhcnMsDQoJCQlbVmFsaWRhdGVTZXQoJ1NpbXBsZScsICdEcm9wRG93bicsICdEcm9wRG93bkxpc3QnKV0NCgkJCVtzdHJpbmddJGRyb3BEb3duU3R5bGUgPSAnRHJvcERvd25MaXN0Jw0KCQkpDQoNCgkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgVUkgRWxlbWVudCBCYXNlZCBvbiBUeXBlDQoJCQkjIENyZWF0ZSB0aGUgYXBwcm9wcmlhdGUgLk5FVCBXaW5kb3dzIEZvcm1zIGNvbnRyb2wgb2JqZWN0IGJhc2VkIG9uIHRoZSAkdHlwZSBwYXJhbWV0ZXIuDQoJCQkkZWwgPSBzd2l0Y2ggKCR0eXBlKQ0KCQkJew0KCQkJCSdGb3JtJyAgICAgICAgIHsgTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtIH0NCgkJCQknUGFuZWwnICAgICAgICB7IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuUGFuZWwgfQ0KCQkJCSdCdXR0b24nICAgICAgIHsgTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5CdXR0b24gfQ0KCQkJCSdMYWJlbCcgICAgICAgIHsgTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbCB9DQoJCQkJJ0RhdGFHcmlkVmlldycgeyBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkRhdGFHcmlkVmlldyB9DQoJCQkJJ1RleHRCb3gnICAgICAgeyBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlRleHRCb3ggfQ0KCQkJCSdDb21ib0JveCcgICAgIHsgTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Db21ib0JveCB9DQoJCQkJJ0NoZWNrQm94JyAgICAgeyBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkNoZWNrQm94IH0NCgkJCQlkZWZhdWx0ICAgICAgICB7IHRocm93ICJJbnZhbGlkIGVsZW1lbnQgdHlwZSBzcGVjaWZpZWQ6ICR0eXBlIiB9DQoJCQl9DQoJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFVJIEVsZW1lbnQgQmFzZWQgb24gVHlwZQ0KDQoJCSNyZWdpb24gU3RlcDogQ29uZmlndXJlIERhdGFHcmlkVmlldyBTcGVjaWZpYyBQcm9wZXJ0aWVzDQoJCQkjIEFwcGx5IHNldHRpbmdzIHNwZWNpZmljIHRvIERhdGFHcmlkVmlldyBjb250cm9scyBmb3IgYXBwZWFyYW5jZSBhbmQgYmVoYXZpb3IuDQoJCQlpZiAoJHR5cGUgLWVxICdEYXRhR3JpZFZpZXcnKQ0KCQkJew0KCQkJCSRlbC5BbGxvd1VzZXJUb0FkZFJvd3MgPSAkZmFsc2UgICAgICAgICAgIyBEb24ndCBhbGxvdyB1c2VycyB0byBhZGQgbmV3IHJvd3MgZGlyZWN0bHkNCgkJCQkkZWwuUmVhZE9ubHkgPSAkZmFsc2UgICAgICAgICAgICAgICAgICAgICMgTWFrZSB0aGUgZ3JpZCByZWFkLW9ubHkNCgkJCQkkZWwuQWxsb3dVc2VyVG9PcmRlckNvbHVtbnMgPSAkdHJ1ZSAgICAgICMgTWFrZSB0aGUgZ3JpZCBjb2x1bW5zIGRyYWdhYmxlDQoJCQkJJGVsLkFsbG93VXNlclRvUmVzaXplQ29sdW1ucyAgPSAkZmFsc2UgCSAjIE1ha2UgdGhlIGdyaWQgY29sdW1ucyBzaXplIGZpeGVkDQoJCQkJJGVsLkFsbG93VXNlclRvUmVzaXplUm93cyA9ICRmYWxzZSAJCSAjIE1ha2UgdGhlIGdyaWQgcm93cyBzaXplIGZpeGVkDQoJCQkJJGVsLlJvd0hlYWRlcnNWaXNpYmxlID0gJGZhbHNlICAgICAgICAgICAjIEhpZGUgdGhlIHJvdyBoZWFkZXIgY29sdW1uDQoJCQkJJGVsLk11bHRpU2VsZWN0ID0gJHRydWUgICAgICAgICAgICAgICAgICAjIEFsbG93IHNlbGVjdGluZyBtdWx0aXBsZSByb3dzDQoJCQkJJGVsLlNlbGVjdGlvbk1vZGUgPSAnRnVsbFJvd1NlbGVjdCcgICAgICAjIFNlbGVjdCBlbnRpcmUgcm93cyBpbnN0ZWFkIG9mIGluZGl2aWR1YWwgY2VsbHMNCgkJCQkkZWwuQXV0b1NpemVDb2x1bW5zTW9kZSA9ICdGaWxsJyAgICAgICAgICMgTWFrZSBjb2x1bW5zIGZpbGwgdGhlIGF2YWlsYWJsZSB3aWR0aA0KCQkJCSRlbC5Cb3JkZXJTdHlsZSA9ICdGaXhlZFNpbmdsZScgICAgICAgICAgIyBBZGRzIHRoZSBvdXRlciBib3JkZXINCgkJCQkkZWwuRW5hYmxlSGVhZGVyc1Zpc3VhbFN0eWxlcyA9ICRmYWxzZSAgICMgQWxsb3cgY3VzdG9tIGhlYWRlciBzdHlsaW5nDQoJCQkJJGVsLkNlbGxCb3JkZXJTdHlsZSA9ICdTaW5nbGVIb3Jpem9udGFsJyAjIEhvcml6b250YWwgbGluZXMgYmV0d2VlbiByb3dzDQoJCQkJJGVsLkNvbHVtbkhlYWRlcnNCb3JkZXJTdHlsZSA9ICdTaW5nbGUnICAjIE5vIGJvcmRlciBhcm91bmQgY29sdW1uIGhlYWRlcnMNCgkJCQkkZWwuRWRpdE1vZGUgPSAnRWRpdFByb2dyYW1tYXRpY2FsbHknCSAjIEFsbG93cyBlZGl0aW5nIHZhbHVlcyBvbiBzcGVjaWZpYyBvY2Nhc2lvbnMNCgkJCQkkZWwuQ29sdW1uSGVhZGVyc0hlaWdodFNpemVNb2RlID0gJ0Rpc2FibGVSZXNpemluZycNCgkJCQkkZWwuUm93SGVhZGVyc1dpZHRoU2l6ZU1vZGUgPSAnRGlzYWJsZVJlc2l6aW5nJw0KCQkJCSRlbC5EZWZhdWx0Q2VsbFN0eWxlLkFsaWdubWVudCA9ICdNaWRkbGVDZW50ZXInDQoJCQkJJGVsLkNvbHVtbkhlYWRlcnNEZWZhdWx0Q2VsbFN0eWxlLkFsaWdubWVudCA9ICdNaWRkbGVDZW50ZXInDQoNCgkJCQkjIFNldCBjb2xvcnMgZm9yIGJldHRlciB2aXNpYmlsaXR5IGluIGRhcmsgdGhlbWUNCgkJCQkkZWwuRGVmYXVsdENlbGxTdHlsZS5CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig0MCwgNDAsIDQwKSAgICAjIERhcmsgY2VsbCBiYWNrZ3JvdW5kDQoJCQkJJGVsLkFsdGVybmF0aW5nUm93c0RlZmF1bHRDZWxsU3R5bGUuQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoMzcsIDM3LCAzNykgICAgIyBEYXJrIGNlbGwgYmFja2dyb3VuZA0KCQkJCSRlbC5EZWZhdWx0Q2VsbFN0eWxlLkZvcmVDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDIzMCwgMjMwLCAyMzApICMgTGlnaHQgdGV4dA0KCQkJCSRlbC5Db2x1bW5IZWFkZXJzRGVmYXVsdENlbGxTdHlsZS5CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig1MCwgNTAsIDUwKSAjIFNsaWdodGx5IGRhcmtlciBoZWFkZXIgYmFja2dyb3VuZA0KCQkJCSRlbC5Db2x1bW5IZWFkZXJzRGVmYXVsdENlbGxTdHlsZS5Gb3JlQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYigyNDAsIDI0MCwgMjQwKSAjIFdoaXRlIGhlYWRlciB0ZXh0DQoJCQkJJGVsLkdyaWRDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDcwLCA3MCwgNzApICAgICAgICAgICAgICAgICAgICAgIyBDb2xvciBmb3IgZ3JpZCBsaW5lcw0KCQkJCSRlbC5CYWNrZ3JvdW5kQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig0MCwgNDAsIDQwKSAgICAgICAgICAgICAgICMgQmFja2dyb3VuZCBpZiBncmlkIGlzIGVtcHR5DQoJCQkJJGVsLkRlZmF1bHRDZWxsU3R5bGUuU2VsZWN0aW9uQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNjAsIDgwLCAxODApICMgU2VsZWN0aW9uIGJhY2tncm91bmQgY29sb3IgKGJsdWVpc2gpDQoJCQkJJGVsLkRlZmF1bHRDZWxsU3R5bGUuU2VsZWN0aW9uRm9yZUNvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoMjQwLCAyNDAsIDI0MCkgIyBXaGl0ZSBzZWxlY3RlZCB0ZXh0DQoNCgkJCQkjIEFkZCBkZWZhdWx0IGNvbHVtbnMgZXhwZWN0ZWQgYnkgdGhlIGFwcGxpY2F0aW9uDQoJCQkJJGVsLkNvbHVtbnMuQWRkUmFuZ2UoDQoJCQkJCShOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkRhdGFHcmlkVmlld1RleHRCb3hDb2x1bW4gLVByb3BlcnR5IEB7IE5hbWUgPSAnSW5kZXgnOyBIZWFkZXJUZXh0ID0gJyMnOyBGaWxsV2VpZ2h0ID0gODsgU29ydE1vZGUgPSAnTm90U29ydGFibGUnO30pLA0KCQkJCQkoTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EYXRhR3JpZFZpZXdUZXh0Qm94Q29sdW1uIC1Qcm9wZXJ0eSBAeyBOYW1lID0gJ1RpdGVsJzsgSGVhZGVyVGV4dCA9ICdUaXRlbCc7IFNvcnRNb2RlID0gJ05vdFNvcnRhYmxlJzt9KSwNCgkJCQkJKE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRGF0YUdyaWRWaWV3VGV4dEJveENvbHVtbiAtUHJvcGVydHkgQHsgTmFtZSA9ICdJRCc7IEhlYWRlclRleHQgPSAnSUQnOyBGaWxsV2VpZ2h0ID0gMjA7IFNvcnRNb2RlID0gJ05vdFNvcnRhYmxlJzt9KSwNCgkJCQkJKE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRGF0YUdyaWRWaWV3VGV4dEJveENvbHVtbiAtUHJvcGVydHkgQHsgTmFtZSA9ICdTdGF0ZSc7IEhlYWRlclRleHQgPSAnU3RhdGUnOyBGaWxsV2VpZ2h0ID0gNDA7IFNvcnRNb2RlID0gJ05vdFNvcnRhYmxlJzt9KQ0KCQkJCSkNCgkJCX0NCgkJI2VuZHJlZ2lvbiBTdGVwOiBDb25maWd1cmUgRGF0YUdyaWRWaWV3IFNwZWNpZmljIFByb3BlcnRpZXMNCg0KCQkjcmVnaW9uIFN0ZXA6IEFwcGx5IENvbW1vbiBDb250cm9sIFByb3BlcnRpZXMNCgkJCSMgQXBwbHkgcHJvcGVydGllcyBjb21tb24gdG8gbW9zdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Db250cm9sIHR5cGVzLg0KCQkJaWYgKCRlbCAtaXMgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkNvbnRyb2xdKQ0KCQkJew0KCQkJCWlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ3Zpc2libGUnKSkgeyAkZWwuVmlzaWJsZSA9ICR2aXNpYmxlIH0NCgkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCd3aWR0aCcpKSAgIHsgJGVsLldpZHRoID0gJHdpZHRoIH0NCgkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdoZWlnaHQnKSkgIHsgJGVsLkhlaWdodCA9ICRoZWlnaHQgfQ0KCQkJCWlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ3RvcCcpKSAgICAgeyAkZWwuVG9wID0gJHRvcCB9DQoJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnbGVmdCcpKSAgICB7ICRlbC5MZWZ0ID0gJGxlZnQgfQ0KDQoJCQkJIyBTZXQgYmFja2dyb3VuZCBjb2xvciBmcm9tIFJHQiBvciBBUkdCIGFycmF5DQoJCQkJaWYgKCRiZyAtaXMgW2FycmF5XSAtYW5kICRiZy5Db3VudCAtZ2UgMykNCgkJCQl7DQoJCQkJCSRlbC5CYWNrQ29sb3IgPSBpZiAoJGJnLkNvdW50IC1lcSA0KSB7IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKCRiZ1swXSwgJGJnWzFdLCAkYmdbMl0sICRiZ1szXSkgfQ0KCQkJCQkJCQkJZWxzZSAgICAgICAgICAgICAgICAgeyBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYigkYmdbMF0sICRiZ1sxXSwgJGJnWzJdKSB9DQoJCQkJfQ0KDQoJCQkJIyBTZXQgZm9yZWdyb3VuZCBjb2xvciBmcm9tIFJHQiBhcnJheQ0KCQkJCWlmICgkZmcgLWlzIFthcnJheV0gLWFuZCAkZmcuQ291bnQgLWdlIDMpDQoJCQkJew0KCQkJCQkkZWwuRm9yZUNvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoJGZnWzBdLCAkZmdbMV0sICRmZ1syXSkNCgkJCQl9DQoNCgkJCQkjIFNldCBmb250IGlmIHByb3ZpZGVkDQoJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnZm9udCcpKSB7ICRlbC5Gb250ID0gJGZvbnQgfQ0KCQkJfQ0KCQkjZW5kcmVnaW9uIFN0ZXA6IEFwcGx5IENvbW1vbiBDb250cm9sIFByb3BlcnRpZXMNCg0KCQkjcmVnaW9uIFN0ZXA6IEFwcGx5IFR5cGUtU3BlY2lmaWMgUHJvcGVydGllcw0KCQkJIyBBcHBseSBwcm9wZXJ0aWVzIHNwZWNpZmljIHRvIHRoZSBjcmVhdGVkIGVsZW1lbnQgdHlwZS4NCgkJCXN3aXRjaCAoJHR5cGUpDQoJCQl7DQoJCQkJJ0Zvcm0nIHsNCgkJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgndGV4dCcpKSB7ICRlbC5UZXh0ID0gJHRleHQgfQ0KCQkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdzdGFydFBvc2l0aW9uJykpIHsNCgkJCQkJCXRyeSB7ICRlbC5TdGFydFBvc2l0aW9uID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm1TdGFydFBvc2l0aW9uXTo6JHN0YXJ0UG9zaXRpb24gfQ0KCQkJCQkJY2F0Y2ggeyBXcml0ZS1WZXJib3NlICIgIFVJOiBJbnZhbGlkIFN0YXJ0UG9zaXRpb24gdmFsdWU6ICRzdGFydFBvc2l0aW9uLiBVc2luZyBkZWZhdWx0LiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cgfQ0KCQkJCQl9DQoJCQkJCWlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ2Zvcm1Cb3JkZXJTdHlsZScpKSB7DQoJCQkJCQkgdHJ5IHsgJGVsLkZvcm1Cb3JkZXJTdHlsZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtQm9yZGVyU3R5bGVdJGZvcm1Cb3JkZXJTdHlsZSB9DQoJCQkJCQkgY2F0Y2ggeyBXcml0ZS1WZXJib3NlICIgIFVJOiBJbnZhbGlkIEZvcm1Cb3JkZXJTdHlsZSB2YWx1ZTogJGZvcm1Cb3JkZXJTdHlsZS4gVXNpbmcgZGVmYXVsdC4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93IH0NCgkJCQkJfQ0KCQkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdvcGFjaXR5JykpIHsgJGVsLk9wYWNpdHkgPSBbZG91YmxlXSRvcGFjaXR5IH0NCgkJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgndG9wTW9zdCcpKSB7ICRlbC5Ub3BNb3N0ID0gJHRvcE1vc3QgfQ0KCQkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdpY29uJykpIHsgJGVsLkljb24gPSBbU3lzdGVtLkRyYXdpbmcuSWNvbl06OkV4dHJhY3RBc3NvY2lhdGVkSWNvbigkUFNDb21tYW5kUGF0aCkgfQ0KCQkJCX0NCgkJCQknQnV0dG9uJyB7DQoJCQkJCWlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ3RleHQnKSkgeyAkZWwuVGV4dCA9ICR0ZXh0IH0NCgkJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnZnMnKSkgew0KCQkJCQkJJGVsLkZsYXRTdHlsZSA9ICRmcw0KCQkJCQkJIyBBcHBseSBjdXN0b20gYXBwZWFyYW5jZSBmb3IgZmxhdCBidXR0b25zIHRvIG1hdGNoIGRhcmsgdGhlbWUNCgkJCQkJCSRlbC5GbGF0QXBwZWFyYW5jZS5Cb3JkZXJDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDYwLCA2MCwgNjApICMgU3VidGxlIGJvcmRlcg0KCQkJCQkJJGVsLkZsYXRBcHBlYXJhbmNlLkJvcmRlclNpemUgPSAxDQoJCQkJCQkkZWwuRmxhdEFwcGVhcmFuY2UuTW91c2VPdmVyQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNzAsIDcwLCA3MCkgIyBTbGlnaHRseSBsaWdodGVyIG9uIGhvdmVyDQoJCQkJCQkkZWwuRmxhdEFwcGVhcmFuY2UuTW91c2VEb3duQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoOTAsIDkwLCA5MCkgIyBFdmVuIGxpZ2h0ZXIgd2hlbiBjbGlja2VkDQoNCgkJCQkJCSMgQ3VzdG9tIFBhaW50IGhhbmRsZXIgZm9yIG1vcmUgY29tcGxleCBkcmF3aW5nLg0KCQkJCQkJJGVsLkFkZF9QYWludCh7DQoJCQkJCQkJcGFyYW0oJHNyYywgJGUpDQoJCQkJCQkNCgkJCQkJCQkjIE9ubHkgY3VzdG9tIHBhaW50IGlmIHdlJ3JlIHVzaW5nIGZsYXQgc3R5bGUNCgkJCQkJCQlpZiAoJHNyYy5GbGF0U3R5bGUgLWVxIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5GbGF0U3R5bGVdOjpGbGF0KQ0KCQkJCQkJCXsNCgkJCQkJCQkJIyBEcmF3IHRoZSBidXR0b24gYmFja2dyb3VuZA0KCQkJCQkJCQkkYmdCcnVzaCA9IFtTeXN0ZW0uRHJhd2luZy5Tb2xpZEJydXNoXTo6bmV3KFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDQwLCA0MCwgNDApKQ0KCQkJCQkJCQkkZS5HcmFwaGljcy5GaWxsUmVjdGFuZ2xlKCRiZ0JydXNoLCAwLCAwLCAkc3JjLldpZHRoLCAkc3JjLkhlaWdodCkNCgkJCQkJCQkNCgkJCQkJCQkJIyBEcmF3IHRleHQNCgkJCQkJCQkJJHRleHRCcnVzaCA9IFtTeXN0ZW0uRHJhd2luZy5Tb2xpZEJydXNoXTo6bmV3KFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDI0MCwgMjQwLCAyNDApKQ0KCQkJCQkJCQkkdGV4dEZvcm1hdCA9IFtTeXN0ZW0uRHJhd2luZy5TdHJpbmdGb3JtYXRdOjpuZXcoKQ0KCQkJCQkJCQkkdGV4dEZvcm1hdC5BbGlnbm1lbnQgPSBbU3lzdGVtLkRyYXdpbmcuU3RyaW5nQWxpZ25tZW50XTo6Q2VudGVyDQoJCQkJCQkJCSR0ZXh0Rm9ybWF0LkxpbmVBbGlnbm1lbnQgPSBbU3lzdGVtLkRyYXdpbmcuU3RyaW5nQWxpZ25tZW50XTo6Q2VudGVyDQoJCQkJCQkJCSRlLkdyYXBoaWNzLkRyYXdTdHJpbmcoJHNyYy5UZXh0LCAkc3JjLkZvbnQsICR0ZXh0QnJ1c2gsIA0KCQkJCQkJCQkJW1N5c3RlbS5EcmF3aW5nLlJlY3RhbmdsZUZdOjpuZXcoMCwgMCwgJHNyYy5XaWR0aCwgJHNyYy5IZWlnaHQpLCAkdGV4dEZvcm1hdCkNCgkJCQkJCQkNCgkJCQkJCQkJIyBEcmF3IGJvcmRlcg0KCQkJCQkJCQkkYm9yZGVyUGVuID0gW1N5c3RlbS5EcmF3aW5nLlBlbl06Om5ldyhbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig2MCwgNjAsIDYwKSkNCgkJCQkJCQkJJGUuR3JhcGhpY3MuRHJhd1JlY3RhbmdsZSgkYm9yZGVyUGVuLCAwLCAwLCAkc3JjLldpZHRoLCAkc3JjLkhlaWdodCkNCgkJCQkJCQkNCgkJCQkJCQkJIyBEaXNwb3NlIHJlc291cmNlcw0KCQkJCQkJCQkkYmdCcnVzaC5EaXNwb3NlKCkNCgkJCQkJCQkJJHRleHRCcnVzaC5EaXNwb3NlKCkNCgkJCQkJCQkJJGJvcmRlclBlbi5EaXNwb3NlKCkNCgkJCQkJCQkJJHRleHRGb3JtYXQuRGlzcG9zZSgpDQoJCQkJCQkJfQ0KCQkJCQkJfSkNCgkJCQkJfQ0KCQkJCX0NCgkJCQknTGFiZWwnIHsNCgkJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgndGV4dCcpKSB7ICRlbC5UZXh0ID0gJHRleHQgfQ0KCQkJCQkjIEVuc3VyZSBsYWJlbHMgd2l0aCB0cmFuc3BhcmVudCBiYWNrZ3JvdW5kcyBhcmUgaGFuZGxlZCBjb3JyZWN0bHkNCgkJCQkJaWYgKCRlbC5CYWNrQ29sb3IgLWVxIFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OlRyYW5zcGFyZW50KSB7DQoJCQkJCSAgICMgTWF5IG5lZWQgYWRkaXRpb25hbCBoYW5kbGluZyBkZXBlbmRpbmcgb24gY29udGFpbmVyIGlmIHRyYW5zcGFyZW5jeSBpc3N1ZXMgYXJpc2UNCgkJCQkJfQ0KCQkJCX0NCgkJCQknVGV4dEJveCcgew0KCQkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCd0ZXh0JykpIHsgJGVsLlRleHQgPSAkdGV4dCB9DQoJCQkJCWlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ211bHRpbGluZScpKSB7ICRlbC5NdWx0aWxpbmUgPSAkbXVsdGlsaW5lIH0NCgkJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgncmVhZE9ubHknKSkgeyAkZWwuUmVhZE9ubHkgPSAkcmVhZE9ubHkgfQ0KCQkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdzY3JvbGxCYXJzJykpIHsNCgkJCQkJCSRlbC5TY3JvbGxCYXJzID0gaWYgKCRzY3JvbGxCYXJzIC1hbmQgJG11bHRpbGluZSkgeyBbU3lzdGVtLldpbmRvd3MuRm9ybXMuU2Nyb2xsQmFyc106OlZlcnRpY2FsIH0NCgkJCQkJCQkJCQkgZWxzZSB7IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5TY3JvbGxCYXJzXTo6Tm9uZSB9DQoJCQkJCX0NCg0KCQkJCQkjIEFwcGx5IGRhcmsgdGhlbWUgc3R5bGluZyB0byBUZXh0Qm94DQoJCQkJCSRlbC5Cb3JkZXJTdHlsZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Cb3JkZXJTdHlsZV06OkZpeGVkU2luZ2xlDQoJCQkJCSRlbC5UZXh0QWxpZ24gPSAiQ2VudGVyIg0KCQkJCQkkZWwuQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNTAsIDUwLCA1MCkgIyBTbGlnaHRseSBsaWdodGVyIHRoYW4gYmFja2dyb3VuZA0KCQkJCQkkZWwuRm9yZUNvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoMjMwLCAyMzAsIDIzMCkNCg0KCQkJCX0NCgkJCQknQ29tYm9Cb3gnDQoJCQkJew0KCQkJCQlpZiAoJG51bGwgLW5lICRkcm9wRG93blN0eWxlKQ0KCQkJCQl7DQoJCQkJCQl0cnkNCgkJCQkJCXsNCgkJCQkJCQkkZWwuRHJvcERvd25TdHlsZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Db21ib0JveFN0eWxlXTo6JGRyb3BEb3duU3R5bGUgDQoJCQkJCQl9DQoJCQkJCQljYXRjaA0KCQkJCQkJew0KCQkJCQkJCVdyaXRlLVZlcmJvc2UgIlVJOiBJbnZhbGlkIERyb3BEb3duU3R5bGUgdmFsdWU6ICRkcm9wRG93blN0eWxlLiBVc2luZyBkZWZhdWx0LiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJCQkJCX0NCgkJCQkJfQ0KCQkJCQlpZiAoJG51bGwgLW5lICRmcykNCgkJCQkJew0KCQkJCQkJJGVsLkZsYXRTdHlsZSA9ICRmcw0KCQkJCQkJJGVsLkRyYXdNb2RlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkRyYXdNb2RlXTo6T3duZXJEcmF3Rml4ZWQNCgkJCQkJCQ0KCQkJCQkJIyBTZXQgcHJvcGVydGllcyB0byBzaG93IGFsbCBpdGVtcyB3aXRob3V0IHNjcm9sbGJhcg0KCQkJCQkJJGVsLkludGVncmFsSGVpZ2h0ID0gJGZhbHNlDQoJCQkJCQkNCgkJCQkJCSMgU3RvcmUgdGhlIG9yaWdpbmFsIGV2ZW50IGhhbmRsZXJzIGJlZm9yZSBjcmVhdGluZyB0aGUgY3VzdG9tIGNvbnRyb2wNCgkJCQkJCSRvcmlnaW5hbERyYXdJdGVtU2NyaXB0ID0gew0KCQkJCQkJCXBhcmFtKCRzcmMsICRlKQ0KCQkJCQkJCQ0KCQkJCQkJCSRlLkRyYXdCYWNrZ3JvdW5kKCkNCgkJCQkJCQkNCgkJCQkJCQlpZiAoJGUuSW5kZXggLWdlIDApDQoJCQkJCQkJew0KCQkJCQkJCQkkYnJ1c2hCYWNrZ3JvdW5kID0gaWYgKCRlLlN0YXRlIC1iYW5kIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EcmF3SXRlbVN0YXRlXTo6U2VsZWN0ZWQpDQoJCQkJCQkJCXsNCgkJCQkJCQkJCVtTeXN0ZW0uRHJhd2luZy5Tb2xpZEJydXNoXTo6bmV3KFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDQwLCA0MCwgNDApKQ0KCQkJCQkJCQl9DQoJCQkJCQkJCWVsc2UNCgkJCQkJCQkJew0KCQkJCQkJCQkJW1N5c3RlbS5EcmF3aW5nLlNvbGlkQnJ1c2hdOjpuZXcoW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNDAsIDQwLCA0MCkpDQoJCQkJCQkJCX0NCgkJCQkJCQkJDQoJCQkJCQkJCSRlLkdyYXBoaWNzLkZpbGxSZWN0YW5nbGUoJGJydXNoQmFja2dyb3VuZCwgJGUuYm91bmRzLkxlZnQsICRlLmJvdW5kcy5Ub3AsICRlLmJvdW5kcy5XaWR0aCwgJGUuYm91bmRzLkhlaWdodCkNCgkJCQkJCQkJJGUuR3JhcGhpY3MuRHJhd1N0cmluZygkc3JjLkl0ZW1zWyRlLkluZGV4XS5Ub1N0cmluZygpLCAkc3JjLkZvbnQsIFtTeXN0ZW0uRHJhd2luZy5CcnVzaGVzXTo6RnJvbUFyZ2IoMjQwLCAyNDAsIDI0MCksICRlLkJvdW5kcy5MZWZ0LCAkZS5Cb3VuZHMuVG9wLCAkZS5ib3VuZHMuV2lkdGgsICRlLmJvdW5kcy5IZWlnaHQpDQoJCQkJCQkJfQ0KCQkJCQkJCQ0KCQkJCQkJCSRlLkRyYXdGb2N1c1JlY3RhbmdsZSgpDQoJCQkJCQl9DQoJCQkJCQkNCgkJCQkJCSRvcmlnaW5hbERyb3BEb3duU2NyaXB0ID0gew0KCQkJCQkJCXBhcmFtKCRzcmMsICRlKQ0KCQkJCQkJCQ0KCQkJCQkJCSMgQ2FsY3VsYXRlIGhlaWdodCBuZWVkZWQgZm9yIGFsbCBpdGVtcw0KCQkJCQkJCSRpdGVtSGVpZ2h0ID0gJHNyYy5JdGVtSGVpZ2h0DQoJCQkJCQkJJHRvdGFsSXRlbXMgPSAkc3JjLkl0ZW1zLkNvdW50DQoJCQkJCQkJJHJlcXVpcmVkSGVpZ2h0ID0gJGl0ZW1IZWlnaHQgKiAkdG90YWxJdGVtcw0KCQkJCQkJCQ0KCQkJCQkJCSMgU2V0IGRyb3Bkb3duIGhlaWdodCB0byBzaG93IGFsbCBpdGVtcyAobWF4IDMwMHB4IHRvIHByZXZlbnQgZXh0cmVtZWx5IGxhcmdlIGRyb3Bkb3ducykNCgkJCQkJCQkkc3JjLkRyb3BEb3duSGVpZ2h0ID0gW01hdGhdOjpNaW4oJHJlcXVpcmVkSGVpZ2h0ICsgMiwgMzAwKQ0KCQkJCQkJfQ0KCQkJCQkJDQoJCQkJCQkjIEFkZCB0aGUgZXZlbnQgaGFuZGxlcnMgdG8gdGhlIG9yaWdpbmFsIGNvbnRyb2wNCgkJCQkJCSRlbC5BZGRfRHJhd0l0ZW0oJG9yaWdpbmFsRHJhd0l0ZW1TY3JpcHQpDQoJCQkJCQkkZWwuQWRkX0Ryb3BEb3duKCRvcmlnaW5hbERyb3BEb3duU2NyaXB0KQ0KCQkJCQkJCQkJCQkJCQ0KCQkJCQkJIyBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2Ygb3VyIGN1c3RvbSBDb21ib0JveA0KCQkJCQkJJGN1c3RvbUNvbWJvQm94ID0gTmV3LU9iamVjdCBEYXJrQ29tYm9Cb3gNCgkJCQkJCQ0KCQkJCQkJIyBDb3B5IHByb3BlcnRpZXMgZnJvbSB0aGUgb3JpZ2luYWwgQ29tYm9Cb3gNCgkJCQkJCSRjdXN0b21Db21ib0JveC5Mb2NhdGlvbiA9ICRlbC5Mb2NhdGlvbg0KCQkJCQkJJGN1c3RvbUNvbWJvQm94LlNpemUgPSAkZWwuU2l6ZQ0KCQkJCQkJJGN1c3RvbUNvbWJvQm94LldpZHRoID0gJGVsLldpZHRoIC0gMjANCgkJCQkJCSRjdXN0b21Db21ib0JveC5Ecm9wRG93blN0eWxlID0gJGVsLkRyb3BEb3duU3R5bGUNCgkJCQkJCSRjdXN0b21Db21ib0JveC5GbGF0U3R5bGUgPSAkZWwuRmxhdFN0eWxlDQoJCQkJCQkkY3VzdG9tQ29tYm9Cb3guRHJhd01vZGUgPSAkZWwuRHJhd01vZGUNCgkJCQkJCSRjdXN0b21Db21ib0JveC5CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig0MCwgNDAsIDQwKQ0KCQkJCQkJJGN1c3RvbUNvbWJvQm94LkZvcmVDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDI0MCwgMjQwLCAyNDApDQoJCQkJCQkkY3VzdG9tQ29tYm9Cb3guRm9udCA9ICRlbC5Gb250DQoJCQkJCQkkY3VzdG9tQ29tYm9Cb3guSW50ZWdyYWxIZWlnaHQgPSAkZmFsc2UNCgkJCQkJCSRjdXN0b21Db21ib0JveC5UYWJJbmRleCA9ICRlbC5UYWJJbmRleA0KCQkJCQkJJGN1c3RvbUNvbWJvQm94Lk5hbWUgPSAkZWwuTmFtZQ0KCQkJCQkJDQoJCQkJCQkjIENvcHkgYW55IGl0ZW1zIGZyb20gdGhlIG9yaWdpbmFsIENvbWJvQm94DQoJCQkJCQlmb3JlYWNoICgkaXRlbSBpbiAkZWwuSXRlbXMpDQoJCQkJCQl7DQoJCQkJCQkJJGN1c3RvbUNvbWJvQm94Lkl0ZW1zLkFkZCgkaXRlbSkNCgkJCQkJCX0NCgkJCQkJCQ0KCQkJCQkJIyBBZGQgdGhlIHNhbWUgZXZlbnQgaGFuZGxlcnMgdG8gdGhlIG5ldyBjb250cm9sDQoJCQkJCQkkY3VzdG9tQ29tYm9Cb3guQWRkX0Ryb3BEb3duKCRvcmlnaW5hbERyb3BEb3duU2NyaXB0KQ0KCQkJCQkJDQoJCQkJCQkjIFJldHVybiB0aGUgY3VzdG9tIENvbWJvQm94DQoJCQkJCQkkZWwgPSAkY3VzdG9tQ29tYm9Cb3gNCgkJCQkJfQ0KCQkJCX0NCgkJCQkJJ0NoZWNrQm94JyB7DQoJCQkJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgndGV4dCcpKSB7ICRlbC5UZXh0ID0gJHRleHQgfQ0KCQkJCQkjIFNldCBtb2Rlcm4gZmxhdCBzdHlsZSBmb3IgZGFyayB0aGVtZQ0KCQkJCQkkZWwuRmxhdFN0eWxlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZsYXRTdHlsZV06OkZsYXQNCgkJCQkJJGVsLkZsYXRBcHBlYXJhbmNlLkJvcmRlckNvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNjAsIDYwLCA2MCkNCgkJCQkJJGVsLkZsYXRBcHBlYXJhbmNlLkJvcmRlclNpemUgPSAxDQoJCQkJCSRlbC5GbGF0QXBwZWFyYW5jZS5DaGVja2VkQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoMCwgMTIwLCAyMTUpICMgV2luZG93cyBibHVlDQoJCQkJCSRlbC5GbGF0QXBwZWFyYW5jZS5Nb3VzZU92ZXJCYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig1MCwgNTAsIDUwKQ0KCQkJCQkkZWwuVXNlVmlzdWFsU3R5bGVCYWNrQ29sb3IgPSAkZmFsc2UNCgkJCQkJJGVsLkNoZWNrQWxpZ24gPSBbU3lzdGVtLkRyYXdpbmcuQ29udGVudEFsaWdubWVudF06Ok1pZGRsZUxlZnQNCgkJCQkJJGVsLlRleHRBbGlnbiA9IFtTeXN0ZW0uRHJhd2luZy5Db250ZW50QWxpZ25tZW50XTo6TWlkZGxlTGVmdA0KCQkJCQkkZWwuUGFkZGluZyA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5QYWRkaW5nXTo6bmV3KDIwLCAwLCAwLCAwKSAjIFNwYWNlIGJldHdlZW4gY2hlY2tib3ggYW5kIHRleHQNCgkJCQl9DQoJCQl9DQoJCSNlbmRyZWdpb24gU3RlcDogQXBwbHkgVHlwZS1TcGVjaWZpYyBQcm9wZXJ0aWVzDQoNCgkJI3JlZ2lvbiBTdGVwOiBSZXR1cm4gQ3JlYXRlZCBVSSBFbGVtZW50DQoJCQlyZXR1cm4gJGVsDQoJCSNlbmRyZWdpb24gU3RlcDogUmV0dXJuIENyZWF0ZWQgVUkgRWxlbWVudA0KCX0NCiNlbmRyZWdpb24gRnVuY3Rpb246IFNldC1VSUVsZW1lbnQNCg0KI2VuZHJlZ2lvbiBDb3JlIFVJIEZ1bmN0aW9ucw0KDQojcmVnaW9uIE1vZHVsZSBFeHBvcnRzDQojcmVnaW9uIFN0ZXA6IEV4cG9ydCBQdWJsaWMgRnVuY3Rpb25zDQoJIyBFeHBvcnQgdGhlIGZ1bmN0aW9ucyBpbnRlbmRlZCBmb3IgdXNlIGJ5IG90aGVyIG1vZHVsZXMgb3IgdGhlIG1haW4gc2NyaXB0Lg0KCUV4cG9ydC1Nb2R1bGVNZW1iZXIgLUZ1bmN0aW9uIEluaXRpYWxpemUtVUksIFNldC1VSUVsZW1lbnQsIFNob3ctU2V0dGluZ3NGb3JtLCBIaWRlLVNldHRpbmdzRm9ybSwgU3luYy1Db25maWdUb1VJLCBTeW5jLVVJVG9Db25maWcsIFJlZ2lzdGVyLVVJRXZlbnRIYW5kbGVycw0KI2VuZHJlZ2lvbiBTdGVwOiBFeHBvcnQgUHVibGljIEZ1bmN0aW9ucw0KI2VuZHJlZ2lvbiBNb2R1bGUgRXhwb3J0cw==
				'
			}
			
			# Important modules: Add major features. Failure might limit things, but the app can still start.
			'datagrid.psm1' = @{ 
				Priority = 'Important'; 
				Order = 6; 
				Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1');
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'datagrid.psm1');
				Base64Content = '
					
				'
			}
			
			# Optional modules: Add extra, non-essential features. Failure is logged, but the app still starts.
			'launch.psm1'   = @{ 
				Priority = 'Optional';  
				Order = 7; 
				Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'launch.psm1');
				Base64Content = '
					
				'
			}
			'login.psm1'    = @{ 
				Priority = 'Optional';  
				Order = 8; 
				Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'login.psm1');
				Base64Content = '
					PCMgbG9naW4ucHNtMSANCgkuU1lOT1BTSVMNCgkJTG9naW4gQXV0b21hdGlvbiBNb2R1bGUgZm9yIEVudHJvcGlhIERhc2hib2FyZC4NCg0KCS5ERVNDUklQVElPTg0KCQlUaGlzIG1vZHVsZSBwcm92aWRlcyBhIGNvbXByZWhlbnNpdmUgbG9naW4gYXV0b21hdGlvbiBzeXN0ZW0gZm9yIHRoZSBFbnRyb3BpYSBEYXNoYm9hcmQ6DQoJCS0gUHJvY2Vzc2VzIG11bHRpcGxlIGdhbWUgY2xpZW50cyBzZXF1ZW50aWFsbHkgYmFzZWQgb24gc2VsZWN0aW9uDQoJCS0gTW9uaXRvcnMgY2xpZW50IHByb2Nlc3NlcyBhbmQgd2luZG93IHN0YXRlcw0KCQktIFByb3ZpZGVzIHRocmVhZC1zYWZlIGxvZ2dpbmcgb2YgbG9naW4gb3BlcmF0aW9ucw0KCQktIEhhbmRsZXMgY2xlYW51cCBvZiByZXNvdXJjZXMgd2hlbiBvcGVyYXRpb25zIGNvbXBsZXRlDQoNCgkuTk9URVMNCgkJQXV0aG9yOiBJbW1vcnRhbCAvIERpdmluZQ0KCQlWZXJzaW9uOiAxLjANCgkJUmVxdWlyZXM6IFBvd2VyU2hlbGwgNS4xLCAuTkVUIEZyYW1ld29yayA0LjUrLCBjbGFzc2VzLnBzbTEsIGRhdGFncmlkLnBzbTENCiM+DQoNCiNyZWdpb24gSGVscGVyIEZ1bmN0aW9ucw0KDQo8Iw0KLlNZTk9QU0lTDQpSZXN0b3JlcyBhIG1pbmltaXplZCB3aW5kb3cNCiM+DQpmdW5jdGlvbiBSZXN0b3JlLVdpbmRvdw0Kew0KCXBhcmFtKA0KCQlbU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3NdJFByb2Nlc3MNCgkpDQoJDQoJaWYgKCRQcm9jZXNzIC1hbmQgJFByb2Nlc3MuTWFpbldpbmRvd0hhbmRsZSAtbmUgW0ludFB0cl06Olplcm8pDQoJew0KCQlpZiAoW05hdGl2ZV06OklzV2luZG93TWluaW1pemVkKCRQcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUpKQ0KCQl7DQoJCQlXcml0ZS1WZXJib3NlICJMT0dJTjogUmVzdG9yaW5nIG1pbmltaXplZCB3aW5kb3cgZm9yIFBJRCAkKCRQcm9jZXNzLklkKSIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJW05hdGl2ZV06OkJyaW5nVG9Gcm9udCgkUHJvY2Vzcy5NYWluV2luZG93SGFuZGxlKQ0KCQkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAxMDANCgkJfQ0KCX0NCn0NCg0KPCMNCi5TWU5PUFNJUw0KQnJpbmdzIHdpbmRvdyB0byBmb3JlZ3JvdW5kIHdpdGggdmFsaWRhdGlvbg0KIz4NCmZ1bmN0aW9uIFNldC1XaW5kb3dGb3JlZ3JvdW5kDQp7DQoJcGFyYW0oDQoJCVtTeXN0ZW0uRGlhZ25vc3RpY3MuUHJvY2Vzc10kUHJvY2Vzcw0KCSkNCgkNCglpZiAoLW5vdCAkUHJvY2VzcyAtb3IgJFByb2Nlc3MuTWFpbldpbmRvd0hhbmRsZSAtZXEgW0ludFB0cl06Olplcm8pDQoJew0KCQlyZXR1cm4gJGZhbHNlDQoJfQ0KCQ0KCSRzY3JpcHQ6U2NyaXB0SW5pdGlhdGVkTW92ZSA9ICR0cnVlDQoJJHJlc3VsdCA9IFtOYXRpdmVdOjpCcmluZ1RvRnJvbnQoJFByb2Nlc3MuTWFpbldpbmRvd0hhbmRsZSkNCglXcml0ZS1WZXJib3NlICJMT0dJTjogQnJvdWdodCB3aW5kb3cgdG8gZnJvbnQ6ICRyZXN1bHQiIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCglTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDEwMA0KCQ0KCSMgUmVzZXQgdGhlIHNjcmlwdC1pbml0aWF0ZWQgbW92ZSBmbGFnDQoJJHNjcmlwdDpTY3JpcHRJbml0aWF0ZWRNb3ZlID0gJGZhbHNlDQoJDQoJIyBWYWxpZGF0ZSBpZiB0aGUgd2luZG93IGlzIG5vdyB0aGUgZm9yZWdyb3VuZCB3aW5kb3cNCgkkZm9yZWdyb3VuZEhhbmRsZSA9IFtOYXRpdmVdOjpHZXRGb3JlZ3JvdW5kV2luZG93KCkNCglpZiAoJGZvcmVncm91bmRIYW5kbGUgLW5lICRQcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUpDQoJew0KCQlXcml0ZS1WZXJib3NlICJMT0dJTjogRmFpbGVkIHRvIGJyaW5nIHdpbmRvdyB0byBmb3JlZ3JvdW5kIGZvciBQSUQgJCgkUHJvY2Vzcy5JZCkiIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCXJldHVybiAkZmFsc2UNCgl9DQoJDQoJcmV0dXJuICR0cnVlDQp9DQoNCjwjDQouU1lOT1BTSVMNCkNoZWNrcyBpZiB1c2VyIG1vdmVkIHRoZSBtb3VzZSBvciBjaGFuZ2VkIGZvY3VzDQojPg0KZnVuY3Rpb24gVGVzdC1Vc2VyTW91c2VJbnRlcnZlbnRpb24NCnsNCglwYXJhbSgpDQoJDQoJIyBJZiB3ZSdyZSBjdXJyZW50bHkgcGVyZm9ybWluZyBhIHNjcmlwdC1pbml0aWF0ZWQgbW92ZSwgZG9uJ3QgZGV0ZWN0IGFzIGludGVydmVudGlvbg0KCWlmICgkc2NyaXB0OlNjcmlwdEluaXRpYXRlZE1vdmUpDQoJew0KCQlyZXR1cm4gJGZhbHNlDQoJfQ0KCQ0KCSMgR2V0IGN1cnJlbnQgbW91c2UgcG9zaXRpb24NCgkkY3VycmVudFBvc2l0aW9uID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkN1cnNvcl06OlBvc2l0aW9uDQoJJGN1cnJlbnRUaW1lID0gR2V0LURhdGUNCgkNCgkjIElmIHRoZSBtb3VzZSBwb3NpdGlvbiBoYXMgY2hhbmdlZCBzaWduaWZpY2FudGx5IHNpbmNlIG91ciBsYXN0IHNjcmlwdCBhY3Rpb24NCglpZiAoW01hdGhdOjpBYnMoJGN1cnJlbnRQb3NpdGlvbi5YIC0gJHNjcmlwdDpMYXN0U2NyaXB0TW91c2VUYXJnZXQuWCkgLWd0IDUgLW9yIA0KCQlbTWF0aF06OkFicygkY3VycmVudFBvc2l0aW9uLlkgLSAkc2NyaXB0Okxhc3RTY3JpcHRNb3VzZVRhcmdldC5ZKSAtZ3QgNSkNCgl7DQoJCQ0KCQkjIENoZWNrIGlmIGVub3VnaCB0aW1lIGhhcyBwYXNzZWQgc2luY2Ugb3VyIGxhc3Qgc2NyaXB0LWluaXRpYXRlZCBtb3ZlDQoJCSR0aW1lU2luY2VMYXN0TW92ZSA9IE5ldy1UaW1lU3BhbiAtU3RhcnQgJHNjcmlwdDpMYXN0U2NyaXB0TW91c2VNb3ZlVGltZSAtRW5kICRjdXJyZW50VGltZQ0KCQkNCgkJIyBPbmx5IGNvbnNpZGVyIGl0IHVzZXIgaW50ZXJ2ZW50aW9uIGlmIGl0J3MgYmVlbiBtb3JlIHRoYW4gNTAwbXMgc2luY2Ugb3VyIGxhc3Qgc2NyaXB0IG1vdmUNCgkJIyBUaGlzIHByZXZlbnRzIGZhbHNlIHBvc2l0aXZlcyB3aGVuIHRoZSBzY3JpcHQgaXRzZWxmIGlzIG1vdmluZyB0aGUgbW91c2UNCgkJaWYgKCR0aW1lU2luY2VMYXN0TW92ZS5Ub3RhbE1pbGxpc2Vjb25kcyAtZ3QgNTAwKQ0KCQl7DQoJCQlXcml0ZS1WZXJib3NlICdMT0dJTjogVXNlciBtb3VzZSBpbnRlcnZlbnRpb24gZGV0ZWN0ZWQnIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQlyZXR1cm4gJHRydWUNCgkJfQ0KCX0NCgkNCglyZXR1cm4gJGZhbHNlDQp9DQoNCjwjDQouU1lOT1BTSVMNCldhaXRzIGZvciBhbiBhcHBsaWNhdGlvbiB0byBiZSByZXNwb25zaXZlDQojPg0KZnVuY3Rpb24gV2FpdC1Gb3JSZXNwb25zaXZlDQp7DQoJcGFyYW0oDQoJCVtTeXN0ZW0uRGlhZ25vc3RpY3MuUHJvY2Vzc10kTW9uaXRvcg0KCSkNCgkNCgkkd2FpdEludGVydmFsID0gMTAwDQoJJG1heEF0dGVtcHRzID0gNDAgICMgOCBzZWNvbmRzIG1heA0KCSRpc1Jlc3BvbnNpdmUgPSAkZmFsc2UNCgkNCglmb3IgKCRpID0gMDsgJGkgLWx0ICRtYXhBdHRlbXB0czsgJGkrKykNCgl7DQoJCSMgQ2hlY2sgaWYgcHJvY2VzcyBpcyBzdGlsbCB2YWxpZA0KCQlpZiAoLW5vdCAkTW9uaXRvciAtb3IgJE1vbml0b3IuSGFzRXhpdGVkIC1vciAkTW9uaXRvci5NYWluV2luZG93SGFuZGxlIC1lcSBbSW50UHRyXTo6WmVybykNCgkJew0KCQkJcmV0dXJuICRmYWxzZQ0KCQl9DQoJCQ0KCQkkcmVzcG9uc2l2ZVRhc2sgPSBbTmF0aXZlXTo6UmVzcG9uc2l2ZUFzeW5jKCRNb25pdG9yLk1haW5XaW5kb3dIYW5kbGUsIDEwMCkNCgkJaWYgKCRyZXNwb25zaXZlVGFzay5SZXN1bHQpDQoJCXsNCgkJCSRpc1Jlc3BvbnNpdmUgPSAkdHJ1ZQ0KCQkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAkd2FpdEludGVydmFsDQoJCQlicmVhaw0KCQl9DQoJCQ0KCQlTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzICR3YWl0SW50ZXJ2YWwNCgl9DQoJDQoJaWYgKC1ub3QgJGlzUmVzcG9uc2l2ZSkNCgl7DQoJCVdyaXRlLVZlcmJvc2UgIkxPR0lOOiBXaW5kb3cgdW5yZXNwb25zaXZlIGZvciBQSUQgJCgkTW9uaXRvci5JZCkiIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJfQ0KCQ0KCXJldHVybiAkaXNSZXNwb25zaXZlDQp9DQoNCjwjDQouU1lOT1BTSVMNCldhaXRzIGZvciBmaWxlIHRvIGJlIGFjY2Vzc2libGUNCiM+DQpmdW5jdGlvbiBXYWl0LUZvckZpbGVBY2Nlc3MNCnsNCglwYXJhbSgNCgkJW3N0cmluZ10kRmlsZVBhdGgNCgkpDQoJDQoJJG1heEF0dGVtcHRzID0gNDAgICMgNCBzZWNvbmQgbWF4DQoJJHdhaXRJbnRlcnZhbCA9IDEwMCAgIyA1MG1zDQoJDQoJZm9yICgkaSA9IDA7ICRpIC1sdCAkbWF4QXR0ZW1wdHM7ICRpKyspDQoJew0KCQl0cnkNCgkJew0KCQkJIyBDaGVjayBpZiBmaWxlIGV4aXN0cyBhbmQgY2FuIGJlIG9wZW5lZA0KCQkJaWYgKFRlc3QtUGF0aCAtUGF0aCAkRmlsZVBhdGgpDQoJCQl7DQoJCQkJJGZpbGVTdHJlYW0gPSBbU3lzdGVtLklPLkZpbGVdOjpPcGVuKCRGaWxlUGF0aCwgW1N5c3RlbS5JTy5GaWxlTW9kZV06Ok9wZW4sIFtTeXN0ZW0uSU8uRmlsZUFjY2Vzc106OlJlYWRXcml0ZSwgW1N5c3RlbS5JTy5GaWxlU2hhcmVdOjpOb25lKQ0KCQkJCWlmICgkZmlsZVN0cmVhbSkNCgkJCQl7DQoJCQkJCSRmaWxlU3RyZWFtLkNsb3NlKCkNCgkJCQkJJGZpbGVTdHJlYW0uRGlzcG9zZSgpDQoJCQkJCXJldHVybiAkdHJ1ZQ0KCQkJCX0NCgkJCX0NCgkJfQ0KCQljYXRjaA0KCQl7DQoJCQkjIEZpbGUgaXMgbG9ja2VkIG9yIGRvZXNuJ3QgZXhpc3QNCgkJfQ0KCQkNCgkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAkd2FpdEludGVydmFsDQoJfQ0KCQ0KCXJldHVybiAkZmFsc2UNCn0NCg0KPCMNCi5TWU5PUFNJUw0KVGhyZWFkLXNhZmUgbG9nIHdyaXRpbmcNCiM+DQpmdW5jdGlvbiBXcml0ZS1Mb2dXaXRoUmV0cnkNCnsNCglwYXJhbSgNCgkJW3N0cmluZ10kRmlsZVBhdGgsDQoJCVtzdHJpbmddJFZhbHVlDQoJKQ0KCQ0KCSRtYXhBdHRlbXB0cyA9IDEwDQoJJHdhaXRJbnRlcnZhbCA9IDEwMA0KCQ0KCWZvciAoJGkgPSAwOyAkaSAtbHQgJG1heEF0dGVtcHRzOyAkaSsrKQ0KCXsNCgkJdHJ5DQoJCXsNCgkJCWlmICgtbm90IChUZXN0LVBhdGggLVBhdGggKFNwbGl0LVBhdGggLVBhdGggJEZpbGVQYXRoIC1QYXJlbnQpKSkNCgkJCXsNCgkJCQlOZXctSXRlbSAtUGF0aCAoU3BsaXQtUGF0aCAtUGF0aCAkRmlsZVBhdGggLVBhcmVudCkgLUl0ZW1UeXBlIERpcmVjdG9yeSAtRm9yY2UgfCBPdXQtTnVsbA0KCQkJfQ0KCQkJDQoJCQlTZXQtQ29udGVudCAtUGF0aCAkRmlsZVBhdGggLVZhbHVlICRWYWx1ZSAtRm9yY2UNCgkJCXJldHVybiAkdHJ1ZQ0KCQl9DQoJCWNhdGNoDQoJCXsNCgkJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgJHdhaXRJbnRlcnZhbA0KCQl9DQoJfQ0KCQ0KCVdyaXRlLVZlcmJvc2UgIkxPR0lOOiBGYWlsZWQgdG8gd3JpdGUgdG8gbG9nIGZpbGUgJEZpbGVQYXRoIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCXJldHVybiAkZmFsc2UNCn0NCg0KPCMNCi5TWU5PUFNJUw0KU2ltdWxhdGVzIGEgbW91c2UgY2xpY2sgYXQgc3BlY2lmaWMgY29vcmRpbmF0ZXMgd2l0aG91dCB1c2luZyBmdG9vbC5kbGwNCiM+DQpmdW5jdGlvbiBJbnZva2UtTW91c2VDbGljaw0Kew0KCXBhcmFtKA0KCQlbaW50XSRYLA0KCQlbaW50XSRZDQoJKQ0KCQ0KCSMgU3RvcmUgdGhlIGN1cnJlbnQgY3Vyc29yIHBvc2l0aW9uIHRvIHJlc3RvcmUgbGF0ZXINCgkkb3JpZ2luYWxQb3NpdGlvbiA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5DdXJzb3JdOjpQb3NpdGlvbg0KCQ0KCSMgVHJhY2sgdGhhdCB0aGlzIG1vdmVtZW50IGlzIHNjcmlwdC1pbml0aWF0ZWQNCgkkc2NyaXB0OlNjcmlwdEluaXRpYXRlZE1vdmUgPSAkdHJ1ZQ0KCSRzY3JpcHQ6TGFzdFNjcmlwdE1vdXNlVGFyZ2V0ID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Qb2ludCgkWCwgJFkpDQoJJHNjcmlwdDpMYXN0U2NyaXB0TW91c2VNb3ZlVGltZSA9IEdldC1EYXRlDQoJDQoJIyBHZXQgdGhlIGhhbmRsZSBvZiB0aGUgZm9yZWdyb3VuZCB3aW5kb3cNCgkkaFduZCA9IFtOYXRpdmVdOjpHZXRGb3JlZ3JvdW5kV2luZG93KCkNCgkNCgl0cnkNCgl7DQoJCVdyaXRlLVZlcmJvc2UgIkxPR0lOOiBNb3ZpbmcgY3Vyc29yIGZyb20gKCQoJG9yaWdpbmFsUG9zaXRpb24uWCksJCgkb3JpZ2luYWxQb3NpdGlvbi5ZKSkgdG8gKCRYLCRZKSIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkNCgkJIyBGb3JjZSBjdXJzb3IgcG9zaXRpb24NCgkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAxMA0KCQlbdm9pZF1bTmF0aXZlXTo6U2V0Q3Vyc29yUG9zKCRYLCAkWSkNCgkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAxMA0KCQlbdm9pZF1bTmF0aXZlXTo6U2V0Q3Vyc29yUG9zKCRYLCAkWSkNCgkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAxMA0KCQkNCgkJJG5ld1BvcyA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5DdXJzb3JdOjpQb3NpdGlvbg0KCQlTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDEwDQoJCVdyaXRlLVZlcmJvc2UgIkxPR0lOOiBDdXJzb3IgcG9zaXRpb24gYWZ0ZXIgbW92ZTogKCQoJG5ld1Bvcy5YKSwkKCRuZXdQb3MuWSkpIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQ0KCQkjIElmIHBvc2l0aW9uIGlzIHN0aWxsIG9mZiBieSBtb3JlIHRoYW4gNSBwaXhlbHMsIHRyeSBvbmUgbW9yZSB0aW1lDQoJCWlmIChbTWF0aF06OkFicygkbmV3UG9zLlggLSAkWCkgLWd0IDUgLW9yIFtNYXRoXTo6QWJzKCRuZXdQb3MuWSAtICRZKSAtZ3QgNSkNCgkJew0KCQkJV3JpdGUtVmVyYm9zZSAiTE9HSU46IEN1cnNvciBwb3NpdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkLiBFeHBlY3RlZDogKCRYLCRZKSwgQWN0dWFsOiAoJCgkbmV3UG9zLlgpLCQoJG5ld1Bvcy5ZKSkiIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkNCgkJCSMgVHJ5IG9uZSBtb3JlIHRpbWUgd2l0aCBhIGxvbmdlciBkZWxheQ0KCQkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyA1MA0KCQkJW3ZvaWRdW05hdGl2ZV06OlNldEN1cnNvclBvcygkWCwgJFkpDQoJCQlTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDUwDQoJCQlbdm9pZF1bTmF0aXZlXTo6U2V0Q3Vyc29yUG9zKCRYLCAkWSkNCgkJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNTANCgkJCQ0KCQkJIyBDaGVjayBhZ2Fpbg0KCQkJJG5ld1BvcyA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5DdXJzb3JdOjpQb3NpdGlvbg0KCQkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyA1MA0KCQkJV3JpdGUtVmVyYm9zZSAiTE9HSU46IEN1cnNvciBwb3NpdGlvbiBhZnRlciBzZWNvbmQgYXR0ZW1wdDogKCQoJG5ld1Bvcy5YKSwkKCRuZXdQb3MuWSkpIiAtRm9yZWdyb3VuZENvbG9yIEdyYXkNCgkJCWlmIChbTWF0aF06OkFicygkbmV3UG9zLlggLSAkWCkgLWd0IDUgLW9yIFtNYXRoXTo6QWJzKCRuZXdQb3MuWSAtICRZKSAtZ3QgNSkNCgkJCXsNCgkJCQlXcml0ZS1WZXJib3NlICJMT0dJTjogQ3Vyc29yIHBvc2l0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQuIEV4cGVjdGVkOiAoJFgsJFkpLCBBY3R1YWw6ICgkKCRuZXdQb3MuWCksJCgkbmV3UG9zLlkpKS4gU3RvcHBpbmcgbG9naW4uIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJCXJldHVybiAkZmFsc2UNCgkJCX0NCgkJfQ0KCQkNCgkJIyBVc2UgbW91c2VfZXZlbnQgZm9yIG1vcmUgcmVsaWFibGUgY2xpY2tpbmcgYXQgdGhlIENVUlJFTlQgcG9zaXRpb24NCgkJIyBUaGlzIGlzIGltcG9ydGFudCAtIHdlIGNsaWNrIHdoZXJlIHRoZSBjdXJzb3IgYWN0dWFsbHkgaXMNCgkJJE1PVVNFRVZFTlRGX0xFRlRET1dOID0gMHgwMDAyDQoJCSRNT1VTRUVWRU5URl9MRUZUVVAgPSAweDAwMDQNCgkJDQoJCSMgUGVyZm9ybSBjbGljaw0KCQlbTmF0aXZlXTo6bW91c2VfZXZlbnQoJE1PVVNFRVZFTlRGX0xFRlRET1dOLCAwLCAwLCAwLCAwKQ0KCQlTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDEwDQoJCVtOYXRpdmVdOjptb3VzZV9ldmVudCgkTU9VU0VFVkVOVEZfTEVGVFVQLCAwLCAwLCAwLCAwKQ0KCQlTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDEwDQoJCQ0KCQkjIEZhbGxiYWNrIHRvIFNlbmRNZXNzYWdlIGlmIG5lZWRlZCAtIHVzaW5nIHRoZSBBQ1RVQUwgY29vcmRpbmF0ZXMNCgkJaWYgKCRoV25kIC1uZSBbSW50UHRyXTo6WmVybykNCgkJew0KCQkJJGN1cnJlbnRQb3MgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQ3Vyc29yXTo6UG9zaXRpb24NCgkJCSRscGFyYW0gPSAoJGN1cnJlbnRQb3MuWSAtc2hsIDE2KSAtYm9yICRjdXJyZW50UG9zLlgNCgkJCQ0KCQkJJHdpbmRvd3NNb3VzZURvd24gPSAweDAyMDEgICMgV01fTEJVVFRPTkRPV04NCgkJCSR3aW5kb3dzTW91c2VVcCA9IDB4MDIwMiAgICAjIFdNX0xCVVRUT05VUA0KCQkJDQoJCQlbTmF0aXZlXTo6U2VuZE1lc3NhZ2UoJGhXbmQsICR3aW5kb3dzTW91c2VEb3duLCAwLCAkbHBhcmFtKQ0KCQkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAyMA0KCQkJW05hdGl2ZV06OlNlbmRNZXNzYWdlKCRoV25kLCAkd2luZG93c01vdXNlVXAsIDAsICRscGFyYW0pDQoJCQlTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDIwDQoJCQlXcml0ZS1WZXJib3NlICJNb3VzZSBjbGljayB3YXMgcGVyZm9ybWVkLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQl9DQoJCQ0KCQkjIFNtYWxsIGRlbGF5IHRvIGVuc3VyZSBhbnkgbmV4dCBjbGlja3MgcmVnaXN0ZXINCgkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyA1MA0KCX0gDQoJY2F0Y2gNCgl7DQoJCVdyaXRlLVZlcmJvc2UgIkxPR0lOOiBNb3VzZSBjbGljayBzaW11bGF0aW9uIGZhaWxlZDogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJfQ0KCWZpbmFsbHkNCgl7DQoJCQ0KCQkjIFJlc2V0IHNjcmlwdC1pbml0aWF0ZWQgZmxhZyBhZnRlciBhIHNob3J0IGRlbGF5DQoJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNTANCgkJJHNjcmlwdDpTY3JpcHRJbml0aWF0ZWRNb3ZlID0gJGZhbHNlDQoJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNTANCgl9DQp9DQoNCjwjDQouU1lOT1BTSVMNClNpbXVsYXRlcyBhIGtleSBwcmVzcw0KIz4NCmZ1bmN0aW9uIEludm9rZS1LZXlQcmVzcw0Kew0KCXBhcmFtKA0KCQlbaW50XSRWaXJ0dWFsS2V5Q29kZQ0KCSkNCgkNCgkjIEdldCB0aGUgaGFuZGxlIG9mIHRoZSBmb3JlZ3JvdW5kIHdpbmRvdw0KCSRoV25kID0gW05hdGl2ZV06OkdldEZvcmVncm91bmRXaW5kb3coKQ0KCVtOYXRpdmVdOjpCcmluZ1RvRnJvbnQoJFByb2Nlc3MuTWFpbldpbmRvd0hhbmRsZSkgfCBPdXQtTnVsbA0KCQ0KCSMgU2ltdWxhdGUga2V5IHByZXNzICh0aGlzIGlzIHN0aWxsIHVzaW5nIGZ0b29sLmRsbCkNCglbRnRvb2xdOjpmblBvc3RNZXNzYWdlKCRoV25kLCAweDAxMDAsICRWaXJ0dWFsS2V5Q29kZSwgMCkgIyBXTV9LRVlET1dODQoJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAyMA0KCVtGdG9vbF06OmZuUG9zdE1lc3NhZ2UoJGhXbmQsIDB4MDEwMSwgJFZpcnR1YWxLZXlDb2RlLCAwKSAjIFdNX0tFWVVQDQoJDQoJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAxMDANCn0NCg0KI2VuZHJlZ2lvbg0KDQojcmVnaW9uIENvcmUgRnVuY3Rpb25zDQoNCiMgTG9naW4gc3RhdGUgdHJhY2tpbmcNCiRzY3JpcHQ6TG9naW5TdGF0ZSA9IEB7DQoJQWN0aXZlICAgICAgPSAkZmFsc2UNCglMYXN0QXR0ZW1wdCA9ICRudWxsDQoJUmV0cnlDb3VudCAgPSAwDQoJTWF4UmV0cmllcyAgPSAxDQoJVGltZW91dCAgICAgPSAxMjAgIyBzZWNvbmRzDQp9DQoNCjwjDQouU1lOT1BTSVMNCkxvZ3MgaW50byBzZWxlY3RlZCBnYW1lIGNsaWVudA0KIz4NCmZ1bmN0aW9uIExvZ2luU2VsZWN0ZWRSb3cNCnsNCglwYXJhbSgNCgkJW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkRhdGFHcmlkVmlld1Jvd10kUm93LA0KCQlbc3RyaW5nXSRMb2dGb2xkZXIgPSAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMYXVuY2hlclBhdGgnXVsnTGF1bmNoZXJQYXRoJ10gLXJlcGxhY2UgJ1xcTGF1bmNoZXJcLmV4ZSQnLCAnJyksDQoJCVtzdHJpbmddJExvZ0ZpbGVQYXRoID0gIiQoJExvZ0ZvbGRlcilcTG9nXG5ldHdvcmtfJChHZXQtRGF0ZSAtRm9ybWF0ICd5eXl5TU1kZCcpLmxvZyINCgkpDQoJDQoJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuU3RhdGUuTG9naW5BY3RpdmUgPSAkdHJ1ZQ0KCQ0KCSMgSW5pdGlhbGl6ZSBnbG9iYWwgdmFyaWFibGVzIGlmIHRoZXkgZG9uJ3QgZXhpc3QNCglpZiAoLW5vdCAkc2NyaXB0Okxhc3RTY3JpcHRNb3VzZVRhcmdldCkNCgl7DQoJCSRzY3JpcHQ6TGFzdFNjcmlwdE1vdXNlVGFyZ2V0ID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Qb2ludCgwLCAwKQ0KCQkkc2NyaXB0Okxhc3RTY3JpcHRNb3VzZU1vdmVUaW1lID0gR2V0LURhdGUNCgkJJHNjcmlwdDpTY3JpcHRJbml0aWF0ZWRNb3ZlID0gJGZhbHNlDQoJfQ0KCQ0KCSMgR2V0IFVJIHJlZmVyZW5jZQ0KCSRVSSA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJDQoJaWYgKC1ub3QgJFVJKQ0KCXsNCgkJV3JpdGUtVmVyYm9zZSAnTE9HSU46IFVJIHJlZmVyZW5jZSBub3QgZm91bmQnIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCXJldHVybg0KCX0NCgkNCgkjIEVuc3VyZSBsb2cgZmlsZSBleGlzdHMNCglpZiAoLW5vdCAoVGVzdC1QYXRoICRMb2dGaWxlUGF0aCkpDQoJew0KCQlXcml0ZS1WZXJib3NlICdMT0dJTjogQ3JlYXRpbmcgbmV3IGxvZyBmaWxlJyAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KCQl0cnkNCgkJew0KCQkJTmV3LUl0ZW0gLVBhdGggJExvZ0ZpbGVQYXRoIC1JdGVtVHlwZSBGaWxlIC1Gb3JjZSB8IE91dC1OdWxsDQoJCX0NCgkJY2F0Y2gNCgkJew0KCQkJV3JpdGUtVmVyYm9zZSAiTE9HSU46IEVycm9yIGNyZWF0aW5nIGxvZyBmaWxlOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCXJldHVybg0KCQl9DQoJfQ0KCWVsc2UNCgl7DQoJCSMgQ2xlYXIgbG9nIGZpbGUNCgkJV3JpdGUtTG9nV2l0aFJldHJ5IC1GaWxlUGF0aCAkTG9nRmlsZVBhdGggLVZhbHVlICcnDQoJfQ0KCQ0KCSMgU2ltcGxlIHByb3BlcnR5IGNoYW5nZSBoYW5kbGVyIHRoYXQgdXBkYXRlcyBidXR0b24gYXBwZWFyYW5jZQ0KCWlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5TdGF0ZS5Mb2dpbkFjdGl2ZSAtZXEgJHRydWUpIHsNCgkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTG9naW5CdXR0b24uRmxhdFN0eWxlID0gJ1BvcHVwJw0KCX0gZWxzZSB7DQoJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkxvZ2luQnV0dG9uLkZsYXRTdHlsZSA9ICdGbGF0Jw0KCX0NCgkNCglXcml0ZS1WZXJib3NlICdMT0dJTjogTG9naW4gcHJvY2VzcyBzdGFydGVkJyAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCgkNCgkjIENoZWNrIGlmIHJvd3MgYXJlIHNlbGVjdGVkDQoJaWYgKCRVSS5EYXRhR3JpZEZpbGxlci5TZWxlY3RlZFJvd3MuQ291bnQgLWVxIDApDQoJew0KCQlXcml0ZS1WZXJib3NlICdMT0dJTjogTm8gY2xpZW50cyBzZWxlY3RlZCcgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJcmV0dXJuDQoJfQ0KCQ0KCSMgU29ydCByb3dzIGJ5IGluZGV4IHRvIHByb2Nlc3MgaW4gb3JkZXINCgkkc29ydGVkUm93cyA9ICRVSS5EYXRhR3JpZEZpbGxlci5TZWxlY3RlZFJvd3MgfCBTb3J0LU9iamVjdCB7ICRfLkNlbGxzWzBdLlZhbHVlIC1hcyBbaW50XSB9DQoJDQoJIyBQcm9jZXNzIGVhY2ggc2VsZWN0ZWQgcm93DQoJZm9yZWFjaCAoJHJvdyBpbiAkc29ydGVkUm93cykNCgl7DQoJCXRyeQ0KCQl7DQoJCQkkcHJvY2VzcyA9ICRyb3cuVGFnDQoJCQlpZiAoLW5vdCAkcHJvY2VzcykNCgkJCXsNCgkJCQlXcml0ZS1WZXJib3NlICdMT0dJTjogTm8gcHJvY2VzcyBhc3NvY2lhdGVkIHdpdGggcm93JyAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KCQkJCWNvbnRpbnVlIA0KCQkJfQ0KCQkJDQoJCQkjIFJlc2V0IHN0YXRlIGZsYWdzDQoJCQkkbnVsbCA9ICRmb3VuZENFUlQNCgkJCSRudWxsID0gJGZvdW5kTG9naW4NCgkJCSRudWxsID0gJGZvdW5kQ2FjaGVKb2luDQoJCQkkZm91bmRDRVJUID0gJGZhbHNlDQoJCQkkZm91bmRMb2dpbiA9ICRmYWxzZQ0KCQkJJGZvdW5kQ2FjaGVKb2luID0gJGZhbHNlDQoJCQkNCgkJCSMgU3RhcnQgbG9nIG1vbml0b3Jpbmcgam9iIHdpdGggdGltZW91dCBtZWNoYW5pc20NCgkJCSRsb2dNb25pdG9ySm9iID0gU3RhcnQtSm9iIC1Bcmd1bWVudExpc3QgJExvZ0ZpbGVQYXRoIC1TY3JpcHRCbG9jayB7DQoJCQkJcGFyYW0oJExvZ0ZpbGVQYXRoKQ0KCQkJCQ0KCQkJCSRudWxsID0gJGZvdW5kQ0VSVA0KCQkJCSRudWxsID0gJGZvdW5kTG9naW4NCgkJCQkkbnVsbCA9ICRmb3VuZENhY2hlSm9pbg0KCQkJCSRmb3VuZENFUlQgPSAkZmFsc2UNCgkJCQkkZm91bmRMb2dpbiA9ICRmYWxzZQ0KCQkJCSRmb3VuZENhY2hlSm9pbiA9ICRmYWxzZQ0KCQkJCQ0KCQkJCWlmICgtbm90IChUZXN0LVBhdGggJExvZ0ZpbGVQYXRoKSkNCgkJCQl7DQoJCQkJCVdyaXRlLVZlcmJvc2UgIkxvZyBmaWxlIGRvZXMgbm90IGV4aXN0OiAkTG9nRmlsZVBhdGgiIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCXJldHVybg0KCQkJCX0NCgkJCQkNCgkJCQkjIEFkZCBhIHRpbWVvdXQgbWVjaGFuaXNtIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcHMNCgkJCQkkc3RhcnRUaW1lID0gR2V0LURhdGUNCgkJCQkkdGltZW91dCA9IE5ldy1UaW1lU3BhbiAtTWludXRlcyAyICAjIDIgbWludXRlIHRpbWVvdXQNCgkJCQkNCgkJCQl3aGlsZSAoKE5ldy1UaW1lU3BhbiAtU3RhcnQgJHN0YXJ0VGltZSAtRW5kIChHZXQtRGF0ZSkpIC1sdCAkdGltZW91dCkNCgkJCQl7DQoJCQkJCXRyeQ0KCQkJCQl7DQoJCQkJCQkkbGluZSA9IEdldC1Db250ZW50IC1QYXRoICRMb2dGaWxlUGF0aCAtVGFpbCAxIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQoJCQkJCQkkbGluZXMgPSBHZXQtQ29udGVudCAtUGF0aCAkTG9nRmlsZVBhdGggLVRhaWwgNiAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KCQkJCQkJDQoJCQkJCQlpZiAoJGxpbmUgLWVxICcyIC0gQ0VSVF9TUlZSX0xJU1QnKQ0KCQkJCQkJew0KCQkJCQkJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNTANCgkJCQkJCQkkZm91bmRDRVJUID0gJHRydWUNCgkJCQkJCQlXcml0ZS1PdXRwdXQgJ0NFUlRfRk9VTkQnDQoJCQkJCQkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyA1MA0KCQkJCQkJfQ0KCQkJCQkJZWxzZWlmICgkbGluZSAtZXEgJzYgLSBMT0dJTl9QTEFZRVJfTElTVCcpDQoJCQkJCQl7DQoJCQkJCQkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyA1MA0KCQkJCQkJCSRmb3VuZExvZ2luID0gJHRydWUNCgkJCQkJCQlXcml0ZS1PdXRwdXQgJ0xPR0lOX0ZPVU5EJw0KCQkJCQkJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNTANCgkJCQkJCX0NCgkJCQkJCQ0KCQkJCQkJIyBDaGVjayBmb3IgY2FjaGUgam9pbiBwYXR0ZXJuDQoJCQkJCQlpZiAoJGxpbmVzIC1hbmQgJGxpbmVzLkNvdW50IC1nZSA2KQ0KCQkJCQkJew0KCQkJCQkJCWZvciAoJGkgPSAwOyAkaSAtbGUgJGxpbmVzLkNvdW50IC0gMzsgJGkrKykNCgkJCQkJCQl7DQoJCQkJCQkJCWlmICgkbGluZXNbJGldIC1tYXRjaCAnMTMgLSBDQUNIRV9BQ0tfSk9JTicgLWFuZCANCgkJCQkJCQkJCSRsaW5lc1skaSArIDJdIC1tYXRjaCAnMTMgLSBDQUNIRV9BQ0tfSk9JTicgLWFuZCANCgkJCQkJCQkJCSRsaW5lc1skaSArIDRdIC1tYXRjaCAnMTMgLSBDQUNIRV9BQ0tfSk9JTicpDQoJCQkJCQkJCXsNCgkJCQkJCQkJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNTANCgkJCQkJCQkJCSRmb3VuZENhY2hlSm9pbiA9ICR0cnVlDQoJCQkJCQkJCQlXcml0ZS1PdXRwdXQgJ0NBQ0hFX0ZPVU5EJw0KCQkJCQkJCQkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyA1MA0KCQkJCQkJCQkJYnJlYWsNCgkJCQkJCQkJfQ0KCQkJCQkJCX0NCgkJCQkJCX0NCgkJCQkJfQ0KCQkJCQljYXRjaA0KCQkJCQl7DQoJCQkJCQkjIElnbm9yZSBlcnJvcnMgZHVyaW5nIGxvZyByZWFkaW5nDQoJCQkJCQlXcml0ZS1PdXRwdXQgIkVSUk9SOiAkXyINCgkJCQkJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgMTANCgkJCQkJfQ0KCQkJCQkNCgkJCQkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAxMDANCgkJCQl9DQoJCQkJDQoJCQkJIyBJZiB3ZSByZWFjaCBoZXJlLCB3ZSd2ZSB0aW1lZCBvdXQNCgkJCQlXcml0ZS1PdXRwdXQgJ1RJTUVPVVQnDQoJCQl9DQoJCQkNCgkJCSMgR2V0IGNsaWVudCBwb3NpdGlvbiBmcm9tIHRoZSBpbmRleCBjb2x1bW4gKGNvbHVtbiAwKQ0KCQkJIyBUaGlzIGlzIHRoZSBhY3R1YWwgZGlzcGxheWVkIGluZGV4LCBub3QgdGhlIHJvdyBwb3NpdGlvbg0KCQkJJGVudHJ5TnVtYmVyID0gW2ludF0kcm93LkNlbGxzWzBdLlZhbHVlDQoJCQlXcml0ZS1WZXJib3NlICJMT0dJTjogUHJvY2Vzc2luZyBlbnRyeSAkZW50cnlOdW1iZXIgKFBJRCAkKCRwcm9jZXNzLklkKSkiIC1Gb3JlZ3JvdW5kQ29sb3IgQ3lhbg0KCQkJDQoJCQl0cnkNCgkJCXsNCgkJCQkjIFJlc3RvcmUgd2luZG93IGlmIG1pbmltaXplZA0KCQkJCVJlc3RvcmUtV2luZG93IC1Qcm9jZXNzICRwcm9jZXNzIA0KCQkJCQ0KCQkJCQ0KCQkJCSMgQnJpbmcgd2luZG93IHRvIGZvcmVncm91bmQNCgkJCQlpZiAoLW5vdCAoU2V0LVdpbmRvd0ZvcmVncm91bmQgLVByb2Nlc3MgJHByb2Nlc3MgKSkNCgkJCQl7DQoJCQkJCQ0KCQkJCQljb250aW51ZQ0KCQkJCX0NCgkJCQkNCgkJCQkNCgkJCQkjIENhbGN1bGF0ZSB0YXJnZXQgY2xpY2sgcG9zaXRpb24gKGNlbnRlciBvZiBjbGllbnQgd2luZG93KQ0KCQkJCSRyZWN0ID0gTmV3LU9iamVjdCBOYXRpdmUrUkVDVA0KCQkJCWlmICgtbm90IFtOYXRpdmVdOjpHZXRXaW5kb3dSZWN0KCRwcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUsIFtyZWZdJHJlY3QpKQ0KCQkJCXsNCgkJCQkJDQoJCQkJCWNvbnRpbnVlDQoJCQkJfQ0KCQkJCQ0KCQkJCSRjZW50ZXJYID0gW2ludF0oKCRyZWN0LkxlZnQgKyAkcmVjdC5SaWdodCkgLyAyKSArIDI1DQoJCQkJJGNlbnRlclkgPSBbaW50XSgoJHJlY3QuVG9wICsgJHJlY3QuQm90dG9tKSAvIDIpDQoJCQkJDQoJCQkJDQoJCQkJDQoJCQkJDQoJCQkJIyBBZGp1c3QgWSBwb3NpdGlvbiBiYXNlZCBvbiByb3cgaW5kZXggdmFsdWUgZnJvbSBjb2x1bW4gMA0KCQkJCSRhZGp1c3RlZFkgPSAkY2VudGVyWQ0KCQkJCWlmICgkZW50cnlOdW1iZXIgLWdlIDEgLWFuZCAkZW50cnlOdW1iZXIgLWxlIDUpDQoJCQkJew0KCQkJCQkkeU9mZnNldCA9ICgkZW50cnlOdW1iZXIgLSAzKSAqIDE4DQoJCQkJCSRhZGp1c3RlZFkgPSAkY2VudGVyWSArICR5T2Zmc2V0DQoJCQkJCQ0KCQkJCX0NCgkJCQkNCgkJCQlpZiAoJGVudHJ5TnVtYmVyIC1nZSA2IC1hbmQgJGVudHJ5TnVtYmVyIC1sZSAxMCkNCgkJCQl7DQoJCQkJCSR5T2Zmc2V0ID0gKCRlbnRyeU51bWJlciAtIDgpICogMTgNCgkJCQkJJGFkanVzdGVkWSA9ICRjZW50ZXJZICsgJHlPZmZzZXQNCgkJCQkJDQoJCQkJfQ0KCQkJCQ0KCQkJCQ0KCQkJCWlmICgkZW50cnlOdW1iZXIgLWdlIDYgLWFuZCAkZW50cnlOdW1iZXIgLWxlIDEwKQ0KCQkJCXsNCgkJCQkJJHNjcm9sbENlbnRlclggPSAkY2VudGVyWCArIDE0NQ0KCQkJCQkkc2Nyb2xsQ2VudGVyWSA9ICRjZW50ZXJZICsgMjgNCgkJCQkJJGFkanVzdGVkWSA9ICRjZW50ZXJZICsgJHlPZmZzZXQNCgkJCQkJDQoJCQkJCUludm9rZS1Nb3VzZUNsaWNrIC1YICRzY3JvbGxDZW50ZXJYIC1ZICRzY3JvbGxDZW50ZXJZDQoJCQkJCQ0KCQkJCX0NCgkJCQkNCgkJCQkjIFBlcmZvcm0gZmlyc3QgY2xpY2sgd2l0aCBleHBsaWNpdCBjb29yZGluYXRlcw0KCQkJCQ0KCQkJCUludm9rZS1Nb3VzZUNsaWNrIC1YICRjZW50ZXJYIC1ZICRhZGp1c3RlZFkNCgkJCQlJbnZva2UtTW91c2VDbGljayAtWCAkY2VudGVyWCAtWSAkYWRqdXN0ZWRZCQkNCgkJCQkNCgkJCQkjIFdhaXQgZm9yIHByb2Nlc3MgdG8gYmUgcmVzcG9uc2l2ZQ0KCQkJCQ0KCQkJCVdhaXQtRm9yUmVzcG9uc2l2ZSAtTW9uaXRvciAkcHJvY2Vzcw0KCQkJCQ0KCQkJCSMgV2FpdCBmb3IgQ0VSVCBzY3JlZW4gd2l0aCB0aW1lb3V0DQoJCQkJJGNlcnRUaW1lb3V0ID0gTmV3LVRpbWVTcGFuIC1TZWNvbmRzIDIwDQoJCQkJJGNlcnRTdGFydFRpbWUgPSBHZXQtRGF0ZQ0KCQkJCXdoaWxlICgtbm90ICRmb3VuZENFUlQgLWFuZCAoKE5ldy1UaW1lU3BhbiAtU3RhcnQgJGNlcnRTdGFydFRpbWUgLUVuZCAoR2V0LURhdGUpKSAtbHQgJGNlcnRUaW1lb3V0KSkNCgkJCQl7DQoJCQkJCWlmICgtbm90IChXYWl0LUZvckZpbGVBY2Nlc3MgLUZpbGVQYXRoICRMb2dGaWxlUGF0aCkpDQoJCQkJCXsNCgkJCQkJCVdyaXRlLVZlcmJvc2UgJ0xPR0lOOiBGaWxlIGxvY2sgdGltZW91dCwgcmV0cnlpbmcuLi4nIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQlTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDIwMA0KCQkJCQkJY29udGludWUNCgkJCQkJfQ0KCQkJCQkNCgkJCQkJJGxvZ1N0YXR1cyA9IFJlY2VpdmUtSm9iIC1Kb2IgJGxvZ01vbml0b3JKb2IgLUtlZXANCgkJCQkJaWYgKCRsb2dTdGF0dXMgLWNvbnRhaW5zICdDRVJUX0ZPVU5EJykNCgkJCQkJew0KCQkJCQkJJGZvdW5kQ0VSVCA9ICR0cnVlDQoJCQkJCQlTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDEwMA0KCQkJCQkJV3JpdGUtVmVyYm9zZSAiTE9HSU46IENFUlQgZm91bmQgZm9yIFBJRCAkKCRwcm9jZXNzLklkKSIgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KCQkJCQl9DQoJCQkJCQ0KCQkJCQlpZiAoJGxvZ1N0YXR1cyAtY29udGFpbnMgJ1RJTUVPVVQnKQ0KCQkJCQl7DQoJCQkJCQlXcml0ZS1WZXJib3NlICdMT0dJTjogTG9nIG1vbml0b3JpbmcgdGltZWQgb3V0JyAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJCQkJYnJlYWsNCgkJCQkJfQ0KCQkJCQkNCgkJCQkJaWYgKFRlc3QtVXNlck1vdXNlSW50ZXJ2ZW50aW9uKQ0KCQkJCQl7DQoJCQkJCQlXcml0ZS1WZXJib3NlICdMT0dJTjogVXNlciBpbnRlcnZlbnRpb24gZGV0ZWN0ZWQgLSBzdG9wcGluZycgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJCQkJCWlmICgkbG9nTW9uaXRvckpvYikNCgkJCQkJCXsNCgkJCQkJCQlTdG9wLUpvYiAtSm9iICRsb2dNb25pdG9ySm9iIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQoJCQkJCQkJUmVtb3ZlLUpvYiAtSm9iICRsb2dNb25pdG9ySm9iIC1Gb3JjZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KCQkJCQkJfQ0KCQkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuU3RhdGUuTG9naW5BY3RpdmUgPSAkZmFsc2UNCgkJCQkJCXJldHVybg0KCQkJCQl9DQoJCQkJCQ0KDQoJCQkJfQ0KCQkJCQ0KCQkJCWlmICgtbm90ICRmb3VuZENFUlQpDQoJCQkJew0KCQkJCQlXcml0ZS1WZXJib3NlICdMT0dJTjogQ0VSVCBub3QgZm91bmQgd2l0aGluIHRpbWVvdXQgcGVyaW9kJyAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KCQkJCQljb250aW51ZQ0KCQkJCX0NCgkJCQkNCgkJCQkjIFByZXNzIEVudGVyIHRvIGNvbnRpbnVlDQoJCQkJV3JpdGUtTG9nV2l0aFJldHJ5IC1GaWxlUGF0aCAkTG9nRmlsZVBhdGggLVZhbHVlICcnDQoJCQkJV3JpdGUtVmVyYm9zZSAnTE9HSU46IFByZXNzaW5nIEVudGVyIGF0IENFUlQnIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCgkJCQlJbnZva2UtS2V5UHJlc3MgLVZpcnR1YWxLZXlDb2RlIDB4MEQgICMgRW50ZXIga2V5DQoJCQkJV2FpdC1Gb3JSZXNwb25zaXZlIC1Nb25pdG9yICRwcm9jZXNzDQoJCQkJDQoJCQkJIyBXYWl0IGZvciBMT0dJTiBzY3JlZW4gd2l0aCB0aW1lb3V0DQoJCQkJJGxvZ2luVGltZW91dCA9IE5ldy1UaW1lU3BhbiAtU2Vjb25kcyA2MA0KCQkJCSRsb2dpblN0YXJ0VGltZSA9IEdldC1EYXRlDQoJCQkJd2hpbGUgKC1ub3QgJGZvdW5kTG9naW4gLWFuZCAoKE5ldy1UaW1lU3BhbiAtU3RhcnQgJGxvZ2luU3RhcnRUaW1lIC1FbmQgKEdldC1EYXRlKSkgLWx0ICRsb2dpblRpbWVvdXQpKQ0KCQkJCXsNCgkJCQkJaWYgKC1ub3QgKFdhaXQtRm9yRmlsZUFjY2VzcyAtRmlsZVBhdGggJExvZ0ZpbGVQYXRoKSkNCgkJCQkJew0KCQkJCQkJV3JpdGUtVmVyYm9zZSAnTE9HSU46IEZpbGUgbG9jayB0aW1lb3V0LCByZXRyeWluZy4uLicgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJCQkJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgMjAwDQoJCQkJCQljb250aW51ZQ0KCQkJCQl9DQoJCQkJCQ0KCQkJCQkkbG9nU3RhdHVzID0gUmVjZWl2ZS1Kb2IgLUpvYiAkbG9nTW9uaXRvckpvYiAtS2VlcA0KCQkJCQlpZiAoJGxvZ1N0YXR1cyAtY29udGFpbnMgJ0xPR0lOX0ZPVU5EJykNCgkJCQkJew0KCQkJCQkJJGZvdW5kTG9naW4gPSAkdHJ1ZQ0KCQkJCQkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAxMDANCgkJCQkJCVdyaXRlLVZlcmJvc2UgIkxPR0lOOiBMT0dJTiBmb3VuZCBmb3IgUElEICQoJHByb2Nlc3MuSWQpIiAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQoJCQkJCX0NCgkJCQkJDQoJCQkJCWlmICgkbG9nU3RhdHVzIC1jb250YWlucyAnVElNRU9VVCcpDQoJCQkJCXsNCgkJCQkJCVdyaXRlLVZlcmJvc2UgJ0xPR0lOOiBMb2cgbW9uaXRvcmluZyB0aW1lZCBvdXQnIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQlicmVhaw0KCQkJCQl9DQoJCQkJCQ0KCQkJCQlpZiAoVGVzdC1Vc2VyTW91c2VJbnRlcnZlbnRpb24pDQoJCQkJCXsNCgkJCQkJCVdyaXRlLVZlcmJvc2UgJ0xPR0lOOiBVc2VyIGludGVydmVudGlvbiBkZXRlY3RlZCAtIHN0b3BwaW5nJyAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KCQkJCQkJaWYgKCRsb2dNb25pdG9ySm9iKQ0KCQkJCQkJew0KCQkJCQkJCVN0b3AtSm9iIC1Kb2IgJGxvZ01vbml0b3JKb2IgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCgkJCQkJCQlSZW1vdmUtSm9iIC1Kb2IgJGxvZ01vbml0b3JKb2IgLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQoJCQkJCQl9DQoJCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5TdGF0ZS5Mb2dpbkFjdGl2ZSA9ICRmYWxzZQ0KCQkJCQkJcmV0dXJuDQoJCQkJCX0NCgkJCQkJDQoJCQkJfQ0KCQkJCQ0KCQkJCWlmICgtbm90ICRmb3VuZExvZ2luKQ0KCQkJCXsNCgkJCQkJV3JpdGUtVmVyYm9zZSAnTE9HSU46IExPR0lOIG5vdCBmb3VuZCB3aXRoaW4gdGltZW91dCBwZXJpb2QnIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCWNvbnRpbnVlDQoJCQkJfQ0KCQkJCQ0KCQkJCSMgU2VsZWN0IGxvZ2luIHBvc2l0aW9uIGlmIGNvbmZpZ3VyZWQNCgkJCQkkbG9naW5Qb3NTZXR0aW5nID0gJG51bGwNCgkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnIC1hbmQgDQoJCQkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snTG9naW4nXSAtYW5kIA0KCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ0xvZ2luJ11bJ0xvZ2luJ10pDQoJCQkJew0KCQkJCQkNCgkJCQkJJGxvZ2luUG9zaXRpb25zID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMb2dpbiddWydMb2dpbiddIC1zcGxpdCAnLCcNCgkJCQkJaWYgKCRlbnRyeU51bWJlciAtbGUgJGxvZ2luUG9zaXRpb25zLkNvdW50KQ0KCQkJCQl7DQoJCQkJCQkkbG9naW5Qb3NTZXR0aW5nID0gJGxvZ2luUG9zaXRpb25zWyRlbnRyeU51bWJlciAtIDFdDQoJCQkJCX0NCgkJCQl9DQoJCQkJDQoJCQkJaWYgKCRsb2dpblBvc1NldHRpbmcpDQoJCQkJew0KCQkJCQkkbnVtID0gW2ludF0kbG9naW5Qb3NTZXR0aW5nDQoJCQkJCSRyaWdodEFycm93Q291bnQgPSAkbnVtIC0gMQ0KCQkJCQkNCgkJCQkJZm9yICgkciA9IDE7ICRyIC1sZSAkcmlnaHRBcnJvd0NvdW50OyAkcisrKQ0KCQkJCQl7DQoJCQkJCQlXcml0ZS1WZXJib3NlICdMT0dJTjogUHJlc3NpbmcgcmlnaHQgYXJyb3cgZm9yIGxvZ2luIHBvc2l0aW9uIHNlbGVjdGlvbicgLUZvcmVncm91bmRDb2xvciBDeWFuDQoJCQkJCQlJbnZva2UtS2V5UHJlc3MgLVZpcnR1YWxLZXlDb2RlIDB4MjcgICMgUmlnaHQgYXJyb3cga2V5DQoJCQkJCX0NCgkJCQkJDQoJCQkJCVdyaXRlLVZlcmJvc2UgIkxPR0lOOiBTZWxlY3RlZCBsb2dpbiBwb3NpdGlvbiAkbnVtIGZvciBQSUQgJCgkcHJvY2Vzcy5JZCkiIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCgkJCQl9DQoJCQkJDQoJCQkJIyBQcmVzcyBFbnRlciB0byBsb2dpbg0KCQkJCVdyaXRlLUxvZ1dpdGhSZXRyeSAtRmlsZVBhdGggJExvZ0ZpbGVQYXRoIC1WYWx1ZSAnJw0KCQkJCVdyaXRlLVZlcmJvc2UgJ0xPR0lOOiBQcmVzc2luZyBFbnRlciB0byBsb2dpbicgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KCQkJCUludm9rZS1LZXlQcmVzcyAtVmlydHVhbEtleUNvZGUgMHgwRCAgIyBFbnRlciBrZXkNCgkJCQlTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDUwMA0KCQkJCVdhaXQtRm9yUmVzcG9uc2l2ZSAtTW9uaXRvciAkcHJvY2Vzcw0KCQkJCQ0KCQkJCSMgV2FpdCBmb3IgQ0FDSEVfSk9JTiB3aXRoIHRpbWVvdXQNCgkJCQkkY2FjaGVUaW1lb3V0ID0gTmV3LVRpbWVTcGFuIC1TZWNvbmRzIDYwICAjIExvbmdlciB0aW1lb3V0IGZvciBsb2dpbg0KCQkJCSRjYWNoZVN0YXJ0VGltZSA9IEdldC1EYXRlDQoJCQkJd2hpbGUgKC1ub3QgJGZvdW5kQ2FjaGVKb2luIC1hbmQgKChOZXctVGltZVNwYW4gLVN0YXJ0ICRjYWNoZVN0YXJ0VGltZSAtRW5kIChHZXQtRGF0ZSkpIC1sdCAkY2FjaGVUaW1lb3V0KSkNCgkJCQl7DQoJCQkJCWlmICgtbm90IChXYWl0LUZvckZpbGVBY2Nlc3MgLUZpbGVQYXRoICRMb2dGaWxlUGF0aCkpDQoJCQkJCXsNCgkJCQkJCVdyaXRlLVZlcmJvc2UgJ0xPR0lOOiBGaWxlIGxvY2sgdGltZW91dCwgcmV0cnlpbmcuLi4nIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQlTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDIwMA0KCQkJCQkJY29udGludWUNCgkJCQkJfQ0KCQkJCQkNCgkJCQkJJGxvZ1N0YXR1cyA9IFJlY2VpdmUtSm9iIC1Kb2IgJGxvZ01vbml0b3JKb2IgLUtlZXANCgkJCQkJaWYgKCRsb2dTdGF0dXMgLWNvbnRhaW5zICdDQUNIRV9GT1VORCcpDQoJCQkJCXsNCgkJCQkJCSRmb3VuZENhY2hlSm9pbiA9ICR0cnVlDQoJCQkJCQlTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDEwMA0KCQkJCQkJV3JpdGUtVmVyYm9zZSAiTE9HSU46IENhY2hlIGNvbmZpcm1lZCBmb3IgUElEICQoJHByb2Nlc3MuSWQpIiAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQoJCQkJCX0NCgkJCQkJDQoJCQkJCWlmICgkbG9nU3RhdHVzIC1jb250YWlucyAnVElNRU9VVCcpDQoJCQkJCXsNCgkJCQkJCVdyaXRlLVZlcmJvc2UgJ0xPR0lOOiBMb2cgbW9uaXRvcmluZyB0aW1lZCBvdXQnIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQlicmVhaw0KCQkJCQl9DQoJCQkJCQ0KCQkJCQlpZiAoVGVzdC1Vc2VyTW91c2VJbnRlcnZlbnRpb24pDQoJCQkJCXsNCgkJCQkJCVdyaXRlLVZlcmJvc2UgJ0xPR0lOOiBVc2VyIGludGVydmVudGlvbiBkZXRlY3RlZCAtIHN0b3BwaW5nJyAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KCQkJCQkJaWYgKCRsb2dNb25pdG9ySm9iKQ0KCQkJCQkJew0KCQkJCQkJCVN0b3AtSm9iIC1Kb2IgJGxvZ01vbml0b3JKb2IgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCgkJCQkJCQlSZW1vdmUtSm9iIC1Kb2IgJGxvZ01vbml0b3JKb2IgLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQoJCQkJCQl9DQoJCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5TdGF0ZS5Mb2dpbkFjdGl2ZSA9ICRmYWxzZQ0KCQkJCQkJcmV0dXJuDQoJCQkJCX0NCgkJCQkJDQoJCQkJfQ0KCQkJCQ0KCQkJCWlmICgtbm90ICRmb3VuZENhY2hlSm9pbikNCgkJCQl7DQoJCQkJCVdyaXRlLVZlcmJvc2UgJ0xPR0lOOiBDYWNoZSBub3QgZGV0ZWN0ZWQgd2l0aGluIHRpbWVvdXQgcGVyaW9kJyAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KCQkJCQljb250aW51ZQ0KCQkJCX0NCgkJCQllbHNlDQoJCQkJew0KCQkJCQkjIENoZWNrIGlmIGZpbmFsaXplIGNvbGxlY3RvciBsb2dpbiBpcyBlbmFibGVkIGluIHNldHRpbmdzDQoJCQkJCSRmaW5hbGl6ZUxvZ2luID0gJGZhbHNlICMgRGVmYXVsdCB0byBmYWxzZSBpZiBzZXR0aW5nIGRvZXNuJ3QgZXhpc3QNCgkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZy5Db250YWluc0tleSgnTG9naW4nKSAtYW5kIA0KCQkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMb2dpbiddLkNvbnRhaW5zS2V5KCdGaW5hbGl6ZUNvbGxlY3RvckxvZ2luJykpDQoJCQkJCXsNCgkJCQkJCSRmaW5hbGl6ZUxvZ2luID0gW2Jvb2xdKFtpbnRdJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMb2dpbiddWydGaW5hbGl6ZUNvbGxlY3RvckxvZ2luJ10pDQoJCQkJCX0NCgkJCQkJDQoJCQkJCWlmICgkZmluYWxpemVMb2dpbikNCgkJCQkJew0KCQkJCQkJIyBDbGljayBhZ2FpbiB0byBmaW5hbGl6ZSBsb2dpbg0KCQkJCQkJJGFkanVzdGVkWCA9ICRjZW50ZXJYICsgNDAwDQoJCQkJCQkkYWRqdXN0ZWRZID0gJGNlbnRlclkgLSAxMDANCgkJCQkJCQ0KCQkJCQkJV3JpdGUtVmVyYm9zZSAiTE9HSU46IENsaWNraW5nIHRvIGZpbmFsaXplIGNvbGxlY3RvciBsb2dpbiBhdCBYOiRhZGp1c3RlZFggWTokYWRqdXN0ZWRZIiAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCgkJCQkJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNTAwDQoJCQkJCQlJbnZva2UtTW91c2VDbGljayAtWCAkYWRqdXN0ZWRYIC1ZICRhZGp1c3RlZFkNCgkJCQkJfQ0KCQkJCQllbHNlDQoJCQkJCXsNCgkJCQkJCVdyaXRlLVZlcmJvc2UgIkxPR0lOOiBTa2lwcGluZyBmaW5hbGl6ZSBjb2xsZWN0b3IgbG9naW4gKGRpc2FibGVkIGluIHNldHRpbmdzKSIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJCQkJfQ0KDQoJCQkJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNTAwDQoJCQkJCQ0KCQkJCQlXcml0ZS1WZXJib3NlICdMT0dJTjogTWluaW1pemluZy4uLicgLUZvcmVncm91bmRDb2xvciBDeWFuDQogICAgICAgICAgICAgICAgICAgIFtOYXRpdmVdOjpTZW5kVG9CYWNrKCRwcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUpDQoJCQkJCVdyaXRlLVZlcmJvc2UgJ0xPR0lOOiBPcHRpbWl6aW5nLi4uJyAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCgkJCQkJW05hdGl2ZV06OkVtcHR5V29ya2luZ1NldCgkcHJvY2Vzcy5IYW5kbGUpDQoNCgkJCQkJV3JpdGUtVmVyYm9zZSAiTE9HSU46IExvZ2luIGNvbXBsZXRlIGZvciBQSUQgJCgkcHJvY2Vzcy5JZCkiIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCgkJCQl9DQoJCQkJDQoJCQl9DQoJCQljYXRjaA0KCQkJew0KCQkJCVdyaXRlLVZlcmJvc2UgIkxPR0lOOiBXaW5kb3cgc2V0dXAgZXJyb3IgZm9yIFBJRCAkKCRwcm9jZXNzLklkKTogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJY29udGludWUNCgkJCX0NCgkJfQ0KCQljYXRjaA0KCQl7DQoJCQlXcml0ZS1WZXJib3NlICJMT0dJTjogTG9naW4gcHJvY2VzcyBlcnJvciBmb3Igcm93ICRlbnRyeU51bWJlcmA6ICRfIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuU3RhdGUuTG9naW5BY3RpdmUgPSAkZmFsc2UNCgkJfQ0KCQlmaW5hbGx5DQoJCXsNCgkJCSMgQ2xlYW4gdXAgcmVzb3VyY2VzDQoJCQlpZiAoJGxvZ01vbml0b3JKb2IpDQoJCQl7DQoJCQkJU3RvcC1Kb2IgLUpvYiAkbG9nTW9uaXRvckpvYiAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KCQkJCVJlbW92ZS1Kb2IgLUpvYiAkbG9nTW9uaXRvckpvYiAtRm9yY2UgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCgkJCX0NCgkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlN0YXRlLkxvZ2luQWN0aXZlID0gJGZhbHNlDQoJCX0NCgl9DQoNCgkjIFNpbXBsZSBwcm9wZXJ0eSBjaGFuZ2UgaGFuZGxlciB0aGF0IHVwZGF0ZXMgYnV0dG9uIGFwcGVhcmFuY2UNCglpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuU3RhdGUuTG9naW5BY3RpdmUgLWVxICR0cnVlKSB7DQoJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkxvZ2luQnV0dG9uLkZsYXRTdHlsZSA9ICdQb3B1cCcNCgl9IGVsc2Ugew0KCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5Mb2dpbkJ1dHRvbi5GbGF0U3R5bGUgPSAnRmxhdCcNCgl9DQoJDQoJV3JpdGUtVmVyYm9zZSAnTE9HSU46IEFsbCBzZWxlY3RlZCBjbGllbnRzIHByb2Nlc3NlZCcgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KfQ0KDQojZW5kcmVnaW9uDQoNCiNyZWdpb24gTW9kdWxlIEV4cG9ydHMNCg0KIyBFeHBvcnQgbW9kdWxlIGZ1bmN0aW9ucw0KRXhwb3J0LU1vZHVsZU1lbWJlciAtRnVuY3Rpb24gTG9naW5TZWxlY3RlZFJvdw0KDQojZW5kcmVnaW9u
				'
			}
			'ftool.psm1'    = @{ 
				Priority = 'Optional';  
				Order = 9; 
				Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ftool.psm1');
				Base64Content = '
					
				'
			}
		}
	#endregion Step: Define Module Metadata

#endregion Global Configuration

#region Environment Initialization and Checks

	#region Function: Show-ErrorDialog
		function Show-ErrorDialog
		{
			<#
			.SYNOPSIS
				Displays a standardized error message box using Windows Forms for critical errors.
			
			.PARAMETER Message
				[string] The error message text to display in the dialog box. This message should clearly state the problem encountered. (Mandatory)
			
			.OUTPUTS
				[void] This function does not return any value. Its purpose is to display a modal error dialog to the user.
			
			.NOTES
				This function requires the System.Windows.Forms .NET assembly to be loaded. It attempts to load the assembly if not already present.
				If displaying the Windows Forms MessageBox fails (e.g., in a non-interactive session or if assembly loading fails), it falls back to writing
				the error message to the PowerShell error stream using Write-Verbose for logging purposes. This function is intended for critical errors
				that need immediate user attention, often before exiting the script.
			#>
			param(
				[Parameter(Mandatory = $true)]
				[string]$Message
			)
			try
			{
				#region Step: Ensure WinForms Assembly is Loaded
					# Try loading the .NET part needed for MessageBox. Use -ErrorAction Stop to catch errors.
					# See if it's already loaded to avoid trying again/warnings.
					if (-not ([System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')))
					{
						Add-Type -AssemblyName System.Windows.Forms -ErrorAction Stop
					}
					#endregion Step: Ensure WinForms Assembly is Loaded
					
					#region Step: Display WinForms MessageBox
					# Show the error pop-up box to the user.
					# Title shows the app name clearly. MessageBoxIcon.Error gives a visual hint.
					[System.Windows.Forms.MessageBox]::Show($Message, 'Entropia Dashboard Error',
						[System.Windows.Forms.MessageBoxButtons]::OK,
						[System.Windows.Forms.MessageBoxIcon]::Error) | Out-Null # Send to Out-Null to hide the 'OK' button result.
				#endregion Step: Display WinForms MessageBox
			}
			catch
			{
				# Backup plan if the WinForms MessageBox doesn't work.
				# Write the original message and why the pop-up failed to the error output.
				Write-Verbose "Failed to display error dialog: `"$Message`". Dialog Display Error: $($_.Exception.Message)" -ForegroundColor Red
			}
		}
	#endregion Function: Show-ErrorDialog

	#region Function: Request-Elevation
		function Request-Elevation
		{
			<#
			.SYNOPSIS
				Checks for required execution context (Admin rights, 32-bit, Bypass Policy) and attempts to restart the script if necessary.
			
			.DESCRIPTION
				This function assesses the current script execution environment. It verifies:
				1. Administrator Privileges: Checks if the current user is a member of the Administrators group.
				2. 32-bit Execution: Confirms if the current PowerShell process is running in 32-bit mode (required for potential interaction with 32-bit game clients or libraries).
				3. Execution Policy: Ensures the effective execution policy for the current process is 'Bypass' to allow dynamic script and module loading.
				
				If any of these conditions are not met, the function attempts to relaunch the script using the 32-bit PowerShell executable located in SysWOW64.
				The relaunch uses the 'RunAs' verb, triggering a UAC prompt for elevation if needed, and explicitly sets the execution policy to 'Bypass' for the new process.
				Upon successfully starting the new process, the *current* script instance exits immediately.
			
			.OUTPUTS
				[void] This function does not return a value. It either determines no restart is needed and returns silently, or it attempts to start a new process and then exits the current one using 'exit'.
			
			.NOTES
				- Relies on the existence of the 32-bit PowerShell executable at '$env:SystemRoot\SysWOW64\WindowsPowerShell\v1.0\powershell.exe'. If not found, the script will exit with an error.
				- Uses the '$myinvocation' automatic variable to get the path of the currently running script for the relaunch command.
				- If the relaunch attempt fails (e.g., user cancels UAC, file not found), an error dialog is shown, and the script exits.
				- The use of '-ExecutionPolicy Bypass' in the relaunch arguments is a security consideration; see the main script notes.
			#>
			param() # No inputs needed for this function.
			
			#region Step: Check Current Environment State
				Write-Verbose "Checking current execution environment (Admin, 32-bit, Execution Policy)..." -ForegroundColor Cyan
				# $needsRestart - Flag ($true/$false), set to $true if something isn't right.
				[bool]$needsRestart = $false
				# $reason - A list to gather easy-to-read reasons why we need a restart.
				[System.Collections.ArrayList]$reason = @()
				
				# Check if we're running as Admin.
				# $isAdmin - Flag ($true/$false), $true if the current user is an Admin.
				[bool]$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
				if (-not $isAdmin)
				{
					$needsRestart = $true; $null = $reason.Add('Administrator privileges required.') # Add reason if not admin.
				}
				
				# Check if this process is 32-bit. [IntPtr]::Size is 4 for 32-bit, 8 for 64-bit.
				# $is32Bit - Flag ($true/$false), $true if the process is 32-bit.
				[bool]$is32Bit = [IntPtr]::Size -eq 4
				if (-not $is32Bit)
				{
					$needsRestart = $true; $null = $reason.Add('32-bit execution required.') # Add reason if not 32-bit.
				}
				
				# Check the Execution Policy just for this running process.
				# $currentPolicy - Text showing the execution policy (like 'Restricted', 'Bypass').
				[string]$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue # SilentlyContinue handles if it's not set for the process.
				# Needs 'Bypass' for loading/running things the way we planned.
				if ($currentPolicy -ne 'Bypass')
				{
					$needsRestart = $true
					if ($currentPolicy -ne '') {
						$effectivePolicy = $currentPolicy
					} else {
						$effectivePolicy = Get-ExecutionPolicy
					}
					$null = $reason.Add("Execution Policy 'Bypass' required for Process scope (Current effective: '$effectivePolicy').") # Show the actual policy being used.
				}
			#endregion Step: Check Current Environment State
			
			#region Step: Perform Restart if Necessary
				if ($needsRestart)
				{
					# Write down the reasons we're trying to restart.
					Write-Verbose "  Restarting script needed: $($reason -join ' ')" -ForegroundColor Yellow
					
					# Set the path to the 32-bit PowerShell program.
					# $psExe - Text, full path to the 32-bit powershell.exe.
					[string]$psExe = Join-Path $env:SystemRoot 'SysWOW64\WindowsPowerShell\v1.0\powershell.exe'
					if (-not (Test-Path $psExe -PathType Leaf)) # Check if the program file exists.
					{
						# Show error and quit if the needed program is missing.
						Show-ErrorDialog "FATAL: Required 32-bit PowerShell executable not found at '$psExe'. Cannot continue."
						exit 1 # Exit code 1 means there was an error.
					}
					
					# Get everything inside the current script file.
					$encodedCommand = @"
						
"@

					# Decode the command
					try {
						$decodedBytes = [System.Convert]::FromBase64String($encodedCommand)
						# IMPORTANT: Use the right encoding the script was saved with! UTF8 is typical, but PowerShell might use UTF8 with BOM or UTF16LE. Assume UTF8 here.
						$decodedCommand = [System.Text.Encoding]::UTF8.GetString($decodedBytes)
					} catch {
						Show-ErrorDialog "FATAL: Failed to decode the embedded command. Error: $($_.Exception.Message)"
						exit 1
					}

					# Make a temporary file path
					$tempScriptPath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), ([System.Guid]::NewGuid().ToString() + ".ps1"))

					try
					{
						# Save the decoded command to the temp file (using the right encoding)
						[System.IO.File]::WriteAllText($tempScriptPath, $decodedCommand, [System.Text.Encoding]::UTF8) # Match encoding from GetString

						# Build the NEW arguments using -File
						# Added -ExecutionPolicy Bypass, often needed when running scripts like this.
						# $psArgs - Text holding the command-line arguments.
						[string]$psArgs = "-noexit -ExecutionPolicy Bypass -File `"$tempScriptPath`"" # Note the quotes around the path

						# Set up the ProcessStartInfo object
						$psi = New-Object System.Diagnostics.ProcessStartInfo
						$psi.FileName = $psExe         # The program to run. Make sure $psExe is set!
						$psi.Arguments = $psArgs       # The arguments for the program.
						$psi.UseShellExecute = $true   # MUST be $true to use the 'Verb' property.
						$psi.Verb = 'RunAs'            # Ask for Admin rights (UAC).

						Write-Verbose "  Attempting to start new elevated/32-bit process via temp file: `"$psExe`" $psArgs" -ForegroundColor Cyan
						Write-Verbose "  Temporary script file: $tempScriptPath" -ForegroundColor DarkGray

						# Start the new process
						[System.Diagnostics.Process]::Start($psi) | Out-Null

						# Success (request sent)
						Write-Verbose "  Successfully requested elevated/32-bit process start. Exiting current process." -ForegroundColor Green
						exit 0
					}
					catch
					{
						# Error handling
						Show-ErrorDialog "FATAL: Failed to restart script with required settings (Admin/32-bit/Bypass). Error: $($_.Exception.Message)"
						# Delete the temp file if it failed (might not work if permissions are odd)
						if (Test-Path $tempScriptPath) {
							try { Remove-Item $tempScriptPath -ErrorAction Stop } catch {}
						}
						exit 1
					}
				}
				else
				{
					# Log that the script is already running with the right settings.
					Write-Verbose "  Script already running with required environment settings (Admin, 32-bit, Bypass Policy)." -ForegroundColor Green
				}
			#endregion Step: Perform Restart if Necessary
		}
	#endregion Function: Request-Elevation

	#region Function: Initialize-ScriptEnvironment
		function Initialize-ScriptEnvironment
		{
			<#
			.SYNOPSIS
				Verifies that the script environment meets all requirements *after* any potential restart attempt by Request-Elevation.
			
			.DESCRIPTION
				This function performs final checks to ensure the script is operating in the correct environment before proceeding with core logic.
				It re-validates:
				1. Administrator Privileges: Confirms the script is now running elevated.
				2. 32-bit Mode: Confirms the script is now running in a 32-bit PowerShell process.
				3. Execution Policy: Confirms the process scope execution policy is 'Bypass'. If not (which shouldn't happen if Request-Elevation worked),
				it makes a final attempt to set it using Set-ExecutionPolicy.
				
				If any check fails, it displays a specific error message using Show-ErrorDialog and returns $false.
			
			.OUTPUTS
				[bool] Returns $true if all environment checks pass successfully, otherwise returns $false.
			
			.NOTES
				- This function should be called *after* Request-Elevation. It acts as a final safeguard.
				- Failure here is typically fatal for the application, as indicated by the error messages and the return value.
				- The attempt to set ExecutionPolicy within this function is a fallback; ideally, Request-Elevation should have ensured this.
			#>
			[CmdletBinding()]
			[OutputType([bool])] 
			param()
			
			Write-Verbose "Verifying final script environment settings..." -ForegroundColor Cyan
			try
			{
				#region Step: Verify Administrator Privileges
					# $isAdmin - Flag ($true/$false), $true if the current user is an Admin.
					[bool]$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
					if (-not $isAdmin)
					{
						# Show error and return $false if not running as Admin.
						Show-ErrorDialog 'FATAL: Application requires administrator privileges to run.'
						return $false
					}
					Write-Verbose "[OK] Running with administrator privileges." -ForegroundColor Green
				#endregion Step: Verify Administrator Privileges
				
				#region Step: Verify 32-bit Execution Mode
					# $is32Bit - Flag ($true/$false), $true if the process is 32-bit.
					[bool]$is32Bit = [IntPtr]::Size -eq 4
					if (-not $is32Bit)
					{
						# Show error and return $false if not running in 32-bit mode.
						Show-ErrorDialog 'FATAL: Application must run in 32-bit PowerShell mode.'
						return $false
					}
					Write-Verbose "[OK] Running in 32-bit mode." -ForegroundColor Green
				#endregion Step: Verify 32-bit Execution Mode
				
				#region Step: Verify Process Execution Policy
					# $currentPolicy - Text, the execution policy for this process.
					[string]$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue
					if ($currentPolicy -ne 'Bypass')
					{
						# This is a backup. Ideally, Request-Elevation already set 'Bypass'.
						Write-Verbose "  Process Execution Policy is not 'Bypass' (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })'). Attempting final Set..." -ForegroundColor Yellow
						try
						{
							# Try to force the policy to Bypass for this process.
							Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force -ErrorAction Stop
							# Check again after trying.
							$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue
							if ($currentPolicy -ne 'Bypass')
							{
								# If it still didn't work, report a major error.
								Show-ErrorDialog "FATAL: Failed to set required PowerShell Execution Policy to 'Bypass'.  (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })')."
								return $false
							}
							Write-Verbose "[OK] Execution policy successfully forced to Bypass for this process." -ForegroundColor Green
						}
						catch
						{
							# Catch errors during the last Set-ExecutionPolicy try.
							Show-ErrorDialog "FATAL: Error setting PowerShell Execution Policy to 'Bypass'.  (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })'). Error: $($_.Exception.Message)"
							return $false
						}
					}
					else
					{
						Write-Verbose "[OK] Execution policy is '$currentPolicy'." -ForegroundColor Green
					}
				#endregion Step: Verify Process Execution Policy
				
				# If all checks passed:
				Write-Verbose "  Environment verification successful." -ForegroundColor Green
				return $true
			}
			catch
			{
				# Catch any surprise errors during the check itself.
				Show-ErrorDialog "FATAL: An unexpected error occurred during environment verification: $($_.Exception.Message)"
				return $false
			}
		}
	#endregion Function: Initialize-ScriptEnvironment

	#region Function: Initialize-BaseConfig
		function Initialize-BaseConfig
		{
			<#
			.SYNOPSIS
				Ensures necessary application data directories exist in %APPDATA% and are writable.
			
			.DESCRIPTION
				This function is responsible for setting up the fundamental directory structure required by the application
				within the user's roaming application data folder (%APPDATA%). It specifically checks for and, if necessary, creates:
				1. The main application directory: %APPDATA%\Entropia_Dashboard
				2. The modules subdirectory: %APPDATA%\Entropia_Dashboard\modules
				
				After ensuring the directories exist, it performs a quick write test in each directory by creating and immediately
				deleting a temporary file ('write_test.tmp'). This verifies that the script has the necessary permissions to write
				files (like modules and configuration) to these locations.
			
			.OUTPUTS
				[bool] Returns $true if both directories exist (or were created successfully) AND are verified as writable. Returns $false if
				directory creation fails or if either directory is found to be non-writable.
			
			.NOTES
				- Upon successful completion (returning $true), it sets the global state flag '$global:DashboardConfig.State.ConfigInitialized' to $true.
				- Errors during directory creation or the write test are logged to the error stream and presented to the user via Show-ErrorDialog,
				as these are typically fatal issues preventing the application from functioning correctly.
				- Uses -Force with New-Item to create parent directories if they don't exist.
			#>
			[CmdletBinding()]
			[OutputType([bool])]
			param()

			Write-Verbose "Initializing base configuration directories in %APPDATA%..." -ForegroundColor Cyan
			try
			{
				# List of essential folders that must exist and be writable.
				# $directories - List of text paths for the required folders.
				[string[]]$directories = @(
					$global:DashboardConfig.Paths.App,     # e.g., C:\Users\User\AppData\Roaming\Entropia_Dashboard\
					$global:DashboardConfig.Paths.Modules  # e.g., C:\Users\User\AppData\Roaming\Entropia_Dashboard\modules\
				)
				
				# Go through each needed folder path.
				foreach ($dir in $directories)
				{
					#region Step: Ensure Directory Exists
						# Check if the path exists and is actually a folder (Container).
						if (-not (Test-Path -Path $dir -PathType Container))
						{
							Write-Verbose "  Directory not found. Creating: '$dir'" -ForegroundColor DarkGray
							try
							{
								# Create the folder. -Force makes parent folders too. -ErrorAction Stop stops if it fails.
								$null = New-Item -Path $dir -ItemType Directory -Force -ErrorAction Stop
							}
							catch
							{
								# Handle errors when creating the folder (like permissions, bad path).
								$errorMsg = "  Failed to create required directory '$dir'. Please check permissions or path validity. Error: $($_.Exception.Message)"
								Write-Verbose $errorMsg -ForegroundColor Red
								Show-ErrorDialog $errorMsg
								return $false # Can't continue if creating the folder fails.
							}
						}
						else
						{
							Write-Verbose "  Directory exists: '$dir'" -ForegroundColor DarkGray
						}
					#endregion Step: Ensure Directory Exists
					
					#region Step: Test Directory Writability
						# Make a temporary file path in the current folder for a write test.
						# $testFile - Text, path for the temporary test file.
						[string]$testFile = Join-Path -Path $dir -ChildPath 'write_test.tmp'
						try
						{
							# Try writing a small bit of text to the test file.
							[System.IO.File]::WriteAllText($testFile, 'TestWriteAccess')
							# If writing works, delete the test file right away. -Force skips asking.
							Remove-Item -Path $testFile -Force -ErrorAction Stop
							Write-Verbose "  Directory is writable: '$dir'" -ForegroundColor DarkGray
						}
						catch
						{
							# Handle errors during writing or deleting (probably bad permissions).
							$errorMsg = "  Cannot write to directory '$dir'. Please check permissions. Error: $($_.Exception.Message)"
							Write-Verbose $errorMsg -ForegroundColor Red
							Show-ErrorDialog $errorMsg
							# Try cleaning up the test file just in case it was made but couldn't be deleted.
							if (Test-Path -Path $testFile -PathType Leaf)
							{
								Remove-Item -Path $testFile -Force -ErrorAction SilentlyContinue
							}
							return $false # Can't continue if the folder isn't writable.
						}
					#endregion Step: Test Directory Writability
				} # End of the loop for each directory.
				
				# If the loop finishes without returning false, all folders are ready.
				Write-Verbose "  Base configuration directories initialized and verified successfully." -ForegroundColor Green
				# Set the main state flag.
				$global:DashboardConfig.State.ConfigInitialized = $true
				return $true
			}
			catch
			{
				# Catch any surprise errors during the whole setup process.
				$errorMsg = "  An unexpected error occurred during base configuration directory initialization: $($_.Exception.Message)"
				Write-Verbose $errorMsg -ForegroundColor Red
				Show-ErrorDialog $errorMsg
				return $false
			}
		}
	#endregion Function: Initialize-BaseConfig

#endregion Environment Initialization and Checks

#region Module Handling Functions

	#region Function: Write-Module
        function Write-Module
		{
			<#
			.SYNOPSIS
				Writes module content (from a source file or Base64 string) to the designated modules directory in %APPDATA%, performing hash checks to avoid redundant writes.
			
			.DESCRIPTION
				This function handles the deployment of module files (e.g., .psm1, .dll, .ico) from their source location or embedded Base64 representation
				to the application's 'modules' directory under %APPDATA% (defined in $global:DashboardConfig.Paths.Modules).
				
				Key operations:
				1. Ensures the target 'modules' directory exists, attempting to create it if necessary.
				2. Retrieves the module content as a byte array, either by reading the source file specified by the -Content parameter or by decoding the Base64 string provided via -ContentBase64.
				3. If the target file already exists in the 'modules' directory:
				a. Compares the file size of the existing file with the size of the new content. If different, an update is needed.
				b. If sizes match, calculates the SHA256 hash of both the existing file and the new content in memory.
				c. If the hashes match, the function logs that no update is needed and returns the path to the existing file, avoiding an unnecessary write operation.
				d. If hashes differ, an update is needed.
				4. If the target file does not exist or an update is required (sizes/hashes differ), the function attempts to write the new content (byte array) to the target path.
				5. Includes a simple retry mechanism (up to 5 seconds) with short delays (100ms) specifically for System.IO.IOException errors during the write attempt, which often indicate temporary file locks.
			
			.PARAMETER ModuleName
				[string] The destination filename for the module in the target directory (e.g., 'ui.psm1', 'ftool.dll', 'icon.ico'). (Mandatory)
			
			.PARAMETER Content
				[string] Used in the 'FilePath' parameter set. The full path to the source file containing the module content to be copied. (Mandatory, ParameterSetName='FilePath')
			
			.PARAMETER ContentBase64
				[string] Used in the 'Base64Content' parameter set. A Base64 encoded string containing the module content to be decoded and written. (Mandatory, ParameterSetName='Base64Content')
			
			.OUTPUTS
				[string] Returns the full path to the successfully written (or verified existing and matching) module file in the target 'modules' directory.
				Returns $null if any critical operation fails (e.g., directory creation, source file reading, Base64 decoding, final write attempt after retries).
			
			.NOTES
				- Uses SHA256 hash comparison for efficient and reliable detection of unchanged files.
				- Error handling is implemented for directory creation, file reading, Base64 decoding, hash calculation, and file writing.
				- The write retry loop is basic and may not handle all concurrent access scenarios perfectly but addresses common temporary locks.
				- Uses [System.IO.File]::ReadAllBytes and ::WriteAllBytes for potentially better performance with binary files (.dll, .ico) compared to Get-Content/Set-Content.
			#>
			[CmdletBinding(DefaultParameterSetName = 'FilePath')] # Default to FilePath if only unnamed inputs are used.
			[OutputType([string])]
			param (
				[Parameter(Mandatory = $true, Position = 0)]
				[string]$ModuleName, # e.g., 'ui.psm1'
			
				[Parameter(Mandatory = $true, ParameterSetName = 'FilePath', Position = 1)]
				[ValidateScript({ Test-Path $_ -PathType Leaf })] # Basic check: make sure path exists and is a file.
				[string]$Content, # Source file path, e.g., 'C:\path\to\source\ui.psm1'
			
				[Parameter(Mandatory = $true, ParameterSetName = 'Base64Content')]
				[string]$ContentBase64 # Base64 encoded content text
			)
			
			# Get the destination folder path from the main config.
			# $modulesDir - Text, destination folder for modules.
			[string]$modulesDir = $global:DashboardConfig.Paths.Modules
			# Build the full path for the destination file.
			# $finalPath - Text, full destination path for the module file.
			[string]$finalPath = Join-Path -Path $modulesDir -ChildPath $ModuleName
			
			Write-Verbose "Executing Write-Module for '$ModuleName' to '$finalPath'" -ForegroundColor Cyan
			try
			{
				#region Step: Ensure Target Directory Exists
					# Check if the destination folder exists; try creating it if not.
					if (-not (Test-Path -Path $modulesDir -PathType Container))
					{
						Write-Verbose "Target module directory not found, attempting creation: '$modulesDir'" -ForegroundColor DarkGray
						try
						{
							$null = New-Item -Path $modulesDir -ItemType Directory -Force -ErrorAction Stop
							Write-Verbose "Target module directory created successfully: '$modulesDir'" -ForegroundColor Green
						}
						catch
						{
							# Major error if folder cannot be created.
							Write-Verbose "Failed to create target module directory '$modulesDir': $($_.Exception.Message)" -ForegroundColor Red
							return $null # Cannot continue.
						}
					}
				#endregion Step: Ensure Target Directory Exists
				
				#region Step: Get Content Bytes from Source (File or Base64)
					# $bytes - Array of bytes that will hold the module content.
					[byte[]]$bytes = $null
					Write-Verbose "  ParameterSetName: $($PSCmdlet.ParameterSetName)" -ForegroundColor DarkGray
					
					# Handle Base64 input
					if ($PSCmdlet.ParameterSetName -eq 'Base64Content')
					{
						if ([string]::IsNullOrEmpty($ContentBase64))
						{
							Write-Verbose "  ModuleName '$ModuleName': ContentBase64 parameter was provided but is empty." -ForegroundColor Yellow
							return $null
						}
						try
						{
							$bytes = [System.Convert]::FromBase64String($ContentBase64)
							Write-Verbose "  Decoded Base64 content for '$ModuleName' ($($bytes.Length) bytes)." -ForegroundColor DarkGray
						}
						catch
						{
							# Major error if Base64 decoding fails.
							Write-Verbose "  Failed to decode Base64 content for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
							return $null
						}
					}
					# Handle FilePath input
					elseif ($PSCmdlet.ParameterSetName -eq 'FilePath')
					{
						# File existence already checked by ValidateScript, but double-check path is valid.
						if ([string]::IsNullOrEmpty($Content) -or -not ([System.IO.File]::Exists($Content)) )
						{
							Write-Verbose "  ModuleName '$ModuleName': Source file path '$Content' is invalid or does not exist." -ForegroundColor Red
							return $null # Shouldn't happen with ValidateScript, but good safety check.
						}
						try
						{
							$bytes = [System.IO.File]::ReadAllBytes($Content)
							Write-Verbose "  Read source file content for '$ModuleName' from '$Content' ($($bytes.Length) bytes)." -ForegroundColor DarkGray
						}
						catch
						{
							# Major error if source file cannot be read.
							Write-Verbose "  Failed to read source file '$Content' for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
							return $null
						}
					}
					else # Shouldn't get here because of parameter sets
					{
						Write-Verbose "  ModuleName '$ModuleName': Invalid parameter combination or missing content." -ForegroundColor Red
						return $null
					}
					
					# Final check if the byte array got filled.
					if ($null -eq $bytes)
					{
						Write-Verbose "  Failed to obtain content bytes for '$ModuleName'. Source data might be empty or invalid." -ForegroundColor Red
						return $null
					}
				#endregion Step: Get Content Bytes from Source (File or Base64)
				
				#region Step: Check if File Needs Updating (Size and Hash Comparison)
					# $updateNeeded - Flag ($true/$false), decides if the file needs writing.
					[bool]$updateNeeded = $true
					if (Test-Path -Path $finalPath -PathType Leaf) # Check if the destination file exists.
					{
						Write-Verbose "  Target file exists: '$finalPath'. Comparing size and hash..." -ForegroundColor DarkGray
						try
						{
							# Get info about the existing file.
							# $fileInfo - File info object for the existing file.
							$fileInfo = Get-Item -LiteralPath $finalPath -Force -ErrorAction Stop
							
							# 1. Compare file sizes first (quick check).
							if ($fileInfo.Length -eq $bytes.Length)
							{
								Write-Verbose "  File sizes match ($($bytes.Length) bytes). Comparing SHA256 hashes..." -ForegroundColor DarkGray
								# 2. If sizes match, compare SHA256 hashes.
								# $existingHash - Text, SHA256 hash of the file on disk.
								[string]$existingHash = (Get-FileHash -LiteralPath $finalPath -Algorithm SHA256 -ErrorAction Stop).Hash
								
								# Calculate hash of the new content (bytes) in memory.
								# $memStream - Memory stream to feed bytes to Get-FileHash. 'Using' cleans it up.
								$newHash = try
								{
									$memStream = New-Object System.IO.MemoryStream(,$bytes)
									(Get-FileHash -InputStream $memStream -Algorithm SHA256 -ErrorAction Stop).Hash
								}
								finally
								{
									if ($memStream)
									{
										$memStream.Dispose() 
									}
								}
								
								Write-Verbose " - Existing Hash: $existingHash" -ForegroundColor DarkGray
								Write-Verbose " - New Hash:    - $newHash" -ForegroundColor DarkGray
								
								# If hashes match, no update needed.
								if ($existingHash -eq $newHash)
								{
									Write-Verbose "  Hashes match for '$ModuleName'. No update needed." -ForegroundColor DarkGray
									$updateNeeded = $false
									# Return path to the existing, checked file.
									return $finalPath
								}
								else
								{
									Write-Verbose "  Hashes differ for '$ModuleName'. Update required." -ForegroundColor Yellow 
								}
							}
							else
							{
								Write-Verbose "  File sizes differ (Existing: $($fileInfo.Length), New: $($bytes.Length)). Update required." -ForegroundColor Yellow 
							}
						}
						catch
						{
							# Handle errors during size/hash compare (like file locked, permissions).
							# Log a warning and assume an update is needed.
							Write-Verbose "  Could not compare size/hash for '$ModuleName' (Path: '$finalPath'). Will attempt to overwrite. Error: $($_.Exception.Message)" -ForegroundColor Yellow
							$updateNeeded = $true
						}
					}
					else
					{
						Write-Verbose "  Target file does not exist: '$finalPath'. Writing new file." -ForegroundColor DarkGray 
						$updateNeeded = $true
					}
				#endregion Step: Check if File Needs Updating (Size and Hash Comparison)
				
				#region Step: Write File to Target Path (with Retry on IO Exception)
					if ($updateNeeded)
					{
						# Set up retry settings.
						# $timeoutMilliseconds - Number, max time (ms) to spend retrying the write.
						[int]$timeoutMilliseconds = 5000  # 5 seconds total retry time.
						# $retryDelayMilliseconds - Number, delay (ms) between retries.
						[int]$retryDelayMilliseconds = 100 # Wait 100ms before trying again.
						# $startTime - DateTime, when the retry loop started.
						[datetime]$startTime = Get-Date
						# $fileWritten - Flag ($true/$false) if file was written okay within the time limit.
						[bool]$fileWritten = $false
						# $attempts - Number, counts how many times we tried writing.
						[int]$attempts = 0
						
						Write-Verbose "  Attempting to write file: '$finalPath'" -ForegroundColor DarkGray
						while (((Get-Date) - $startTime).TotalMilliseconds -lt $timeoutMilliseconds)
						{
							$attempts++
							try
							{
								# Try writing all bytes to the final path using a .NET method.
								[System.IO.File]::WriteAllBytes($finalPath, $bytes)
								$fileWritten = $true
								Write-Verbose "  Successfully wrote '$ModuleName' to '$finalPath' on attempt $attempts." -ForegroundColor Green
								break # Exit the retry loop if write worked.
							}
							catch [System.IO.IOException]
							{
								# Catch IO errors specifically (probably file lock). Log warning and retry after delay.
								Write-Verbose "  Attempt $($attempts): IO Error writing '$finalPath' (Retrying in $retryDelayMilliseconds ms): $($_.Exception.Message)" -ForegroundColor Red
								# Check if time is almost up before waiting.
								if (((Get-Date) - $startTime).TotalMilliseconds + $retryDelayMilliseconds -ge $timeoutMilliseconds)
								{
									Write-Verbose "  Timeout nearing, breaking retry loop for '$finalPath'." -ForegroundColor Yellow
									break # Don't wait longer than the timeout.
								}
								Start-Sleep -Milliseconds $retryDelayMilliseconds
							}
							catch
							{
								# Catch other surprise, non-retryable errors during write. Log error and stop loop.
								Write-Verbose "  Attempt $($attempts): Non-IO Error writing '$finalPath': $($_.Exception.Message)" -ForegroundColor Red
								$fileWritten = $false # Make sure flag is false.
								break # Exit loop on non-retryable error.
							}
						} # End of while retry loop
						
						# Check if the file was written okay after the loop.
						if (-not $fileWritten)
						{
							Write-Verbose "  Failed to write module '$ModuleName' to '$finalPath' after $attempts attempts within $timeoutMilliseconds ms timeout." -ForegroundColor Red
							return $null # Return null to show it failed.
						}
					} # End if($updateNeeded)
				#endregion Step: Write File to Target Path (with Retry on IO Exception)
				
				# If we get here, the file exists and is current, or it was just written successfully.
				return $finalPath
			}
			catch
			{
				# Catch any surprise errors in the main function part (like input check failed earlier).
				Write-Verbose "  An unexpected error occurred in Write-Module for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
				return $null
			}
		}
	#endregion Function: Write-Module


	#region Function: Import-ModuleUsingReflection
		# ... (Keep Import-ModuleUsingReflection function as it was) ...
        function Import-ModuleUsingReflection
		{
			<#
			.SYNOPSIS
				(Alternative Method) Imports a PowerShell module by reading, modifying (adding no-op Export-ModuleMember), and executing its content directly in the global scope via Invoke-Command.

			.DESCRIPTION
				This function offers another non-standard way to load a .psm1 module, aiming to address issues where `Import-Module` or `InvokeScript` fail due to `$using:` variables.
				Its process involves:
				1. Reading the entire content of the specified .psm1 file into a string.
				2. Storing the original content in $global:DashboardConfig.Resources.LoadedModuleContent.
				3. Prepending a simple, no-operation `Export-ModuleMember` function definition to the beginning of the content string.
				4. Creating a single `ScriptBlock` object from this modified content string.
				5. Executing this `ScriptBlock` directly in the current (global) execution context using `Invoke-Command -ScriptBlock $scriptBlock`. This method is chosen specifically because `Invoke-Command` executed locally *can* resolve `$using:` variables against the caller's scope.

			.PARAMETER Path
				[string] The full path to the .psm1 module file to be imported using this method. (Mandatory)

			.PARAMETER ModuleName
				[string] The logical name of the module being imported (e.g., 'ui.psm1'), used primarily for logging. (Mandatory)

			.OUTPUTS
				[bool] Returns $true if the `Invoke-Command` execution completes without throwing a terminating error.
				Returns $false if a fatal error occurs (e.g., file not found, terminating error during script execution).
				*Note: Returning $true indicates execution finished, but doesn't guarantee the module loaded correctly or that all its functions are available/working.*

			.NOTES
				- Global Scope Pollution: This method directly defines all functions, variables, and aliases from the module into the global scope.
				- Use Case: Fallback specifically intended to handle modules containing `$using:` variables that cause standard import/InvokeScript methods to fail.
				- Error Handling: Relies on catching terminating errors from `Invoke-Command`. Non-terminating errors within the module code will be logged by PowerShell but won't cause this function to return $false unless `-ErrorAction Stop` was used inside the module code itself.
			#>
			[CmdletBinding()]
			[OutputType([bool])]
			param(
				[Parameter(Mandatory = $true)]
				[ValidateScript({ Test-Path $_ -PathType Leaf })] # Make sure path exists and is a file.
				[string]$Path,

				[Parameter(Mandatory = $true)]
				[string]$ModuleName
			)

			Write-Verbose "Attempting reflection-style import (InvokeCommand in global scope) for '$ModuleName'." -ForegroundColor Cyan

			try
			{
				#region Step: Check File Existence (Redundant with ValidateScript but safe)
					if (-not (Test-Path -Path $Path -PathType Leaf))
					{
						Write-Verbose "Import-ModuleUsingReflection: Module file not found or is not a file: '$Path'" -ForegroundColor Red
						return $false
					}
				#endregion Step: Check File Existence

				#region Step: Read and Store Original Module Content
					[string]$moduleContent = [System.IO.File]::ReadAllText($Path)
					if ($null -eq $moduleContent)
					{
						if (Test-Path -Path $Path -PathType Leaf)
						{
							Write-Verbose "Import-ModuleUsingReflection: Module file '$Path' is empty. Considering import successful (no-op)." -ForegroundColor Yellow
							$global:DashboardConfig.Resources.LoadedModuleContent[$ModuleName] = ''
							return $true
						}
						else
						{
							Write-Verbose "Import-ModuleUsingReflection: Failed to read module file '$Path'." -ForegroundColor Red
							return $false
						}
					}
					# Ensure Resources hashtable exists before storing
                    if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('Resources')) {
                        $global:DashboardConfig['Resources'] = @{}
                    }
                    # Ensure LoadedModuleContent hashtable exists
                     if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and -not $global:DashboardConfig.Resources.ContainsKey('LoadedModuleContent')) {
                        $global:DashboardConfig.Resources['LoadedModuleContent'] = @{}
                    }
					$global:DashboardConfig.Resources.LoadedModuleContent[$ModuleName] = $moduleContent
					Write-Verbose "Read and stored original content for '$ModuleName'." -ForegroundColor DarkGray
				#endregion Step: Read and Store Original Module Content

				#region Step: Prepend No-Op Export-ModuleMember to Content
					# Define a simple Export-ModuleMember to potentially satisfy calls within the script
					# It does NOT actually export anything in the module sense.
					[string]$noOpExportFunc = @"
function Export-ModuleMember { 
	param(
	[string]`$Function, 
	[string]`$Variable, 
	[string]`$Alias, 
	[string]`$Cmdlet
	)
}
"@
					[string]$modifiedContent = @"
$noOpExportFunc

# --- Original Module Content Start ---
$moduleContent
# --- Original Module Content End ---
"@
				#endregion Step: Prepend No-Op Export-ModuleMember to Content

				#region Step: Create ScriptBlock and Execute Globally via Invoke-Command
					Write-Verbose "Creating ScriptBlock and executing modified content globally via Invoke-Command for '$ModuleName'..." -ForegroundColor DarkGray
					[scriptblock]$scriptBlock = [ScriptBlock]::Create($modifiedContent)
					try
					{
						# Execute the script block in the current scope using Invoke-Command
						# This method allows $using: variables to resolve against the caller's scope locally
						$null = Invoke-Command -ScriptBlock $scriptBlock
						
						# Check the automatic variable $? to see if any *non-terminating* errors occurred during execution
						if (-not $?)
						{
							# Log if non-terminating errors happened, but execution still finished
							Write-Verbose "Execution of '$ModuleName' content via Invoke-Command completed, but non-terminating errors occurred within the script (check logs above)." -ForegroundColor Yellow
                            # We still return $true here as execution technically finished, but the caller (Import-DashboardModules)
                            # should perform additional checks (like Get-Command) to verify function availability.
						}
						else
						{
							# Log successful completion of the Invoke-Command call
							Write-Verbose "Successfully finished executing modified script block for '$ModuleName' via Invoke-Command." -ForegroundColor Green
						}
                        # Return true indicating Invoke-Command completed without *terminating* errors.
                        # Does NOT guarantee functions are correctly defined globally.
                        return $true 
					}
					catch # Catch only *terminating* errors from Invoke-Command itself
					{
						Write-Verbose "Terminating error occurred during Invoke-Command execution for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
						Write-Verbose "Stack Trace: $($_.ScriptStackTrace)"
						# Return false indicating a fatal error during execution.
						return $false 
					}
				#endregion Step: Create ScriptBlock and Execute Globally via Invoke-Command
			}
			catch # Catch errors during setup (read file, create scriptblock etc.)
			{
				Write-Verbose "FATAL error during reflection-style import (InvokeCommand) setup for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
				return $false # Return false indicating setup failure
			}
		}
	#endregion Function: Import-ModuleUsingReflection


	#region Function: Import-DashboardModules
		function Import-DashboardModules
		{
			<#
			.SYNOPSIS
				Loads all defined dashboard modules according to priority, dependencies, and execution context (Script vs EXE).
			
			.DESCRIPTION
				This crucial function orchestrates the loading of all modules specified in '$global:DashboardConfig.Modules'.
				It performs the following steps:
				1. Initializes tracking variables for loaded and failed modules.
				2. Determines if the script is running as a compiled EXE or a standard .ps1 script, storing the result in '$global:DashboardConfig.State.IsRunningAsExe'. This influences the import strategy.
				3. Sorts the modules based on the 'Order' property defined in their metadata to ensure correct loading sequence.
				4. Iterates through the sorted modules:
				a. Checks if all dependencies listed for the current module are already present in '$global:DashboardConfig.LoadedModules'. If not, skips the module and records the failure. Critical module dependency failures trigger a critical failure flag.
				b. Calls 'Write-Module' to ensure the module file (or resource like .dll, .ico) exists in the %APPDATA%\modules directory, handling source file paths or Base64 content, and using hash checks for efficiency. If Write-Module fails, records the failure. Critical module write failures trigger the critical failure flag.
				c. If Write-Module succeeds, adds the module name and its written path to '$global:DashboardConfig.LoadedModules'. This satisfies dependency checks for subsequent modules, including non-PSM1 files like DLLs or icons.
				d. If the module is a PowerShell module (.psm1):
				i. Attempts multiple import strategies in sequence until one succeeds:
				- Attempt 1 (Preferred): Standard `Import-Module`. If running as EXE, it first modifies the content in memory to prepend a no-op `Export-ModuleMember`, writes this to a temporary file, imports the temp file, and then deletes it. If running as a script, it imports the written module path directly. Success is verified by checking `Get-Module`.
				- Attempt 2 (Alternative): Calls `Import-ModuleUsingReflection` function (InvokeCommand in global scope). **Crucially, after this attempt returns true, this function now performs an additional verification step using `Get-Command` for key functions expected from the module.** If key functions are missing, Attempt 2 is marked as failed, and the process proceeds to Attempt 3.
				- Attempt 3 (Last Resort): Uses `Invoke-Expression` on the module content after attempting to remove/comment out `Export-ModuleMember` calls using string replacement. This attempt includes its own verification and global re-definition of functions. **(Security Risk)**
				ii. If all import attempts fail for a .psm1 module, records the failure, removes the module from '$global:DashboardConfig.LoadedModules' (as it was written but not imported), and triggers the critical failure flag if the module was critical.
				5. After processing all modules, checks the critical failure flag. If set, returns a status object indicating failure.
				6. Logs warnings for any 'Important' modules that failed and informational messages for 'Optional' module failures.
				7. If no critical failures occurred, returns a status object indicating overall success (though non-critical modules may have failed).
			
			.OUTPUTS
				[PSCustomObject] Returns an object with the following properties:
				- Status [bool]: $true if all 'Critical' modules were successfully written and (if applicable) imported without fatal errors. $false if any 'Critical' module failed or if an unhandled exception occurred.
				- LoadedModules [hashtable]: A hashtable containing {ModuleName = Path} entries for all modules that were successfully written to the AppData directory by Write-Module (includes .psm1, .dll, .ico, etc.). Note that for .psm1, inclusion here doesn't guarantee successful *import*, only successful writing/verification. Check FailedModules for import status.
				- FailedModules [hashtable]: A hashtable containing {ModuleName = ErrorMessage} entries for modules that failed during dependency check, writing (Write-Module), or importing (for .psm1 files).
				- CriticalFailure [bool]: $true if a module marked with Priority='Critical' failed at any stage (dependency, write, or import). $false otherwise.
				- Exception [string]: (Optional) Included only if an unexpected, unhandled exception occurred within the Import-DashboardModules function itself. Contains the exception message.
			
			.NOTES
				- The multi-attempt import strategy for .psm1 files adds complexity but aims for robustness, especially in potentially problematic EXE execution environments.
				- Attempt 2 now includes verification. If it passes, Attempt 3 (Invoke-Expression) is skipped.
				- The use of `Invoke-Expression` (Attempt 3) remains a significant security risk and should ideally be avoided by refactoring modules to work with Attempt 1 or a reliable Attempt 2.
				- Dependency checking relies on modules being added to `$global:DashboardConfig.LoadedModules` *after* successful execution of `Write-Module`.
				- Error reporting distinguishes between Critical, Important, and Optional module failures. Only Critical failures halt the application startup process.
			#>
			[CmdletBinding()]
			[OutputType([PSCustomObject])]
			param()
			
			Write-Verbose "Initializing module import process..." -ForegroundColor Cyan
			
			# Set up the return object structure and internal tracking variables.
			# $result - PSCustomObject to return. Start with default failure state.
			$result = [PSCustomObject]@{
				Status          = $false # Default to failure until proven successful.
				LoadedModules   = $global:DashboardConfig.LoadedModules # Use global directly, shows state during the run.
				FailedModules   = @{}    # List to store {ModuleName = ErrorMessage}.
				CriticalFailure = $false # Flag for critical module failures.
				Exception       = $null  # Placeholder for errors we didn't handle.
			}
			# $failedModules - Local reference to the list inside the result object for easier updates.
			[hashtable]$failedModules = $result.FailedModules
			
			try
			{
				#region Step: Determine Execution Context (EXE vs. Script)
					# Get info about the current running process.
					# $currentProcess - Process object for the current PowerShell instance.
					$currentProcess = Get-Process -Id $PID -ErrorAction Stop # Use Get-Process instead of GetCurrentProcess() for consistent MainModule access.

					# $processPath - Text, the full path of the program file for the current process. Use Path property.
					[string]$processPath = $currentProcess.Path # Use Path property, usually more reliable

					# Check if the process path ends with .exe and is NOT a normal PowerShell program.
					# $isRunningAsExe - Flag ($true/$false).
					[bool]$isRunningAsExe = $processPath -like '*.exe' -and ($processPath -notlike '*powershell.exe' -and $processPath -notlike '*pwsh.exe')
					
                    # Ensure State exists before setting IsRunningAsExe
                    if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('State')) {
                        $global:DashboardConfig['State'] = @{}
                    }
                    if ($global:DashboardConfig -and $global:DashboardConfig.State) {
					    $global:DashboardConfig.State.IsRunningAsExe = $isRunningAsExe # Store globally.
                    }
					Write-Verbose "  Execution context detected: $(if($isRunningAsExe){'Compiled EXE'} else {'PowerShell Script'}) (Process Path: '$processPath')" -ForegroundColor DarkGray
				#endregion Step: Determine Execution Context (EXE vs. Script)
				
				#region Step: Sort Modules by Defined 'Order' Property
					Write-Verbose "  Sorting modules based on 'Order' property..." -ForegroundColor DarkGray
					# $sortedModules - A list of module entries (Key/Value pairs) sorted by the 'Order' value in the module's info.
					# Need to handle errors if module config is messed up.
					$sortedModules = $global:DashboardConfig.Modules.GetEnumerator() |
					Where-Object {
						# Basic check: Make sure key exists and value is a hashtable with an 'Order' property.
						$_.Value -is [hashtable] -and $_.Value.ContainsKey('Order') -and $_.Value.Order -is [int]
					} |
					Sort-Object { $_.Value.Order } -ErrorAction SilentlyContinue # Sort based on the number 'Order' value.
					
					if (-not $sortedModules -or $sortedModules.Count -ne $global:DashboardConfig.Modules.Count)
					{
						# Check if sorting failed or if some modules were skipped due to bad structure.
						$invalidModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { -not ($_.Value -is [hashtable] -and $_.Value.ContainsKey('Order') -and $_.Value.Order -is [int]) }
						$errorMessage = "  Failed to sort modules or found invalid module configurations. Check structure in `$global:DashboardConfig.Modules."
						if ($invalidModules)
						{
							$errorMessage += " Invalid modules: $($invalidModules.Key -join ', ')"
						}
						Write-Verbose $errorMessage -ForegroundColor Red
						$result.Status = $false
						$result.CriticalFailure = $true # Treat sorting/config errors as critical.
						$failedModules['Module Sorting/Validation'] = $errorMessage
						return $result # Return failure right away.
					}
					Write-Verbose "  Processing $($sortedModules.Count) modules in defined order." -ForegroundColor DarkGray
				#endregion Step: Sort Modules by Defined 'Order' Property
				
				#region Step: Process Each Module in Sorted Order
					foreach ($entry in $sortedModules)
					{
						# $moduleName - Text, the key/filename of the module (e.g., 'ui.psm1').
						[string]$moduleName = $entry.Key
						# $moduleInfo - Hashtable holding info for this module (Priority, Order, Dependencies, FilePath/Base64Content).
						$moduleInfo = $entry.Value # Already checked as a hashtable during sorting.
						
						Write-Verbose "Processing Module: '$moduleName' (Priority: $($moduleInfo.Priority), Order: $($moduleInfo.Order))" -ForegroundColor Cyan
						
						#region SubStep: Check Dependencies
							Write-Verbose "- Checking dependencies..." -ForegroundColor DarkGray
							# $dependenciesMet - Flag ($true/$false), assume true until a missing dependency found.
							[bool]$dependenciesMet = $true
							# Check if Dependencies key exists, is an array, and has items.
							if ($moduleInfo.Dependencies -and $moduleInfo.Dependencies -is [array] -and $moduleInfo.Dependencies.Count -gt 0)
							{
								Write-Verbose "  - Required: $($moduleInfo.Dependencies -join ', ')" -ForegroundColor DarkGray
								foreach ($dependency in $moduleInfo.Dependencies)
								{
									# Check if the dependency is a key in the *global* loaded modules list.
									if (-not $global:DashboardConfig.LoadedModules.ContainsKey($dependency))
									{
										$errorMessage = "- Dependency NOT MET: Module '$dependency' must be loaded before '$moduleName'."
										Write-Verbose "- $errorMessage" -ForegroundColor Yellow
										$failedModules[$moduleName] = $errorMessage
										$dependenciesMet = $false
										# Check if this failure is critical.
										if ($moduleInfo.Priority -eq 'Critical')
										{
											Write-Verbose "- CRITICAL FAILURE: Critical module '$moduleName' cannot load due to missing dependency '$dependency'." -ForegroundColor Red
											$result.CriticalFailure = $true
										}
										break # No need to check more dependencies for this module.
									}
									else
									{
										Write-Verbose "  - Dependency satisfied: '$dependency' is loaded." -ForegroundColor DarkGray
									}
								}
							}
							else
							{
								Write-Verbose "  - No dependencies listed for '$moduleName'." -ForegroundColor DarkGray
							}
							
							# If dependencies aren't met, skip the rest of this module.
							if (-not $dependenciesMet)
							{
								continue
							} # Go to the next module in the loop.
						
						#endregion SubStep: Check Dependencies
						
						#region SubStep: Write Module to AppData Directory (Using Write-Module)
							# $modulePath - Text, path where module was written/checked. $null on failure.
							[string]$modulePath = $null
							Write-Verbose "- Ensuring module file exists in AppData via Write-Module for '$moduleName'..." -ForegroundColor DarkGray
							
							# Call Write-Module, giving inputs based on module's config (FilePath or Base64Content).
							try
							{
								if ($moduleInfo.ContainsKey('FilePath'))
								{
									[string]$sourceFilePath = $moduleInfo.FilePath
									# --- Add check for source file path ---
									if (-not (Test-Path $sourceFilePath -PathType Leaf)) {
										throw "Source FilePath specified in config does not exist or is not a file: '$sourceFilePath'"
									}
									Write-Verbose "Calling Write-Module with source FilePath: '$sourceFilePath'" -ForegroundColor Cyan
									$modulePath = Write-Module -ModuleName $moduleName -Content $sourceFilePath -ErrorAction Stop # Use Stop to catch errors here.
								}
								elseif ($moduleInfo.ContainsKey('Base64Content'))
								{
									[string]$base64Content = $moduleInfo.Base64Content
									Write-Verbose "Calling Write-Module with Base64Content (Length: $($base64Content.Length))" -ForegroundColor Cyan
									# Make sure content isn't null/empty before passing
									if ([string]::IsNullOrEmpty($base64Content))
									{
										throw "Base64Content for module '$moduleName' is empty."
									}
									$modulePath = Write-Module -ModuleName $moduleName -ContentBase64 $base64Content -ErrorAction Stop
								}
								else
								{
									# Shouldn't get here if sorting check worked.
									throw "Invalid module configuration format for '$moduleName' - missing FilePath or Base64Content."
								}
									
								# Check if Write-Module returned a valid path.
								if ([string]::IsNullOrEmpty($modulePath))
								{
									# Write-Module should ideally error out on failure with ErrorAction Stop, but double-check.
									throw "Write-Module returned null or empty path for '$moduleName', indicating write failure."
								}
									
								Write-Verbose "- [OK] Module file ready/verified: '$modulePath'" -ForegroundColor Green
								# Add/Update path in global loaded modules list. Happens for ALL written files (.psm1, .dll, .ico).
								# This is key for checking dependencies of non-PSM1 files.
                                # Ensure LoadedModules hashtable exists
                                if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('LoadedModules')) {
                                    $global:DashboardConfig['LoadedModules'] = @{}
                                }
                                if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules) {
								    $global:DashboardConfig.LoadedModules[$moduleName] = $modulePath
                                }
									
							}
							catch
							{
								# Catch errors from Write-Module call or the code block above.
								$errorMessage = "- Failed to write or verify module file for '$moduleName'. Error: $($_.Exception.Message)"
								Write-Verbose "- $errorMessage" -ForegroundColor Red
								$failedModules[$moduleName] = $errorMessage
								# Check if this failure is critical.
								if ($moduleInfo.Priority -eq 'Critical')
								{
									Write-Verbose "- CRITICAL FAILURE: Failed to write critical module '$moduleName'." -ForegroundColor Red
									$result.CriticalFailure = $true
								}
								continue # Go to the next module.
							}
						#endregion SubStep: Write Module to AppData Directory (Using Write-Module)
							
						#region SubStep: Import PowerShell Modules (.psm1)
							# Only try PowerShell import steps if the module is a .psm1 file.
							if ($moduleName -like '*.psm1')
							{
								Write-Verbose "Attempting to import PowerShell module '$moduleName' from '$modulePath'..." -ForegroundColor Cyan
								# $importSuccess - Flag ($true/$false) for successful import of this specific PSM1 module.
								[bool]$importSuccess = $false
								# $importErrorDetails - Text to store failure details if all tries fail.
								[string]$importErrorDetails = 'All import attempts failed.'
								[string]$moduleBaseName = [System.IO.Path]::GetFileNameWithoutExtension($moduleName)

								# --- Import Try 1: Standard Import-Module (with EXE changes if needed) ---
								if (-not $importSuccess)
								{
									Write-Verbose "- Attempt 1: Using standard Import-Module..." -ForegroundColor Cyan
									try
									{
										# $effectiveModulePath - Path for Import-Module (might be temp path for EXE).
										[string]$effectiveModulePath = $modulePath
										# $tempModulePath - Path to temp changed file if running as EXE.
										[string]$tempModulePath = $null
											
										if ($isRunningAsExe)
										{
											Write-Verbose "  - (Running as EXE: Prepending no-op Export-ModuleMember to temporary file for import)" -ForegroundColor DarkGray
											# Create a unique temporary file path.
											$tempModulePath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), ('{0}_{1}.psm1' -f $moduleBaseName, [System.Guid]::NewGuid().ToString('N')))
											Write-Verbose "  - Temp file path: $tempModulePath" -ForegroundColor DarkGray
												
											# Read original content (already in global config or re-read to be safe).
											# $originalContent - Text, content of the module.
                                            # Ensure Resources and LoadedModuleContent exist
                                            [string]$originalContent = $null
                                            if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.LoadedModuleContent -and $global:DashboardConfig.Resources.LoadedModuleContent.ContainsKey($moduleName)) {
											    $originalContent = $global:DashboardConfig.Resources.LoadedModuleContent[$moduleName]
                                            }
											if ($null -eq $originalContent)
											{
												$originalContent = [System.IO.File]::ReadAllText($modulePath)
											} # Re-read if not found
												
											# Define the dummy function text.
											$noOpExportFunc = "function Export-ModuleMember { param([Parameter(ValueFromPipeline=`$true)][string[]]`$Function, [string[]]`$Variable, [string[]]`$Alias, [string[]]`$Cmdlet) { Write-Verbose ""Ignoring Export-ModuleMember (EXE Mode Import for '$($using:moduleName)')"" -ForegroundColor Cyan} }"
											# Add to beginning and write to temp file using UTF8 encoding.
											Set-Content -Path $tempModulePath -Value "$noOpExportFunc`n`n# --- Original module content ($moduleName) follows ---`n$originalContent" -Encoding UTF8 -Force -ErrorAction Stop
											$effectiveModulePath = $tempModulePath # Use the temp path for import.
										}
											
										# Run Import-Module. -Force re-imports if already loaded (good for dev/debug).
										Import-Module -Name $effectiveModulePath -Force -ErrorAction Stop
											
										# Check module loaded okay by using Get-Module with the base name.
										if (Get-Module -Name $moduleBaseName -ErrorAction SilentlyContinue)
										{
											$importSuccess = $true
											Write-Verbose "- [OK] Attempt 1: SUCCESS (Standard Import-Module verified for '$moduleBaseName')." -ForegroundColor Green
										}
										else
										{
											# This might happen if Import-Module finishes but the module somehow doesn't show up right.
											Write-Verbose "- Attempt 1: FAILED (Standard Import-Module) - Module '$moduleBaseName' not found via Get-Module after import call." -ForegroundColor Yellow
											$importErrorDetails = "Standard Import-Module completed but module '$moduleBaseName' could not be verified via Get-Module."
											# If import failed, make sure any existing module state is removed before trying next way.
											Remove-Module -Name $moduleBaseName -Force -ErrorAction SilentlyContinue
										}
											
									}
									catch
									{
										Write-Verbose "- Attempt 1: FAILED (Standard Import-Module Error): $($_.Exception.Message)" -ForegroundColor Yellow
										$importErrorDetails = "Standard Import-Module Error: $($_.Exception.Message)"
										# Make sure any partial/failed module state is removed.
										Remove-Module -Name $moduleBaseName -Force -ErrorAction SilentlyContinue
									}
									finally
									{
										# Clean up temp file if one was made for EXE mode.
										if ($tempModulePath -and (Test-Path $tempModulePath))
										{
											Write-Verbose "  - Cleaning up temporary file: $tempModulePath" -ForegroundColor DarkGray
											Remove-Item -Path $tempModulePath -Force -ErrorAction SilentlyContinue
										}
									}
								} # End Try 1
																	
								# --- Import Try 2: Import-ModuleUsingReflection (WITH VERIFICATION) ---
								if (-not $importSuccess)
								{
									# Check if the alternative function exists.
									if (Get-Command Import-ModuleUsingReflection -ErrorAction SilentlyContinue)
									{
										Write-Verbose "- Attempt 2: Using alternative Import-ModuleUsingReflection (InvokeCommand)..." -ForegroundColor Yellow
										try
										{
                                            # Call the reflection import function
											if (Import-ModuleUsingReflection -Path $modulePath -ModuleName $moduleName -ErrorAction Stop)
											{
                                                # --- Verification Step Added ---
                                                Write-Verbose "  - Attempt 2: InvokeCommand finished. Verifying key functions globally for '$moduleName'..." -ForegroundColor Magenta

                                                # Get the list of expected functions for this module (reuse from Attempt 3 logic)
                                                $keyFunctionsToVerify = @()
                                                if ($moduleName -eq 'ini.psm1')       { $keyFunctionsToVerify = @('Initialize-IniConfig', 'Get-IniFileContent', 'Read-Config', 'Write-Config', 'Copy-OrderedDictionary', 'LoadDefaultConfigOnError') }
                                                elseif ($moduleName -eq 'ui.psm1') { $keyFunctionsToVerify = @('Initialize-UI', 'Set-UIElement', 'Show-SettingsForm', 'Hide-SettingsForm', 'Sync-ConfigToUI', 'Sync-UIToConfig', 'Register-UIEventHandlers') }
                                                elseif ($moduleName -eq 'datagrid.psm1') { $keyFunctionsToVerify = @('Test-ValidParameters', 'Get-ProcessList', 'Remove-TerminatedProcesses', 'New-RowLookupDictionary', 'Update-ExistingRow', 'UpdateRowIndices', 'Add-NewProcessRow', 'Start-WindowStateCheck', 'Find-TargetRow', 'Clear-OldProcessCache', 'Update-DataGrid', 'Start-DataGridUpdateTimer' ) }
                                                elseif ($moduleName -eq 'launch.psm1')   { $keyFunctionsToVerify = @('Start-ClientLaunch', 'Stop-ClientLaunch') }
                                                elseif ($moduleName -eq 'login.psm1')    { $keyFunctionsToVerify = @('Restore-Window', 'Set-WindowForeground', 'Test-UserMouseIntervention', 'Wait-ForResponsive', 'Wait-ForFileAccess', 'Write-LogWithRetry', 'Invoke-MouseClick', 'Invoke-KeyPress', 'LoginSelectedRow') }
                                                elseif ($moduleName -eq 'ftool.psm1')    { $keyFunctionsToVerify = @('LoadFtoolSettings', 'FindOrCreateProfile', 'InitializeExtensionTracking', 'GetNextExtensionNumber', 'FindExtensionKeyByControl', 'LoadExtensionSettings', 'UpdateSettings', 'CreatePositionTimer', 'RepositionExtensions', 'CreateSpammerTimer', 'ToggleButtonState', 'CheckRateLimit', 'AddFormCleanupHandler', 'CleanupInstanceResources', 'Stop-FtoolForm', 'RemoveExtension', 'FtoolSelectedRow', 'CreateFtoolForm', 'AddFtoolEventHandlers', 'CreateExtensionPanel', 'AddExtensionEventHandlers') }
                                                
                                                [bool]$attempt2VerificationPassed = $true # Assume success until proven otherwise
                                                [string]$missingFunction = $null

                                                if ($keyFunctionsToVerify.Count -gt 0) {
                                                    foreach ($funcName in $keyFunctionsToVerify) {
                                                        if (-not (Get-Command -Name $funcName -CommandType Function -ErrorAction SilentlyContinue)) {
                                                            $attempt2VerificationPassed = $false
                                                            $missingFunction = $funcName
                                                            Write-Verbose "  - Attempt 2: VERIFICATION FAILED. Function '$funcName' not found globally after InvokeCommand." -ForegroundColor Red
                                                            $importErrorDetails = "Attempt 2 (InvokeCommand) completed but verification failed: Function '$funcName' not found globally."
                                                            break # Stop checking if one is missing
                                                        }
                                                    }
                                                } else {
                                                    Write-Verbose "  - Attempt 2: No specific key functions listed for verification for '$moduleName'. Assuming success based on InvokeCommand completion." -ForegroundColor DarkGray
                                                    # If no functions to verify, trust the $true return from Import-ModuleUsingReflection
                                                    $attempt2VerificationPassed = $true 
                                                }

                                                # Set final import success based on verification
                                                if ($attempt2VerificationPassed) {
                                                    Write-Verbose "- [OK] Attempt 2: SUCCESS (InvokeCommand completed AND key functions verified for '$moduleName')." -ForegroundColor Green
													$importSuccess = $true
                                                } else {
                                                    # Failure already logged above
                                                    $importSuccess = $false
                                                }
                                                # --- End Verification Step ---
											}
											else # Import-ModuleUsingReflection returned false (fatal error during its execution)
											{
												Write-Verbose "- Attempt 2: FAILED (Import-ModuleUsingReflection returned false)." -ForegroundColor Yellow
												$importErrorDetails = 'Import-ModuleUsingReflection returned false (fatal execution error).'
                                                $importSuccess = $false # Ensure flag is false
											}
										}
										catch # Catch errors *calling* Import-ModuleUsingReflection
										{
											Write-Verbose "- Attempt 2: FAILED (Error calling Import-ModuleUsingReflection): $($_.Exception.Message)" -ForegroundColor Yellow
											$importErrorDetails = "Error calling Import-ModuleUsingReflection: $($_.Exception.Message)"
                                            $importSuccess = $false # Ensure flag is false
										}
									}
									else # Import-ModuleUsingReflection command not found
									{
										Write-Verbose "- Attempt 2: SKIPPED (Import-ModuleUsingReflection function not found)." -ForegroundColor Yellow
									}
								} # End Try 2
									
								# --- Import Try 3: Direct Invoke-Expression (Last Resort - Security Risk!) ---
								# This only runs if $importSuccess is still $false after Attempt 1 and Attempt 2 (including verification)
								if (-not $importSuccess)
								{
									Write-Verbose "- Attempt 3: Using LAST RESORT Invoke-Expression (Security Risk!)..." -ForegroundColor Yellow
									# === Add a variable to track functions caught just in *this* try ===
									$functionsCapturedInThisAttempt = @{}
									try
									{
										# Read module content (might be saved in global config).
                                        [string]$invokeContent = $null
                                        if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.LoadedModuleContent -and $global:DashboardConfig.Resources.LoadedModuleContent.ContainsKey($moduleName)) {
                                            $invokeContent = $global:DashboardConfig.Resources.LoadedModuleContent[$moduleName]
                                        }
										if ($null -eq $invokeContent)
										{
											$invokeContent = [System.IO.File]::ReadAllText($modulePath)
										} # Re-read if needed.

										# Basic try to disable Export-ModuleMember calls using multi-line regex replace.
										$invokeContent = $invokeContent -replace '(?m)^\s*Export-ModuleMember.*', "# Export-ModuleMember call disabled by Invoke-Expression wrapper for $moduleName"

										# Run the (maybe changed) content directly in the global space.
										Invoke-Expression -Command $invokeContent -ErrorAction Stop

										# First check if IEX finished without MAJOR error
										$iexCompletedWithoutTerminatingError = $?

										# Check key functions right away AND grab them if found
										$keyFunctionsToCapture = @()
										# --- LIST ALL EXPECTED EXPORTED/USED FUNCTIONS FOR EACH MODULE ---
										if ($moduleName -eq 'ini.psm1')       { $keyFunctionsToCapture = @('Initialize-IniConfig', 'Get-IniFileContent', 'Read-Config', 'Write-Config', 'Copy-OrderedDictionary', 'LoadDefaultConfigOnError') }
										elseif ($moduleName -eq 'ui.psm1') { $keyFunctionsToCapture = @('Initialize-UI', 'Set-UIElement', 'Show-SettingsForm', 'Hide-SettingsForm', 'Sync-ConfigToUI', 'Sync-UIToConfig', 'Register-UIEventHandlers') }
										elseif ($moduleName -eq 'datagrid.psm1') { $keyFunctionsToCapture = @('Test-ValidParameters', 'Get-ProcessList', 'Remove-TerminatedProcesses', 'New-RowLookupDictionary', 'Update-ExistingRow', 'UpdateRowIndices', 'Add-NewProcessRow', 'Start-WindowStateCheck', 'Find-TargetRow', 'Clear-OldProcessCache', 'Update-DataGrid', 'Start-DataGridUpdateTimer' ) }
										elseif ($moduleName -eq 'launch.psm1')   { $keyFunctionsToCapture = @('Start-ClientLaunch', 'Stop-ClientLaunch') }
										elseif ($moduleName -eq 'login.psm1')    { $keyFunctionsToCapture = @('Restore-Window', 'Set-WindowForeground', 'Test-UserMouseIntervention', 'Wait-ForResponsive', 'Wait-ForFileAccess', 'Write-LogWithRetry', 'Invoke-MouseClick', 'Invoke-KeyPress', 'LoginSelectedRow') }
										elseif ($moduleName -eq 'ftool.psm1')    { $keyFunctionsToCapture = @('LoadFtoolSettings', 'FindOrCreateProfile', 'InitializeExtensionTracking', 'GetNextExtensionNumber', 'FindExtensionKeyByControl', 'LoadExtensionSettings', 'UpdateSettings', 'CreatePositionTimer', 'RepositionExtensions', 'CreateSpammerTimer', 'ToggleButtonState', 'CheckRateLimit', 'AddFormCleanupHandler', 'CleanupInstanceResources', 'Stop-FtoolForm', 'RemoveExtension', 'FtoolSelectedRow', 'CreateFtoolForm', 'AddFtoolEventHandlers', 'CreateExtensionPanel', 'AddExtensionEventHandlers') }

										# Create captured functions storage if it doesn't exist
                                        if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and -not $global:DashboardConfig.Resources.ContainsKey('CapturedFunctions')) {
											$global:DashboardConfig.Resources['CapturedFunctions'] = @{}
										}

										$captureSuccess = $true # Assume capture worked at first
										$criticalFunctionMissing = $false

										if ($keyFunctionsToCapture.Count -gt 0) {
											Write-Verbose "- Attempt 3: Verifying and capturing key functions for '$moduleName' immediately after IEX..." -ForegroundColor Magenta
											foreach ($funcName in $keyFunctionsToCapture) {
												$funcInfo = Get-Command -Name $funcName -CommandType Function -ErrorAction SilentlyContinue
												if ($funcInfo) {
													$capturedScriptBlock = $funcInfo.ScriptBlock
													Write-Verbose "  - Found and capturing ScriptBlock for '$funcName'." -ForegroundColor Magenta
													# Store globally for possible later use (though direct global definition is main now)
                                                    if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.CapturedFunctions) {
													    $global:DashboardConfig.Resources.CapturedFunctions[$funcName] = $capturedScriptBlock
                                                    }
													# === Store locally for immediate global definition ===
													$functionsCapturedInThisAttempt[$funcName] = $capturedScriptBlock
												} else {
													Write-Verbose "  - WARNING: Could not find/capture function '$funcName' immediately after IEX for '$moduleName'." -ForegroundColor Yellow
													$captureSuccess = $false
													# Check if the missing function is critical FOR STARTUP
													# --- Adjusted Critical Function Check ---
													$isCriticalModule = $moduleInfo.Priority -eq 'Critical' 
													# Consider a function critical if it's in a Critical module AND in the key function list
													if ($isCriticalModule) { 
													    $criticalFunctionMissing = $true
													    $importErrorDetails += "; Critical function '$funcName' not found after IEX in Critical module '$moduleName'"
                                                        Write-Verbose "    - Missing function '$funcName' is considered critical for module '$moduleName'." -ForegroundColor Red
													} else {
                                                         $importErrorDetails += "; Non-critical function '$funcName' not found after IEX for module '$moduleName'"
                                                    }
                                                    # --- End Adjusted Critical Function Check ---
												}
											}
										}

										# Decide overall success for Try 3
										# Success means IEX didn't have non-terminating errors ($?),
										# capture succeeded, AND no *critical* functions were missing.
										if ($iexCompletedWithoutTerminatingError -and $captureSuccess -and (-not $criticalFunctionMissing)) {
											Write-Verbose "  - Attempt 3: IEX completed and key functions captured/verified for '$moduleName'." -ForegroundColor DarkGreen

											# === Define captured functions globally RIGHT AWAY ===
											Write-Verbose "  - Defining captured functions globally for '$moduleName'..." -ForegroundColor Magenta
											$definitionSuccess = $true # Track success of this small step
											foreach ($kvp in $functionsCapturedInThisAttempt.GetEnumerator()) {
												$funcNameToDefine = $kvp.Key
												$scriptBlockToDefine = $kvp.Value
												try {
													# Define in global function space
													Set-Item -Path "Function:\global:$funcNameToDefine" -Value $scriptBlockToDefine -Force -ErrorAction Stop
													Write-Verbose "    - Defined Function:\global:$funcNameToDefine" -ForegroundColor DarkMagenta
												} catch {
													Write-Verbose "    - FAILED to define Function:\global:$funcNameToDefine globally: $($_.Exception.Message)" -ForegroundColor Red
													$definitionSuccess = $false
													$importErrorDetails += "; Failed to define captured function '$funcNameToDefine' globally."
													# If defining a critical function fails, mark critical failure for the whole import process
                                                    # --- Adjusted Critical Function Check ---
                                                    if ($moduleInfo.Priority -eq 'Critical') {
														$result.CriticalFailure = $true
														Write-Verbose "    - Defining critical function '$funcNameToDefine' failed. Marking import as critical failure." -ForegroundColor Red
													}
                                                     # --- End Adjusted Critical Function Check ---
													break # Stop trying to define others for this module if one fails
												}
											}

											# Only mark the whole import successful if definitions also worked
											if ($definitionSuccess) {
												$importSuccess = $true
												Write-Verbose "- [OK] Attempt 3: SUCCESS (Invoke-Expression completed, key functions captured AND globally defined for $moduleName)." -ForegroundColor Green
											} else {
												$importSuccess = $false # Failed during definition
												Write-Verbose "- Attempt 3: FAILED during global definition phase for $moduleName." -ForegroundColor Red
											}

										} else { # IEX failed, capture failed, or critical function missing
											Write-Verbose "- Attempt 3: FAILED (IEX completed=$iexCompletedWithoutTerminatingError, CaptureSuccess=$captureSuccess, CriticalMissing=$criticalFunctionMissing) for $moduleName." -ForegroundColor Red
											if (-not $iexCompletedWithoutTerminatingError) { $importErrorDetails += "; IEX failed with non-terminating error detected by `$?."}
                                            if ($criticalFunctionMissing) { $importErrorDetails += "; Critical function missing prevented Attempt 3 success." }
                                            if (-not $captureSuccess) { $importErrorDetails += "; Function capture failed during Attempt 3." }
											$importSuccess = $false # Make sure import is marked as failed
										}
									}
									catch # Catch MAJOR errors from Invoke-Expression itself
									{
										Write-Verbose "- Attempt 3: FAILED (Invoke-Expression Error): $($_.Exception.Message)" -ForegroundColor Red
										$importErrorDetails = "Invoke-Expression Error: $($_.Exception.Message)"
										$importSuccess = $false # Make sure success is false if IEX throws major error
									}
								} # End Try 3

								# --- Final Check for PSM1 Import Success --- 
								if ($importSuccess)
								{
									Write-Verbose "- [OK] Successfully imported PSM1 module: '$moduleName'." -ForegroundColor Green
									# Module already added to $global:DashboardConfig.LoadedModules after Write-Module step.
								}
								else
								{
									$errorMessage = "All import methods FAILED for PSM1 module: '$moduleName'. Last error detail: $importErrorDetails"
									Write-Verbose "- $errorMessage" -ForegroundColor Red
									$failedModules[$moduleName] = $errorMessage
									# Critical: Remove from LoadedModules list if import failed after writing okay, as it's not really usable.
									if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules -and $global:DashboardConfig.LoadedModules.ContainsKey($moduleName))
									{
										Write-Verbose "- Removing '$moduleName' from LoadedModules list due to import failure." -ForegroundColor Yellow
										$global:DashboardConfig.LoadedModules.Remove($moduleName)
									}
									# Check if this failure is critical.
									if ($moduleInfo.Priority -eq 'Critical')
									{
										Write-Verbose "- CRITICAL FAILURE: Failed to import critical PSM1 module '$moduleName'." -ForegroundColor Red
										$result.CriticalFailure = $true
									}
								}
							}
						#endregion SubStep: Import PowerShell Modules (.psm1)
					} # End foreach ($entry in $sortedModules)
				#endregion Step: Process Each Module in Sorted Order
					
				#region Step: Final Status Check and Result Construction
					Write-Verbose "Module import check..." -ForegroundColor Cyan
						
					# Check for Critical Failures gathered during the loop.
					if ($result.CriticalFailure)
					{
						Write-Verbose "  CRITICAL FAILURE: One or more critical modules failed to load or write. Application cannot continue." -ForegroundColor Red
						# Find which critical modules exactly failed.
						$criticalModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Critical' }
						$failedCritical = $criticalModules | Where-Object { $failedModules.ContainsKey($_.Key) }
						if ($failedCritical)
						{
							Write-Verbose "  Failed critical modules: $($failedCritical.Key -join ', ')" -ForegroundColor Red
							$failedCritical | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor Red } 
						}
						$result.Status = $false # Make sure status is false.
						# Return the result object showing critical failure.
						return $result
					}
						
					# Report Important Module Failures (as Warnings).
					$importantModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Important' }
					$failedImportant = $importantModules | Where-Object { $failedModules.ContainsKey($_.Key) }
					if ($failedImportant.Count -gt 0)
					{
						Write-Verbose "  IMPORTANT module failures detected: $($failedImportant.Key -join ', '). Application may have limited functionality." -ForegroundColor Yellow
						# Log details of failures for important modules.
						$failedImportant | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor Yellow } 
					}
						
					# Report Optional Module Failures (as Info/DarkYellow).
					$optionalModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Optional' }
					$failedOptional = $optionalModules | Where-Object { $failedModules.ContainsKey($_.Key) }
					if ($failedOptional.Count -gt 0)
					{
						Write-Verbose "  Optional module failures detected: $($failedOptional.Key -join ', '). Non-essential features might be unavailable." -ForegroundColor DarkYellow
						# Log details.
						$failedOptional | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor DarkGray }
					}
						
					# If no critical failures happened, the whole process is seen as successful for startup.
                    $successCount = 0
                    if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules) {
                        $successCount = $global:DashboardConfig.LoadedModules.Count
                    }
					$failCount = $failedModules.Count
					Write-Verbose "  Module loading phase complete. Modules written/verified: $successCount. Failures (any type): $failCount." -ForegroundColor DarkGray
					if ($successCount -gt 0)
					{
						Write-Verbose "  Successfully written/verified modules: $($global:DashboardConfig.LoadedModules.Keys -join ', ')" -ForegroundColor DarkGray
					}
					if ($failCount -gt 0)
					{
						Write-Verbose "  Failed modules logged above." -ForegroundColor Yellow
					}
						
					# Set final status to true as no critical failures happened.
					$result.Status = $true
					$result.CriticalFailure = $false # Explicitly set false.
					# Return the final result object.
					return $result
				#endregion Step: Final Status Check and Result Construction
			}
			catch
			{
				# Catch surprise, unhandled errors within the main Import-DashboardModules function body.
				$errorMessage = "  FATAL UNHANDLED EXCEPTION in Import-DashboardModules: $($_.Exception.Message)"
				Write-Verbose $errorMessage -ForegroundColor Red
				Write-Verbose "  Stack trace: $($_.ScriptStackTrace)" -ForegroundColor Red
				# Fill and return the result object showing critical failure due to the error.
				$result.Status = $false
				$result.CriticalFailure = $true
				$result.Exception = $_.Exception.Message # Store error message.
				$failedModules['Unhandled Exception'] = $errorMessage # Add to failed modules list.
				return $result
			}
		}
	#endregion Function: Import-DashboardModules

#endregion Module Handling Functions
	
#region UI and Application Lifecycle Functions

	#region Function: Start-Dashboard
		function Start-Dashboard
		{
			<#
				.SYNOPSIS
					Initializes and displays the main dashboard user interface (UI) form.
				
				.DESCRIPTION
					This function orchestrates the startup of the application's graphical user interface. It performs these actions:
					1. Checks if the 'Initialize-UI' function, expected to be loaded from the 'ui.psm1' module, exists using `Get-Command`. If not found, it throws a terminating error as the UI cannot be built.
					2. Calls the `Initialize-UI` function. It assumes this function is responsible for creating all UI elements (forms, controls) and populating the '$global:DashboardConfig.UI' hashtable, including setting '$global:DashboardConfig.UI.MainForm'.
					3. Checks the return value of `Initialize-UI`. If it returns $false or null (interpreted as failure), it throws a terminating error.
					4. Verifies that '$global:DashboardConfig.UI.MainForm' exists and is a valid '[System.Windows.Forms.Form]' object after `Initialize-UI` returns successfully. If not, it throws a terminating error.
					5. If the MainForm is valid, it calls the `.Show()` method to make the main window visible and `.Activate()` to bring it to the foreground.
					6. Sets the global state flag '$global:DashboardConfig.State.UIInitialized' to $true.
				
				.OUTPUTS
					[bool] Returns $true if the UI is successfully initialized, the main form is found, shown, and activated.
					Returns $false if any step fails (missing function, initialization failure, missing main form), typically after throwing an error that gets caught by the main execution block.
				
				.NOTES
					- This function has a strong dependency on the 'ui.psm1' module being loaded correctly and functioning as expected (defining `Initialize-UI` and creating `MainForm`).
					- Errors encountered during this process are considered fatal for the application and are thrown to be caught by the main script's try/catch block, which should then display an error using `Show-ErrorDialog`.
			#>
			[CmdletBinding()]
			[OutputType([bool])]
			param()

			Write-Verbose "Starting Dashboard User Interface..." -ForegroundColor Cyan
			try
			{
				#region Step: Check for and Call Initialize-UI Function
					Write-Verbose "- Checking for required Initialize-UI function (from ui.psm1)..." -ForegroundColor DarkGray
					# Check that the Initialize-UI command (function) is available now.
					if (-not (Get-Command Initialize-UI -ErrorAction SilentlyContinue))
					{
						# Throw a major error if the function is missing.
						throw "FATAL: Initialize-UI function not found. Ensure 'ui.psm1' module loaded correctly and defines this function."
					}

					Write-Verbose "- Calling Initialize-UI function..." -ForegroundColor DarkGray
					# Run the UI setup function. Save its return value.
					Initialize-UI # Call directly now

					Write-Verbose "- [OK] Initialize-UI function executed successfully." -ForegroundColor Green
				#endregion Step: Check for and Call Initialize-UI Function

				#region Step: Verify, Show, and Activate Main Form
					Write-Verbose "- Verifying presence and type of UI.MainForm object..." -ForegroundColor DarkGray
					# Check if MainForm property exists in UI config and is a valid Form object.
					if ($null -eq $global:DashboardConfig.UI.MainForm -or -not ($global:DashboardConfig.UI.MainForm -is [System.Windows.Forms.Form]))
					{
						# Throw a major error if main form is missing or invalid after successful Initialize-UI call.
						throw 'FATAL: UI.MainForm object not found or is not a valid System.Windows.Forms.Form in $global:DashboardConfig after successful Initialize-UI call.'
					}

					Write-Verbose "- [OK] UI.MainForm found and is valid. Showing and activating window..." -ForegroundColor Green
					# Make the main app window visible.
					$global:DashboardConfig.UI.MainForm.Show() 
					
					# Update the global state flag to show the UI is now set up and running.
					$global:DashboardConfig.State.UIInitialized = $true
					Write-Verbose "  Dashboard UI started successfully." -ForegroundColor Green
				#endregion Step: Verify, Show, and Activate Main Form

				# Return true showing successful UI startup.
				return $true
			}
			catch
			{
				$errorMsg = "  FATAL: Failed to start dashboard UI. Error: $($_.Exception.Message)"
				Write-Verbose $errorMsg -ForegroundColor Red
				# Throw the error again to send it up to the main run block's catch.
				throw $_ # Use throw $_ to keep original error details.
			}
		}
	#endregion Function: Start-Dashboard
		
	#region Function: Start-MessageLoop
		function Start-MessageLoop
		{
			<#
				.SYNOPSIS
					Runs the Windows Forms message loop to keep the UI responsive until the main form is closed.
				
				.DESCRIPTION
					This function implements the core message processing loop required for a Windows Forms application. It keeps the UI alive and responsive to user interactions, window events, and timer ticks.
					
					The function first performs pre-checks:
					1. Verifies that the UI has been initialized (`$global:DashboardConfig.State.UIInitialized`).
					2. Verifies that the main form object (`$global:DashboardConfig.UI.MainForm`) exists, is a valid Form, and is not already disposed.
					
					If checks pass, it determines the loop method:
					- Preferred Native Loop: If the 'Native' class (expected from 'classes.psm1') and its required P/Invoke methods (`AsyncExecution`, `PeekMessage`, `TranslateMessage`, `DispatchMessage`) are detected, it uses an efficient loop based on `MsgWaitForMultipleObjectsEx` (wrapped in `AsyncExecution`). This waits for messages or a timeout, processing messages only when they arrive, thus minimizing CPU usage when idle.
					- Fallback DoEvents Loop: If the Native methods are unavailable, it falls back to a loop using `[System.Windows.Forms.Application]::DoEvents()`. This processes all pending messages but does not wait efficiently, potentially consuming more CPU. A short `Start-Sleep` (e.g., 20ms) is added within this loop to prevent 100% CPU usage.
					
					The chosen loop runs continuously as long as the main form (`$global:DashboardConfig.UI.MainForm`) is visible and not disposed.
				
				.OUTPUTS
					[void] This function runs synchronously and blocks execution until the main UI form is closed or disposed. It does not return a value.
				
				.NOTES
					- Requires the main UI form (`$global:DashboardConfig.UI.MainForm`) to be successfully initialized and shown by `Start-Dashboard` before being called.
					- The efficiency of the UI heavily depends on the availability and correctness of the 'Native' class methods from 'classes.psm1'. The `DoEvents` fallback is less performant.
					- Includes basic error handling within the loop itself and a final `DoEvents` fallback attempt if the primary loop method encounters an unhandled exception.
					- Logs the chosen loop method and status messages during execution and upon exit.
			#>
			[CmdletBinding()]
			[OutputType([void])]
			param()
				
			Write-Verbose "`Starting UI message loop..." -ForegroundColor Cyan
				
			#region Step: Pre-Loop Checks for UI State and Main Form Validity
				Write-Verbose "  Checking UI state before starting message loop..." -ForegroundColor DarkGray
				# Check if UI setup flag is set.
				if (-not $global:DashboardConfig.State.UIInitialized)
				{
					Write-Verbose "  UI not marked as initialized ($global:DashboardConfig.State.UIInitialized is $false). Skipping message loop." -ForegroundColor Yellow
					return # Exit function if UI isn't ready.
				}
				# Check if MainForm object exists and is a valid, non-disposed Form.
				$mainForm = $global:DashboardConfig.UI.MainForm # Local variable to make things easier.
				if ($null -eq $mainForm -or -not ($mainForm -is [System.Windows.Forms.Form]))
				{
					Write-Verbose "  MainForm object ($global:DashboardConfig.UI.MainForm) is missing or not a valid Form object. Cannot start message loop." -ForegroundColor Yellow
					return # Exit function if MainForm is invalid.
				}
				if ($mainForm.IsDisposed)
				{
					Write-Verbose "  MainForm ($global:DashboardConfig.UI.MainForm) is already disposed. Cannot start message loop." -ForegroundColor Yellow
					return # Exit function if MainForm is already disposed (cleaned up).
				}
				Write-Verbose "  Pre-loop checks passed. MainForm is valid and UI is initialized." -ForegroundColor Green
			#endregion Step: Pre-Loop Checks for UI State and Main Form Validity
				
			# $loopMethod - Text showing which loop type is used ('Native' or 'DoEvents').
			[string]$loopMethod = 'Unknown'
			try
			{
				#region Step: Determine Loop Method (Efficient Native P/Invoke vs. Fallback DoEvents)
					# $useNativeLoop - Flag ($true/$false), $true if Native methods seem available.
					[bool]$useNativeLoop = $false
					Write-Verbose "Detecting availability of Native methods for efficient loop..." -ForegroundColor Cyan
					try
					{
						# Check if the 'Native' type exists and has the key methods we need.
						# Use GetType() which errors if type not found, unlike PSTypeName.
						$nativeType = [type]'Native' # Errors if 'Native' class not loaded.
						if (($nativeType.GetMethod('AsyncExecution')) -and
							($nativeType.GetMethod('PeekMessage')) -and
							($nativeType.GetMethod('TranslateMessage')) -and
							($nativeType.GetMethod('DispatchMessage')))
						{
							Write-Verbose "- [OK] Native P/Invoke methods found (requires 'classes.psm1'). Using efficient message loop." -ForegroundColor Green
							$useNativeLoop = $true
							$loopMethod = 'Native'
						}
						else
						{
							Write-Verbose "- Native class found, but required methods (AsyncExecution, PeekMessage, etc.) are missing. Falling back to DoEvents loop." -ForegroundColor Yellow
							$loopMethod = 'DoEvents'
						}
					}
					catch [System.Management.Automation.RuntimeException]
					{
						# Catch specific error for type not found.
						Write-Verbose "- Native class not found. Falling back to less efficient Application.DoEvents() loop." -ForegroundColor Red
						$loopMethod = 'DoEvents'
					}
					catch
					{
						Write-Verbose "- Error checking for Native methods: $($_.Exception.Message). Falling back to DoEvents loop." -ForegroundColor Red
						$loopMethod = 'DoEvents'
					}
						
					# Make sure WinForms part is loaded if using DoEvents backup.
					if (-not $useNativeLoop)
					{
						Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue # Load if not already loaded.
					}
				#endregion Step: Determine Loop Method (Efficient Native P/Invoke vs. Fallback DoEvents)
					
				#region Step: Run the Chosen Message Loop
					Write-Verbose "Entering message loop (Method: $loopMethod). Loop runs until main form is closed..." -ForegroundColor Cyan
					# Loop keeps going as long as MainForm is valid, visible, and not disposed.
					# Re-check $mainForm validity inside the loop to be safe.
					while ($mainForm -and $mainForm.Visible -and -not $mainForm.IsDisposed)
					{
						if ($useNativeLoop)
						{
							# --- Efficient Native P/Invoke Loop ---
							try
							{
								# Wait efficiently for window messages (QS_ALLINPUT) or a timeout (like 50ms).
								# $result - Return value from AsyncExecution (based on MsgWaitForMultipleObjectsEx).
								# WAIT_OBJECT_0 (0) means a message arrived. WAIT_TIMEOUT (0x102) means timeout.
								$result = [Native]::AsyncExecution(0, [IntPtr[]]@(), $false, 50, [Native]::QS_ALLINPUT) # Timeout 50ms
									
								# If a message arrived (result is not WAIT_TIMEOUT).
								if ($result -ne 0x102) # Compare with decimal value of WAIT_TIMEOUT.
								{
									# Handle all waiting messages currently in the queue.
									# $msg - Structure to hold message details (Native+MSG).
									$msg = New-Object Native+MSG
									# PeekMessage with PM_REMOVE gets and removes message. Loop while messages exist.
									while ([Native]::PeekMessage([ref]$msg, [IntPtr]::Zero, 0, 0, [Native]::PM_REMOVE))
									{
										# Turn virtual-key messages into character messages.
										$null = [Native]::TranslateMessage([ref]$msg)
										# Send the message to the right window handler.
										$null = [Native]::DispatchMessage([ref]$msg)
									}
								}
								# If it was a timeout ($result -eq 0x102), the loop just continues and waits again. Nothing needed.
							}
							catch
							{
								# Catch errors *inside* the native loop run (e.g., P/Invoke call failed).
								Write-Verbose "  Error during Native message loop iteration: $($_.Exception.Message). Attempting to fall back to DoEvents..." -ForegroundColor Red
								$useNativeLoop = $false # Switch to DoEvents for the next loops.
								$loopMethod = 'DoEvents'
								Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue # Make sure assembly loaded for backup.
								Start-Sleep -Milliseconds 50 # Add a small pause before maybe starting DoEvents loop next time.
							}
						}
						else # Use Backup DoEvents Loop
						{
							# --- Backup Application.DoEvents() Loop ---
							try
							{
								# Handle all messages currently in the queue. Less efficient as it does everything even if idle.
								[System.Windows.Forms.Application]::DoEvents()
								# Add a small pause to stop this backup loop from using 100% CPU if no messages.
								Start-Sleep -Milliseconds 20 # 20ms pause balances responsiveness and CPU use.
							}
							catch
							{
								# Catch errors during DoEvents() or Start-Sleep.
								Write-Verbose "  Error during DoEvents fallback loop iteration: $($_.Exception.Message). Loop may become unresponsive." -ForegroundColor Red
								# Maybe add longer pause or break if errors keep happening? For now, just log and continue loop.
								Start-Sleep -Milliseconds 100
							}
						}
					} # End while ($mainForm.Visible -and -not $mainForm.IsDisposed)
				#endregion Step: Run the Chosen Message Loop
			}
			catch
			{
				# Catch surprise errors setting up or during the main loop logic (outside the inner try/catch).
				Write-Verbose "  FATAL Error occurred within the UI message loop setup or main structure: $($_.Exception.Message)" -ForegroundColor Red
				# Try a very basic DoEvents loop as a last resort if the main loop structure failed.
				Write-Verbose "  Attempting basic DoEvents fallback loop after critical error..." -ForegroundColor Cyan
				try
				{
					if ($mainForm -and -not $mainForm.IsDisposed)
					{
						Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue 
					}
						
					while ($mainForm -and $mainForm.Visible -and -not $mainForm.IsDisposed)
					{
						[System.Windows.Forms.Application]::DoEvents()
						Start-Sleep -Milliseconds 50 # Slightly longer pause in emergency backup.
					}
				}
				catch
				{
					Write-Verbose "  Emergency fallback DoEvents loop also failed: $($_.Exception.Message)" -ForegroundColor Red
					[System.Windows.Forms.Application]::Run($mainForm)
				}
			}
			finally
			{
				# This block runs when the message loop stops, either normally (window closed) or due to an error caught above.
				# Log the final state of the main form. Use $? to check if $mainForm variable exists before using its properties.
				if ($mainForm -and ($mainForm -is [System.Windows.Forms.Form]))
				{
					Write-Verbose "UI message loop exited (Method: $loopMethod). Final Form State -> Visible: $($mainForm.Visible), Disposed: $($mainForm.IsDisposed)" -ForegroundColor Cyan
				}
				else
				{
					Write-Verbose "UI message loop exited (Method: $loopMethod). MainForm object appears invalid or null upon exit." -ForegroundColor Yellow
				}
				# Mark UI as not initialized anymore *after* the loop finishes.
				$global:DashboardConfig.State.UIInitialized = $false
			}
		}
	#endregion Function: Start-MessageLoop
		
	#region Function: Stop-Dashboard
		function Stop-Dashboard
		{
			<#
				.SYNOPSIS
					Performs comprehensive cleanup of application resources during shutdown.
				
				.DESCRIPTION
					This function is responsible for gracefully stopping and releasing all resources allocated by the application
					and its modules. It's designed to be called within the main script's `finally` block to ensure cleanup
					happens reliably, even if errors occurred during execution.
					
					Cleanup is performed in a specific order to minimize dependency issues and errors:
					1.  **Ftool Forms:** If the optional 'ftool.psm1' module was loaded and created forms (tracked in `$global:DashboardConfig.Resources.FtoolForms`), it attempts to close and dispose of them. It preferably calls a `Stop-FtoolForm` function (if defined by ftool.psm1) for module-specific cleanup before falling back to basic `.Close()` and `.Dispose()` calls.
					2.  **Timers:** Stops and disposes of all `System.Windows.Forms.Timer` objects registered in `$global:DashboardConfig.Resources.Timers`. Handles nested collections if necessary.
					3.  **Main UI Form:** Disposes of the main application window (`$global:DashboardConfig.UI.MainForm`) if it exists and isn't already disposed.
					4.  **Runspaces & Module Cleanup:**
					*   Disposes of known background runspaces (e.g., `$global:DashboardConfig.Resources.LaunchResources` if used by 'launch.psm1').
					*   Calls specific cleanup functions (e.g., `Stop-ClientLaunch`, `CleanupLogin`, `CleanupFtool`) if they exist (assumed to be defined by the respective modules). These functions are expected to handle module-specific resource release (e.g., closing handles, stopping threads).
					5.  **Application State:** Resets global state flags (`UIInitialized`, `LoginActive`, `LaunchActive`) to $false.
				
				.OUTPUTS
					[bool] Returns $true if all cleanup steps attempted completed without throwing *new* errors during the cleanup process itself.
					Returns $false if any cleanup step encountered an error (logged as a warning). The function attempts to continue subsequent cleanup steps even if one fails.
				
				.NOTES
					- Uses individual `try/catch` blocks around major cleanup sections (Ftool forms, Timers, Main Form, Runspaces/Modules) to ensure robustness. An error in one section should not prevent others from running.
					- Errors encountered *during cleanup* are logged using `Write-Verbose` and cause the function to return $false, but they do not typically halt the entire cleanup process.
					- Relies on modules potentially defining specific cleanup functions (`Cleanup<ModuleName>`) or resources (like `$global:DashboardConfig.Resources.LaunchResources`). These need to be implemented correctly within the modules themselves.
					- The order of operations is important (e.g., dispose child forms before main form, stop timers before disposing forms they might interact with).
				#>
			[CmdletBinding()]
			[OutputType([bool])]
			param()
				
			Write-Verbose "Stopping Dashboard and Cleaning Up Application Resources..." -ForegroundColor Cyan
			# $cleanupOverallSuccess - Flag ($true/$false) to track if *any* cleanup step had an error. Default to true.
			[bool]$cleanupOverallSuccess = $true

			#region Step 0: Clean Up launch recources
			Write-Verbose "Step 0: Cleaning up Launch..." -ForegroundColor Cyan
			Stop-ClientLaunch
			#endregion Step 0: Clean Up launch recources
				
			#region Step 1: Clean Up Ftool Forms (if Ftool module was loaded/used)
				Write-Verbose "Step 1: Cleaning up Ftool forms..." -ForegroundColor Cyan
				try
				{
					# Check if the FtoolForms list exists and has items. Use .PSObject.Properties to check safely.
					$ftoolForms = $global:DashboardConfig.Resources.FtoolForms
					if ($ftoolForms -and $ftoolForms.Count -gt 0)
					{
						# Check if the special cleanup function from ftool.psm1 exists.
						# $stopFtoolFormCmd - FunctionInfo object or null.
						$stopFtoolFormCmd = Get-Command -Name Stop-FtoolForm -ErrorAction SilentlyContinue
						# Make a copy of the keys to loop over, as we change the list during the loop.
						# $formKeys - List of text (form names).
						[string[]]$formKeys = @($ftoolForms.Keys)
						Write-Verbose "- Found $($formKeys.Count) Ftool form(s) registered. Attempting cleanup..." -ForegroundColor DarkGray
							
						foreach ($key in $formKeys)
						{
							# Get the form object safely.
							# $form - The Ftool form object, maybe null or disposed.
							$form = $ftoolForms[$key]
							# Check if it's a valid, non-disposed Windows Form.
							if ($form -and $form -is [System.Windows.Forms.Form] -and -not $form.IsDisposed)
							{
								$formText = try
								{
									$form.Text 
								}
								catch
								{
									'(Error getting text)' 
								} # Get form text safely.
								Write-Verbose "  - Stopping Ftool form '$formText' (Key: $key)." -ForegroundColor Cyan
								try
								{
									# Use the module's special cleanup function if available.
									if ($stopFtoolFormCmd)
									{
										Write-Verbose "  - Using Stop-FtoolForm function..." -ForegroundColor Cyan
										Stop-FtoolForm -Form $form -ErrorAction Stop # Call specific cleanup.
									}
									else # Basic backup cleanup.
									{
										Write-Verbose "  - Stop-FtoolForm command not found. Performing basic Close() for form '$formText'." -ForegroundColor Yellow
										# Ask the form to close nicely. This triggers FormClosing/FormClosed events.
										$form.Close()
										# Give a tiny moment for events to process, maybe not needed but can help sometimes.
										Start-Sleep -Milliseconds 20
									}
								}
								catch # Catch errors specifically from Stop-FtoolForm or Close().
								{
									Write-Verbose "  - Error during Stop-FtoolForm or Close() for form '$formText': $($_.Exception.Message)" -ForegroundColor Red
									# Mark overall cleanup as possibly failed, but continue to make sure Dispose() is called.
									$cleanupOverallSuccess = $false
								}
								finally # Always try to dispose the form directly, whether Close() worked or not.
								{
									Write-Verbose "  - Ensuring Dispose() is called for form '$formText'." -ForegroundColor Cyan
									try
									{
										if (-not $form.IsDisposed)
										{
											$form.Dispose() 
										}
									}
									catch
									{
										Write-Verbose "  - Error during final Dispose() for form '$formText': $($_.Exception.Message)" -ForegroundColor Red
										$cleanupOverallSuccess = $false
									}
								}
							}
							elseif ($form -and $form -is [System.Windows.Forms.Form] -and $form.IsDisposed)
							{
								Write-Verbose "  - Ftool form with Key '$key' was already disposed." -ForegroundColor DarkGray
							}
							else
							{
								Write-Verbose "  - Ftool form entry with Key '$key' is null or not a valid Form object." -ForegroundColor Yellow
								$cleanupOverallSuccess = $false
							}
								
							# Remove the entry from the tracking list after trying cleanup.
							$ftoolForms.Remove($key) | Out-Null
						} # End foreach form key
						Write-Verbose "- Finished Ftool form cleanup." -ForegroundColor Green
					}
					else
					{
						Write-Verbose "  No active Ftool forms found in configuration to clean up." -ForegroundColor DarkGray 
					}
				}
				catch # Catch errors in the Ftool cleanup part setup (e.g., accessing FtoolForms).
				{
					Write-Verbose "Error during Ftool form cleanup phase setup: $($_.Exception.Message)" -ForegroundColor Red
					$cleanupOverallSuccess = $false
				}
			#endregion Step 1: Clean Up Ftool Forms (if Ftool module was loaded/used)
				
			#region Step 2: Clean Up Application Timers
				Write-Verbose "Step 2: Cleaning up application timers..." -ForegroundColor Cyan
				try
				{
					# Check if the Timers list exists and has items.
					$timersCollection = $global:DashboardConfig.Resources.Timers
					if ($timersCollection -and $timersCollection.Count -gt 0)
					{
						Write-Verbose "- Found $($timersCollection.Count) timer registration(s). Stopping and disposing..." -ForegroundColor Cyan
						# Use a temporary list to gather all unique timer objects, handling possible nesting or duplicates.
						# $uniqueTimers - List of separate timer objects.
						[System.Collections.Generic.List[System.Windows.Forms.Timer]]$uniqueTimers = New-Object System.Collections.Generic.List[System.Windows.Forms.Timer]
							
						# Go through the registered items in the Timers list.
						# Items could be single timers, or nested lists (like hashtables) of timers.
						foreach ($item in $timersCollection.Values)
						{
							if ($item -is [System.Windows.Forms.Timer])
							{
								if (-not $uniqueTimers.Contains($item))
								{
									$uniqueTimers.Add($item) 
								}
							}
							elseif ($item -is [System.Collections.IDictionary])
							{
								# If item is another list, go through its values.
								$item.Values | Where-Object { $_ -is [System.Windows.Forms.Timer] } | ForEach-Object {
									if (-not $uniqueTimers.Contains($_))
									{
										$uniqueTimers.Add($_) 
									}
								}
							}
							# Add checks for other possible list types if used (like ArrayList).
						}
						Write-Verbose "- Found $($uniqueTimers.Count) unique System.Windows.Forms.Timer object(s) to dispose." -ForegroundColor Cyan
							
						# Go through the unique timer objects.
						foreach ($timer in $uniqueTimers)
						{
							try
							{
								# Check if timer object is valid and not already disposed.
								if ($timer -and -not $timer.IsDisposed) # Check IsDisposed before accessing properties like Enabled.
								{
									Write-Verbose "  - Disposing timer (Was Enabled: $($timer.Enabled))." -ForegroundColor Green
									# Stop the timer first if it's running now.
									if ($timer.Enabled)
									{
										$timer.Stop() 
									}
									# Dispose of the timer object to free up resources.
									$timer.Dispose()
								}
								else
								{
									Write-Verbose "  - Skipping already disposed or invalid timer object." -ForegroundColor DarkGray
								}
							}
							catch # Catch errors during individual timer Stop() or Dispose().
							{
								Write-Verbose "  - Error stopping or disposing a timer: $($_.Exception.Message)" -ForegroundColor Red
								$cleanupOverallSuccess = $false # Mark overall cleanup as possibly incomplete.
							}
						} # End foreach timer
							
						# Clear the main timer list in the global config after trying disposal.
						Write-Verbose "- Clearing global timer registration collection." -ForegroundColor Cyan
						$timersCollection.Clear()
						Write-Verbose "- Finished timer cleanup." -ForegroundColor Green
					}
					else
					{
						Write-Verbose "- No active timers found in configuration to clean up." -ForegroundColor DarkGray 
					}
				}
				catch # Catch errors in the timer cleanup part setup.
				{
					Write-Verbose "Error during timer cleanup phase setup: $($_.Exception.Message)" -ForegroundColor Red
					$cleanupOverallSuccess = $false
				}
			#endregion Step 2: Clean Up Application Timers
				
			#region Step 3: Clean Up Main UI Form
				Write-Verbose "Step 3: Cleaning up main UI form..." -ForegroundColor Cyan
				try
				{
					# Check if the main form object exists, is a Form, and is not already disposed.
					$mainForm = $global:DashboardConfig.UI.PSObject.Properties['MainForm']
					if ($mainForm -and $mainForm.Value -is [System.Windows.Forms.Form] -and -not $mainForm.Value.IsDisposed)
					{
						Write-Verbose "- Disposing MainForm object..." -ForegroundColor DarkGray
						# Dispose of the main form object. Should trigger its FormClosed event if not already closed.
						$mainForm.Value.Dispose()
						Write-Verbose "- [OK] MainForm disposed." -ForegroundColor Green
					}
					elseif ($mainForm -and $mainForm.Value -is [System.Windows.Forms.Form] -and $mainForm.Value.IsDisposed)
					{
						Write-Verbose "- MainForm was already disposed." -ForegroundColor Yellow
					}
					else
					{
						Write-Verbose "- MainForm object not found or invalid in configuration." -ForegroundColor Yellow
					}
				}
				catch # Catch errors during main form disposal.
				{
					Write-Verbose "Error disposing main UI form: $($_.Exception.Message)" -ForegroundColor Red
					$cleanupOverallSuccess = $false
				}
			#endregion Step 3: Clean Up Main UI Form
				
			#region Step 4: Reset Application State Flags
				Write-Verbose "Step 5: Resetting application state flags..." -ForegroundColor Cyan
				try
				{
					# Reset flags to show the app is no longer active/set up.
					$global:DashboardConfig.State.UIInitialized = $null
					$global:DashboardConfig.State.LoginActive = $null
					$global:DashboardConfig.State.LaunchActive = $null
					$global:DashboardConfig.State.ConfigInitialized = $null
					$global:DashboardConfig.LoadedModules = $null
					Write-Verbose "- State flags reset." -ForegroundColor Green
				}
				catch # Catch errors during state flag resetting.
				{
					Write-Verbose "  Error resetting global state flags: $($_.Exception.Message)" -ForegroundColor Red
					# Continue cleanup even with this small issue.
					$cleanupOverallSuccess = $false
				}
			#endregion Step 4: Reset Application State Flags
					
			#region Step 5: Final Log Message for Cleanup Status
				# Set log color based on overall cleanup success flag.
				# $finalColor - Text, 'Green' for success, 'Yellow' for partial success/warnings.
				[string]$finalColor = if ($cleanupOverallSuccess)
				{
					'Green' 
				}
				else
				{
					'Yellow' 
				}
				Write-Verbose "--- Dashboard Cleanup Finished. Overall Success: $cleanupOverallSuccess ---" -ForegroundColor $finalColor
			#endregion Step 5: Final Log Message
				
			# Return the overall success status of the cleanup actions.
			return $cleanupOverallSuccess
		}
	#endregion Function: Stop-Dashboard

#endregion UI and Application Lifecycle Functions
	
#region Main Execution Block

	# This is the main start point and control flow of the script.
	Write-Verbose "=========================================" -ForegroundColor Cyan
	Write-Verbose "=== Initializing Entropia Dashboard ===" -ForegroundColor Cyan
	Write-Verbose "=== Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ===" -ForegroundColor Cyan
	Write-Verbose "=========================================" -ForegroundColor Cyan
		
	# Main try/catch/finally block to manage the app life cycle and ensure cleanup.
	try
	{
		#region Step 1: Ensure Correct Execution Environment (Admin, 32-bit, Bypass Policy)
			Write-Verbose "--- Step 1: Ensuring Correct Execution Environment ---" -ForegroundColor Cyan
			# Request-Elevation checks and might restart the script. If it restarts, this one exits here.
			Request-Elevation
			# If script continues, Request-Elevation decided no restart needed OR restart failed (error shown, exited).
			# Initialize-ScriptEnvironment does final checks *after* possible restart.
			if (-not (Initialize-ScriptEnvironment))
			{
				# If checks fail even after possible restart try, throw a major error. Show-ErrorDialog was probably called inside.
				throw 'Environment verification failed (Admin/32-bit/Bypass). Cannot continue.'
			}
			Write-Verbose "[OK] Environment verified successfully." -ForegroundColor Green
		#endregion Step 1: Ensure Correct Execution Environment (Admin, 32-bit, Bypass Policy)
			
		#region Step 2: Initialize Base Configuration (AppData Paths)
			Write-Verbose "--- Step 2: Initializing Base Configuration (AppData Paths) ---" -ForegroundColor Cyan
			if (-not (Initialize-BaseConfig))
			{
				# If essential paths can't be made/checked writable, throw major error. Show-ErrorDialog probably called inside.
				throw 'Failed to initialize base application paths in %APPDATA%. Cannot continue.'
			}
			Write-Verbose "[OK] Base configuration paths initialized successfully." -ForegroundColor Green
		#endregion Step 2: Initialize Base Configuration (AppData Paths)
			
		#region Step 3: Load Dashboard Modules (Write to AppData & Import)
			Write-Verbose "--- Step 3: Loading Dashboard Modules ---" -ForegroundColor Cyan
			# $importResult - PSCustomObject holding Status, LoadedModules, FailedModules, CriticalFailure.
			$importResult = Import-DashboardModules
			# $global:DashboardConfig.LoadedModules is updated directly inside Import-DashboardModules.
				
			# Check if the import process reported overall failure (specifically critical failure).
			if (-not $importResult.Status) # Status is false if CriticalFailure is true or an unhandled error happened.
			{
				# If critical modules failed, throw major error. Error details logged inside Import-DashboardModules.
				throw 'Critical module loading failed. Cannot continue.'
			}
			# Non-critical failures were logged as warnings/info inside Import-DashboardModules.
			Write-Verbose "[OK] Core modules loaded successfully (Non-critical failures may exist, see logs)." -ForegroundColor Green
		#endregion Step 3: Load Dashboard Modules (Write to AppData & Import)
			
		#region Step 4: Load INI Configuration File
			Write-Verbose "--- Step 4: Loading INI Configuration ---" -ForegroundColor Cyan
			# Check if the Initialize-IniConfig function (expected from ini.psm1) is available.
			if (Get-Command Initialize-IniConfig -ErrorAction SilentlyContinue) # Just use Get-Command
			{
				Write-Verbose "Calling Initialize-IniConfig..." -ForegroundColor Cyan
				try
				{
					# Run the INI loading function. Assuming it returns true/false or handles errors itself.
					[bool]$iniLoadSuccess = Initialize-IniConfig -ErrorAction Stop # Call directly
					if (-not $iniLoadSuccess)
					{
						# Log a warning if INI loading fails (as function reported), but continue with defaults.
						Write-Verbose "  Initialize-IniConfig reported failure. Default configuration values may be used." -ForegroundColor Yellow
					}
					else
					{
						Write-Verbose "[OK] INI configuration loaded successfully." -ForegroundColor Green 
					}
				}
				catch
				{
					Write-Verbose "  Error occurred during Initialize-IniConfig execution: $($_.Exception.Message). Default configuration values may be used." -ForegroundColor Yellow
				}
			}
			else
			{
				# Log a warning if the function is missing
				Write-Verbose "  Initialize-IniConfig function not found. Skipping INI load, defaults will be used." -ForegroundColor Yellow
			}
		#endregion Step 4: Load INI Configuration File
			
		#region Step 5: Start Dashboard User Interface
			Write-Verbose "--- Step 5: Starting Dashboard UI ---" -ForegroundColor Cyan
			# Start-Dashboard sets up and shows the main window. It errors out on failure.
			if (-not (Start-Dashboard)) # This check is a bit extra as Start-Dashboard errors on failure, but safe.
			{
				# Error should have been thrown by Start-Dashboard and caught by outer catch block.
				# This throw might not be reached but makes sure script stops if Start-Dashboard somehow returned false without erroring.
				throw 'Start-Dashboard returned failure. Cannot continue.'
			}
			Write-Verbose "[OK] Dashboard UI started successfully." -ForegroundColor Green
		#endregion Step 5: Start Dashboard User Interface
			
		#region Step 6: Run UI Message Loop

			Write-Verbose "Attempting to bring MainForm to foreground using SetForegroundWindow..." -ForegroundColor Cyan
			$mainForm = $global:DashboardConfig.UI.MainForm
			$handle = $mainForm.Handle
			
			if ($handle -ne [IntPtr]::Zero) {
				# Give the window a moment to finish initializing after Show()
				Start-Sleep -Milliseconds 200 # Slightly longer delay might help
			
				# 1. Ensure the window is not minimized
				if ([Native]::IsWindowMinimized($handle)) {
					Write-Verbose "Window is minimized, restoring..." -ForegroundColor DarkGray
					[Native]::ShowWindow($handle, [Native]::SW_RESTORE) | Out-Null
					Start-Sleep -Milliseconds 150 # Extra delay after restore
				}
			
				# 2. Initial SetForegroundWindow attempt
				$success = [Native]::SetForegroundWindow($handle)
				Write-Verbose "Initial SetForegroundWindow result: $success" -ForegroundColor DarkGray
			
				# 3. If initial attempt failed, try the Alt-key simulation workaround
				if (-not $success) {
					Write-Verbose "Initial SetForegroundWindow failed. Attempting Alt-key simulation..." -ForegroundColor Yellow
					try {
						# Simulate Alt key press and release
						[Native]::keybd_event([Native]::VK_MENU, 0, [Native]::KEYEVENTF_EXTENDEDKEY, [UIntPtr]::Zero)
						Start-Sleep -Milliseconds 50
						[Native]::keybd_event([Native]::VK_MENU, 0, ([Native]::KEYEVENTF_EXTENDEDKEY -bor [Native]::KEYEVENTF_KEYUP), [UIntPtr]::Zero)
						Start-Sleep -Milliseconds 100 # Slightly longer pause after Alt release
			
						# Retry SetForegroundWindow - this is the crucial attempt
						$success = [Native]::SetForegroundWindow($handle)
						Write-Verbose "SetForegroundWindow result after Alt-key simulation: $success" -ForegroundColor DarkGray
			
					} catch {
						Write-Verbose "Error during Alt-key simulation or second SetForegroundWindow: $_" -ForegroundColor Red
						$success = $false
					}
				}
			
				# 4. Final Fallback: Use WinForms Activate if all else failed
				if (-not $success) {
					Write-Verbose "All SetForegroundWindow attempts failed. Using Activate() as fallback..." -ForegroundColor Yellow
					try {
						$mainForm.Activate()
						Write-Verbose "Activate() called." -ForegroundColor DarkGray
					} catch {
						Write-Verbose "Error calling Activate(): $_" -ForegroundColor Red
					}
				}
			} else {
				Write-Verbose "MainForm handle is zero, cannot force focus." -ForegroundColor Yellow
			}
			Write-Verbose "--- Step 6: Running UI Message Loop ---" -ForegroundColor Cyan
			# Start-MessageLoop pauses execution here until the main UI window is closed by user or code.
			# It handles UI responsiveness.
			Start-MessageLoop
			# Execution continues here only *after* the UI message loop has stopped (main window closed/disposed).
			Write-Verbose "UI Message loop finished. Proceeding to final cleanup..." -ForegroundColor Green
		#endregion Step 6: Run UI Message Loop
	}
	catch
	{
		# --- Main Catch Block ---
		# Catches any unhandled major errors from the main setup or run steps (Steps 1-6).
		$errorMessage = "`nFATAL UNHANDLED ERROR during application lifecycle: $($_.Exception.Message)"
		Write-Verbose $errorMessage -ForegroundColor Red
			
		# Try showing the critical error in a pop-up box for the user to see.
		try
		{
			Show-ErrorDialog ($errorMessage + "`n`nPlease check console logs for details.`n`nStack Trace:`n" + $($_.ScriptStackTrace))
		}
		catch
		{
			# If even the error pop-up fails, log that failure to the error output.
			Write-Verbose "  Failed to show final error dialog. The critical error was: $errorMessage" -ForegroundColor Red
		}
		# App will then go to the 'finally' block for cleanup.
	}
	finally
	{
		# --- Main Finally Block ---
		# This block *always* runs, whether the 'try' block finished okay,
		# threw an error caught by 'catch', or quit early via 'exit' (though cleanup after 'exit' can be iffy).
		# Very important to make sure resource cleanup happens.
		#region Step 7: Final Application Cleanup
			Write-Verbose "--- Step 7: Entering Final Application Cleanup ---" -ForegroundColor Cyan
			# Make sure Stop-Dashboard function exists before calling it.
			if (Get-Command Stop-Dashboard -ErrorAction SilentlyContinue)
			{
				# Call the main cleanup function.
				$cleanupStatus = Stop-Dashboard # Save return status (true/false) if needed.
				Write-Verbose "[OK] Stop-Dashboard execution completed (Overall Success: $cleanupStatus)." -ForegroundColor Green
			}
			else
			{
				# Log a warning if the main cleanup function is missing (shouldn't happen if modules loaded).
				Write-Verbose "  Stop-Dashboard function not found! Full resource cleanup may not occur." -ForegroundColor Yellow
				# Try minimal essential backup cleanup if possible (like dispose main form).
				Write-Verbose "  Attempting basic MainForm dispose as fallback..." -ForegroundColor Cyan
				try
				{
					$finalMainForm = $global:DashboardConfig.UI.PSObject.Properties['MainForm']
					if ($finalMainForm -and $finalMainForm.Value -is [System.Windows.Forms.Form] -and -not $finalMainForm.Value.IsDisposed)
					{
						$finalMainForm.Value.Dispose()
						Write-Verbose "  Fallback MainForm dispose successful." -ForegroundColor Red
					}
					else
					{
						Write-Verbose "  Fallback MainForm dispose skipped (form null, invalid, or already disposed)."  -ForegroundColor Red
					}
				}
				catch
				{
					Write-Verbose "  Fallback MainForm dispose attempt failed: $($_.Exception.Message)"  -ForegroundColor Red
				}
			}
				
			# Optional: Explicitly exit the Windows Forms app context if it was used.
			# Check if the assembly is loaded before calling Application static methods.
			if ([System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms'))
			{
				Write-Verbose "Requesting Windows Forms application context exit..." -ForegroundColor Cyan
				try
				{
					[System.Windows.Forms.Application]::ExitThread() 
				}
				catch
				{
					Write-Verbose "  Error calling Application.ExitThread(): $($_.Exception.Message)" -ForegroundColor Red
				} # ExitThread is often better in PS scripts than Exit().
				# try { [System.Windows.Forms.Application]::Exit() } catch { Write-Verbose "Error calling Application.Exit(): $($_.Exception.Message)"} -ForegroundColor Red
			}
				
			Write-Verbose "=========================================" -ForegroundColor Cyan
			Write-Verbose "=== Entropia Dashboard Exited ===" -ForegroundColor Cyan
			Write-Verbose "=== Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ===" -ForegroundColor Cyan
			Write-Verbose "=========================================" -ForegroundColor Cyan
		#endregion Step 7: Final Application Cleanup
	}

#endregion Main Execution Block