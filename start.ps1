<# start.ps1
	.SYNOPSIS
		Initializes and launches the Entropia Dashboard application.

	.DESCRIPTION
		This script serves as the main entry point for the Entropia Dashboard. It performs critical environment checks,
		including Administrator rights verification, ensuring 32-bit execution context, and setting the required PowerShell
		Execution Policy ('Bypass') for the current process. It establishes necessary application paths within the user's
		AppData directory. The script manages the deployment and loading of PowerShell modules (.psm1) and associated
		resources (.dll, .ico) from the source directory or Base64 content to the AppData directory, respecting defined load 
		order and dependencies. It includes robust fallback mechanisms for module loading, particularly for scenarios where 
		the	script might be running in different environments. Configuration settings are loaded from 'config.ini',
		with defaults applied if the file or specific settings are missing. Finally, it initializes the Windows Forms
		user interface (UI), runs the application message loop to keep the UI responsive, and handles graceful
		shutdown and resource cleanup via the 'finally' block and the Stop-Dashboard function.

	.NOTES
		Author: Immortal / Divine
		Version: 1.1.3
		Requires: PowerShell 5.1+, .NET Framework 4.5+, Administrator privileges, Bypassed 32-bit PowerShell execution.

		Documentation Standards Followed:
		- Module Level Documentation: Synopsis, Description, Notes.
		- Function Level Documentation: Synopsis, Parameter Descriptions, Output Specifications.
		- Code Organization: Logical grouping using #region / #endregion. Functions organized by workflow.
		- Step Documentation: Code blocks enclosed in '#region Step: Description' / '#endregion Step: Description'.
		- Variable Definitions: Inline comments describing the purpose of significant variables.
		- Error Handling: Comprehensive try/catch/finally blocks with verbose logging and user notification on critical failure.

		Execution Policy Note: This script requires and attempts to set the execution policy to 'Bypass' for the *current process*.
		This is necessary for its dynamic module loading and execution features but reduces script execution security restrictions.
		Ensure you understand the implications before running this script in sensitive environments.

		Invoke-Expression Note: The fallback module import methods uses Invoke-Expression. This cmdlet
		can execute arbitrary code and poses a security risk if the module content is compromised.
#>

#region Custom Write-Verbose

[CmdletBinding()]
param()

#region Step: Detect -Verbose argument when running as EXE/Script
	# If -Verbose is passed as a command-line argument, manually set the $VerbosePreference. 
	if ($args -contains '-Verbose') {
		$VerbosePreference = "Continue"
		Write-Verbose "-Verbose argument detected, enabling verbose preference."
	}
#endregion Step: Detect -Verbose argument when running as EXE/Script

Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force -ErrorAction Stop

function Write-Verbose {
	[CmdletBinding()]
	param(
	[Parameter(Mandatory = $true, Position = 0)]
	[string]$Message,
	[string]$ForegroundColor = 'DarkGray'
	)
	
	# Only proceed if verbose output is enabled
	if ($VerbosePreference -eq "Continue") {
		$dateStr = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
		$callStack = Get-PSCallStack
		$caller = if ($callStack.Count -gt 1) { $callStack[1] } else { $callStack[0] }
		
		$callerName = if ($caller.Command) { $caller.Command } else { "Script" }
		
		$bracketedCaller = "[$callerName]"
		$paddedCaller = $bracketedCaller.PadRight(35)
		$prefix = " | $dateStr - $paddedCaller - "
		$indentation = " " * $prefix.Length + "| "
		
		# Get console width for proper wrapping
		$consoleWidth = if ($Host.UI.RawUI.WindowSize.Width -gt 800) {
			$Host.UI.RawUI.WindowSize.Width # Use actual width if available
		} else {
			800 # Default fallback width if console width can't be determined or is to small
		}
		# Ensure consoleWidth is an integer for calculations
		try {
			$consoleWidth = [int]$consoleWidth
		} catch {
			$consoleWidth = 800 # Fallback if conversion fails
		}

		# Process message with proper wrapping and indentation
		$lines = $Message -split "`r`n"
		$formattedLines = @()
		
		# Calculate available width for text once
		$availableWidth = $consoleWidth - $prefix.Length - 5 # Subtract 2 for potential padding/margin

		foreach ($line in $lines) {
			# If line is shorter than available width, add it as-is
			if ($line.Length -le $availableWidth) {
				$formattedLines += $line
			} else {
				# For long lines, wrap them with proper word breaks
				$words = $line -split ' '
				$currentLine = ""
				
				foreach ($word in $words) {
					# Check if adding this word would exceed the line length
					if (($currentLine.Length + $word.Length + 1) -le $availableWidth) {
						# Add word with space
						if ($currentLine.Length -gt 0) {
							$currentLine += " $word"
						} else {
							$currentLine = $word
						}
					} else {
						# Line would be too long, add current line to results and start a new one
						if ($currentLine.Length -gt 0) {
							$formattedLines += $currentLine
							$currentLine = $word
						} else {
							# Word itself is too long for a line, add it anyway (might still overflow slightly)
							$formattedLines += $word
							$currentLine = ""
						}
					}
				}
				
				# Add the last line if not empty
				if ($currentLine.Length -gt 0) {
					$formattedLines += $currentLine
				}
			}
		}
		
		# Join lines with proper indentation for wrapped lines
		$formattedMessage = ""
		if ($formattedLines.Count -gt 0) {
			$formattedMessage = $formattedLines[0]
			for ($i = 1; $i -lt $formattedLines.Count; $i++) {
				$formattedMessage += "`r`n$indentation$($formattedLines[$i])"
			}
		}
		
		# Set color based on message type
		$color = switch ($ForegroundColor.ToLower()) {
			'red'    { [ConsoleColor]::Red }
			'yellow' { [ConsoleColor]::Yellow }
			'green'  { [ConsoleColor]::Green }
			'cyan'   { [ConsoleColor]::Cyan }
			default  { [ConsoleColor]::DarkGray }
		}

		# Output to console with color
		$originalColor = $host.UI.RawUI.ForegroundColor
		try {
			$host.UI.RawUI.ForegroundColor = $color
			# Write to Error stream to ensure it appears like standard Write-Verbose
			[Console]::Error.WriteLine("$prefix$formattedMessage")
		} finally {
			$host.UI.RawUI.ForegroundColor = $originalColor
		}
		
		# Also write to the verbose stream for proper logging/capture
		$wrappedCmdlet = $ExecutionContext.InvokeCommand.GetCommand(
		"Microsoft.PowerShell.Utility\Write-Verbose",
		[System.Management.Automation.CommandTypes]::Cmdlet
		)
		
		# Use steppable pipeline
		$scriptCmd = { & $wrappedCmdlet "$prefix$formattedMessage" }
		$steppablePipeline = $scriptCmd.GetSteppablePipeline()
		$steppablePipeline.Begin($true)
		# Ensure pipeline output is ended if necessary
		$steppablePipeline.End() # Ensure pipeline completes
	}
}

try {
	Add-Type -AssemblyName System.Windows.Forms, System.Drawing
	Write-Verbose "INFO: Loaded System.Windows.Forms and System.Drawing assembly" # This will now work if -Verbose was passed
} catch {
	# Use the custom Write-Verbose for consistency, it checks $VerbosePreference internally
	Write-Verbose "ERROR: Failed to load required assemblies: $_" -ForegroundColor Red
	throw "Failed to initialize application. Required assemblies could not be loaded: $_"
}

#endregion Custom Write-Verbose

#region Global Configuration

#region Step: Define Global Configuration Hashtable
	# This main hashtable holds all our settings, states, paths, resources, and module info. It's available everywhere in the script.
	$global:DashboardConfig = @{
		# Paths: Stores important folders and file locations for the app.
		Paths            = @{
			# Source: Folder with the dashboard's source scripts (.ps1, .psm1) and things like .dlls or .icos. Usually in the user's profile.
			Source   = Join-Path $env:USERPROFILE 'Entropia_Dashboard\.main'
			# App: The main app data folder in AppData\Roaming. We put modules, config files, and maybe logs here.
			App      = Join-Path $env:APPDATA 'Entropia_Dashboard\'
			# Modules: Subfolder in the AppData path. Write-Module puts module files (.psm1), libraries (.dll), and icons (.ico) here before loading them.
			Modules  = Join-Path $env:APPDATA 'Entropia_Dashboard\modules'
			# Icon: Full path to the app's icon file (.ico) for the main window. It should end up in the Modules folder.
			Icon     = Join-Path $env:APPDATA 'Entropia_Dashboard\modules\icon.ico'
			# FtoolDLL: Full path to ftool.dll, needed if the optional 'ftool.psm1' module is used. Should also be in the Modules folder.
			FtoolDLL = Join-Path $env:APPDATA 'Entropia_Dashboard\modules\ftool.dll'
			# Config: Full path to the main settings file ('config.ini'). Saves user choices and app settings. Found in the main AppData folder.
			Ini   = Join-Path $env:APPDATA 'Entropia_Dashboard\config.ini'
		}
		# State: Keeps track of what the application is doing right now.
		State            = @{
			# ConfigInitialized: Flag ($true/$false) to check if basic setup (like creating app folders) worked.
			ConfigInitialized   = $false
			# UIInitialized: Flag ($true/$false) to see if the main window was set up correctly by 'ui.psm1'.
			UIInitialized       = $false
			# LoginActive: Flag ($true/$false) showing if an auto-login (from 'login.psm1') is running. Prevents doing it twice.
			LoginActive         = $false
			# LaunchActive: Flag ($true/$false) showing if a game launch (from 'launch.psm1') is happening. Prevents double launches.
			LaunchActive        = $false
			# PreviousLaunchState: Flag ($true/$false) showing if a game launch (from 'launch.psm1') happened.
			PreviousLaunchState = $false
			# PreviousLoginState: Flag ($true/$false) showing if a game login (from 'login.psm1') happened.
			PreviousLoginState  = $false
			# IsRunningAsExe: Flag ($true/$false) figured out at start. True if running as an .exe, not a .ps1 script. Changes how modules load.
			IsRunningAsExe      = $false
			IsDragging 			= $false
		}
		# Resources: Groups for handling things that change, like timers, windows, and shared info.
		Resources        = @{
			# Timers: An ordered list ([ordered]@{...}) holding active timers (System.Windows.Forms.Timer) used by the app or modules. Stopped/cleaned up on exit.
			Timers              = [ordered]@{}
			# FtoolForms: An ordered list ([ordered]@{...}) keeping track of active Ftool windows (from 'ftool.psm1'). Closed/cleaned up on exit.
			FtoolForms          = [ordered]@{}
			# LastEventTimes: A list (@{...}) remembering when named events last happened. Good for slowing down or grouping actions in modules.
			LastEventTimes      = @{}
			# ExtensionData: A general list (@{...}) for modules/extensions to store and share any data needed across the app.
			ExtensionData       = @{}
			# ExtensionTracking: A list (@{...}) for modules/extensions to track things like status flags, process IDs, or other state info.
			ExtensionTracking   = @{}
			# LoadedModuleContent: A list (@{...}) holding the actual text content of loaded .psm1 modules. Mainly for backup loading methods or debugging.
			LoadedModuleContent = @{}
			# LaunchResources: A list (@{...}) for the launch module to store resources specific to launching game clients.
			LaunchResources     = @{}
			DragSourceGrid 		= $null
		}
		# UI: Empty list (@{...}) filled by 'ui.psm1' when the UI starts. Holds references to important UI parts (windows, buttons, grids).
		UI               = @{
			Login        = @{}
		}
		# DefaultConfig: An ordered list ([ordered]@{...}) with default settings. Used by 'ini.psm1' if 'config.ini' is missing or incomplete.
		DefaultConfig    = [ordered]@{
			'LauncherPath' = [ordered]@{ 'LauncherPath' = 'Select_Launcher' } # Default if the game launcher path isn't in config.ini.
			'ProcessName'  = [ordered]@{ 'ProcessName' = 'neuz' }         # Default game process name to watch or use.
			'MaxClients'   = [ordered]@{ 'MaxClients' = '1' }                # Default max number of game clients allowed.
			'Login'        = [ordered]@{ 'Login' = '1,1,1,1,1,1,1,1,1,1'; 'FinalizeCollectorLogin' = '0'; 'NeverRestartingCollectorLogin' = '0' }             # Default list of login settings (format depends on 'login.psm1').
			'Ftool'        = [ordered]@{}                                    # Default empty section for 'ftool.psm1' related settings.
			'Options'      = [ordered]@{ 'HideMinimizedWindows' = '0' }      # Default options for the dashboard.
		}
		# Config: An ordered list ([ordered]@{...}) filled by 'ini.psm1' with settings from 'config.ini'. Overwrites defaults.
		Config           = [ordered]@{}
		# ConfigWriteTimer: Might hold a timer used by 'ini.psm1' to delay saving 'config.ini' often. Better performance, less disk activity.
		ConfigWriteTimer = @{}
		# LoadedModules: A list (@{...}) tracking filenames and full paths of modules that were written to AppData and/or loaded. Used for checking dependencies.
		LoadedModules    = @{}
	}
#endregion Step: Define Global Configuration Hashtable

#region Step: Define Module Metadata
	# Info about all known app modules: load order, importance (critical?), dependencies, and source file path.
	$global:DashboardConfig.Modules = @{
		# Critical modules: Must have these for the dashboard to work. If they fail, the app won't start.
		'ftool.dll'     = @{ 
			Priority = 'Critical';  
			Order = 1; 
			Dependencies = @();
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ftool.dll');
			Base64Content = '
				
			'
		}
		'icon.ico'      = @{ 
			Priority = 'Critical';  
			Order = 2; 
			Dependencies = @();
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'icon.ico');
			Base64Content = '
				AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAAAAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AgIC/wICAv8CAgL/BAQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wQEAv8CAgL/AgIC/wICAv8DAwP/AwMD/wMDA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8GBgP/BQUD/wUEA/8NDgP/DQ4D/wUEA/8FBQP/BgYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BgYD/wMDA/8DAwP/AwMD/wQEBP8EBAT/BAQE/wMDBP8DAwT/AwME/wMDBP8DAwT/AwME/wQFBP8CAwT/BQQE/xIPA/8jHQP/LiUD/zo0A/86NAP/LiUD/yMdA/8SDwP/BQQE/wIDBP8EBQT/AwME/wMDBP8DAwT/AwME/wMDBP8DAwT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8DAwT/EBME/ycmBP84LQP/OC0E/ykhBP8cFwT/FxME/xcTBP8cFwT/KSEE/zgtBP84LQP/JyYE/xATBP8DAwT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BAQF/w0MBf83LgT/OjIE/xYSBf8JCgX/Cw0F/w4QBf8PEQX/DhEF/w4QBf8LDQX/CQoF/xYSBf86MgT/OC4E/w0MBf8EBAX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wYGBv8GBgb/BgYG/wYGBv8GBgb/BgYG/wUFBv8SEAb/PjIF/yMdBf8JCQb/DxIG/xETBv8MDgb/CQoG/wgJBv8ICQb/CQoG/wwOBv8REwb/DxIG/wkJBv8jHQX/PjIF/xIQBv8FBQb/BgYG/wYGBv8GBgb/BgYG/wYGBv8GBgb/BwcH/wcHB/8HBwf/BwcH/wcHB/8GBgf/Dw0H/z4zBf8dGAb/CwwH/xIVBv8MDQf/BwcH/wYGB/8HBwf/BwcH/wcHB/8HBwf/BgYH/wcHB/8MDQf/EhUG/wsMB/8dGAb/PjMF/w8NB/8GBgf/BwcH/wcHB/8HBwf/BwcH/wcHB/8ICAj/CAgI/wgICP8ICAj/CQkI/xMWB/85MAb/JR4H/wsNCP8TFgf/CQoI/wgHCP8ICAj/CAgI/wgICP8ICAj/CAgI/wgICP8ICAj/CAgI/wgHCP8JCgj/ExYH/wsNCP8lHgf/OTAG/xMWB/8JCQj/CAgI/wgICP8ICAj/CAgI/wkJCf8JCQn/CQkJ/wkJCf8ICAn/KykH/z01B/8LDAn/FBcI/woKCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8KCgn/FBcI/wsMCf89NQf/KykH/wgICf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/woKCf88MQf/GRYI/xIVCf8ODwn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8ODwn/EhUJ/xkWCP88MQf/CgoJ/wkJCf8JCQn/CQkJ/wkJCf8KCgr/CgoK/woKCv8JCQr/GBUJ/zwyCP8ODgr/FRcK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8UFwr/Dg4K/zwyCP8YFQn/CQkK/woKCv8KCgr/CgoK/wsLC/8LCwv/CwsL/wkKC/8qIwr/LiYJ/xATC/8REwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/xETC/8QEgv/LiYJ/yojCv8JCgv/CwsL/wsLC/8LCwv/DAwM/wwMDP8MDAz/CgoM/zUsCv8jHgv/FBcL/w8QDP8MDAz/DAwM/wwMDP8MDAz/DAwM/wwMDP8MDAz/CwoM/wsKDP8MDAz/DAwM/wwMDP8MDAz/DAwM/wwMDP8MDAz/DxAM/xQXC/8jHgv/NSwK/woKDP8MDAz/DAwM/wwMDP8NDQ3/DQ0N/w0NDf8SFQ3/QTsK/x4bDP8WGQz/Dw8N/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/wwMDf9JWQn/SVkJ/wwMDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/w0NDf8PEA3/FxoM/x4bDP9BOwr/EhUN/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/xMVDf9COwr/HhsM/xYZDP8PDw3/DQ0N/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/CwoN/1ltCP9ZbQj/CwoN/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/w8QDf8XGgz/HhsM/0I7Cv8TFQ3/DQ0N/w0NDf8NDQ3/Dg4O/w4ODv8ODg7/DAwO/zYuDP8lIA3/FhkN/xESDv8ODg7/Dg4O/w4ODv8ODg7/Dg4O/w4ODv8MCw7/Mz0L/zM9C/8MCw7/Dg4O/w4ODv8ODg7/Dg4O/w4ODv8ODg7/ERIO/xYZDf8lIA3/Ni4M/wwMDv8ODg7/Dg4O/w4ODv8PDw//Dw8P/w8PD/8NDg//LScN/zEqDf8UFg//FRcO/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w0MD/81Pwz/NT8M/w0MD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8VFw//FBYP/zEqDf8tJw3/DQ4P/w8PD/8PDw//Dw8P/xAQEP8QEBD/EBAQ/w8PEP8eGw//QTYN/xMUEP8aHQ//EBAQ/xAQEP8QEBD/EBAQ/xAQEP8QEBD/Dg0Q/zZADf82QA3/Dg0Q/xAQEP8QEBD/EBAQ/xAQEP8QEBD/EBAQ/xodD/8TFBD/QTYN/x4bD/8PDxD/EBAQ/xAQEP8QEBD/ERER/xEREf8RERH/ERER/xISEf9CNw3/IB0Q/xkcEP8VFhD/ERER/xEREf8RERH/ERER/xEREf8PDhH/NkAO/zZADv8PDhH/ERER/xEREf8RERH/ERER/xEREf8VFhD/GRwQ/yAdEP9CNw3/EhIR/xEREf8RERH/ERER/xEREf8RERH/ERER/xEREf8RERH/EBAR/zIxD/9EPA7/FBUR/xwfEP8TExH/ERER/xEREf8RERH/ERER/w8OEf82QA7/NkAO/w8OEf8RERH/ERER/xEREf8RERH/ExMR/xwfEP8UFBH/RDwO/zIxD/8QEBH/ERER/xEREf8RERH/ERER/xISEv8SEhL/EhIS/xISEv8TExL/HSAR/0I5D/8uKBD/FhgS/x0gEf8UFBL/EhIS/xISEv8SEhL/EA8S/zdBDv83QQ7/EA8S/xISEv8SEhL/EhIS/xQUEv8dIBH/FhcS/y4oEP9COQ//HSAR/xMTEv8SEhL/EhIS/xISEv8SEhL/ExMT/xMTE/8TExP/ExMT/xMTE/8SEhP/GxkS/0g8D/8oIxH/FxgT/x4hEv8XGRP/ExMT/xMTE/8REBP/OEIP/zhCD/8REBP/ExMT/xMTE/8XGRP/HiES/xcYE/8oIxH/SDwP/xsZEv8SEhP/ExMT/xMTE/8TExP/ExMT/xMTE/8UFBT/FBQU/xQUFP8UFBT/FBQU/xQUFP8TExT/IB0T/0k9D/8vKRL/FhcU/xwfE/8eIRP/GhwT/xUVFP87RRD/O0UQ/xUVFP8aHBP/HiAT/xwfE/8WFxT/LykS/0k9D/8gHRP/ExMU/xQUFP8UFBT/FBQU/xQUFP8UFBT/FBQU/xUVFf8VFRX/FRUV/xUVFf8VFRX/FRUV/xUVFf8UFBX/HBsU/0Q7EP9GPhD/JCAT/xgZFP8aHBT/Gx0U/zpFEP87RhD/Gx0U/xocFP8YGRT/JCAT/0Y+EP9EOxD/HBsU/xQUFf8VFRX/FRUV/xUVFf8VFRX/FRUV/xUVFf8VFRX/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8VFBb/ICMV/zY0Ev9FOxH/RTsR/zcvEv8rJhT/KSYU/ykmFP8rJhT/Ny8S/0U7Ef9FOxH/NjQS/yAjFP8VFBb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8XFxb/FRYW/xcXFv8kIRX/NC0U/z01E/9JQhH/SUIR/z41E/80LRT/JCEV/xcXFv8VFhb/FxcW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xYXF/8VFhf/FRUX/xwfFv8cHxb/FRUX/xUWF/8WFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
			'
		}
		'classes.psm1'  = @{ 
			Priority = 'Critical';  
			Order = 3; 
			Dependencies = @();
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'classes.psm1');
			Base64Content = '
				
			'
		}
		'ini.psm1'      = @{ 
			Priority = 'Critical';  
			Order = 4; 
			Dependencies = @('classes.psm1');
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ini.psm1');
			Base64Content = '
				
			'
		}
		'ui.psm1'       = @{ 
			Priority = 'Critical';  
			Order = 5; 
			Dependencies = @('classes.psm1', 'ini.psm1');
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ui.psm1');
			Base64Content = '
				
			'
		}
		
		# Important modules: Add major features. Failure might limit things, but the app can still start.
		'datagrid.psm1' = @{ 
			Priority = 'Important'; 
			Order = 6; 
			Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1');
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'datagrid.psm1');
			Base64Content = '
				
			'
		}
		
		# Optional modules: Add extra, non-essential features. Failure is logged, but the app still starts.
		'launch.psm1'   = @{ 
			Priority = 'Optional';  
			Order = 7; 
			Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'launch.psm1');
			Base64Content = '
				
			'
		}
		'login.psm1'    = @{ 
			Priority = 'Optional';  
			Order = 8; 
			Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'login.psm1');
			Base64Content = '
				
			'
		}
		'ftool.psm1'    = @{ 
			Priority = 'Optional';  
			Order = 9; 
			Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ftool.psm1');
			Base64Content = '
				
			'
		}
	}
#endregion Step: Define Module Metadata

#endregion Global Configuration

#region Environment Initialization and Checks

#region Function: Show-ErrorDialog
	function Show-ErrorDialog
	{
		<#
		.SYNOPSIS
			Displays a standardized error message box using Windows Forms for critical errors.
		
		.PARAMETER Message
			[string] The error message text to display in the dialog box. This message should clearly state the problem encountered. (Mandatory)
		
		.OUTPUTS
			[void] This function does not return any value. Its purpose is to display a modal error dialog to the user.
		
		.NOTES
			This function requires the System.Windows.Forms .NET assembly to be loaded. It attempts to load the assembly if not already present.
			If displaying the Windows Forms MessageBox fails (e.g., in a non-interactive session or if assembly loading fails), it falls back to writing
			the error message to the PowerShell error stream using Write-Verbose for logging purposes. This function is intended for critical errors
			that need immediate user attention, often before exiting the script.
		#>
		param(
			[Parameter(Mandatory = $true)]
			[string]$Message
		)
		try
		{
			#region Step: Ensure WinForms Assembly is Loaded
				# Try loading the .NET part needed for MessageBox. Use -ErrorAction Stop to catch errors.
				# See if it's already loaded to avoid trying again/warnings.
				if (-not ([System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')))
				{
					Add-Type -AssemblyName System.Windows.Forms -ErrorAction Stop
				}
				#endregion Step: Ensure WinForms Assembly is Loaded
				
				#region Step: Display WinForms MessageBox
				# Show the error pop-up box to the user.
				# Title shows the app name clearly. MessageBoxIcon.Error gives a visual hint.
				[System.Windows.Forms.MessageBox]::Show($Message, 'Entropia Dashboard Error',
					[System.Windows.Forms.MessageBoxButtons]::OK,
					[System.Windows.Forms.MessageBoxIcon]::Error) | Out-Null # Send to Out-Null to hide the 'OK' button result.
			#endregion Step: Display WinForms MessageBox
		}
		catch
		{
			# Backup plan if the WinForms MessageBox doesn't work.
			# Write the original message and why the pop-up failed to the error output.
			Write-Verbose "Failed to display error dialog: `"$Message`". Dialog Display Error: $($_.Exception.Message)" -ForegroundColor Red
		}
	}
#endregion Function: Show-ErrorDialog

#region Function: Request-Elevation
	function Request-Elevation
	{
		<#
		.SYNOPSIS
			Checks for required execution context (Admin rights, 32-bit, Bypass Policy) and attempts to restart the script if necessary.
		
		.DESCRIPTION
			This function assesses the current script execution environment. It verifies:
			1. Administrator Privileges: Checks if the current user is a member of the Administrators group.
			2. 32-bit Execution: Confirms if the current PowerShell process is running in 32-bit mode (required for potential interaction with 32-bit game clients or libraries).
			3. Execution Policy: Ensures the effective execution policy for the current process is 'Bypass' to allow dynamic script and module loading.
			
			If any of these conditions are not met, the function attempts to relaunch the script using the 32-bit PowerShell executable located in SysWOW64.
			The relaunch uses the 'RunAs' verb, triggering a UAC prompt for elevation if needed, and explicitly sets the execution policy to 'Bypass' for the new process.
			Upon successfully starting the new process, the *current* script instance exits immediately.
		
		.OUTPUTS
			[void] This function does not return a value. It either determines no restart is needed and returns silently, or it attempts to start a new process and then exits the current one using 'exit'.
		
		.NOTES
			- Relies on the existence of the 32-bit PowerShell executable at '$env:SystemRoot\SysWOW64\WindowsPowerShell\v1.0\powershell.exe'. If not found, the script will exit with an error.
			- Uses the '$myinvocation' automatic variable to get the path of the currently running script for the relaunch command.
			- If the relaunch attempt fails (e.g., user cancels UAC, file not found), an error dialog is shown, and the script exits.
			- The use of '-ExecutionPolicy Bypass' in the relaunch arguments is a security consideration; see the main script notes.
		#>
		param() # No inputs needed for this function.
		
		#region Step: Check Current Environment State
			Write-Verbose "Checking current execution environment (Admin, 32-bit, Execution Policy)..." -ForegroundColor Cyan
			# $needsRestart - Flag ($true/$false), set to $true if something isn't right.
			[bool]$needsRestart = $false
			# $reason - A list to gather easy-to-read reasons why we need a restart.
			[System.Collections.ArrayList]$reason = @()
			
			# Check if we're running as Admin.
			# $isAdmin - Flag ($true/$false), $true if the current user is an Admin.
			[bool]$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
			if (-not $isAdmin)
			{
				$needsRestart = $true; $null = $reason.Add('Administrator privileges required.') # Add reason if not admin.
			}
			
			# Check if this process is 32-bit. [IntPtr]::Size is 4 for 32-bit, 8 for 64-bit.
			# $is32Bit - Flag ($true/$false), $true if the process is 32-bit.
			[bool]$is32Bit = [IntPtr]::Size -eq 4
			if (-not $is32Bit)
			{
				$needsRestart = $true; $null = $reason.Add('32-bit execution required.') # Add reason if not 32-bit.
			}
			
			# Check the Execution Policy just for this running process.
			# $currentPolicy - Text showing the execution policy (like 'Restricted', 'Bypass').
			[string]$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue # SilentlyContinue handles if it's not set for the process.
			# Needs 'Bypass' for loading/running things the way we planned.
			if ($currentPolicy -ne 'Bypass')
			{
				$needsRestart = $true
				if ($currentPolicy -ne '') {
					$effectivePolicy = $currentPolicy
				} else {
					$effectivePolicy = Get-ExecutionPolicy
				}
				$null = $reason.Add("Execution Policy 'Bypass' required for Process scope (Current effective: '$effectivePolicy').") # Show the actual policy being used.
			}
		#endregion Step: Check Current Environment State
		
		#region Step: Perform Restart if Necessary
			if ($needsRestart)
			{
				# Write down the reasons we're trying to restart.
				Write-Verbose "  Restarting script needed: $($reason -join ' ')" -ForegroundColor Yellow
				
				# Set the path to the 32-bit PowerShell program.
				# $psExe - Text, full path to the 32-bit powershell.exe.
				[string]$psExe = Join-Path $env:SystemRoot 'SysWOW64\WindowsPowerShell\v1.0\powershell.exe'
				if (-not (Test-Path $psExe -PathType Leaf)) # Check if the program file exists.
				{
					# Show error and quit if the needed program is missing.
					Show-ErrorDialog "FATAL: Required 32-bit PowerShell executable not found at '$psExe'. Cannot continue."
					exit 1 # Exit code 1 means there was an error.
				}
				
				# Get everything inside the current script file.
				$encodedCommand = @"
					
"@

				# Decode the command
				try {
					$decodedBytes = [System.Convert]::FromBase64String($encodedCommand)
					# IMPORTANT: Use the right encoding the script was saved with! UTF8 is typical, but PowerShell might use UTF8 with BOM or UTF16LE. Assume UTF8 here.
					$decodedCommand = [System.Text.Encoding]::UTF8.GetString($decodedBytes)
				} catch {
					Show-ErrorDialog "FATAL: Failed to decode the embedded command. Error: $($_.Exception.Message)"
					exit 1
				}

				# Make a temporary file path
				$tempScriptPath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), ([System.Guid]::NewGuid().ToString() + ".ps1"))

				try
				{
					# Save the decoded command to the temp file (using the right encoding)
					[System.IO.File]::WriteAllText($tempScriptPath, $decodedCommand, [System.Text.Encoding]::UTF8) # Match encoding from GetString

					# Build the NEW arguments using -File
					# Added -ExecutionPolicy Bypass, often needed when running scripts like this.
					# $psArgs - Text holding the command-line arguments.
					[string]$psArgs = "-noexit -ExecutionPolicy Bypass -File `"$tempScriptPath`"" # Note the quotes around the path

					# Set up the ProcessStartInfo object
					$psi = New-Object System.Diagnostics.ProcessStartInfo
					$psi.FileName = $psExe         # The program to run. Make sure $psExe is set!
					$psi.Arguments = $psArgs       # The arguments for the program.
					$psi.UseShellExecute = $true   # MUST be $true to use the 'Verb' property.
					$psi.Verb = 'RunAs'            # Ask for Admin rights (UAC).

					Write-Verbose "  Attempting to start new elevated/32-bit process via temp file: `"$psExe`" $psArgs" -ForegroundColor Cyan
					Write-Verbose "  Temporary script file: $tempScriptPath" -ForegroundColor DarkGray

					# Start the new process
					[System.Diagnostics.Process]::Start($psi) | Out-Null

					# Success (request sent)
					Write-Verbose "  Successfully requested elevated/32-bit process start. Exiting current process." -ForegroundColor Green
					exit 0
				}
				catch
				{
					# Error handling
					Show-ErrorDialog "FATAL: Failed to restart script with required settings (Admin/32-bit/Bypass). Error: $($_.Exception.Message)"
					# Delete the temp file if it failed (might not work if permissions are odd)
					if (Test-Path $tempScriptPath) {
						try { Remove-Item $tempScriptPath -ErrorAction Stop } catch {}
					}
					exit 1
				}
			}
			else
			{
				# Log that the script is already running with the right settings.
				Write-Verbose "  Script already running with required environment settings (Admin, 32-bit, Bypass Policy)." -ForegroundColor Green
			}
		#endregion Step: Perform Restart if Necessary
	}
#endregion Function: Request-Elevation

#region Function: Initialize-ScriptEnvironment
	function Initialize-ScriptEnvironment
	{
		<#
		.SYNOPSIS
			Verifies that the script environment meets all requirements *after* any potential restart attempt by Request-Elevation.
		
		.DESCRIPTION
			This function performs final checks to ensure the script is operating in the correct environment before proceeding with core logic.
			It re-validates:
			1. Administrator Privileges: Confirms the script is now running elevated.
			2. 32-bit Mode: Confirms the script is now running in a 32-bit PowerShell process.
			3. Execution Policy: Confirms the process scope execution policy is 'Bypass'. If not (which shouldn't happen if Request-Elevation worked),
			it makes a final attempt to set it using Set-ExecutionPolicy.
			
			If any check fails, it displays a specific error message using Show-ErrorDialog and returns $false.
		
		.OUTPUTS
			[bool] Returns $true if all environment checks pass successfully, otherwise returns $false.
		
		.NOTES
			- This function should be called *after* Request-Elevation. It acts as a final safeguard.
			- Failure here is typically fatal for the application, as indicated by the error messages and the return value.
			- The attempt to set ExecutionPolicy within this function is a fallback; ideally, Request-Elevation should have ensured this.
		#>
		[CmdletBinding()]
		[OutputType([bool])] 
		param()
		
		Write-Verbose "Verifying final script environment settings..." -ForegroundColor Cyan
		try
		{
			#region Step: Verify Administrator Privileges
				# $isAdmin - Flag ($true/$false), $true if the current user is an Admin.
				[bool]$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
				if (-not $isAdmin)
				{
					# Show error and return $false if not running as Admin.
					Show-ErrorDialog 'FATAL: Application requires administrator privileges to run.'
					return $false
				}
				Write-Verbose "[OK] Running with administrator privileges." -ForegroundColor Green
			#endregion Step: Verify Administrator Privileges
			
			#region Step: Verify 32-bit Execution Mode
				# $is32Bit - Flag ($true/$false), $true if the process is 32-bit.
				[bool]$is32Bit = [IntPtr]::Size -eq 4
				if (-not $is32Bit)
				{
					# Show error and return $false if not running in 32-bit mode.
					Show-ErrorDialog 'FATAL: Application must run in 32-bit PowerShell mode.'
					return $false
				}
				Write-Verbose "[OK] Running in 32-bit mode." -ForegroundColor Green
			#endregion Step: Verify 32-bit Execution Mode
			
			#region Step: Verify Process Execution Policy
				# $currentPolicy - Text, the execution policy for this process.
				[string]$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue
				if ($currentPolicy -ne 'Bypass')
				{
					# This is a backup. Ideally, Request-Elevation already set 'Bypass'.
					Write-Verbose "  Process Execution Policy is not 'Bypass' (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })'). Attempting final Set..." -ForegroundColor Yellow
					try
					{
						# Try to force the policy to Bypass for this process.
						Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force -ErrorAction Stop
						# Check again after trying.
						$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue
						if ($currentPolicy -ne 'Bypass')
						{
							# If it still didn't work, report a major error.
							Show-ErrorDialog "FATAL: Failed to set required PowerShell Execution Policy to 'Bypass'.  (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })')."
							return $false
						}
						Write-Verbose "[OK] Execution policy successfully forced to Bypass for this process." -ForegroundColor Green
					}
					catch
					{
						# Catch errors during the last Set-ExecutionPolicy try.
						Show-ErrorDialog "FATAL: Error setting PowerShell Execution Policy to 'Bypass'.  (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })'). Error: $($_.Exception.Message)"
						return $false
					}
				}
				else
				{
					Write-Verbose "[OK] Execution policy is '$currentPolicy'." -ForegroundColor Green
				}
			#endregion Step: Verify Process Execution Policy
			
			# If all checks passed:
			Write-Verbose "  Environment verification successful." -ForegroundColor Green
			return $true
		}
		catch
		{
			# Catch any surprise errors during the check itself.
			Show-ErrorDialog "FATAL: An unexpected error occurred during environment verification: $($_.Exception.Message)"
			return $false
		}
	}
#endregion Function: Initialize-ScriptEnvironment

#region Function: Initialize-BaseConfig
	function Initialize-BaseConfig
	{
		<#
		.SYNOPSIS
			Ensures necessary application data directories exist in %APPDATA% and are writable.
		
		.DESCRIPTION
			This function is responsible for setting up the fundamental directory structure required by the application
			within the user's roaming application data folder (%APPDATA%). It specifically checks for and, if necessary, creates:
			1. The main application directory: %APPDATA%\Entropia_Dashboard
			2. The modules subdirectory: %APPDATA%\Entropia_Dashboard\modules
			
			After ensuring the directories exist, it performs a quick write test in each directory by creating and immediately
			deleting a temporary file ('write_test.tmp'). This verifies that the script has the necessary permissions to write
			files (like modules and configuration) to these locations.
		
		.OUTPUTS
			[bool] Returns $true if both directories exist (or were created successfully) AND are verified as writable. Returns $false if
			directory creation fails or if either directory is found to be non-writable.
		
		.NOTES
			- Upon successful completion (returning $true), it sets the global state flag '$global:DashboardConfig.State.ConfigInitialized' to $true.
			- Errors during directory creation or the write test are logged to the error stream and presented to the user via Show-ErrorDialog,
			as these are typically fatal issues preventing the application from functioning correctly.
			- Uses -Force with New-Item to create parent directories if they don't exist.
		#>
		[CmdletBinding()]
		[OutputType([bool])]
		param()

		Write-Verbose "Initializing base configuration directories in %APPDATA%..." -ForegroundColor Cyan
		try
		{
			# List of essential folders that must exist and be writable.
			# $directories - List of text paths for the required folders.
			[string[]]$directories = @(
				$global:DashboardConfig.Paths.App,     # e.g., C:\Users\User\AppData\Roaming\Entropia_Dashboard\
				$global:DashboardConfig.Paths.Modules  # e.g., C:\Users\User\AppData\Roaming\Entropia_Dashboard\modules\
			)
			
			# Go through each needed folder path.
			foreach ($dir in $directories)
			{
				#region Step: Ensure Directory Exists
					# Check if the path exists and is actually a folder (Container).
					if (-not (Test-Path -Path $dir -PathType Container))
					{
						Write-Verbose "  Directory not found. Creating: '$dir'" -ForegroundColor DarkGray
						try
						{
							# Create the folder. -Force makes parent folders too. -ErrorAction Stop stops if it fails.
							$null = New-Item -Path $dir -ItemType Directory -Force -ErrorAction Stop
						}
						catch
						{
							# Handle errors when creating the folder (like permissions, bad path).
							$errorMsg = "  Failed to create required directory '$dir'. Please check permissions or path validity. Error: $($_.Exception.Message)"
							Write-Verbose $errorMsg -ForegroundColor Red
							Show-ErrorDialog $errorMsg
							return $false # Can't continue if creating the folder fails.
						}
					}
					else
					{
						Write-Verbose "  Directory exists: '$dir'" -ForegroundColor DarkGray
					}
				#endregion Step: Ensure Directory Exists
				
				#region Step: Test Directory Writability
					# Make a temporary file path in the current folder for a write test.
					# $testFile - Text, path for the temporary test file.
					[string]$testFile = Join-Path -Path $dir -ChildPath 'write_test.tmp'
					try
					{
						# Try writing a small bit of text to the test file.
						[System.IO.File]::WriteAllText($testFile, 'TestWriteAccess')
						# If writing works, delete the test file right away. -Force skips asking.
						Remove-Item -Path $testFile -Force -ErrorAction Stop
						Write-Verbose "  Directory is writable: '$dir'" -ForegroundColor DarkGray
					}
					catch
					{
						# Handle errors during writing or deleting (probably bad permissions).
						$errorMsg = "  Cannot write to directory '$dir'. Please check permissions. Error: $($_.Exception.Message)"
						Write-Verbose $errorMsg -ForegroundColor Red
						Show-ErrorDialog $errorMsg
						# Try cleaning up the test file just in case it was made but couldn't be deleted.
						if (Test-Path -Path $testFile -PathType Leaf)
						{
							Remove-Item -Path $testFile -Force -ErrorAction SilentlyContinue
						}
						return $false # Can't continue if the folder isn't writable.
					}
				#endregion Step: Test Directory Writability
			} # End of the loop for each directory.
			
			# If the loop finishes without returning false, all folders are ready.
			Write-Verbose "  Base configuration directories initialized and verified successfully." -ForegroundColor Green
			# Set the main state flag.
			$global:DashboardConfig.State.ConfigInitialized = $true
			return $true
		}
		catch
		{
			# Catch any surprise errors during the whole setup process.
			$errorMsg = "  An unexpected error occurred during base configuration directory initialization: $($_.Exception.Message)"
			Write-Verbose $errorMsg -ForegroundColor Red
			Show-ErrorDialog $errorMsg
			return $false
		}
	}
#endregion Function: Initialize-BaseConfig

#endregion Environment Initialization and Checks

#region Module Handling Functions

#region Function: Write-Module
	function Write-Module
	{
		<#
		.SYNOPSIS
			Writes module content (from a source file or Base64 string) to the designated modules directory in %APPDATA%, performing hash checks to avoid redundant writes.
		
		.DESCRIPTION
			This function handles the deployment of module files (e.g., .psm1, .dll, .ico) from their source location or embedded Base64 representation
			to the application's 'modules' directory under %APPDATA% (defined in $global:DashboardConfig.Paths.Modules).
			
			Key operations:
			1. Ensures the target 'modules' directory exists, attempting to create it if necessary.
			2. Retrieves the module content as a byte array, either by reading the source file specified by the -Content parameter or by decoding the Base64 string provided via -ContentBase64.
			3. If the target file already exists in the 'modules' directory:
			a. Compares the file size of the existing file with the size of the new content. If different, an update is needed.
			b. If sizes match, calculates the SHA256 hash of both the existing file and the new content in memory.
			c. If the hashes match, the function logs that no update is needed and returns the path to the existing file, avoiding an unnecessary write operation.
			d. If hashes differ, an update is needed.
			4. If the target file does not exist or an update is required (sizes/hashes differ), the function attempts to write the new content (byte array) to the target path.
			5. Includes a simple retry mechanism (up to 5 seconds) with short delays (100ms) specifically for System.IO.IOException errors during the write attempt, which often indicate temporary file locks.
		
		.PARAMETER ModuleName
			[string] The destination filename for the module in the target directory (e.g., 'ui.psm1', 'ftool.dll', 'icon.ico'). (Mandatory)
		
		.PARAMETER Content
			[string] Used in the 'FilePath' parameter set. The full path to the source file containing the module content to be copied. (Mandatory, ParameterSetName='FilePath')
		
		.PARAMETER ContentBase64
			[string] Used in the 'Base64Content' parameter set. A Base64 encoded string containing the module content to be decoded and written. (Mandatory, ParameterSetName='Base64Content')
		
		.OUTPUTS
			[string] Returns the full path to the successfully written (or verified existing and matching) module file in the target 'modules' directory.
			Returns $null if any critical operation fails (e.g., directory creation, source file reading, Base64 decoding, final write attempt after retries).
		
		.NOTES
			- Uses SHA256 hash comparison for efficient and reliable detection of unchanged files.
			- Error handling is implemented for directory creation, file reading, Base64 decoding, hash calculation, and file writing.
			- The write retry loop is basic and may not handle all concurrent access scenarios perfectly but addresses common temporary locks.
			- Uses [System.IO.File]::ReadAllBytes and ::WriteAllBytes for potentially better performance with binary files (.dll, .ico) compared to Get-Content/Set-Content.
		#>
		[CmdletBinding(DefaultParameterSetName = 'FilePath')] # Default to FilePath if only unnamed inputs are used.
		[OutputType([string])]
		param (
			[Parameter(Mandatory = $true, Position = 0)]
			[string]$ModuleName, # e.g., 'ui.psm1'
		
			[Parameter(Mandatory = $true, ParameterSetName = 'FilePath', Position = 1)]
			[ValidateScript({ Test-Path $_ -PathType Leaf })] # Basic check: make sure path exists and is a file.
			[string]$Content, # Source file path, e.g., 'C:\path\to\source\ui.psm1'
		
			[Parameter(Mandatory = $true, ParameterSetName = 'Base64Content')]
			[string]$ContentBase64 # Base64 encoded content text
		)
		
		# Get the destination folder path from the main config.
		# $modulesDir - Text, destination folder for modules.
		[string]$modulesDir = $global:DashboardConfig.Paths.Modules
		# Build the full path for the destination file.
		# $finalPath - Text, full destination path for the module file.
		[string]$finalPath = Join-Path -Path $modulesDir -ChildPath $ModuleName
		
		Write-Verbose "Executing Write-Module for '$ModuleName' to '$finalPath'" -ForegroundColor Cyan
		try
		{
			#region Step: Ensure Target Directory Exists
				# Check if the destination folder exists; try creating it if not.
				if (-not (Test-Path -Path $modulesDir -PathType Container))
				{
					Write-Verbose "Target module directory not found, attempting creation: '$modulesDir'" -ForegroundColor DarkGray
					try
					{
						$null = New-Item -Path $modulesDir -ItemType Directory -Force -ErrorAction Stop
						Write-Verbose "Target module directory created successfully: '$modulesDir'" -ForegroundColor Green
					}
					catch
					{
						# Major error if folder cannot be created.
						Write-Verbose "Failed to create target module directory '$modulesDir': $($_.Exception.Message)" -ForegroundColor Red
						return $null # Cannot continue.
					}
				}
			#endregion Step: Ensure Target Directory Exists
			
			#region Step: Get Content Bytes from Source (File or Base64)
				# $bytes - Array of bytes that will hold the module content.
				[byte[]]$bytes = $null
				Write-Verbose "  ParameterSetName: $($PSCmdlet.ParameterSetName)" -ForegroundColor DarkGray
				
				# Handle Base64 input
				if ($PSCmdlet.ParameterSetName -eq 'Base64Content')
				{
					if ([string]::IsNullOrEmpty($ContentBase64))
					{
						Write-Verbose "  ModuleName '$ModuleName': ContentBase64 parameter was provided but is empty." -ForegroundColor Yellow
						return $null
					}
					try
					{
						$bytes = [System.Convert]::FromBase64String($ContentBase64)
						Write-Verbose "  Decoded Base64 content for '$ModuleName' ($($bytes.Length) bytes)." -ForegroundColor DarkGray
					}
					catch
					{
						# Major error if Base64 decoding fails.
						Write-Verbose "  Failed to decode Base64 content for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
						return $null
					}
				}
				# Handle FilePath input
				elseif ($PSCmdlet.ParameterSetName -eq 'FilePath')
				{
					# File existence already checked by ValidateScript, but double-check path is valid.
					if ([string]::IsNullOrEmpty($Content) -or -not ([System.IO.File]::Exists($Content)) )
					{
						Write-Verbose "  ModuleName '$ModuleName': Source file path '$Content' is invalid or does not exist." -ForegroundColor Red
						return $null # Shouldn't happen with ValidateScript, but good safety check.
					}
					try
					{
						$bytes = [System.IO.File]::ReadAllBytes($Content)
						Write-Verbose "  Read source file content for '$ModuleName' from '$Content' ($($bytes.Length) bytes)." -ForegroundColor DarkGray
					}
					catch
					{
						# Major error if source file cannot be read.
						Write-Verbose "  Failed to read source file '$Content' for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
						return $null
					}
				}
				else # Shouldn't get here because of parameter sets
				{
					Write-Verbose "  ModuleName '$ModuleName': Invalid parameter combination or missing content." -ForegroundColor Red
					return $null
				}
				
				# Final check if the byte array got filled.
				if ($null -eq $bytes)
				{
					Write-Verbose "  Failed to obtain content bytes for '$ModuleName'. Source data might be empty or invalid." -ForegroundColor Red
					return $null
				}
			#endregion Step: Get Content Bytes from Source (File or Base64)
			
			#region Step: Check if File Needs Updating (Size and Hash Comparison)
				# $updateNeeded - Flag ($true/$false), decides if the file needs writing.
				[bool]$updateNeeded = $true
				if (Test-Path -Path $finalPath -PathType Leaf) # Check if the destination file exists.
				{
					Write-Verbose "  Target file exists: '$finalPath'. Comparing size and hash..." -ForegroundColor DarkGray
					try
					{
						# Get info about the existing file.
						# $fileInfo - File info object for the existing file.
						$fileInfo = Get-Item -LiteralPath $finalPath -Force -ErrorAction Stop
						
						# 1. Compare file sizes first (quick check).
						if ($fileInfo.Length -eq $bytes.Length)
						{
							Write-Verbose "  File sizes match ($($bytes.Length) bytes). Comparing SHA256 hashes..." -ForegroundColor DarkGray
							# 2. If sizes match, compare SHA256 hashes.
							# $existingHash - Text, SHA256 hash of the file on disk.
							[string]$existingHash = (Get-FileHash -LiteralPath $finalPath -Algorithm SHA256 -ErrorAction Stop).Hash
							
							# Calculate hash of the new content (bytes) in memory.
							# $memStream - Memory stream to feed bytes to Get-FileHash. 'Using' cleans it up.
							$newHash = try
							{
								$memStream = New-Object System.IO.MemoryStream(,$bytes)
								(Get-FileHash -InputStream $memStream -Algorithm SHA256 -ErrorAction Stop).Hash
							}
							finally
							{
								if ($memStream)
								{
									$memStream.Dispose() 
								}
							}
							
							Write-Verbose " - Existing Hash: $existingHash" -ForegroundColor DarkGray
							Write-Verbose " - New Hash:    - $newHash" -ForegroundColor DarkGray
							
							# If hashes match, no update needed.
							if ($existingHash -eq $newHash)
							{
								Write-Verbose "  Hashes match for '$ModuleName'. No update needed." -ForegroundColor DarkGray
								$updateNeeded = $false
								# Return path to the existing, checked file.
								return $finalPath
							}
							else
							{
								Write-Verbose "  Hashes differ for '$ModuleName'. Update required." -ForegroundColor Yellow 
							}
						}
						else
						{
							Write-Verbose "  File sizes differ (Existing: $($fileInfo.Length), New: $($bytes.Length)). Update required." -ForegroundColor Yellow 
						}
					}
					catch
					{
						# Handle errors during size/hash compare (like file locked, permissions).
						# Log a warning and assume an update is needed.
						Write-Verbose "  Could not compare size/hash for '$ModuleName' (Path: '$finalPath'). Will attempt to overwrite. Error: $($_.Exception.Message)" -ForegroundColor Yellow
						$updateNeeded = $true
					}
				}
				else
				{
					Write-Verbose "  Target file does not exist: '$finalPath'. Writing new file." -ForegroundColor DarkGray 
					$updateNeeded = $true
				}
			#endregion Step: Check if File Needs Updating (Size and Hash Comparison)
			
			#region Step: Write File to Target Path (with Retry on IO Exception)
				if ($updateNeeded)
				{
					# Set up retry settings.
					# $timeoutMilliseconds - Number, max time (ms) to spend retrying the write.
					[int]$timeoutMilliseconds = 5000  # 5 seconds total retry time.
					# $retryDelayMilliseconds - Number, delay (ms) between retries.
					[int]$retryDelayMilliseconds = 100 # Wait 100ms before trying again.
					# $startTime - DateTime, when the retry loop started.
					[datetime]$startTime = Get-Date
					# $fileWritten - Flag ($true/$false) if file was written okay within the time limit.
					[bool]$fileWritten = $false
					# $attempts - Number, counts how many times we tried writing.
					[int]$attempts = 0
					
					Write-Verbose "  Attempting to write file: '$finalPath'" -ForegroundColor DarkGray
					while (((Get-Date) - $startTime).TotalMilliseconds -lt $timeoutMilliseconds)
					{
						$attempts++
						try
						{
							# Try writing all bytes to the final path using a .NET method.
							[System.IO.File]::WriteAllBytes($finalPath, $bytes)
							$fileWritten = $true
							Write-Verbose "  Successfully wrote '$ModuleName' to '$finalPath' on attempt $attempts." -ForegroundColor Green
							break # Exit the retry loop if write worked.
						}
						catch [System.IO.IOException]
						{
							# Catch IO errors specifically (probably file lock). Log warning and retry after delay.
							Write-Verbose "  Attempt $($attempts): IO Error writing '$finalPath' (Retrying in $retryDelayMilliseconds ms): $($_.Exception.Message)" -ForegroundColor Red
							# Check if time is almost up before waiting.
							if (((Get-Date) - $startTime).TotalMilliseconds + $retryDelayMilliseconds -ge $timeoutMilliseconds)
							{
								Write-Verbose "  Timeout nearing, breaking retry loop for '$finalPath'." -ForegroundColor Yellow
								break # Don't wait longer than the timeout.
							}
							Start-Sleep -Milliseconds $retryDelayMilliseconds
						}
						catch
						{
							# Catch other surprise, non-retryable errors during write. Log error and stop loop.
							Write-Verbose "  Attempt $($attempts): Non-IO Error writing '$finalPath': $($_.Exception.Message)" -ForegroundColor Red
							$fileWritten = $false # Make sure flag is false.
							break # Exit loop on non-retryable error.
						}
					} # End of while retry loop
					
					# Check if the file was written okay after the loop.
					if (-not $fileWritten)
					{
						Write-Verbose "  Failed to write module '$ModuleName' to '$finalPath' after $attempts attempts within $timeoutMilliseconds ms timeout." -ForegroundColor Red
						return $null # Return null to show it failed.
					}
				} # End if($updateNeeded)
			#endregion Step: Write File to Target Path (with Retry on IO Exception)
			
			# If we get here, the file exists and is current, or it was just written successfully.
			return $finalPath
		}
		catch
		{
			# Catch any surprise errors in the main function part (like input check failed earlier).
			Write-Verbose "  An unexpected error occurred in Write-Module for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
			return $null
		}
	}
#endregion Function: Write-Module


#region Function: Import-ModuleUsingReflection
	# ... (Keep Import-ModuleUsingReflection function as it was) ...
	function Import-ModuleUsingReflection
	{
		<#
		.SYNOPSIS
			(Alternative Method) Imports a PowerShell module by reading, modifying (adding no-op Export-ModuleMember), and executing its content directly in the global scope via Invoke-Command.

		.DESCRIPTION
			This function offers another non-standard way to load a .psm1 module, aiming to address issues where `Import-Module` or `InvokeScript` fail due to `$using:` variables.
			Its process involves:
			1. Reading the entire content of the specified .psm1 file into a string.
			2. Storing the original content in $global:DashboardConfig.Resources.LoadedModuleContent.
			3. Prepending a simple, no-operation `Export-ModuleMember` function definition to the beginning of the content string.
			4. Creating a single `ScriptBlock` object from this modified content string.
			5. Executing this `ScriptBlock` directly in the current (global) execution context using `Invoke-Command -ScriptBlock $scriptBlock`. This method is chosen specifically because `Invoke-Command` executed locally *can* resolve `$using:` variables against the caller's scope.

		.PARAMETER Path
			[string] The full path to the .psm1 module file to be imported using this method. (Mandatory)

		.PARAMETER ModuleName
			[string] The logical name of the module being imported (e.g., 'ui.psm1'), used primarily for logging. (Mandatory)

		.OUTPUTS
			[bool] Returns $true if the `Invoke-Command` execution completes without throwing a terminating error.
			Returns $false if a fatal error occurs (e.g., file not found, terminating error during script execution).
			*Note: Returning $true indicates execution finished, but doesn't guarantee the module loaded correctly or that all its functions are available/working.*

		.NOTES
			- Global Scope Pollution: This method directly defines all functions, variables, and aliases from the module into the global scope.
			- Use Case: Fallback specifically intended to handle modules containing `$using:` variables that cause standard import/InvokeScript methods to fail.
			- Error Handling: Relies on catching terminating errors from `Invoke-Command`. Non-terminating errors within the module code will be logged by PowerShell but won't cause this function to return $false unless `-ErrorAction Stop` was used inside the module code itself.
		#>
		[CmdletBinding()]
		[OutputType([bool])]
		param(
			[Parameter(Mandatory = $true)]
			[ValidateScript({ Test-Path $_ -PathType Leaf })] # Make sure path exists and is a file.
			[string]$Path,

			[Parameter(Mandatory = $true)]
			[string]$ModuleName
		)

		Write-Verbose "Attempting reflection-style import (InvokeCommand in global scope) for '$ModuleName'." -ForegroundColor Cyan

		try
		{
			#region Step: Check File Existence (Redundant with ValidateScript but safe)
				if (-not (Test-Path -Path $Path -PathType Leaf))
				{
					Write-Verbose "Import-ModuleUsingReflection: Module file not found or is not a file: '$Path'" -ForegroundColor Red
					return $false
				}
			#endregion Step: Check File Existence

			#region Step: Read and Store Original Module Content
				[string]$moduleContent = [System.IO.File]::ReadAllText($Path)
				if ($null -eq $moduleContent)
				{
					if (Test-Path -Path $Path -PathType Leaf)
					{
						Write-Verbose "Import-ModuleUsingReflection: Module file '$Path' is empty. Considering import successful (no-op)." -ForegroundColor Yellow
						$global:DashboardConfig.Resources.LoadedModuleContent[$ModuleName] = ''
						return $true
					}
					else
					{
						Write-Verbose "Import-ModuleUsingReflection: Failed to read module file '$Path'." -ForegroundColor Red
						return $false
					}
				}
				# Ensure Resources hashtable exists before storing
				if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('Resources')) {
					$global:DashboardConfig['Resources'] = @{}
				}
				# Ensure LoadedModuleContent hashtable exists
				 if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and -not $global:DashboardConfig.Resources.ContainsKey('LoadedModuleContent')) {
					$global:DashboardConfig.Resources['LoadedModuleContent'] = @{}
				}
				$global:DashboardConfig.Resources.LoadedModuleContent[$ModuleName] = $moduleContent
				Write-Verbose "Read and stored original content for '$ModuleName'." -ForegroundColor DarkGray
			#endregion Step: Read and Store Original Module Content

			#region Step: Prepend No-Op Export-ModuleMember to Content
				# Define a simple Export-ModuleMember to potentially satisfy calls within the script
				# It does NOT actually export anything in the module sense.
				[string]$noOpExportFunc = @"
function Export-ModuleMember { 
param(
[string]`$Function, 
[string]`$Variable, 
[string]`$Alias, 
[string]`$Cmdlet
)
}
"@
				[string]$modifiedContent = @"
$noOpExportFunc

# --- Original Module Content Start ---
$moduleContent
# --- Original Module Content End ---
"@
			#endregion Step: Prepend No-Op Export-ModuleMember to Content

			#region Step: Create ScriptBlock and Execute Globally via Invoke-Command
				Write-Verbose "Creating ScriptBlock and executing modified content globally via Invoke-Command for '$ModuleName'..." -ForegroundColor DarkGray
				[scriptblock]$scriptBlock = [ScriptBlock]::Create($modifiedContent)
				try
				{
					# Execute the script block in the current scope using Invoke-Command
					# This method allows $using: variables to resolve against the caller's scope locally
					$null = Invoke-Command -ScriptBlock $scriptBlock
					
					# Check the automatic variable $? to see if any *non-terminating* errors occurred during execution
					if (-not $?)
					{
						# Log if non-terminating errors happened, but execution still finished
						Write-Verbose "Execution of '$ModuleName' content via Invoke-Command completed, but non-terminating errors occurred within the script (check logs above)." -ForegroundColor Yellow
						# We still return $true here as execution technically finished, but the caller (Import-DashboardModules)
						# should perform additional checks (like Get-Command) to verify function availability.
					}
					else
					{
						# Log successful completion of the Invoke-Command call
						Write-Verbose "Successfully finished executing modified script block for '$ModuleName' via Invoke-Command." -ForegroundColor Green
					}
					# Return true indicating Invoke-Command completed without *terminating* errors.
					# Does NOT guarantee functions are correctly defined globally.
					return $true 
				}
				catch # Catch only *terminating* errors from Invoke-Command itself
				{
					Write-Verbose "Terminating error occurred during Invoke-Command execution for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
					Write-Verbose "Stack Trace: $($_.ScriptStackTrace)"
					# Return false indicating a fatal error during execution.
					return $false 
				}
			#endregion Step: Create ScriptBlock and Execute Globally via Invoke-Command
		}
		catch # Catch errors during setup (read file, create scriptblock etc.)
		{
			Write-Verbose "FATAL error during reflection-style import (InvokeCommand) setup for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
			return $false # Return false indicating setup failure
		}
	}
#endregion Function: Import-ModuleUsingReflection


#region Function: Import-DashboardModules
	function Import-DashboardModules
	{
		<#
		.SYNOPSIS
			Loads all defined dashboard modules according to priority, dependencies, and execution context (Script vs EXE).
		
		.DESCRIPTION
			This crucial function orchestrates the loading of all modules specified in '$global:DashboardConfig.Modules'.
			It performs the following steps:
			1. Initializes tracking variables for loaded and failed modules.
			2. Determines if the script is running as a compiled EXE or a standard .ps1 script, storing the result in '$global:DashboardConfig.State.IsRunningAsExe'. This influences the import strategy.
			3. Sorts the modules based on the 'Order' property defined in their metadata to ensure correct loading sequence.
			4. Iterates through the sorted modules:
			a. Checks if all dependencies listed for the current module are already present in '$global:DashboardConfig.LoadedModules'. If not, skips the module and records the failure. Critical module dependency failures trigger a critical failure flag.
			b. Calls 'Write-Module' to ensure the module file (or resource like .dll, .ico) exists in the %APPDATA%\modules directory, handling source file paths or Base64 content, and using hash checks for efficiency. If Write-Module fails, records the failure. Critical module write failures trigger the critical failure flag.
			c. If Write-Module succeeds, adds the module name and its written path to '$global:DashboardConfig.LoadedModules'. This satisfies dependency checks for subsequent modules, including non-PSM1 files like DLLs or icons.
			d. If the module is a PowerShell module (.psm1):
			i. Attempts multiple import strategies in sequence until one succeeds:
			- Attempt 1 (Preferred): Standard `Import-Module`. If running as EXE, it first modifies the content in memory to prepend a no-op `Export-ModuleMember`, writes this to a temporary file, imports the temp file, and then deletes it. If running as a script, it imports the written module path directly. Success is verified by checking `Get-Module`.
			- Attempt 2 (Alternative): Calls `Import-ModuleUsingReflection` function (InvokeCommand in global scope). **Crucially, after this attempt returns true, this function now performs an additional verification step using `Get-Command` for key functions expected from the module.** If key functions are missing, Attempt 2 is marked as failed, and the process proceeds to Attempt 3.
			- Attempt 3 (Last Resort): Uses `Invoke-Expression` on the module content after attempting to remove/comment out `Export-ModuleMember` calls using string replacement. This attempt includes its own verification and global re-definition of functions. **(Security Risk)**
			ii. If all import attempts fail for a .psm1 module, records the failure, removes the module from '$global:DashboardConfig.LoadedModules' (as it was written but not imported), and triggers the critical failure flag if the module was critical.
			5. After processing all modules, checks the critical failure flag. If set, returns a status object indicating failure.
			6. Logs warnings for any 'Important' modules that failed and informational messages for 'Optional' module failures.
			7. If no critical failures occurred, returns a status object indicating overall success (though non-critical modules may have failed).
		
		.OUTPUTS
			[PSCustomObject] Returns an object with the following properties:
			- Status [bool]: $true if all 'Critical' modules were successfully written and (if applicable) imported without fatal errors. $false if any 'Critical' module failed or if an unhandled exception occurred.
			- LoadedModules [hashtable]: A hashtable containing {ModuleName = Path} entries for all modules that were successfully written to the AppData directory by Write-Module (includes .psm1, .dll, .ico, etc.). Note that for .psm1, inclusion here doesn't guarantee successful *import*, only successful writing/verification. Check FailedModules for import status.
			- FailedModules [hashtable]: A hashtable containing {ModuleName = ErrorMessage} entries for modules that failed during dependency check, writing (Write-Module), or importing (for .psm1 files).
			- CriticalFailure [bool]: $true if a module marked with Priority='Critical' failed at any stage (dependency, write, or import). $false otherwise.
			- Exception [string]: (Optional) Included only if an unexpected, unhandled exception occurred within the Import-DashboardModules function itself. Contains the exception message.
		
		.NOTES
			- The multi-attempt import strategy for .psm1 files adds complexity but aims for robustness, especially in potentially problematic EXE execution environments.
			- Attempt 2 now includes verification. If it passes, Attempt 3 (Invoke-Expression) is skipped.
			- The use of `Invoke-Expression` (Attempt 3) remains a significant security risk and should ideally be avoided by refactoring modules to work with Attempt 1 or a reliable Attempt 2.
			- Dependency checking relies on modules being added to `$global:DashboardConfig.LoadedModules` *after* successful execution of `Write-Module`.
			- Error reporting distinguishes between Critical, Important, and Optional module failures. Only Critical failures halt the application startup process.
		#>
		[CmdletBinding()]
		[OutputType([PSCustomObject])]
		param()
		
		Write-Verbose "Initializing module import process..." -ForegroundColor Cyan
		
		# Set up the return object structure and internal tracking variables.
		# $result - PSCustomObject to return. Start with default failure state.
		$result = [PSCustomObject]@{
			Status          = $false # Default to failure until proven successful.
			LoadedModules   = $global:DashboardConfig.LoadedModules # Use global directly, shows state during the run.
			FailedModules   = @{}    # List to store {ModuleName = ErrorMessage}.
			CriticalFailure = $false # Flag for critical module failures.
			Exception       = $null  # Placeholder for errors we didn't handle.
		}
		# $failedModules - Local reference to the list inside the result object for easier updates.
		[hashtable]$failedModules = $result.FailedModules
		
		try
		{
			#region Step: Determine Execution Context (EXE vs. Script)
				# Get info about the current running process.
				# $currentProcess - Process object for the current PowerShell instance.
				$currentProcess = Get-Process -Id $PID -ErrorAction Stop # Use Get-Process instead of GetCurrentProcess() for consistent MainModule access.

				# $processPath - Text, the full path of the program file for the current process. Use Path property.
				[string]$processPath = $currentProcess.Path # Use Path property, usually more reliable

				# Check if the process path ends with .exe and is NOT a normal PowerShell program.
				# $isRunningAsExe - Flag ($true/$false).
				[bool]$isRunningAsExe = $processPath -like '*.exe' -and ($processPath -notlike '*powershell.exe' -and $processPath -notlike '*pwsh.exe')
				
				# Ensure State exists before setting IsRunningAsExe
				if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('State')) {
					$global:DashboardConfig['State'] = @{}
				}
				if ($global:DashboardConfig -and $global:DashboardConfig.State) {
					$global:DashboardConfig.State.IsRunningAsExe = $isRunningAsExe # Store globally.
				}
				Write-Verbose "  Execution context detected: $(if($isRunningAsExe){'Compiled EXE'} else {'PowerShell Script'}) (Process Path: '$processPath')" -ForegroundColor DarkGray
			#endregion Step: Determine Execution Context (EXE vs. Script)
			
			#region Step: Sort Modules by Defined 'Order' Property
				Write-Verbose "  Sorting modules based on 'Order' property..." -ForegroundColor DarkGray
				# $sortedModules - A list of module entries (Key/Value pairs) sorted by the 'Order' value in the module's info.
				# Need to handle errors if module config is messed up.
				$sortedModules = $global:DashboardConfig.Modules.GetEnumerator() |
				Where-Object {
					# Basic check: Make sure key exists and value is a hashtable with an 'Order' property.
					$_.Value -is [hashtable] -and $_.Value.ContainsKey('Order') -and $_.Value.Order -is [int]
				} |
				Sort-Object { $_.Value.Order } -ErrorAction SilentlyContinue # Sort based on the number 'Order' value.
				
				if (-not $sortedModules -or $sortedModules.Count -ne $global:DashboardConfig.Modules.Count)
				{
					# Check if sorting failed or if some modules were skipped due to bad structure.
					$invalidModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { -not ($_.Value -is [hashtable] -and $_.Value.ContainsKey('Order') -and $_.Value.Order -is [int]) }
					$errorMessage = "  Failed to sort modules or found invalid module configurations. Check structure in `$global:DashboardConfig.Modules."
					if ($invalidModules)
					{
						$errorMessage += " Invalid modules: $($invalidModules.Key -join ', ')"
					}
					Write-Verbose $errorMessage -ForegroundColor Red
					$result.Status = $false
					$result.CriticalFailure = $true # Treat sorting/config errors as critical.
					$failedModules['Module Sorting/Validation'] = $errorMessage
					return $result # Return failure right away.
				}
				Write-Verbose "  Processing $($sortedModules.Count) modules in defined order." -ForegroundColor DarkGray
			#endregion Step: Sort Modules by Defined 'Order' Property
			
			#region Step: Process Each Module in Sorted Order
				foreach ($entry in $sortedModules)
				{
					# $moduleName - Text, the key/filename of the module (e.g., 'ui.psm1').
					[string]$moduleName = $entry.Key
					# $moduleInfo - Hashtable holding info for this module (Priority, Order, Dependencies, FilePath/Base64Content).
					$moduleInfo = $entry.Value # Already checked as a hashtable during sorting.
					
					Write-Verbose "Processing Module: '$moduleName' (Priority: $($moduleInfo.Priority), Order: $($moduleInfo.Order))" -ForegroundColor Cyan
					
					#region SubStep: Check Dependencies
						Write-Verbose "- Checking dependencies..." -ForegroundColor DarkGray
						# $dependenciesMet - Flag ($true/$false), assume true until a missing dependency found.
						[bool]$dependenciesMet = $true
						# Check if Dependencies key exists, is an array, and has items.
						if ($moduleInfo.Dependencies -and $moduleInfo.Dependencies -is [array] -and $moduleInfo.Dependencies.Count -gt 0)
						{
							Write-Verbose "  - Required: $($moduleInfo.Dependencies -join ', ')" -ForegroundColor DarkGray
							foreach ($dependency in $moduleInfo.Dependencies)
							{
								# Check if the dependency is a key in the *global* loaded modules list.
								if (-not $global:DashboardConfig.LoadedModules.ContainsKey($dependency))
								{
									$errorMessage = "- Dependency NOT MET: Module '$dependency' must be loaded before '$moduleName'."
									Write-Verbose "- $errorMessage" -ForegroundColor Yellow
									$failedModules[$moduleName] = $errorMessage
									$dependenciesMet = $false
									# Check if this failure is critical.
									if ($moduleInfo.Priority -eq 'Critical')
									{
										Write-Verbose "- CRITICAL FAILURE: Critical module '$moduleName' cannot load due to missing dependency '$dependency'." -ForegroundColor Red
										$result.CriticalFailure = $true
									}
									break # No need to check more dependencies for this module.
								}
								else
								{
									Write-Verbose "  - Dependency satisfied: '$dependency' is loaded." -ForegroundColor DarkGray
								}
							}
						}
						else
						{
							Write-Verbose "  - No dependencies listed for '$moduleName'." -ForegroundColor DarkGray
						}
						
						# If dependencies aren't met, skip the rest of this module.
						if (-not $dependenciesMet)
						{
							continue
						} # Go to the next module in the loop.
					
					#endregion SubStep: Check Dependencies
					
					#region SubStep: Write Module to AppData Directory (Using Write-Module)
						# $modulePath - Text, path where module was written/checked. $null on failure.
						[string]$modulePath = $null
						Write-Verbose "- Ensuring module file exists in AppData via Write-Module for '$moduleName'..." -ForegroundColor DarkGray
						
						# Call Write-Module, giving inputs based on module's config (FilePath or Base64Content).
						try
						{
							if ($moduleInfo.ContainsKey('FilePath'))
							{
								[string]$sourceFilePath = $moduleInfo.FilePath
								# --- Add check for source file path ---
								if (-not (Test-Path $sourceFilePath -PathType Leaf)) {
									throw "Source FilePath specified in config does not exist or is not a file: '$sourceFilePath'"
								}
								Write-Verbose "Calling Write-Module with source FilePath: '$sourceFilePath'" -ForegroundColor Cyan
								$modulePath = Write-Module -ModuleName $moduleName -Content $sourceFilePath -ErrorAction Stop # Use Stop to catch errors here.
							}
							elseif ($moduleInfo.ContainsKey('Base64Content'))
							{
								[string]$base64Content = $moduleInfo.Base64Content
								Write-Verbose "Calling Write-Module with Base64Content (Length: $($base64Content.Length))" -ForegroundColor Cyan
								# Make sure content isn't null/empty before passing
								if ([string]::IsNullOrEmpty($base64Content))
								{
									throw "Base64Content for module '$moduleName' is empty."
								}
								$modulePath = Write-Module -ModuleName $moduleName -ContentBase64 $base64Content -ErrorAction Stop
							}
							else
							{
								# Shouldn't get here if sorting check worked.
								throw "Invalid module configuration format for '$moduleName' - missing FilePath or Base64Content."
							}
								
							# Check if Write-Module returned a valid path.
							if ([string]::IsNullOrEmpty($modulePath))
							{
								# Write-Module should ideally error out on failure with ErrorAction Stop, but double-check.
								throw "Write-Module returned null or empty path for '$moduleName', indicating write failure."
							}
								
							Write-Verbose "- [OK] Module file ready/verified: '$modulePath'" -ForegroundColor Green
							# Add/Update path in global loaded modules list. Happens for ALL written files (.psm1, .dll, .ico).
							# This is key for checking dependencies of non-PSM1 files.
							# Ensure LoadedModules hashtable exists
							if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('LoadedModules')) {
								$global:DashboardConfig['LoadedModules'] = @{}
							}
							if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules) {
								$global:DashboardConfig.LoadedModules[$moduleName] = $modulePath
							}
								
						}
						catch
						{
							# Catch errors from Write-Module call or the code block above.
							$errorMessage = "- Failed to write or verify module file for '$moduleName'. Error: $($_.Exception.Message)"
							Write-Verbose "- $errorMessage" -ForegroundColor Red
							$failedModules[$moduleName] = $errorMessage
							# Check if this failure is critical.
							if ($moduleInfo.Priority -eq 'Critical')
							{
								Write-Verbose "- CRITICAL FAILURE: Failed to write critical module '$moduleName'." -ForegroundColor Red
								$result.CriticalFailure = $true
							}
							continue # Go to the next module.
						}
					#endregion SubStep: Write Module to AppData Directory (Using Write-Module)
						
					#region SubStep: Import PowerShell Modules (.psm1)
						# Only try PowerShell import steps if the module is a .psm1 file.
						if ($moduleName -like '*.psm1')
						{
							Write-Verbose "Attempting to import PowerShell module '$moduleName' from '$modulePath'..." -ForegroundColor Cyan
							# $importSuccess - Flag ($true/$false) for successful import of this specific PSM1 module.
							[bool]$importSuccess = $false
							# $importErrorDetails - Text to store failure details if all tries fail.
							[string]$importErrorDetails = 'All import attempts failed.'
							[string]$moduleBaseName = [System.IO.Path]::GetFileNameWithoutExtension($moduleName)

							# --- Import Try 1: Standard Import-Module (with EXE changes if needed) ---
							if (-not $importSuccess)
							{
								Write-Verbose "- Attempt 1: Using standard Import-Module..." -ForegroundColor Cyan
								try
								{
									# $effectiveModulePath - Path for Import-Module (might be temp path for EXE).
									[string]$effectiveModulePath = $modulePath
									# $tempModulePath - Path to temp changed file if running as EXE.
									[string]$tempModulePath = $null
										
									if ($isRunningAsExe)
									{
										Write-Verbose "  - (Running as EXE: Prepending no-op Export-ModuleMember to temporary file for import)" -ForegroundColor DarkGray
										# Create a unique temporary file path.
										$tempModulePath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), ('{0}_{1}.psm1' -f $moduleBaseName, [System.Guid]::NewGuid().ToString('N')))
										Write-Verbose "  - Temp file path: $tempModulePath" -ForegroundColor DarkGray
											
										# Read original content (already in global config or re-read to be safe).
										# $originalContent - Text, content of the module.
										# Ensure Resources and LoadedModuleContent exist
										[string]$originalContent = $null
										if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.LoadedModuleContent -and $global:DashboardConfig.Resources.LoadedModuleContent.ContainsKey($moduleName)) {
											$originalContent = $global:DashboardConfig.Resources.LoadedModuleContent[$moduleName]
										}
										if ($null -eq $originalContent)
										{
											$originalContent = [System.IO.File]::ReadAllText($modulePath)
										} # Re-read if not found
											
										# Define the dummy function text.
										$noOpExportFunc = "function Export-ModuleMember { param([Parameter(ValueFromPipeline=`$true)][string[]]`$Function, [string[]]`$Variable, [string[]]`$Alias, [string[]]`$Cmdlet) { Write-Verbose ""Ignoring Export-ModuleMember (EXE Mode Import for '$($using:moduleName)')"" -ForegroundColor Cyan} }"
										# Add to beginning and write to temp file using UTF8 encoding.
										Set-Content -Path $tempModulePath -Value "$noOpExportFunc`n`n# --- Original module content ($moduleName) follows ---`n$originalContent" -Encoding UTF8 -Force -ErrorAction Stop
										$effectiveModulePath = $tempModulePath # Use the temp path for import.
									}
										
									# Run Import-Module. -Force re-imports if already loaded (good for dev/debug).
									Import-Module -Name $effectiveModulePath -Force -ErrorAction Stop
										
									# Check module loaded okay by using Get-Module with the base name.
									if (Get-Module -Name $moduleBaseName -ErrorAction SilentlyContinue)
									{
										$importSuccess = $true
										Write-Verbose "- [OK] Attempt 1: SUCCESS (Standard Import-Module verified for '$moduleBaseName')." -ForegroundColor Green
									}
									else
									{
										# This might happen if Import-Module finishes but the module somehow doesn't show up right.
										Write-Verbose "- Attempt 1: FAILED (Standard Import-Module) - Module '$moduleBaseName' not found via Get-Module after import call." -ForegroundColor Yellow
										$importErrorDetails = "Standard Import-Module completed but module '$moduleBaseName' could not be verified via Get-Module."
										# If import failed, make sure any existing module state is removed before trying next way.
										Remove-Module -Name $moduleBaseName -Force -ErrorAction SilentlyContinue
									}
										
								}
								catch
								{
									Write-Verbose "- Attempt 1: FAILED (Standard Import-Module Error): $($_.Exception.Message)" -ForegroundColor Yellow
									$importErrorDetails = "Standard Import-Module Error: $($_.Exception.Message)"
									# Make sure any partial/failed module state is removed.
									Remove-Module -Name $moduleBaseName -Force -ErrorAction SilentlyContinue
								}
								finally
								{
									# Clean up temp file if one was made for EXE mode.
									if ($tempModulePath -and (Test-Path $tempModulePath))
									{
										Write-Verbose "  - Cleaning up temporary file: $tempModulePath" -ForegroundColor DarkGray
										Remove-Item -Path $tempModulePath -Force -ErrorAction SilentlyContinue
									}
								}
							} # End Try 1
																
							# --- Import Try 2: Import-ModuleUsingReflection (WITH VERIFICATION) ---
							if (-not $importSuccess)
							{
								# Check if the alternative function exists.
								if (Get-Command Import-ModuleUsingReflection -ErrorAction SilentlyContinue)
								{
									Write-Verbose "- Attempt 2: Using alternative Import-ModuleUsingReflection (InvokeCommand)..." -ForegroundColor Yellow
									try
									{
										# Call the reflection import function
										if (Import-ModuleUsingReflection -Path $modulePath -ModuleName $moduleName -ErrorAction Stop)
										{
											# --- Verification Step Added ---
											Write-Verbose "  - Attempt 2: InvokeCommand finished. Verifying key functions globally for '$moduleName'..." -ForegroundColor Magenta

											# Get the list of expected functions for this module (reuse from Attempt 3 logic)
											$keyFunctionsToVerify = @()
											if ($moduleName -eq 'ini.psm1')       { $keyFunctionsToVerify = @('Initialize-IniConfig', 'Get-IniFileContent', 'Read-Config', 'Write-Config', 'Copy-OrderedDictionary', 'LoadDefaultConfigOnError') }
											elseif ($moduleName -eq 'ui.psm1') { $keyFunctionsToVerify = @('Initialize-UI', 'Set-UIElement', 'Show-SettingsForm', 'Hide-SettingsForm', 'Sync-ConfigToUI', 'Sync-UIToConfig', 'Register-UIEventHandlers') }
											elseif ($moduleName -eq 'datagrid.psm1') { $keyFunctionsToVerify = @('Test-ValidParameters', 'Get-ProcessList', 'Remove-TerminatedProcesses', 'New-RowLookupDictionary', 'Update-ExistingRow', 'UpdateRowIndices', 'Add-NewProcessRow', 'Start-WindowStateCheck', 'Find-TargetRow', 'Clear-OldProcessCache', 'Update-DataGrid', 'Start-DataGridUpdateTimer' ) }
											elseif ($moduleName -eq 'launch.psm1')   { $keyFunctionsToVerify = @('Start-ClientLaunch', 'Stop-ClientLaunch') }
											elseif ($moduleName -eq 'login.psm1')    { $keyFunctionsToVerify = @('Restore-Window', 'Set-WindowForeground', 'Test-UserMouseIntervention', 'Wait-ForResponsive', 'Wait-ForFileAccess', 'Write-LogWithRetry', 'Invoke-MouseClick', 'Invoke-KeyPress', 'LoginSelectedRow') }
											elseif ($moduleName -eq 'ftool.psm1')    { $keyFunctionsToVerify = @('LoadFtoolSettings', 'FindOrCreateProfile', 'InitializeExtensionTracking', 'GetNextExtensionNumber', 'FindExtensionKeyByControl', 'LoadExtensionSettings', 'UpdateSettings', 'CreatePositionTimer', 'RepositionExtensions', 'CreateSpammerTimer', 'ToggleButtonState', 'CheckRateLimit', 'AddFormCleanupHandler', 'CleanupInstanceResources', 'Stop-FtoolForm', 'RemoveExtension', 'FtoolSelectedRow', 'CreateFtoolForm', 'AddFtoolEventHandlers', 'CreateExtensionPanel', 'AddExtensionEventHandlers', 'Get-VirtualKeyMappings', 'Show-KeyCaptureDialog') }
											
											[bool]$attempt2VerificationPassed = $true # Assume success until proven otherwise
											[string]$missingFunction = $null

											if ($keyFunctionsToVerify.Count -gt 0) {
												foreach ($funcName in $keyFunctionsToVerify) {
													if (-not (Get-Command -Name $funcName -CommandType Function -ErrorAction SilentlyContinue)) {
														$attempt2VerificationPassed = $false
														$missingFunction = $funcName
														Write-Verbose "  - Attempt 2: VERIFICATION FAILED. Function '$funcName' not found globally after InvokeCommand." -ForegroundColor Red
														$importErrorDetails = "Attempt 2 (InvokeCommand) completed but verification failed: Function '$funcName' not found globally."
														break # Stop checking if one is missing
													}
												}
											} else {
												Write-Verbose "  - Attempt 2: No specific key functions listed for verification for '$moduleName'. Assuming success based on InvokeCommand completion." -ForegroundColor DarkGray
												# If no functions to verify, trust the $true return from Import-ModuleUsingReflection
												$attempt2VerificationPassed = $true 
											}

											# Set final import success based on verification
											if ($attempt2VerificationPassed) {
												Write-Verbose "- [OK] Attempt 2: SUCCESS (InvokeCommand completed AND key functions verified for '$moduleName')." -ForegroundColor Green
												$importSuccess = $true
											} else {
												# Failure already logged above
												$importSuccess = $false
											}
											# --- End Verification Step ---
										}
										else # Import-ModuleUsingReflection returned false (fatal error during its execution)
										{
											Write-Verbose "- Attempt 2: FAILED (Import-ModuleUsingReflection returned false)." -ForegroundColor Yellow
											$importErrorDetails = 'Import-ModuleUsingReflection returned false (fatal execution error).'
											$importSuccess = $false # Ensure flag is false
										}
									}
									catch # Catch errors *calling* Import-ModuleUsingReflection
									{
										Write-Verbose "- Attempt 2: FAILED (Error calling Import-ModuleUsingReflection): $($_.Exception.Message)" -ForegroundColor Yellow
										$importErrorDetails = "Error calling Import-ModuleUsingReflection: $($_.Exception.Message)"
										$importSuccess = $false # Ensure flag is false
									}
								}
								else # Import-ModuleUsingReflection command not found
								{
									Write-Verbose "- Attempt 2: SKIPPED (Import-ModuleUsingReflection function not found)." -ForegroundColor Yellow
								}
							} # End Try 2
								
							# --- Import Try 3: Direct Invoke-Expression (Last Resort - Security Risk!) ---
							# This only runs if $importSuccess is still $false after Attempt 1 and Attempt 2 (including verification)
							if (-not $importSuccess)
							{
								Write-Verbose "- Attempt 3: Using LAST RESORT Invoke-Expression (Security Risk!)..." -ForegroundColor Yellow
								# === Add a variable to track functions caught just in *this* try ===
								$functionsCapturedInThisAttempt = @{}
								try
								{
									# Read module content (might be saved in global config).
									[string]$invokeContent = $null
									if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.LoadedModuleContent -and $global:DashboardConfig.Resources.LoadedModuleContent.ContainsKey($moduleName)) {
										$invokeContent = $global:DashboardConfig.Resources.LoadedModuleContent[$moduleName]
									}
									if ($null -eq $invokeContent)
									{
										$invokeContent = [System.IO.File]::ReadAllText($modulePath)
									} # Re-read if needed.

									# Basic try to disable Export-ModuleMember calls using multi-line regex replace.
									$invokeContent = $invokeContent -replace '(?m)^\s*Export-ModuleMember.*', "# Export-ModuleMember call disabled by Invoke-Expression wrapper for $moduleName"

									# Run the (maybe changed) content directly in the global space.
									Invoke-Expression -Command $invokeContent -ErrorAction Stop

									# First check if IEX finished without MAJOR error
									$iexCompletedWithoutTerminatingError = $?

									# Check key functions right away AND grab them if found
									$keyFunctionsToCapture = @()
									# --- LIST ALL EXPECTED EXPORTED/USED FUNCTIONS FOR EACH MODULE ---
									if ($moduleName -eq 'ini.psm1')       { $keyFunctionsToCapture = @('Initialize-IniConfig', 'Get-IniFileContent', 'Read-Config', 'Write-Config', 'Copy-OrderedDictionary', 'LoadDefaultConfigOnError') }
									elseif ($moduleName -eq 'ui.psm1') { $keyFunctionsToCapture = @('Initialize-UI', 'Set-UIElement', 'Show-SettingsForm', 'Hide-SettingsForm', 'Sync-ConfigToUI', 'Sync-UIToConfig', 'Register-UIEventHandlers') }
									elseif ($moduleName -eq 'datagrid.psm1') { $keyFunctionsToCapture = @('Test-ValidParameters', 'Get-ProcessList', 'Remove-TerminatedProcesses', 'New-RowLookupDictionary', 'Update-ExistingRow', 'UpdateRowIndices', 'Add-NewProcessRow', 'Start-WindowStateCheck', 'Find-TargetRow', 'Clear-OldProcessCache', 'Update-DataGrid', 'Start-DataGridUpdateTimer' ) }
									elseif ($moduleName -eq 'launch.psm1')   { $keyFunctionsToCapture = @('Start-ClientLaunch', 'Stop-ClientLaunch') }
									elseif ($moduleName -eq 'login.psm1')    { $keyFunctionsToCapture = @('Restore-Window', 'Set-WindowForeground', 'Test-UserMouseIntervention', 'Wait-ForResponsive', 'Wait-ForFileAccess', 'Write-LogWithRetry', 'Invoke-MouseClick', 'Invoke-KeyPress', 'LoginSelectedRow') }
									elseif ($moduleName -eq 'ftool.psm1')    { $keyFunctionsToCapture = @('LoadFtoolSettings', 'FindOrCreateProfile', 'InitializeExtensionTracking', 'GetNextExtensionNumber', 'FindExtensionKeyByControl', 'LoadExtensionSettings', 'UpdateSettings', 'CreatePositionTimer', 'RepositionExtensions', 'CreateSpammerTimer', 'ToggleButtonState', 'CheckRateLimit', 'AddFormCleanupHandler', 'CleanupInstanceResources', 'Stop-FtoolForm', 'RemoveExtension', 'FtoolSelectedRow', 'CreateFtoolForm', 'AddFtoolEventHandlers', 'CreateExtensionPanel', 'AddExtensionEventHandlers', 'Get-VirtualKeyMappings', 'Show-KeyCaptureDialog') }

									# Create captured functions storage if it doesn't exist
									if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and -not $global:DashboardConfig.Resources.ContainsKey('CapturedFunctions')) {
										$global:DashboardConfig.Resources['CapturedFunctions'] = @{}
									}

									$captureSuccess = $true # Assume capture worked at first
									$criticalFunctionMissing = $false

									if ($keyFunctionsToCapture.Count -gt 0) {
										Write-Verbose "- Attempt 3: Verifying and capturing key functions for '$moduleName' immediately after IEX..." -ForegroundColor Magenta
										foreach ($funcName in $keyFunctionsToCapture) {
											$funcInfo = Get-Command -Name $funcName -CommandType Function -ErrorAction SilentlyContinue
											if ($funcInfo) {
												$capturedScriptBlock = $funcInfo.ScriptBlock
												Write-Verbose "  - Found and capturing ScriptBlock for '$funcName'." -ForegroundColor Magenta
												# Store globally for possible later use (though direct global definition is main now)
												if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.CapturedFunctions) {
													$global:DashboardConfig.Resources.CapturedFunctions[$funcName] = $capturedScriptBlock
												}
												# === Store locally for immediate global definition ===
												$functionsCapturedInThisAttempt[$funcName] = $capturedScriptBlock
											} else {
												Write-Verbose "  - WARNING: Could not find/capture function '$funcName' immediately after IEX for '$moduleName'." -ForegroundColor Yellow
												$captureSuccess = $false
												# Check if the missing function is critical FOR STARTUP
												# --- Adjusted Critical Function Check ---
												$isCriticalModule = $moduleInfo.Priority -eq 'Critical' 
												# Consider a function critical if it's in a Critical module AND in the key function list
												if ($isCriticalModule) { 
													$criticalFunctionMissing = $true
													$importErrorDetails += "; Critical function '$funcName' not found after IEX in Critical module '$moduleName'"
													Write-Verbose "    - Missing function '$funcName' is considered critical for module '$moduleName'." -ForegroundColor Red
												} else {
													 $importErrorDetails += "; Non-critical function '$funcName' not found after IEX for module '$moduleName'"
												}
												# --- End Adjusted Critical Function Check ---
											}
										}
									}

									# Decide overall success for Try 3
									# Success means IEX didn't have non-terminating errors ($?),
									# capture succeeded, AND no *critical* functions were missing.
									if ($iexCompletedWithoutTerminatingError -and $captureSuccess -and (-not $criticalFunctionMissing)) {
										Write-Verbose "  - Attempt 3: IEX completed and key functions captured/verified for '$moduleName'." -ForegroundColor DarkGreen

										# === Define captured functions globally RIGHT AWAY ===
										Write-Verbose "  - Defining captured functions globally for '$moduleName'..." -ForegroundColor Magenta
										$definitionSuccess = $true # Track success of this small step
										foreach ($kvp in $functionsCapturedInThisAttempt.GetEnumerator()) {
											$funcNameToDefine = $kvp.Key
											$scriptBlockToDefine = $kvp.Value
											try {
												# Define in global function space
												Set-Item -Path "Function:\global:$funcNameToDefine" -Value $scriptBlockToDefine -Force -ErrorAction Stop
												Write-Verbose "    - Defined Function:\global:$funcNameToDefine" -ForegroundColor DarkMagenta
											} catch {
												Write-Verbose "    - FAILED to define Function:\global:$funcNameToDefine globally: $($_.Exception.Message)" -ForegroundColor Red
												$definitionSuccess = $false
												$importErrorDetails += "; Failed to define captured function '$funcNameToDefine' globally."
												# If defining a critical function fails, mark critical failure for the whole import process
												# --- Adjusted Critical Function Check ---
												if ($moduleInfo.Priority -eq 'Critical') {
													$result.CriticalFailure = $true
													Write-Verbose "    - Defining critical function '$funcNameToDefine' failed. Marking import as critical failure." -ForegroundColor Red
												}
												 # --- End Adjusted Critical Function Check ---
												break # Stop trying to define others for this module if one fails
											}
										}

										# Only mark the whole import successful if definitions also worked
										if ($definitionSuccess) {
											$importSuccess = $true
											Write-Verbose "- [OK] Attempt 3: SUCCESS (Invoke-Expression completed, key functions captured AND globally defined for $moduleName)." -ForegroundColor Green
										} else {
											$importSuccess = $false # Failed during definition
											Write-Verbose "- Attempt 3: FAILED during global definition phase for $moduleName." -ForegroundColor Red
										}

									} else { # IEX failed, capture failed, or critical function missing
										Write-Verbose "- Attempt 3: FAILED (IEX completed=$iexCompletedWithoutTerminatingError, CaptureSuccess=$captureSuccess, CriticalMissing=$criticalFunctionMissing) for $moduleName." -ForegroundColor Red
										if (-not $iexCompletedWithoutTerminatingError) { $importErrorDetails += "; IEX failed with non-terminating error detected by `$?."}
										if ($criticalFunctionMissing) { $importErrorDetails += "; Critical function missing prevented Attempt 3 success." }
										if (-not $captureSuccess) { $importErrorDetails += "; Function capture failed during Attempt 3." }
										$importSuccess = $false # Make sure import is marked as failed
									}
								}
								catch # Catch MAJOR errors from Invoke-Expression itself
								{
									Write-Verbose "- Attempt 3: FAILED (Invoke-Expression Error): $($_.Exception.Message)" -ForegroundColor Red
									$importErrorDetails = "Invoke-Expression Error: $($_.Exception.Message)"
									$importSuccess = $false # Make sure success is false if IEX throws major error
								}
							} # End Try 3

							# --- Final Check for PSM1 Import Success --- 
							if ($importSuccess)
							{
								Write-Verbose "- [OK] Successfully imported PSM1 module: '$moduleName'." -ForegroundColor Green
								# Module already added to $global:DashboardConfig.LoadedModules after Write-Module step.
							}
							else
							{
								$errorMessage = "All import methods FAILED for PSM1 module: '$moduleName'. Last error detail: $importErrorDetails"
								Write-Verbose "- $errorMessage" -ForegroundColor Red
								$failedModules[$moduleName] = $errorMessage
								# Critical: Remove from LoadedModules list if import failed after writing okay, as it's not really usable.
								if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules -and $global:DashboardConfig.LoadedModules.ContainsKey($moduleName))
								{
									Write-Verbose "- Removing '$moduleName' from LoadedModules list due to import failure." -ForegroundColor Yellow
									$global:DashboardConfig.LoadedModules.Remove($moduleName)
								}
								# Check if this failure is critical.
								if ($moduleInfo.Priority -eq 'Critical')
								{
									Write-Verbose "- CRITICAL FAILURE: Failed to import critical PSM1 module '$moduleName'." -ForegroundColor Red
									$result.CriticalFailure = $true
								}
							}
						}
					#endregion SubStep: Import PowerShell Modules (.psm1)
				} # End foreach ($entry in $sortedModules)
			#endregion Step: Process Each Module in Sorted Order
				
			#region Step: Final Status Check and Result Construction
				Write-Verbose "Module import check..." -ForegroundColor Cyan
					
				# Check for Critical Failures gathered during the loop.
				if ($result.CriticalFailure)
				{
					Write-Verbose "  CRITICAL FAILURE: One or more critical modules failed to load or write. Application cannot continue." -ForegroundColor Red
					# Find which critical modules exactly failed.
					$criticalModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Critical' }
					$failedCritical = $criticalModules | Where-Object { $failedModules.ContainsKey($_.Key) }
					if ($failedCritical)
					{
						Write-Verbose "  Failed critical modules: $($failedCritical.Key -join ', ')" -ForegroundColor Red
						$failedCritical | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor Red } 
					}
					$result.Status = $false # Make sure status is false.
					# Return the result object showing critical failure.
					return $result
				}
					
				# Report Important Module Failures (as Warnings).
				$importantModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Important' }
				$failedImportant = $importantModules | Where-Object { $failedModules.ContainsKey($_.Key) }
				if ($failedImportant.Count -gt 0)
				{
					Write-Verbose "  IMPORTANT module failures detected: $($failedImportant.Key -join ', '). Application may have limited functionality." -ForegroundColor Yellow
					# Log details of failures for important modules.
					$failedImportant | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor Yellow } 
				}
					
				# Report Optional Module Failures (as Info/DarkYellow).
				$optionalModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Optional' }
				$failedOptional = $optionalModules | Where-Object { $failedModules.ContainsKey($_.Key) }
				if ($failedOptional.Count -gt 0)
				{
					Write-Verbose "  Optional module failures detected: $($failedOptional.Key -join ', '). Non-essential features might be unavailable." -ForegroundColor DarkYellow
					# Log details.
					$failedOptional | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor DarkGray }
				}
					
				# If no critical failures happened, the whole process is seen as successful for startup.
				$successCount = 0
				if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules) {
					$successCount = $global:DashboardConfig.LoadedModules.Count
				}
				$failCount = $failedModules.Count
				Write-Verbose "  Module loading phase complete. Modules written/verified: $successCount. Failures (any type): $failCount." -ForegroundColor DarkGray
				if ($successCount -gt 0)
				{
					Write-Verbose "  Successfully written/verified modules: $($global:DashboardConfig.LoadedModules.Keys -join ', ')" -ForegroundColor DarkGray
				}
				if ($failCount -gt 0)
				{
					Write-Verbose "  Failed modules logged above." -ForegroundColor Yellow
				}
					
				# Set final status to true as no critical failures happened.
				$result.Status = $true
				$result.CriticalFailure = $false # Explicitly set false.
				# Return the final result object.
				return $result
			#endregion Step: Final Status Check and Result Construction
		}
		catch
		{
			# Catch surprise, unhandled errors within the main Import-DashboardModules function body.
			$errorMessage = "  FATAL UNHANDLED EXCEPTION in Import-DashboardModules: $($_.Exception.Message)"
			Write-Verbose $errorMessage -ForegroundColor Red
			Write-Verbose "  Stack trace: $($_.ScriptStackTrace)" -ForegroundColor Red
			# Fill and return the result object showing critical failure due to the error.
			$result.Status = $false
			$result.CriticalFailure = $true
			$result.Exception = $_.Exception.Message # Store error message.
			$failedModules['Unhandled Exception'] = $errorMessage # Add to failed modules list.
			return $result
		}
	}
#endregion Function: Import-DashboardModules

#endregion Module Handling Functions

#region UI and Application Lifecycle Functions

#region Function: Start-Dashboard
	function Start-Dashboard
	{
		<#
			.SYNOPSIS
				Initializes and displays the main dashboard user interface (UI) form.
			
			.DESCRIPTION
				This function orchestrates the startup of the application's graphical user interface. It performs these actions:
				1. Checks if the 'Initialize-UI' function, expected to be loaded from the 'ui.psm1' module, exists using `Get-Command`. If not found, it throws a terminating error as the UI cannot be built.
				2. Calls the `Initialize-UI` function. It assumes this function is responsible for creating all UI elements (forms, controls) and populating the '$global:DashboardConfig.UI' hashtable, including setting '$global:DashboardConfig.UI.MainForm'.
				3. Checks the return value of `Initialize-UI`. If it returns $false or null (interpreted as failure), it throws a terminating error.
				4. Verifies that '$global:DashboardConfig.UI.MainForm' exists and is a valid '[System.Windows.Forms.Form]' object after `Initialize-UI` returns successfully. If not, it throws a terminating error.
				5. If the MainForm is valid, it calls the `.Show()` method to make the main window visible and `.Activate()` to bring it to the foreground.
				6. Sets the global state flag '$global:DashboardConfig.State.UIInitialized' to $true.
			
			.OUTPUTS
				[bool] Returns $true if the UI is successfully initialized, the main form is found, shown, and activated.
				Returns $false if any step fails (missing function, initialization failure, missing main form), typically after throwing an error that gets caught by the main execution block.
			
			.NOTES
				- This function has a strong dependency on the 'ui.psm1' module being loaded correctly and functioning as expected (defining `Initialize-UI` and creating `MainForm`).
				- Errors encountered during this process are considered fatal for the application and are thrown to be caught by the main script's try/catch block, which should then display an error using `Show-ErrorDialog`.
		#>
		[CmdletBinding()]
		[OutputType([bool])]
		param()

		Write-Verbose "Starting Dashboard User Interface..." -ForegroundColor Cyan
		try
		{
			#region Step: Check for and Call Initialize-UI Function
				Write-Verbose "- Checking for required Initialize-UI function (from ui.psm1)..." -ForegroundColor DarkGray
				# Check that the Initialize-UI command (function) is available now.
				if (-not (Get-Command Initialize-UI -ErrorAction SilentlyContinue))
				{
					# Throw a major error if the function is missing.
					throw "FATAL: Initialize-UI function not found. Ensure 'ui.psm1' module loaded correctly and defines this function."
				}

				Write-Verbose "- Calling Initialize-UI function..." -ForegroundColor DarkGray
				# Run the UI setup function. Save its return value.
				Initialize-UI # Call directly now

				Write-Verbose "- [OK] Initialize-UI function executed successfully." -ForegroundColor Green
			#endregion Step: Check for and Call Initialize-UI Function

			#region Step: Verify, Show, and Activate Main Form
				Write-Verbose "- Verifying presence and type of UI.MainForm object..." -ForegroundColor DarkGray
				# Check if MainForm property exists in UI config and is a valid Form object.
				if ($null -eq $global:DashboardConfig.UI.MainForm -or -not ($global:DashboardConfig.UI.MainForm -is [System.Windows.Forms.Form]))
				{
					# Throw a major error if main form is missing or invalid after successful Initialize-UI call.
					throw 'FATAL: UI.MainForm object not found or is not a valid System.Windows.Forms.Form in $global:DashboardConfig after successful Initialize-UI call.'
				}

				Write-Verbose "- [OK] UI.MainForm found and is valid. Showing and activating window..." -ForegroundColor Green
				# Make the main app window visible.
				$global:DashboardConfig.UI.MainForm.Show() 
				
				# Update the global state flag to show the UI is now set up and running.
				$global:DashboardConfig.State.UIInitialized = $true
				Write-Verbose "  Dashboard UI started successfully." -ForegroundColor Green
			#endregion Step: Verify, Show, and Activate Main Form

			# Return true showing successful UI startup.
			return $true
		}
		catch
		{
			$errorMsg = "  FATAL: Failed to start dashboard UI. Error: $($_.Exception.Message)"
			Write-Verbose $errorMsg -ForegroundColor Red
			# Throw the error again to send it up to the main run block's catch.
			throw $_ # Use throw $_ to keep original error details.
		}
	}
#endregion Function: Start-Dashboard
	
#region Function: Start-MessageLoop
	function Start-MessageLoop
	{
		<#
			.SYNOPSIS
				Runs the Windows Forms message loop to keep the UI responsive until the main form is closed.
			
			.DESCRIPTION
				This function implements the core message processing loop required for a Windows Forms application. It keeps the UI alive and responsive to user interactions, window events, and timer ticks.
				
				The function first performs pre-checks:
				1. Verifies that the UI has been initialized (`$global:DashboardConfig.State.UIInitialized`).
				2. Verifies that the main form object (`$global:DashboardConfig.UI.MainForm`) exists, is a valid Form, and is not already disposed.
				
				If checks pass, it determines the loop method:
				- Preferred Native Loop: If the 'Native' class (expected from 'classes.psm1') and its required P/Invoke methods (`AsyncExecution`, `PeekMessage`, `TranslateMessage`, `DispatchMessage`) are detected, it uses an efficient loop based on `MsgWaitForMultipleObjectsEx` (wrapped in `AsyncExecution`). This waits for messages or a timeout, processing messages only when they arrive, thus minimizing CPU usage when idle.
				- Fallback DoEvents Loop: If the Native methods are unavailable, it falls back to a loop using `[System.Windows.Forms.Application]::DoEvents()`. This processes all pending messages but does not wait efficiently, potentially consuming more CPU. A short `Start-Sleep` (e.g., 20ms) is added within this loop to prevent 100% CPU usage.
				
				The chosen loop runs continuously as long as the main form (`$global:DashboardConfig.UI.MainForm`) is visible and not disposed.
			
			.OUTPUTS
				[void] This function runs synchronously and blocks execution until the main UI form is closed or disposed. It does not return a value.
			
			.NOTES
				- Requires the main UI form (`$global:DashboardConfig.UI.MainForm`) to be successfully initialized and shown by `Start-Dashboard` before being called.
				- The efficiency of the UI heavily depends on the availability and correctness of the 'Native' class methods from 'classes.psm1'. The `DoEvents` fallback is less performant.
				- Includes basic error handling within the loop itself and a final `DoEvents` fallback attempt if the primary loop method encounters an unhandled exception.
				- Logs the chosen loop method and status messages during execution and upon exit.
		#>
		[CmdletBinding()]
		[OutputType([void])]
		param()
			
		Write-Verbose "`Starting UI message loop..." -ForegroundColor Cyan
			
		#region Step: Pre-Loop Checks for UI State and Main Form Validity
			Write-Verbose "  Checking UI state before starting message loop..." -ForegroundColor DarkGray
			# Check if UI setup flag is set.
			if (-not $global:DashboardConfig.State.UIInitialized)
			{
				Write-Verbose "  UI not marked as initialized ($global:DashboardConfig.State.UIInitialized is $false). Skipping message loop." -ForegroundColor Yellow
				return # Exit function if UI isn't ready.
			}
			# Check if MainForm object exists and is a valid, non-disposed Form.
			$mainForm = $global:DashboardConfig.UI.MainForm # Local variable to make things easier.
			if ($null -eq $mainForm -or -not ($mainForm -is [System.Windows.Forms.Form]))
			{
				Write-Verbose "  MainForm object ($global:DashboardConfig.UI.MainForm) is missing or not a valid Form object. Cannot start message loop." -ForegroundColor Yellow
				return # Exit function if MainForm is invalid.
			}
			if ($mainForm.IsDisposed)
			{
				Write-Verbose "  MainForm ($global:DashboardConfig.UI.MainForm) is already disposed. Cannot start message loop." -ForegroundColor Yellow
				return # Exit function if MainForm is already disposed (cleaned up).
			}
			Write-Verbose "  Pre-loop checks passed. MainForm is valid and UI is initialized." -ForegroundColor Green
		#endregion Step: Pre-Loop Checks for UI State and Main Form Validity
			
		# $loopMethod - Text showing which loop type is used ('Native' or 'DoEvents').
		[string]$loopMethod = 'Unknown'
		try
		{
			#region Step: Determine Loop Method (Efficient Native P/Invoke vs. Fallback DoEvents)
				# $useNativeLoop - Flag ($true/$false), $true if Native methods seem available.
				[bool]$useNativeLoop = $false
				Write-Verbose "Detecting availability of Native methods for efficient loop..." -ForegroundColor Cyan
				try
				{
					# Check if the 'Native' type exists and has the key methods we need.
					# Use GetType() which errors if type not found, unlike PSTypeName.
					$nativeType = [type]'Native' # Errors if 'Native' class not loaded.
					if (($nativeType.GetMethod('AsyncExecution')) -and
						($nativeType.GetMethod('PeekMessage')) -and
						($nativeType.GetMethod('TranslateMessage')) -and
						($nativeType.GetMethod('DispatchMessage')))
					{
						Write-Verbose "- [OK] Native P/Invoke methods found (requires 'classes.psm1'). Using efficient message loop." -ForegroundColor Green
						$useNativeLoop = $true
						$loopMethod = 'Native'
					}
					else
					{
						Write-Verbose "- Native class found, but required methods (AsyncExecution, PeekMessage, etc.) are missing. Falling back to DoEvents loop." -ForegroundColor Yellow
						$loopMethod = 'DoEvents'
					}
				}
				catch [System.Management.Automation.RuntimeException]
				{
					# Catch specific error for type not found.
					Write-Verbose "- Native class not found. Falling back to less efficient Application.DoEvents() loop." -ForegroundColor Red
					$loopMethod = 'DoEvents'
				}
				catch
				{
					Write-Verbose "- Error checking for Native methods: $($_.Exception.Message). Falling back to DoEvents loop." -ForegroundColor Red
					$loopMethod = 'DoEvents'
				}
					
				# Make sure WinForms part is loaded if using DoEvents backup.
				if (-not $useNativeLoop)
				{
					Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue # Load if not already loaded.
				}
			#endregion Step: Determine Loop Method (Efficient Native P/Invoke vs. Fallback DoEvents)
				
			#region Step: Run the Chosen Message Loop
				Write-Verbose "Entering message loop (Method: $loopMethod). Loop runs until main form is closed..." -ForegroundColor Cyan
				# Loop keeps going as long as MainForm is valid, visible, and not disposed.
				# Re-check $mainForm validity inside the loop to be safe.
				while ($mainForm -and $mainForm.Visible -and -not $mainForm.IsDisposed)
				{
					if ($useNativeLoop)
					{
						# --- Efficient Native P/Invoke Loop ---
						try
						{
							# Wait efficiently for window messages (QS_ALLINPUT) or a timeout (like 50ms).
							# $result - Return value from AsyncExecution (based on MsgWaitForMultipleObjectsEx).
							# WAIT_OBJECT_0 (0) means a message arrived. WAIT_TIMEOUT (0x102) means timeout.
							$result = [Native]::AsyncExecution(0, [IntPtr[]]@(), $false, 50, [Native]::QS_ALLINPUT) # Timeout 50ms
								
							# If a message arrived (result is not WAIT_TIMEOUT).
							if ($result -ne 0x102) # Compare with decimal value of WAIT_TIMEOUT.
							{
								# Handle all waiting messages currently in the queue.
								# $msg - Structure to hold message details (Native+MSG).
								$msg = New-Object Native+MSG
								# PeekMessage with PM_REMOVE gets and removes message. Loop while messages exist.
								while ([Native]::PeekMessage([ref]$msg, [IntPtr]::Zero, 0, 0, [Native]::PM_REMOVE))
								{
									# Turn virtual-key messages into character messages.
									$null = [Native]::TranslateMessage([ref]$msg)
									# Send the message to the right window handler.
									$null = [Native]::DispatchMessage([ref]$msg)
								}
							}
							# If it was a timeout ($result -eq 0x102), the loop just continues and waits again. Nothing needed.
						}
						catch
						{
							# Catch errors *inside* the native loop run (e.g., P/Invoke call failed).
							Write-Verbose "  Error during Native message loop iteration: $($_.Exception.Message). Attempting to fall back to DoEvents..." -ForegroundColor Red
							$useNativeLoop = $false # Switch to DoEvents for the next loops.
							$loopMethod = 'DoEvents'
							Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue # Make sure assembly loaded for backup.
							Start-Sleep -Milliseconds 50 # Add a small pause before maybe starting DoEvents loop next time.
						}
					}
					else # Use Backup DoEvents Loop
					{
						# --- Backup Application.DoEvents() Loop ---
						try
						{
							# Handle all messages currently in the queue. Less efficient as it does everything even if idle.
							[System.Windows.Forms.Application]::DoEvents()
							# Add a small pause to stop this backup loop from using 100% CPU if no messages.
							Start-Sleep -Milliseconds 20 # 20ms pause balances responsiveness and CPU use.
						}
						catch
						{
							# Catch errors during DoEvents() or Start-Sleep.
							Write-Verbose "  Error during DoEvents fallback loop iteration: $($_.Exception.Message). Loop may become unresponsive." -ForegroundColor Red
							# Maybe add longer pause or break if errors keep happening? For now, just log and continue loop.
							Start-Sleep -Milliseconds 100
						}
					}
				} # End while ($mainForm.Visible -and -not $mainForm.IsDisposed)
			#endregion Step: Run the Chosen Message Loop
		}
		catch
		{
			# Catch surprise errors setting up or during the main loop logic (outside the inner try/catch).
			Write-Verbose "  FATAL Error occurred within the UI message loop setup or main structure: $($_.Exception.Message)" -ForegroundColor Red
			# Try a very basic DoEvents loop as a last resort if the main loop structure failed.
			Write-Verbose "  Attempting basic DoEvents fallback loop after critical error..." -ForegroundColor Cyan
			try
			{
				if ($mainForm -and -not $mainForm.IsDisposed)
				{
					Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue 
				}
					
				while ($mainForm -and $mainForm.Visible -and -not $mainForm.IsDisposed)
				{
					[System.Windows.Forms.Application]::DoEvents()
					Start-Sleep -Milliseconds 50 # Slightly longer pause in emergency backup.
				}
			}
			catch
			{
				Write-Verbose "  Emergency fallback DoEvents loop also failed: $($_.Exception.Message)" -ForegroundColor Red
				[System.Windows.Forms.Application]::Run($mainForm)
			}
		}
		finally
		{
			# This block runs when the message loop stops, either normally (window closed) or due to an error caught above.
			# Log the final state of the main form. Use $? to check if $mainForm variable exists before using its properties.
			if ($mainForm -and ($mainForm -is [System.Windows.Forms.Form]))
			{
				Write-Verbose "UI message loop exited (Method: $loopMethod). Final Form State -> Visible: $($mainForm.Visible), Disposed: $($mainForm.IsDisposed)" -ForegroundColor Cyan
			}
			else
			{
				Write-Verbose "UI message loop exited (Method: $loopMethod). MainForm object appears invalid or null upon exit." -ForegroundColor Yellow
			}
			# Mark UI as not initialized anymore *after* the loop finishes.
			$global:DashboardConfig.State.UIInitialized = $false
		}
	}
#endregion Function: Start-MessageLoop
	
#region Function: Stop-Dashboard
	function Stop-Dashboard
	{
		<#
			.SYNOPSIS
				Performs comprehensive cleanup of application resources during shutdown.
			
			.DESCRIPTION
				This function is responsible for gracefully stopping and releasing all resources allocated by the application
				and its modules. It's designed to be called within the main script's `finally` block to ensure cleanup
				happens reliably, even if errors occurred during execution.
				
				Cleanup is performed in a specific order to minimize dependency issues and errors:
				1.  **Ftool Forms:** If the optional 'ftool.psm1' module was loaded and created forms (tracked in `$global:DashboardConfig.Resources.FtoolForms`), it attempts to close and dispose of them. It preferably calls a `Stop-FtoolForm` function (if defined by ftool.psm1) for module-specific cleanup before falling back to basic `.Close()` and `.Dispose()` calls.
				2.  **Timers:** Stops and disposes of all `System.Windows.Forms.Timer` objects registered in `$global:DashboardConfig.Resources.Timers`. Handles nested collections if necessary.
				3.  **Main UI Form:** Disposes of the main application window (`$global:DashboardConfig.UI.MainForm`) if it exists and isn't already disposed.
				4.  **Runspaces & Module Cleanup:**
				*   Disposes of known background runspaces (e.g., `$global:DashboardConfig.Resources.LaunchResources` if used by 'launch.psm1').
				*   Calls specific cleanup functions (e.g., `Stop-ClientLaunch`, `CleanupLogin`, `CleanupFtool`) if they exist (assumed to be defined by the respective modules). These functions are expected to handle module-specific resource release (e.g., closing handles, stopping threads).
				5.  **Application State:** Resets global state flags (`UIInitialized`, `LoginActive`, `LaunchActive`) to $false.
			
			.OUTPUTS
				[bool] Returns $true if all cleanup steps attempted completed without throwing *new* errors during the cleanup process itself.
				Returns $false if any cleanup step encountered an error (logged as a warning). The function attempts to continue subsequent cleanup steps even if one fails.
			
			.NOTES
				- Uses individual `try/catch` blocks around major cleanup sections (Ftool forms, Timers, Main Form, Runspaces/Modules) to ensure robustness. An error in one section should not prevent others from running.
				- Errors encountered *during cleanup* are logged using `Write-Verbose` and cause the function to return $false, but they do not typically halt the entire cleanup process.
				- Relies on modules potentially defining specific cleanup functions (`Cleanup<ModuleName>`) or resources (like `$global:DashboardConfig.Resources.LaunchResources`). These need to be implemented correctly within the modules themselves.
				- The order of operations is important (e.g., dispose child forms before main form, stop timers before disposing forms they might interact with).
			#>
		[CmdletBinding()]
		[OutputType([bool])]
		param()
			
		Write-Verbose "Stopping Dashboard and Cleaning Up Application Resources..." -ForegroundColor Cyan
		# $cleanupOverallSuccess - Flag ($true/$false) to track if *any* cleanup step had an error. Default to true.
		[bool]$cleanupOverallSuccess = $true

		#region Step 0: Clean Up launch recources
		Write-Verbose "Step 0: Cleaning up Launch..." -ForegroundColor Cyan
		Stop-ClientLaunch
		#endregion Step 0: Clean Up launch recources
			
		#region Step 1: Clean Up Ftool Forms (if Ftool module was loaded/used)
			Write-Verbose "Step 1: Cleaning up Ftool forms..." -ForegroundColor Cyan
			try
			{
				# Check if the FtoolForms list exists and has items. Use .PSObject.Properties to check safely.
				$ftoolForms = $global:DashboardConfig.Resources.FtoolForms
				if ($ftoolForms -and $ftoolForms.Count -gt 0)
				{
					# Check if the special cleanup function from ftool.psm1 exists.
					# $stopFtoolFormCmd - FunctionInfo object or null.
					$stopFtoolFormCmd = Get-Command -Name Stop-FtoolForm -ErrorAction SilentlyContinue
					# Make a copy of the keys to loop over, as we change the list during the loop.
					# $formKeys - List of text (form names).
					[string[]]$formKeys = @($ftoolForms.Keys)
					Write-Verbose "- Found $($formKeys.Count) Ftool form(s) registered. Attempting cleanup..." -ForegroundColor DarkGray
						
					foreach ($key in $formKeys)
					{
						# Get the form object safely.
						# $form - The Ftool form object, maybe null or disposed.
						$form = $ftoolForms[$key]
						# Check if it's a valid, non-disposed Windows Form.
						if ($form -and $form -is [System.Windows.Forms.Form] -and -not $form.IsDisposed)
						{
							$formText = try
							{
								$form.Text 
							}
							catch
							{
								'(Error getting text)' 
							} # Get form text safely.
							Write-Verbose "  - Stopping Ftool form '$formText' (Key: $key)." -ForegroundColor Cyan
							try
							{
								# Use the module's special cleanup function if available.
								if ($stopFtoolFormCmd)
								{
									Write-Verbose "  - Using Stop-FtoolForm function..." -ForegroundColor Cyan
									Stop-FtoolForm -Form $form -ErrorAction Stop # Call specific cleanup.
								}
								else # Basic backup cleanup.
								{
									Write-Verbose "  - Stop-FtoolForm command not found. Performing basic Close() for form '$formText'." -ForegroundColor Yellow
									# Ask the form to close nicely. This triggers FormClosing/FormClosed events.
									$form.Close()
									# Give a tiny moment for events to process, maybe not needed but can help sometimes.
									Start-Sleep -Milliseconds 20
								}
							}
							catch # Catch errors specifically from Stop-FtoolForm or Close().
							{
								Write-Verbose "  - Error during Stop-FtoolForm or Close() for form '$formText': $($_.Exception.Message)" -ForegroundColor Red
								# Mark overall cleanup as possibly failed, but continue to make sure Dispose() is called.
								$cleanupOverallSuccess = $false
							}
							finally # Always try to dispose the form directly, whether Close() worked or not.
							{
								Write-Verbose "  - Ensuring Dispose() is called for form '$formText'." -ForegroundColor Cyan
								try
								{
									if (-not $form.IsDisposed)
									{
										$form.Dispose() 
									}
								}
								catch
								{
									Write-Verbose "  - Error during final Dispose() for form '$formText': $($_.Exception.Message)" -ForegroundColor Red
									$cleanupOverallSuccess = $false
								}
							}
						}
						elseif ($form -and $form -is [System.Windows.Forms.Form] -and $form.IsDisposed)
						{
							Write-Verbose "  - Ftool form with Key '$key' was already disposed." -ForegroundColor DarkGray
						}
						else
						{
							Write-Verbose "  - Ftool form entry with Key '$key' is null or not a valid Form object." -ForegroundColor Yellow
							$cleanupOverallSuccess = $false
						}
							
						# Remove the entry from the tracking list after trying cleanup.
						$ftoolForms.Remove($key) | Out-Null
					} # End foreach form key
					Write-Verbose "- Finished Ftool form cleanup." -ForegroundColor Green
				}
				else
				{
					Write-Verbose "  No active Ftool forms found in configuration to clean up." -ForegroundColor DarkGray 
				}
			}
			catch # Catch errors in the Ftool cleanup part setup (e.g., accessing FtoolForms).
			{
				Write-Verbose "Error during Ftool form cleanup phase setup: $($_.Exception.Message)" -ForegroundColor Red
				$cleanupOverallSuccess = $false
			}
		#endregion Step 1: Clean Up Ftool Forms (if Ftool module was loaded/used)
			
		#region Step 2: Clean Up Application Timers
			Write-Verbose "Step 2: Cleaning up application timers..." -ForegroundColor Cyan
			try
			{
				# Check if the Timers list exists and has items.
				$timersCollection = $global:DashboardConfig.Resources.Timers
				if ($timersCollection -and $timersCollection.Count -gt 0)
				{
					Write-Verbose "- Found $($timersCollection.Count) timer registration(s). Stopping and disposing..." -ForegroundColor Cyan
					# Use a temporary list to gather all unique timer objects, handling possible nesting or duplicates.
					# $uniqueTimers - List of separate timer objects.
					[System.Collections.Generic.List[System.Windows.Forms.Timer]]$uniqueTimers = New-Object System.Collections.Generic.List[System.Windows.Forms.Timer]
						
					# Go through the registered items in the Timers list.
					# Items could be single timers, or nested lists (like hashtables) of timers.
					foreach ($item in $timersCollection.Values)
					{
						if ($item -is [System.Windows.Forms.Timer])
						{
							if (-not $uniqueTimers.Contains($item))
							{
								$uniqueTimers.Add($item) 
							}
						}
						elseif ($item -is [System.Collections.IDictionary])
						{
							# If item is another list, go through its values.
							$item.Values | Where-Object { $_ -is [System.Windows.Forms.Timer] } | ForEach-Object {
								if (-not $uniqueTimers.Contains($_))
								{
									$uniqueTimers.Add($_) 
								}
							}
						}
						# Add checks for other possible list types if used (like ArrayList).
					}
					Write-Verbose "- Found $($uniqueTimers.Count) unique System.Windows.Forms.Timer object(s) to dispose." -ForegroundColor Cyan
						
					# Go through the unique timer objects.
					foreach ($timer in $uniqueTimers)
					{
						try
						{
							# Check if timer object is valid and not already disposed.
							if ($timer -and -not $timer.IsDisposed) # Check IsDisposed before accessing properties like Enabled.
							{
								Write-Verbose "  - Disposing timer (Was Enabled: $($timer.Enabled))." -ForegroundColor Green
								# Stop the timer first if it's running now.
								if ($timer.Enabled)
								{
									$timer.Stop() 
								}
								# Dispose of the timer object to free up resources.
								$timer.Dispose()
							}
							else
							{
								Write-Verbose "  - Skipping already disposed or invalid timer object." -ForegroundColor DarkGray
							}
						}
						catch # Catch errors during individual timer Stop() or Dispose().
						{
							Write-Verbose "  - Error stopping or disposing a timer: $($_.Exception.Message)" -ForegroundColor Red
							$cleanupOverallSuccess = $false # Mark overall cleanup as possibly incomplete.
						}
					} # End foreach timer
						
					# Clear the main timer list in the global config after trying disposal.
					Write-Verbose "- Clearing global timer registration collection." -ForegroundColor Cyan
					$timersCollection.Clear()
					Write-Verbose "- Finished timer cleanup." -ForegroundColor Green
				}
				else
				{
					Write-Verbose "- No active timers found in configuration to clean up." -ForegroundColor DarkGray 
				}
			}
			catch # Catch errors in the timer cleanup part setup.
			{
				Write-Verbose "Error during timer cleanup phase setup: $($_.Exception.Message)" -ForegroundColor Red
				$cleanupOverallSuccess = $false
			}
		#endregion Step 2: Clean Up Application Timers
			
		#region Step 3: Clean Up Main UI Form
			Write-Verbose "Step 3: Cleaning up main UI form..." -ForegroundColor Cyan
			try
			{
				# Check if the main form object exists, is a Form, and is not already disposed.
				$mainForm = $global:DashboardConfig.UI.PSObject.Properties['MainForm']
				if ($mainForm -and $mainForm.Value -is [System.Windows.Forms.Form] -and -not $mainForm.Value.IsDisposed)
				{
					Write-Verbose "- Disposing MainForm object..." -ForegroundColor DarkGray
					# Dispose of the main form object. Should trigger its FormClosed event if not already closed.
					$mainForm.Value.Dispose()
					Write-Verbose "- [OK] MainForm disposed." -ForegroundColor Green
				}
				elseif ($mainForm -and $mainForm.Value -is [System.Windows.Forms.Form] -and $mainForm.Value.IsDisposed)
				{
					Write-Verbose "- MainForm was already disposed." -ForegroundColor Yellow
				}
				else
				{
					Write-Verbose "- MainForm object not found or invalid in configuration." -ForegroundColor Yellow
				}
			}
			catch # Catch errors during main form disposal.
			{
				Write-Verbose "Error disposing main UI form: $($_.Exception.Message)" -ForegroundColor Red
				$cleanupOverallSuccess = $false
			}
		#endregion Step 3: Clean Up Main UI Form
			
		#region Step 4: Reset Application State Flags
			Write-Verbose "Step 5: Resetting application state flags..." -ForegroundColor Cyan
			try
			{
				# Reset flags to show the app is no longer active/set up.
				$global:DashboardConfig.State.UIInitialized = $null
				$global:DashboardConfig.State.LoginActive = $null
				$global:DashboardConfig.State.LaunchActive = $null
				$global:DashboardConfig.State.ConfigInitialized = $null
				$global:DashboardConfig.LoadedModules = $null
				Write-Verbose "- State flags reset." -ForegroundColor Green
			}
			catch # Catch errors during state flag resetting.
			{
				Write-Verbose "  Error resetting global state flags: $($_.Exception.Message)" -ForegroundColor Red
				# Continue cleanup even with this small issue.
				$cleanupOverallSuccess = $false
			}
		#endregion Step 4: Reset Application State Flags
				
		#region Step 5: Final Log Message for Cleanup Status
			# Set log color based on overall cleanup success flag.
			# $finalColor - Text, 'Green' for success, 'Yellow' for partial success/warnings.
			[string]$finalColor = if ($cleanupOverallSuccess)
			{
				'Green' 
			}
			else
			{
				'Yellow' 
			}
			Write-Verbose "--- Dashboard Cleanup Finished. Overall Success: $cleanupOverallSuccess ---" -ForegroundColor $finalColor
		#endregion Step 5: Final Log Message
			
		# Return the overall success status of the cleanup actions.
		return $cleanupOverallSuccess
	}
#endregion Function: Stop-Dashboard

#endregion UI and Application Lifecycle Functions

#region Main Execution Block

# This is the main start point and control flow of the script.
Write-Verbose "=========================================" -ForegroundColor Cyan
Write-Verbose "=== Initializing Entropia Dashboard ===" -ForegroundColor Cyan
Write-Verbose "=== Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ===" -ForegroundColor Cyan
Write-Verbose "=========================================" -ForegroundColor Cyan
	
# Main try/catch/finally block to manage the app life cycle and ensure cleanup.
try
{
	#region Step 1: Ensure Correct Execution Environment (Admin, 32-bit, Bypass Policy)
		Write-Verbose "--- Step 1: Ensuring Correct Execution Environment ---" -ForegroundColor Cyan
		# Request-Elevation checks and might restart the script. If it restarts, this one exits here.
		Request-Elevation
		# If script continues, Request-Elevation decided no restart needed OR restart failed (error shown, exited).
		# Initialize-ScriptEnvironment does final checks *after* possible restart.
		if (-not (Initialize-ScriptEnvironment))
		{
			# If checks fail even after possible restart try, throw a major error. Show-ErrorDialog was probably called inside.
			throw 'Environment verification failed (Admin/32-bit/Bypass). Cannot continue.'
		}
		Write-Verbose "[OK] Environment verified successfully." -ForegroundColor Green
	#endregion Step 1: Ensure Correct Execution Environment (Admin, 32-bit, Bypass Policy)
		
	#region Step 2: Initialize Base Configuration (AppData Paths)
		Write-Verbose "--- Step 2: Initializing Base Configuration (AppData Paths) ---" -ForegroundColor Cyan
		if (-not (Initialize-BaseConfig))
		{
			# If essential paths can't be made/checked writable, throw major error. Show-ErrorDialog probably called inside.
			throw 'Failed to initialize base application paths in %APPDATA%. Cannot continue.'
		}
		Write-Verbose "[OK] Base configuration paths initialized successfully." -ForegroundColor Green
	#endregion Step 2: Initialize Base Configuration (AppData Paths)
		
	#region Step 3: Load Dashboard Modules (Write to AppData & Import)
		Write-Verbose "--- Step 3: Loading Dashboard Modules ---" -ForegroundColor Cyan
		# $importResult - PSCustomObject holding Status, LoadedModules, FailedModules, CriticalFailure.
		$importResult = Import-DashboardModules
		# $global:DashboardConfig.LoadedModules is updated directly inside Import-DashboardModules.
			
		# Check if the import process reported overall failure (specifically critical failure).
		if (-not $importResult.Status) # Status is false if CriticalFailure is true or an unhandled error happened.
		{
			# If critical modules failed, throw major error. Error details logged inside Import-DashboardModules.
			throw 'Critical module loading failed. Cannot continue.'
		}
		# Non-critical failures were logged as warnings/info inside Import-DashboardModules.
		Write-Verbose "[OK] Core modules loaded successfully (Non-critical failures may exist, see logs)." -ForegroundColor Green
	#endregion Step 3: Load Dashboard Modules (Write to AppData & Import)
		
	#region Step 4: Load INI Configuration File
		Write-Verbose "--- Step 4: Loading INI Configuration ---" -ForegroundColor Cyan
		# Check if the Initialize-IniConfig function (expected from ini.psm1) is available.
		if (Get-Command Initialize-IniConfig -ErrorAction SilentlyContinue) # Just use Get-Command
		{
			Write-Verbose "Calling Initialize-IniConfig..." -ForegroundColor Cyan
			try
			{
				# Run the INI loading function. Assuming it returns true/false or handles errors itself.
				[bool]$iniLoadSuccess = Initialize-IniConfig -ErrorAction Stop # Call directly
				if (-not $iniLoadSuccess)
				{
					# Log a warning if INI loading fails (as function reported), but continue with defaults.
					Write-Verbose "  Initialize-IniConfig reported failure. Default configuration values may be used." -ForegroundColor Yellow
				}
				else
				{
					Write-Verbose "[OK] INI configuration loaded successfully." -ForegroundColor Green 
				}
			}
			catch
			{
				Write-Verbose "  Error occurred during Initialize-IniConfig execution: $($_.Exception.Message). Default configuration values may be used." -ForegroundColor Yellow
			}
		}
		else
		{
			# Log a warning if the function is missing
			Write-Verbose "  Initialize-IniConfig function not found. Skipping INI load, defaults will be used." -ForegroundColor Yellow
		}
	#endregion Step 4: Load INI Configuration File
		
	#region Step 5: Start Dashboard User Interface
		Write-Verbose "--- Step 5: Starting Dashboard UI ---" -ForegroundColor Cyan
		# Start-Dashboard sets up and shows the main window. It errors out on failure.
		if (-not (Start-Dashboard)) # This check is a bit extra as Start-Dashboard errors on failure, but safe.
		{
			# Error should have been thrown by Start-Dashboard and caught by outer catch block.
			# This throw might not be reached but makes sure script stops if Start-Dashboard somehow returned false without erroring.
			throw 'Start-Dashboard returned failure. Cannot continue.'
		}
		Write-Verbose "[OK] Dashboard UI started successfully." -ForegroundColor Green
	#endregion Step 5: Start Dashboard User Interface
		
	#region Step 6: Run UI Message Loop

		Write-Verbose "Attempting to bring MainForm to foreground using SetForegroundWindow..." -ForegroundColor Cyan
		$mainForm = $global:DashboardConfig.UI.MainForm
		$handle = $mainForm.Handle
		
		if ($handle -ne [IntPtr]::Zero) {
			# Give the window a moment to finish initializing after Show()
			Start-Sleep -Milliseconds 200 # Slightly longer delay might help
		
			# 1. Ensure the window is not minimized
			if ([Native]::IsWindowMinimized($handle)) {
				Write-Verbose "Window is minimized, restoring..." -ForegroundColor DarkGray
				[Native]::ShowWindow($handle, [Native]::SW_RESTORE) | Out-Null
				Start-Sleep -Milliseconds 150 # Extra delay after restore
			}
		
			# 2. Initial SetForegroundWindow attempt
			$success = [Native]::SetForegroundWindow($handle)
			Write-Verbose "Initial SetForegroundWindow result: $success" -ForegroundColor DarkGray
		
			# 3. If initial attempt failed, try the Alt-key simulation workaround
			if (-not $success) {
				Write-Verbose "Initial SetForegroundWindow failed. Attempting Alt-key simulation..." -ForegroundColor Yellow
				try {
					# Simulate Alt key press and release
					[Native]::keybd_event([Native]::VK_MENU, 0, [Native]::KEYEVENTF_EXTENDEDKEY, [UIntPtr]::Zero)
					Start-Sleep -Milliseconds 50
					[Native]::keybd_event([Native]::VK_MENU, 0, ([Native]::KEYEVENTF_EXTENDEDKEY -bor [Native]::KEYEVENTF_KEYUP), [UIntPtr]::Zero)
					Start-Sleep -Milliseconds 100 # Slightly longer pause after Alt release
		
					# Retry SetForegroundWindow - this is the crucial attempt
					$success = [Native]::SetForegroundWindow($handle)
					Write-Verbose "SetForegroundWindow result after Alt-key simulation: $success" -ForegroundColor DarkGray
		
				} catch {
					Write-Verbose "Error during Alt-key simulation or second SetForegroundWindow: $_" -ForegroundColor Red
					$success = $false
				}
			}
		
			# 4. Final Fallback: Use WinForms Activate if all else failed
			if (-not $success) {
				Write-Verbose "All SetForegroundWindow attempts failed. Using Activate() as fallback..." -ForegroundColor Yellow
				try {
					$mainForm.Activate()
					Write-Verbose "Activate() called." -ForegroundColor DarkGray
				} catch {
					Write-Verbose "Error calling Activate(): $_" -ForegroundColor Red
				}
			}
		} else {
			Write-Verbose "MainForm handle is zero, cannot force focus." -ForegroundColor Yellow
		}
		Write-Verbose "--- Step 6: Running UI Message Loop ---" -ForegroundColor Cyan
		# Start-MessageLoop pauses execution here until the main UI window is closed by user or code.
		# It handles UI responsiveness.
		Start-MessageLoop
		# Execution continues here only *after* the UI message loop has stopped (main window closed/disposed).
		Write-Verbose "UI Message loop finished. Proceeding to final cleanup..." -ForegroundColor Green
	#endregion Step 6: Run UI Message Loop
}
catch
{
	# --- Main Catch Block ---
	# Catches any unhandled major errors from the main setup or run steps (Steps 1-6).
	$errorMessage = "`nFATAL UNHANDLED ERROR during application lifecycle: $($_.Exception.Message)"
	Write-Verbose $errorMessage -ForegroundColor Red
		
	# Try showing the critical error in a pop-up box for the user to see.
	try
	{
		Show-ErrorDialog ($errorMessage + "`n`nPlease check console logs for details.`n`nStack Trace:`n" + $($_.ScriptStackTrace))
	}
	catch
	{
		# If even the error pop-up fails, log that failure to the error output.
		Write-Verbose "  Failed to show final error dialog. The critical error was: $errorMessage" -ForegroundColor Red
	}
	# App will then go to the 'finally' block for cleanup.
}
finally
{
	# --- Main Finally Block ---
	# This block *always* runs, whether the 'try' block finished okay,
	# threw an error caught by 'catch', or quit early via 'exit' (though cleanup after 'exit' can be iffy).
	# Very important to make sure resource cleanup happens.
	#region Step 7: Final Application Cleanup
		Write-Verbose "--- Step 7: Entering Final Application Cleanup ---" -ForegroundColor Cyan
		# Make sure Stop-Dashboard function exists before calling it.
		if (Get-Command Stop-Dashboard -ErrorAction SilentlyContinue)
		{
			# Call the main cleanup function.
			$cleanupStatus = Stop-Dashboard # Save return status (true/false) if needed.
			Write-Verbose "[OK] Stop-Dashboard execution completed (Overall Success: $cleanupStatus)." -ForegroundColor Green
		}
		else
		{
			# Log a warning if the main cleanup function is missing (shouldn't happen if modules loaded).
			Write-Verbose "  Stop-Dashboard function not found! Full resource cleanup may not occur." -ForegroundColor Yellow
			# Try minimal essential backup cleanup if possible (like dispose main form).
			Write-Verbose "  Attempting basic MainForm dispose as fallback..." -ForegroundColor Cyan
			try
			{
				$finalMainForm = $global:DashboardConfig.UI.PSObject.Properties['MainForm']
				if ($finalMainForm -and $finalMainForm.Value -is [System.Windows.Forms.Form] -and -not $finalMainForm.Value.IsDisposed)
				{
					$finalMainForm.Value.Dispose()
					Write-Verbose "  Fallback MainForm dispose successful." -ForegroundColor Red
				}
				else
				{
					Write-Verbose "  Fallback MainForm dispose skipped (form null, invalid, or already disposed)."  -ForegroundColor Red
				}
			}
			catch
			{
				Write-Verbose "  Fallback MainForm dispose attempt failed: $($_.Exception.Message)"  -ForegroundColor Red
			}
		}
			
		# Optional: Explicitly exit the Windows Forms app context if it was used.
		# Check if the assembly is loaded before calling Application static methods.
		if ([System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms'))
		{
			Write-Verbose "Requesting Windows Forms application context exit..." -ForegroundColor Cyan
			try
			{
				[System.Windows.Forms.Application]::ExitThread() 
			}
			catch
			{
				Write-Verbose "  Error calling Application.ExitThread(): $($_.Exception.Message)" -ForegroundColor Red
			} # ExitThread is often better in PS scripts than Exit().
			# try { [System.Windows.Forms.Application]::Exit() } catch { Write-Verbose "Error calling Application.Exit(): $($_.Exception.Message)"} -ForegroundColor Red
		}
			
		Write-Verbose "=========================================" -ForegroundColor Cyan
		Write-Verbose "=== Entropia Dashboard Exited ===" -ForegroundColor Cyan
		Write-Verbose "=== Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ===" -ForegroundColor Cyan
		Write-Verbose "=========================================" -ForegroundColor Cyan
	#endregion Step 7: Final Application Cleanup
}

#endregion Main Execution Block