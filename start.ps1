<# start.ps1
	.SYNOPSIS
		Initializes and launches the Entropia Dashboard application.

	.DESCRIPTION
		This script serves as the main entry point for the Entropia Dashboard. It performs critical environment checks,
		including Administrator rights verification, ensuring 32-bit execution context, and setting the required PowerShell
		Execution Policy ('Bypass') for the current process. It establishes necessary application paths within the user's
		AppData directory. The script manages the deployment and loading of PowerShell modules (.psm1) and associated
		resources (.dll, .ico) from the source directory or Base64 Content to the AppData directory, respecting defined load 
		order and dependencies. It includes robust fallback mechanisms for module loading, particularly for scenarios where 
		the	script might be running in different environments. Configuration settings are loaded from 'config.ini',
		with defaults applied if the file or specific settings are missing. Finally, it initializes the Windows Forms
		user interface (UI), runs the application message loop to keep the UI responsive, and handles graceful
		shutdown and resource cleanup via the 'finally' block and the Stop-Dashboard function.

	.NOTES
		Author: Immortal / Divine
		Version: 1.1
		Requires: PowerShell 5.1+, .NET Framework 4.5+, Administrator privileges, Bypassed 32-bit PowerShell execution.

		Documentation Standards Followed:
		- Module Level Documentation: Synopsis, Description, Notes.
		- Function Level Documentation: Synopsis, Parameter Descriptions, Output Specifications.
		- Code Organization: Logical grouping using #region / #endregion. Functions organized by workflow.
		- Step Documentation: Code blocks enclosed in '#region Step: Description' / '#endregion Step: Description'.
		- Variable Definitions: Inline comments describing the purpose of significant variables.
		- Error Handling: Comprehensive try/catch/finally blocks with error logging and user notification.

		Execution Policy Note: This script requires and attempts to set the execution policy to 'Bypass' for the *current process*.
		This is necessary for its dynamic module loading and execution features but reduces script execution security restrictions.
		Ensure you understand the implications before running this script in sensitive environments.

		Invoke-Expression Note: One of the fallback module import methods uses Invoke-Expression as a last resort. This cmdlet
		can execute arbitrary code and poses a security risk if the module content is compromised. This method is only used
		if standard Import-Module and safer alternatives fail.
#>

[CmdletBinding()]
param()

#region Detect -Verbose argument when running as EXE/Script
	# If -Verbose is passed as a command-line argument (especially relevant when compiled to EXE),
	# manually set the $VerbosePreference. 
	if ($args -contains '-Verbose') {
		$VerbosePreference = "Continue"
		Write-Verbose "-Verbose argument detected, enabling verbose preference."
	}
#endregion Detect -Verbose argument when running as EXE/Script

# Set execution policy *after* potentially setting $VerbosePreference
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force -ErrorAction Stop


#region Custom Write-Verbose


function Write-Verbose {
	[CmdletBinding()]
	param(
	[Parameter(Mandatory = $true, Position = 0)]
	[string]$Message,
	[string]$ForegroundColor = 'DarkGray'

	)
	
	# Only proceed if verbose output is enabled
	if ($VerbosePreference -eq "Continue") {
		$dateStr = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
		$callStack = Get-PSCallStack
		$caller = if ($callStack.Count -gt 1) { $callStack[1] } else { $callStack[0] }
		
		$callerName = if ($caller.Command) { $caller.Command } else { "Script" }
		
		$bracketedCaller = "[$callerName]"
		$paddedCaller = $bracketedCaller.PadRight(35)
		$prefix = "$dateStr - $paddedCaller - "
		$indentation = " " * $prefix.Length
		
		# Get console width for proper wrapping
        # Consider making this dynamic or configurable if 800 isn't always suitable
		$consoleWidth = if ($Host.UI.RawUI.WindowSize.Width -gt 0) {
			$Host.UI.RawUI.WindowSize.Width # Use actual width if available
		} else {
			800 # Default fallback width if console width can't be determined (e.g., non-interactive)
		}
        # Ensure consoleWidth is an integer for calculations
        try {
            $consoleWidth = [int]$consoleWidth
        } catch {
            $consoleWidth = 800 # Fallback if conversion fails
        }

		# Process message with proper wrapping and indentation
		$lines = $Message -split "`r`n"
		$formattedLines = @()
		
        # Calculate available width for text once
        $availableWidth = $consoleWidth - $prefix.Length - 2 # Subtract 2 for potential padding/margin

		foreach ($line in $lines) {
			# If line is shorter than available width, add it as-is
			if ($line.Length -le $availableWidth) {
				$formattedLines += $line
			} else {
				# For long lines, wrap them with proper word breaks
				$words = $line -split ' '
				$currentLine = ""
				
				foreach ($word in $words) {
					# Check if adding this word would exceed the line length
					if (($currentLine.Length + $word.Length + 1) -le $availableWidth) {
						# Add word with space
						if ($currentLine.Length -gt 0) {
							$currentLine += " $word"
						} else {
							$currentLine = $word
						}
					} else {
						# Line would be too long, add current line to results and start a new one
						if ($currentLine.Length -gt 0) {
							$formattedLines += $currentLine
							$currentLine = $word
						} else {
							# Word itself is too long for a line, add it anyway (might still overflow slightly)
							$formattedLines += $word
							$currentLine = ""
						}
					}
				}
				
				# Add the last line if not empty
				if ($currentLine.Length -gt 0) {
					$formattedLines += $currentLine
				}
			}
		}
		
		# Join lines with proper indentation for wrapped lines
        # Ensure there's at least one line before accessing index 0
        $formattedMessage = ""
        if ($formattedLines.Count -gt 0) {
            $formattedMessage = $formattedLines[0]
            for ($i = 1; $i -lt $formattedLines.Count; $i++) {
                $formattedMessage += "`r`n$indentation$($formattedLines[$i])"
            }
        }
		
		# Set color based on message type (Using a switch statement is slightly cleaner)
        $color = switch ($ForegroundColor.ToLower()) {
            'red'    { [ConsoleColor]::Red }
            'yellow' { [ConsoleColor]::Yellow }
            'green'  { [ConsoleColor]::Green }
            'cyan'   { [ConsoleColor]::Cyan }
            default  { [ConsoleColor]::DarkGray }
        }

		# Output to console with color
		$originalColor = $host.UI.RawUI.ForegroundColor
		try {
			$host.UI.RawUI.ForegroundColor = $color
            # Write to Error stream to ensure it appears like standard Write-Verbose
			[Console]::Error.WriteLine("$prefix$formattedMessage")
		} finally {
			$host.UI.RawUI.ForegroundColor = $originalColor
		}
		
		# Also write to the verbose stream for proper logging/capture
        # This part seems overly complex and might not be necessary if [Console]::Error.WriteLine works reliably.
        # The standard Write-Verbose cmdlet should handle redirection correctly if called properly.
        # Consider simplifying this or ensuring it adds value. For now, keeping as is.
		$wrappedCmdlet = $ExecutionContext.InvokeCommand.GetCommand(
		"Microsoft.PowerShell.Utility\Write-Verbose",
		[System.Management.Automation.CommandTypes]::Cmdlet
		)
		
		# Use steppable pipeline for PowerShell 5.1 compatibility
		$scriptCmd = { & $wrappedCmdlet "$prefix$formattedMessage" }
		$steppablePipeline = $scriptCmd.GetSteppablePipeline()
		$steppablePipeline.Begin($true)
        # Ensure pipeline output is processed/ended if necessary
        # $steppablePipeline.Process($_) # If processing input
        $steppablePipeline.End() # Ensure pipeline completes
	}
}

try {
	Add-Type -AssemblyName System.Windows.Forms, System.Drawing
	Write-Verbose "INFO: Loaded System.Windows.Forms and System.Drawing assembly" # This will now work if -Verbose was passed
} catch {
	# Use the custom Write-Verbose for consistency, it checks $VerbosePreference internally
	Write-Verbose "ERROR: Failed to load required assemblies: $_" -ForegroundColor Red
	throw "Failed to initialize application. Required assemblies could not be loaded: $_"
}

#endregion Custom Write-Verbose

#region Global Configuration

	#region Step: Define Global Configuration Hashtable
		# This main hashtable holds all our settings, states, paths, resources, and module info. It's available everywhere in the script.
		$global:DashboardConfig = @{
			# Paths: Stores important folders and file locations for the app.
			Paths            = @{
				# Source: Folder with the dashboard's source scripts (.ps1, .psm1) and things like .dlls or .icos. Usually in the user's profile.
				Source   = Join-Path $env:USERPROFILE 'Entropia_Dashboard\.main'
				# App: The main app data folder in AppData\Roaming. We put modules, config files, and maybe logs here.
				App      = Join-Path $env:APPDATA 'Entropia_Dashboard\'
				# Modules: Subfolder in the AppData path. Write-Module puts module files (.psm1), libraries (.dll), and icons (.ico) here before loading them.
				Modules  = Join-Path $env:APPDATA 'Entropia_Dashboard\modules'
				# Icon: Full path to the app's icon file (.ico) for the main window. It should end up in the Modules folder.
				Icon     = Join-Path $env:APPDATA 'Entropia_Dashboard\modules\icon.ico'
				# FtoolDLL: Full path to ftool.dll, needed if the optional 'ftool.psm1' module is used. Should also be in the Modules folder.
				FtoolDLL = Join-Path $env:APPDATA 'Entropia_Dashboard\modules\ftool.dll'
				# Config: Full path to the main settings file ('config.ini'). Saves user choices and app settings. Found in the main AppData folder.
				Ini   = Join-Path $env:APPDATA 'Entropia_Dashboard\config.ini'
			}
			# State: Keeps track of what the application is doing right now.
			State            = @{
				# ConfigInitialized: Flag ($true/$false) to check if basic setup (like creating app folders) worked.
				ConfigInitialized = $false
				# UIInitialized: Flag ($true/$false) to see if the main window was set up correctly by 'ui.psm1'.
				UIInitialized     = $false
				# LoginActive: Flag ($true/$false) showing if an auto-login (from 'login.psm1') is running. Prevents doing it twice.
				LoginActive       = $false
				# LaunchActive: Flag ($true/$false) showing if a game launch (from 'launch.psm1') is happening. Prevents double launches.
				LaunchActive      = $false
				# IsRunningAsExe: Flag ($true/$false) figured out at start. True if running as an .exe, not a .ps1 script. Changes how modules load.
				IsRunningAsExe    = $false
			}
			# Resources: Groups for handling things that change, like timers, windows, and shared info.
			Resources        = @{
				# Timers: An ordered list ([ordered]@{...}) holding active timers (System.Windows.Forms.Timer) used by the app or modules. Stopped/cleaned up on exit.
				Timers              = [ordered]@{}
				# FtoolForms: An ordered list ([ordered]@{...}) keeping track of active Ftool windows (from 'ftool.psm1'). Closed/cleaned up on exit.
				FtoolForms          = [ordered]@{}
				# LastEventTimes: A list (@{...}) remembering when named events last happened. Good for slowing down or grouping actions in modules.
				LastEventTimes      = @{}
				# ExtensionData: A general list (@{...}) for modules/extensions to store and share any data needed across the app.
				ExtensionData       = @{}
				# ExtensionTracking: A list (@{...}) for modules/extensions to track things like status flags, process IDs, or other state info.
				ExtensionTracking   = @{}
				# LoadedModuleContent: A list (@{...}) holding the actual text content of loaded .psm1 modules. Mainly for backup loading methods or debugging.
				LoadedModuleContent = @{}
				# LaunchResources: A list (@{...}) for the launch module to store resources specific to launching game clients.
				LaunchResources     = @{}
			}
			# UI: Empty list (@{...}) filled by 'ui.psm1' when the UI starts. Holds references to important UI parts (windows, buttons, grids).
			UI               = @{
				Login        = @{}
			}
			# DefaultConfig: An ordered list ([ordered]@{...}) with default settings. Used by 'ini.psm1' if 'config.ini' is missing or incomplete.
			DefaultConfig    = [ordered]@{
				'LauncherPath' = [ordered]@{ 'LauncherPath' = 'Select_Launcher' } # Default if the game launcher path isn't in config.ini.
				'ProcessName'  = [ordered]@{ 'ProcessName' = 'neuz' }         # Default game process name to watch or use.
				'MaxClients'   = [ordered]@{ 'MaxClients' = '1' }                # Default max number of game clients allowed.
				'Login'        = [ordered]@{ 'Login' = '1,1,1,1,1,1,1,1,1,1' }             # Default list of login settings (format depends on 'login.psm1').
				'Ftool'        = [ordered]@{}                                    # Default empty section for 'ftool.psm1' related settings.
			}
			# Config: An ordered list ([ordered]@{...}) filled by 'ini.psm1' with settings from 'config.ini'. Overwrites defaults.
			Config           = [ordered]@{}
			# ConfigWriteTimer: Might hold a timer used by 'ini.psm1' to delay saving 'config.ini' often. Better performance, less disk activity.
			ConfigWriteTimer = @{}
			# LoadedModules: A list (@{...}) tracking filenames and full paths of modules that were written to AppData and/or loaded. Used for checking dependencies.
			LoadedModules    = @{}
		}
	#endregion Step: Define Global Configuration Hashtable

	#region Step: Define Module Metadata
		# Info about all known app modules: load order, importance (critical?), dependencies, and source file path.
		$global:DashboardConfig.Modules = @{
			# Critical modules: Must have these for the dashboard to work. If they fail, the app won't start.
			'classes.psm1'  = @{ 
				Priority = 'Critical';  
				Order = 1; 
				Dependencies = @();
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'classes.psm1');
				Base64Content = '
					PCMgY2xhc3Nlcy5wc20xDQogICAgLlNZTk9QU0lTDQogICAgICAgIENvcmUgU3lzdGVtIEludGVncmF0aW9uIE1vZHVsZSBmb3IgRW50cm9waWEgRGFzaGJvYXJkLg0KICAgIC5ERVNDUklQVElPTg0KICAgICAgICBUaGlzIG1vZHVsZSBwcm92aWRlcyBsb3ctbGV2ZWwgc3lzdGVtIGFjY2VzcyBjYXBhYmlsaXRpZXMgZm9yIHRoZSBFbnRyb3BpYSBEYXNoYm9hcmQ6DQogICAgICAgIC0gV2luZG93IG1hbmFnZW1lbnQgKHBvc2l0aW9uLCBmb2N1cywgbWluaW1pemUsIHJlc3RvcmUpDQogICAgICAgIC0gUHJvY2VzcyBkZXRlY3Rpb24gYW5kIG1vbml0b3JpbmcNCiAgICAgICAgLSBBc3luY2hyb25vdXMgd2luZG93IHN0YXRlIGNoZWNraW5nDQogICAgICAgIC0gQ29uZmlndXJhdGlvbiBmaWxlIGhhbmRsaW5nIHRocm91Z2ggSU5JIGZpbGVzDQogICAgICAgIC0gRXh0ZXJuYWwgRExMIGludGVncmF0aW9uIGZvciBmdG9vbCBpbnRlcmFjdGlvbg0KICAgICAgICAtIFRocmVhZC1zYWZlIFVJIG9wZXJhdGlvbnMNCg0KICAgICAgICBDbGFzc2VzIERlZmluZWQgKENvbXBpbGVkIGZyb20gQyMpOg0KICAgICAgICAtIE5hdGl2ZTogV2luZG93cyBBUEkgYWNjZXNzIGZvciB3aW5kb3cgYW5kIHByb2Nlc3MgbWFuYWdlbWVudCB2aWEgUC9JbnZva2UuDQogICAgICAgIC0gRnRvb2w6IEdhbWUtc3BlY2lmaWMgRExMIGludGVncmF0aW9uIGZvciBlbmhhbmNlZCBmdW5jdGlvbmFsaXR5Lg0KICAgICAgICAtIEluaUZpbGU6IENvbmZpZ3VyYXRpb24gZmlsZSByZWFkaW5nIGFuZCB3cml0aW5nLg0KICAgICAgICAtIERhcmtDb21ib0JveDogQ3VzdG9tIHN0eWxlZCBDb21ib0JveCBmb3IgZGFyayB0aGVtZSBVSS4NCiAgICAuTk9URVMNCiAgICAgICAgQXV0aG9yOiBJbW1vcnRhbCAvIERpdmluZQ0KICAgICAgICBWZXJzaW9uOiAxLjINCiAgICAgICAgUmVxdWlyZXM6IFBvd2VyU2hlbGwgNS4xKywgLk5FVCBGcmFtZXdvcmsgNC41KywgQWRtaW5pc3RyYXRvciByaWdodHMNCg0KICAgICAgICBEb2N1bWVudGF0aW9uIFN0YW5kYXJkcyBGb2xsb3dlZDoNCiAgICAgICAgLSBNb2R1bGUgTGV2ZWwgRG9jdW1lbnRhdGlvbjogU3lub3BzaXMsIERlc2NyaXB0aW9uLCBOb3Rlcy4NCiAgICAgICAgLSBGdW5jdGlvbiBMZXZlbCBEb2N1bWVudGF0aW9uOiBTeW5vcHNpcywgUGFyYW1ldGVyIERlc2NyaXB0aW9ucywgT3V0cHV0IFNwZWNpZmljYXRpb25zLg0KICAgICAgICAtIENvZGUgT3JnYW5pemF0aW9uOiBMb2dpY2FsIGdyb3VwaW5nIHVzaW5nICNyZWdpb24gLyAjZW5kcmVnaW9uLiBGdW5jdGlvbnMgb3JnYW5pemVkIGJ5IHdvcmtmbG93Lg0KICAgICAgICAtIFN0ZXAgRG9jdW1lbnRhdGlvbjogQ29kZSBibG9ja3MgZW5jbG9zZWQgaW4gJyNyZWdpb24gU3RlcDogRGVzY3JpcHRpb24nIC8gJyNlbmRyZWdpb24gU3RlcDogRGVzY3JpcHRpb24nLg0KICAgICAgICAtIFZhcmlhYmxlIERlZmluaXRpb25zOiBJbmxpbmUgY29tbWVudHMgZGVzY3JpYmluZyB0aGUgcHVycG9zZSBvZiBzaWduaWZpY2FudCB2YXJpYWJsZXMuDQogICAgICAgIC0gRXJyb3IgSGFuZGxpbmc6IENvbXByZWhlbnNpdmUgdHJ5L2NhdGNoL2ZpbmFsbHkgYmxvY2tzIHdpdGggZXJyb3IgbG9nZ2luZyBhbmQgdXNlciBub3RpZmljYXRpb24uDQoNCiAgICAgICAgVGhpcyBtb2R1bGUgY29tcGlsZXMgQyMgY29kZSBhdCBydW50aW1lIHVzaW5nIEFkZC1UeXBlLiBDaGFuZ2VzIHRvIHRoZSBDIyBzb3VyY2UNCiAgICAgICAgcmVxdWlyZSByZXN0YXJ0aW5nIHRoZSBQb3dlclNoZWxsIHNlc3Npb24gb3IgcmUtaW1wb3J0aW5nIHRoZSBtb2R1bGUuDQojPg0KDQojcmVnaW9uIEdsb2JhbCBDb25maWd1cmF0aW9uDQogICAgI3JlZ2lvbiBTdGVwOiBEZWZpbmUgUmVmZXJlbmNlZCBBc3NlbWJsaWVzDQogICAgICAgICMgJHNjcmlwdDpSZWZlcmVuY2VkQXNzZW1ibGllczogU3BlY2lmaWVzIC5ORVQgYXNzZW1ibGllcyByZXF1aXJlZCBieSB0aGUgQyMgY2xhc3Nlcy4NCiAgICAgICAgJHNjcmlwdDpSZWZlcmVuY2VkQXNzZW1ibGllcyA9IEAoDQogICAgICAgICAgICAnU3lzdGVtLldpbmRvd3MuRm9ybXMnLA0KICAgICAgICAgICAgJ1N5c3RlbS5EcmF3aW5nJywNCgkJCSdTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uJw0KICAgICAgICApDQogICAgI2VuZHJlZ2lvbiBTdGVwOiBEZWZpbmUgUmVmZXJlbmNlZCBBc3NlbWJsaWVzDQoNCiAgICAjcmVnaW9uIFN0ZXA6IERlZmluZSBDb21waWxhdGlvbiBPcHRpb25zDQogICAgICAgICMgJHNjcmlwdDpDb21waWxhdGlvbk9wdGlvbnM6IEhhc2h0YWJsZSBzdG9yaW5nIHBhcmFtZXRlcnMgZm9yIHRoZSBBZGQtVHlwZSBjbWRsZXQgdXNlZCB0byBjb21waWxlIHRoZSBDIyBjbGFzc2VzLg0KICAgICAgICAkc2NyaXB0OkNvbXBpbGF0aW9uT3B0aW9ucyA9IEB7DQogICAgICAgICAgICBMYW5ndWFnZSAgICAgICAgICAgICA9ICdDU2hhcnAnDQogICAgICAgICAgICBSZWZlcmVuY2VkQXNzZW1ibGllcyA9ICRzY3JpcHQ6UmVmZXJlbmNlZEFzc2VtYmxpZXMNCiAgICAgICAgICAgIFdhcm5pbmdBY3Rpb24gICAgICAgID0gJ1NpbGVudGx5Q29udGludWUnICMgU3VwcHJlc3MgY29tcGlsYXRpb24gd2FybmluZ3MNCiAgICAgICAgfQ0KICAgICNlbmRyZWdpb24gU3RlcDogRGVmaW5lIENvbXBpbGF0aW9uIE9wdGlvbnMNCiNlbmRyZWdpb24gR2xvYmFsIENvbmZpZ3VyYXRpb24NCg0KI3JlZ2lvbiBDIyBDbGFzcyBEZWZpbml0aW9ucw0KICAgIDwjDQogICAgLlNZTk9QU0lTDQogICAgICAgIEMjIGNsYXNzIGRlZmluaXRpb25zIGZvciBzeXN0ZW0gaW50ZWdyYXRpb24gd2l0aCBXaW5kb3dzIEFQSXMgYW5kIC5ORVQgRnJhbWV3b3JrLg0KICAgIC5ERVNDUklQVElPTg0KICAgICAgICBDb250YWlucyB0aGUgZm9sbG93aW5nIGNsYXNzIGRlZmluaXRpb25zIGVtYmVkZGVkIHdpdGhpbiBhIFBvd2VyU2hlbGwgaGVyZS1zdHJpbmc6DQogICAgICAgIC0gTmF0aXZlOiBQL0ludm9rZSBkZWZpbml0aW9ucyBmb3IgV2luZG93cyBBUEkgZnVuY3Rpb25zICh3aW5kb3cgbWFuYWdlbWVudCwgcHJvY2VzcyBpbmZvLCBldGMuKS4NCiAgICAgICAgLSBGdG9vbDogSW50ZWdyYXRpb24gd2l0aCB0aGUgRlRvb2wgRExMIGZvciBnYW1lIGF1dG9tYXRpb24gdmlhIFAvSW52b2tlLg0KICAgICAgICAtIEluaUZpbGU6IENsYXNzIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIGNvbmZpZ3VyYXRpb24gZGF0YSBmcm9tL3RvIElOSSBmaWxlcy4NCiAgICAgICAgLSBEYXJrQ29tYm9Cb3g6IEN1c3RvbS1zdHlsZWQgQ29tYm9Cb3ggY29udHJvbCBpbmhlcml0aW5nIGZyb20gU3lzdGVtLldpbmRvd3MuRm9ybXMuQ29tYm9Cb3ggZm9yIGRhcmsgVUkgdGhlbWVzLg0KICAgICAgICAtIEhvdGtleUhhbmRsZXI6IEluaGVyaXRzIGZyb20gTmF0aXZlV2luZG93IHRvIGludGVyY2VwdCBXTV9IT1RLRVkgbWVzc2FnZXMgZm9yIGEgc3BlY2lmaWMgZm9ybS4NCiAgICAuTk9URVMNCiAgICAgICAgVGhlc2UgY2xhc3NlcyBhcmUgY29tcGlsZWQgYXQgcnVudGltZSB1c2luZyBBZGQtVHlwZSB3aXRoaW4gdGhlIEluaXRpYWxpemUtQ2xhc3Nlc01vZHVsZSBmdW5jdGlvbi4NCiAgICAgICAgVGhlIEMjIGNvZGUgdXNlcyBQL0ludm9rZSBleHRlbnNpdmVseSBmb3IgbG93LWxldmVsIHN5c3RlbSBhY2Nlc3MuDQogICAgICAgIFRoZSBGdG9vbCBjbGFzcyBwYXRoIGRlcGVuZHMgb24gdGhlICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkZ0b29sRExMIHZhcmlhYmxlIGJlaW5nIHNldCBjb3JyZWN0bHkgZWxzZXdoZXJlLg0KICAgICM+DQogICAgI3JlZ2lvbiBTdGVwOiBEZWZpbmUgQyMgQ2xhc3MgU3RyaW5nDQogICAgICAgICMgJGNsYXNzZXM6IEhlcmUtc3RyaW5nIGNvbnRhaW5pbmcgdGhlIEMjIHNvdXJjZSBjb2RlIGZvciBOYXRpdmUsIEZ0b29sLCBJbmlGaWxlLCBEYXJrQ29tYm9Cb3gsIGFuZCBIb3RrZXlIYW5kbGVyIGNsYXNzZXMuDQogICAgICAgICMgVGhpcyBzdHJpbmcgaXMgcGFzc2VkIHRvIEFkZC1UeXBlIGZvciBjb21waWxhdGlvbi4NCiAgICAgICAgJGNsYXNzZXMgPSBAIg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uV2luZG93cy5Gb3JtczsNCnVzaW5nIFN5c3RlbS5EaWFnbm9zdGljczsNCnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9uczsNCnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljOw0KdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkOw0KdXNpbmcgU3lzdGVtLkRyYXdpbmc7DQp1c2luZyBTeXN0ZW0uSU87DQp1c2luZyBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXM7DQp1c2luZyBTeXN0ZW0uVGV4dDsNCnVzaW5nIFN5c3RlbS5UaHJlYWRpbmc7DQp1c2luZyBTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzOw0KdXNpbmcgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbjsgLy8gQWRkZWQgZm9yIFNjcmlwdEJsb2NrDQoNCi8vLyA8c3VtbWFyeT4NCi8vLyBXaW5kb3dzIEFQSSBmdW5jdGlvbnMgZm9yIHdpbmRvdyBhbmQgcHJvY2VzcyBtYW5hZ2VtZW50IHZpYSBQL0ludm9rZSAoUGxhdGZvcm0gSW52b2tlKS4NCi8vLyBQcm92aWRlcyBzdGF0aWMgbWV0aG9kcyB0byBpbnRlcmFjdCB3aXRoIHRoZSBXaW5kb3dzIG9wZXJhdGluZyBzeXN0ZW0gYXQgYSBsb3cgbGV2ZWwuDQovLy8gPC9zdW1tYXJ5Pg0KcHVibGljIHN0YXRpYyBjbGFzcyBOYXRpdmUNCnsNCgkvLyBQb3NpdGlvbiB3aW5kb3c6IFNldHMgdGhlIHNpemUsIHBvc2l0aW9uLCBhbmQgWiBvcmRlciBvZiBhIHdpbmRvdy4NCglbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgRW50cnlQb2ludCA9ICJTZXRXaW5kb3dQb3MiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCglwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFBvc2l0aW9uV2luZG93KA0KCQlJbnRQdHIgd2luZG93SGFuZGxlLCAgICAgIC8vIEhhbmRsZSB0byB0aGUgd2luZG93DQoJCUludFB0ciBpbnNlcnRBZnRlckhhbmRsZSwgLy8gSGFuZGxlIHRvIHRoZSB3aW5kb3cgdG8gcHJlY2VkZSB0aGUgcG9zaXRpb25lZCB3aW5kb3cgaW4gdGhlIFogb3JkZXINCgkJaW50IFgsICAgICAgICAgICAgICAgICAgICAvLyBOZXcgcG9zaXRpb24gb2YgdGhlIGxlZnQgc2lkZSBvZiB0aGUgd2luZG93DQoJCWludCBZLCAgICAgICAgICAgICAgICAgICAgLy8gTmV3IHBvc2l0aW9uIG9mIHRoZSB0b3Agb2YgdGhlIHdpbmRvdw0KCQlpbnQgd2lkdGgsICAgICAgICAgICAgICAgIC8vIE5ldyB3aWR0aCBvZiB0aGUgd2luZG93DQoJCWludCBoZWlnaHQsICAgICAgICAgICAgICAgLy8gTmV3IGhlaWdodCBvZiB0aGUgd2luZG93DQoJCVdpbmRvd1Bvc2l0aW9uT3B0aW9ucyBmbGFncyk7IC8vIFdpbmRvdyBzaXppbmcgYW5kIHBvc2l0aW9uaW5nIGZsYWdzDQoNCgkvLyBHZXQgd2luZG93IHNpemU6IFJldHJpZXZlcyB0aGUgZGltZW5zaW9ucyBvZiB0aGUgYm91bmRpbmcgcmVjdGFuZ2xlIG9mIHRoZSBzcGVjaWZpZWQgd2luZG93Lg0KCVtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBFbnRyeVBvaW50ID0gIkdldFdpbmRvd1JlY3QiKV0NCglwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIEdldFdpbmRvd1JlY3QoDQoJCUludFB0ciB3aW5kb3dIYW5kbGUsIC8vIEhhbmRsZSB0byB0aGUgd2luZG93DQoJCW91dCBSRUNUIHJlY3QpOyAgICAgIC8vIFBvaW50ZXIgdG8gYSBzdHJ1Y3R1cmUgdGhhdCByZWNlaXZlcyB0aGUgc2NyZWVuIGNvb3JkaW5hdGVzIG9mIHRoZSB3aW5kb3cNCg0KCS8vIENoYW5nZSB3aW5kb3cgc3RhdGU6IFNldHMgdGhlIHNwZWNpZmllZCB3aW5kb3cncyBzaG93IHN0YXRlLg0KCVtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBFbnRyeVBvaW50ID0gIlNob3dXaW5kb3ciKV0NCglwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFNob3dXaW5kb3coDQoJCUludFB0ciB3aW5kb3dIYW5kbGUsIC8vIEhhbmRsZSB0byB0aGUgd2luZG93DQoJCWludCBuQ21kU2hvdyk7ICAgICAgIC8vIENvbnRyb2xzIGhvdyB0aGUgd2luZG93IGlzIHRvIGJlIHNob3duIChlLmcuLCBTV19NSU5JTUlaRSwgU1dfUkVTVE9SRSkNCg0KCS8vIEZvY3VzIHdpbmRvdzogQnJpbmdzIHRoZSB0aHJlYWQgdGhhdCBjcmVhdGVkIHRoZSBzcGVjaWZpZWQgd2luZG93IGludG8gdGhlIGZvcmVncm91bmQgYW5kIGFjdGl2YXRlcyB0aGUgd2luZG93Lg0KCVtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBFbnRyeVBvaW50ID0gIlNldEZvcmVncm91bmRXaW5kb3ciKV0NCglwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFNldEZvcmVncm91bmRXaW5kb3coDQoJCUludFB0ciB3aW5kb3dIYW5kbGUpOyAvLyBIYW5kbGUgdG8gdGhlIHdpbmRvdw0KDQoJLy8gR2V0IGZvY3VzZWQgd2luZG93OiBSZXRyaWV2ZXMgYSBoYW5kbGUgdG8gdGhlIGZvcmVncm91bmQgd2luZG93ICh0aGUgd2luZG93IHdpdGggd2hpY2ggdGhlIHVzZXIgaXMgY3VycmVudGx5IHdvcmtpbmcpLg0KCVtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBFbnRyeVBvaW50ID0gIkdldEZvcmVncm91bmRXaW5kb3ciKV0NCglwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0Rm9yZWdyb3VuZFdpbmRvdygpOw0KDQoJLy8gR2V0IGFjdGl2ZSB3aW5kb3cgKGFsdGVybmF0aXZlIG5hbWUpOiBSZXRyaWV2ZXMgdGhlIHdpbmRvdyBoYW5kbGUgdG8gdGhlIGFjdGl2ZSB3aW5kb3cgYXR0YWNoZWQgdG8gdGhlIGNhbGxpbmcgdGhyZWFkJ3MgbWVzc2FnZSBxdWV1ZS4NCglbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgRW50cnlQb2ludCA9ICJHZXRBY3RpdmVXaW5kb3ciKV0NCglwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0QWN0aXZlV2luZG93SGFuZGxlKCk7DQoNCgkvLyBDaGVjayB2aXNpYmlsaXR5OiBEZXRlcm1pbmVzIHRoZSB2aXNpYmlsaXR5IHN0YXRlIG9mIHRoZSBzcGVjaWZpZWQgd2luZG93Lg0KCVtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBFbnRyeVBvaW50ID0gIklzV2luZG93VmlzaWJsZSIpXQ0KCXB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgSXNXaW5kb3dBY3RpdmUoIC8vIE5vdGU6IFJlbmFtZWQgaW4gQyMgZm9yIGNsYXJpdHksIG1hcHMgdG8gSXNXaW5kb3dWaXNpYmxlIEFQSQ0KCQlJbnRQdHIgd2luZG93SGFuZGxlKTsgLy8gSGFuZGxlIHRvIHRoZSB3aW5kb3cNCg0KCS8vIENoZWNrIGlmIG1pbmltaXplZDogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgd2luZG93IGlzIG1pbmltaXplZCAoaWNvbmljKS4NCglbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgRW50cnlQb2ludCA9ICJJc0ljb25pYyIpXQ0KCXB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgSXNXaW5kb3dNaW5pbWl6ZWQoDQoJCUludFB0ciB3aW5kb3dIYW5kbGUpOyAvLyBIYW5kbGUgdG8gdGhlIHdpbmRvdw0KDQoJLy8gQ2hhbmdlIHRpdGxlOiBDaGFuZ2VzIHRoZSB0ZXh0IG9mIHRoZSBzcGVjaWZpZWQgd2luZG93J3MgdGl0bGUgYmFyIChpZiBpdCBoYXMgb25lKS4NCglbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgRW50cnlQb2ludCA9ICJTZXRXaW5kb3dUZXh0IiwgU2V0TGFzdEVycm9yID0gdHJ1ZSwgQ2hhclNldCA9IENoYXJTZXQuQXV0byldDQoJcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBTZXRXaW5kb3dUaXRsZSgNCgkJSW50UHRyIHdpbmRvd0hhbmRsZSwgLy8gSGFuZGxlIHRvIHRoZSB3aW5kb3cNCgkJc3RyaW5nIHdpbmRvd1RpdGxlKTsgLy8gVGhlIG5ldyB0aXRsZSB0ZXh0DQoNCgkvLyBUZXN0IHJlc3BvbnNpdmVuZXNzOiBTZW5kcyB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UgdG8gb25lIG9yIG1vcmUgd2luZG93cywgd2FpdGluZyBmb3IgYSByZXNwb25zZSBvciB0aW1lb3V0Lg0KCS8vIFVzZWQgaGVyZSB0byBjaGVjayBpZiBhIHdpbmRvdyBpcyByZXNwb25kaW5nIChub3QgaHVuZykuDQoJW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIEVudHJ5UG9pbnQgPSAiU2VuZE1lc3NhZ2VUaW1lb3V0IiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQoJcHVibGljIHN0YXRpYyBleHRlcm4gSW50UHRyIEdldFdpbmRvd1Jlc3BvbnNlKCAvLyBOb3RlOiBSZW5hbWVkIGluIEMjIGZvciBjbGFyaXR5LCBtYXBzIHRvIFNlbmRNZXNzYWdlVGltZW91dCBBUEkNCgkJSW50UHRyIGhXbmQsICAgICAgICAgLy8gSGFuZGxlIHRvIHRoZSB3aW5kb3cgd2hvc2Ugd2luZG93IHByb2NlZHVyZSB3aWxsIHJlY2VpdmUgdGhlIG1lc3NhZ2UNCgkJdWludCBNc2csICAgICAgICAgICAgLy8gVGhlIG1lc3NhZ2UgdG8gYmUgc2VudCAoV01fTlVMTCBpcyBvZnRlbiB1c2VkIGZvciByZXNwb25zaXZlbmVzcyBjaGVja3MpDQoJCUludFB0ciB3UGFyYW0sICAgICAgIC8vIEFkZGl0aW9uYWwgbWVzc2FnZS1zcGVjaWZpYyBpbmZvcm1hdGlvbg0KCQlJbnRQdHIgbFBhcmFtLCAgICAgICAvLyBBZGRpdGlvbmFsIG1lc3NhZ2Utc3BlY2lmaWMgaW5mb3JtYXRpb24NCgkJdWludCBmdUZsYWdzLCAgICAgICAgLy8gSG93IHRvIHNlbmQgdGhlIG1lc3NhZ2UgKGUuZy4sIFNNVE9fQUJPUlRJRkhVTkcpDQoJCXVpbnQgdVRpbWVvdXQsICAgICAgIC8vIFRoZSBkdXJhdGlvbiBvZiB0aGUgdGltZS1vdXQgcGVyaW9kLCBpbiBtaWxsaXNlY29uZHMNCgkJb3V0IEludFB0ciBscGR3UmVzdWx0KTsgLy8gUmVjZWl2ZXMgdGhlIHJlc3VsdCBvZiB0aGUgbWVzc2FnZSBwcm9jZXNzaW5nDQoNCgkvLyBGcmVlIG1lbW9yeTogRW1wdGllcyB0aGUgd29ya2luZyBzZXQgb2YgdGhlIHNwZWNpZmllZCBwcm9jZXNzLg0KCVtEbGxJbXBvcnQoInBzYXBpLmRsbCIsIEVudHJ5UG9pbnQgPSAiRW1wdHlXb3JraW5nU2V0IildDQoJcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBFbXB0eVdvcmtpbmdTZXQoSW50UHRyIGhQcm9jZXNzKTsgLy8gSGFuZGxlIHRvIHRoZSBwcm9jZXNzDQoNCgkvLyBXYWl0IGZvciBldmVudHM6IFdhaXRzIHVudGlsIG9uZSBvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBvYmplY3RzIGFyZSBpbiB0aGUgc2lnbmFsZWQgc3RhdGUgb3IgdGhlIHRpbWUtb3V0IGludGVydmFsIGVsYXBzZXMuDQoJLy8gQ2FuIGFsc28gd2FpdCBmb3Igc3BlY2lmaWMgdHlwZXMgb2YgbWVzc2FnZXMuDQoJW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIEVudHJ5UG9pbnQgPSAiTXNnV2FpdEZvck11bHRpcGxlT2JqZWN0cyIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KCXB1YmxpYyBzdGF0aWMgZXh0ZXJuIHVpbnQgQXN5bmNFeGVjdXRpb24oIC8vIE5vdGU6IFJlbmFtZWQgaW4gQyMgZm9yIGNsYXJpdHksIG1hcHMgdG8gTXNnV2FpdEZvck11bHRpcGxlT2JqZWN0cyBBUEkNCgkJdWludCBuQ291bnQsICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2Ygb2JqZWN0IGhhbmRsZXMgaW4gdGhlIGFycmF5IHBvaW50ZWQgdG8gYnkgcEhhbmRsZXMNCgkJSW50UHRyW10gcEhhbmRsZXMsICAgIC8vIEFuIGFycmF5IG9mIG9iamVjdCBoYW5kbGVzDQoJCWJvb2wgYldhaXRBbGwsICAgICAgICAvLyBJZiBUUlVFLCB0aGUgZnVuY3Rpb24gcmV0dXJucyB3aGVuIHRoZSBzdGF0ZSBvZiBhbGwgb2JqZWN0cyBpcyBzaWduYWxlZA0KCQl1aW50IGR3TWlsbGlzZWNvbmRzLCAgLy8gVGhlIHRpbWUtb3V0IGludGVydmFsLCBpbiBtaWxsaXNlY29uZHMNCgkJdWludCBkd1dha2VNYXNrKTsgICAgIC8vIFRoZSB0eXBlcyBvZiBpbnB1dCBldmVudHMgZm9yIHdoaWNoIHRvIHdhaXQgKGUuZy4sIFFTX0FMTElOUFVUKQ0KDQoJLy8gQ2hlY2sgbWVzc2FnZXM6IERpc3BhdGNoZXMgaW5jb21pbmcgbm9ucXVldWVkIG1lc3NhZ2VzLCBjaGVja3MgdGhlIHRocmVhZCBtZXNzYWdlIHF1ZXVlIGZvciBhIHBvc3RlZCBtZXNzYWdlLCBhbmQgcmV0cmlldmVzIHRoZSBtZXNzYWdlIChpZiBhbnkgZXhpc3QpLg0KCVtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBFbnRyeVBvaW50ID0gIlBlZWtNZXNzYWdlIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQoJcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBQZWVrTWVzc2FnZSgNCgkJb3V0IE1TRyBscE1zZywgICAgICAgICAvLyBQb2ludGVyIHRvIGFuIE1TRyBzdHJ1Y3R1cmUgdGhhdCByZWNlaXZlcyBtZXNzYWdlIGluZm9ybWF0aW9uDQoJCUludFB0ciBoV25kLCAgICAgICAgICAgLy8gQSBoYW5kbGUgdG8gdGhlIHdpbmRvdyB3aG9zZSBtZXNzYWdlcyBhcmUgdG8gYmUgcmV0cmlldmVkIChOVUxMIGZvciB0aHJlYWQgbWVzc2FnZXMpDQoJCXVpbnQgd01zZ0ZpbHRlck1pbiwgICAgLy8gVGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBtZXNzYWdlIGluIHRoZSByYW5nZSBvZiBtZXNzYWdlcyB0byBiZSBleGFtaW5lZA0KCQl1aW50IHdNc2dGaWx0ZXJNYXgsICAgIC8vIFRoZSB2YWx1ZSBvZiB0aGUgbGFzdCBtZXNzYWdlIGluIHRoZSByYW5nZSBvZiBtZXNzYWdlcyB0byBiZSBleGFtaW5lZA0KCQl1aW50IHdSZW1vdmVNc2cpOyAgICAgIC8vIFNwZWNpZmllcyBob3cgbWVzc2FnZXMgYXJlIHRvIGJlIGhhbmRsZWQgKGUuZy4sIFBNX1JFTU9WRSkNCg0KCS8vIFByb2Nlc3Mga2V5IG1lc3NhZ2VzOiBUcmFuc2xhdGVzIHZpcnR1YWwta2V5IG1lc3NhZ2VzIGludG8gY2hhcmFjdGVyIG1lc3NhZ2VzLg0KCVtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBFbnRyeVBvaW50ID0gIlRyYW5zbGF0ZU1lc3NhZ2UiICldDQoJcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBUcmFuc2xhdGVNZXNzYWdlKA0KCQlyZWYgTVNHIGxwTXNnKTsgLy8gUG9pbnRlciB0byBhbiBNU0cgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgbWVzc2FnZSBpbmZvcm1hdGlvbiByZXRyaWV2ZWQgZnJvbSB0aGUgY2FsbGluZyB0aHJlYWQncyBtZXNzYWdlIHF1ZXVlDQoNCgkvLyBTZW5kIG1lc3NhZ2UgdG8gc3lzdGVtOiBEaXNwYXRjaGVzIGEgbWVzc2FnZSB0byBhIHdpbmRvdyBwcm9jZWR1cmUuDQoJW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIEVudHJ5UG9pbnQgPSAiRGlzcGF0Y2hNZXNzYWdlIiApXQ0KCXB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBEaXNwYXRjaE1lc3NhZ2UoDQoJCXJlZiBNU0cgbHBNc2cpOyAvLyBQb2ludGVyIHRvIHRoZSBzdHJ1Y3R1cmUgdGhhdCBjb250YWlucyB0aGUgbWVzc2FnZQ0KDQoJLy8gUmVsZWFzZSBtb3VzZTogUmVsZWFzZXMgbW91c2UgY2FwdHVyZSBmcm9tIGEgd2luZG93IGluIHRoZSBjdXJyZW50IHRocmVhZC4NCglbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgRW50cnlQb2ludCA9ICJSZWxlYXNlQ2FwdHVyZSIgKV0NCglwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFJlbGVhc2VDYXB0dXJlKCk7DQoNCgkvLyBTZW5kIHdpbmRvdyBtZXNzYWdlOiBTZW5kcyB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UgdG8gYSB3aW5kb3cgb3Igd2luZG93cy4NCglbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgRW50cnlQb2ludCA9ICJTZW5kTWVzc2FnZSIgKV0NCglwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgU2VuZE1lc3NhZ2UoDQoJCUludFB0ciBoV25kLCAgICAvLyBIYW5kbGUgdG8gdGhlIHdpbmRvdyB3aG9zZSB3aW5kb3cgcHJvY2VkdXJlIHdpbGwgcmVjZWl2ZSB0aGUgbWVzc2FnZQ0KCQlpbnQgTXNnLCAgICAgICAgLy8gVGhlIG1lc3NhZ2UgdG8gYmUgc2VudA0KCQlpbnQgd1BhcmFtLCAgICAgLy8gQWRkaXRpb25hbCBtZXNzYWdlLXNwZWNpZmljIGluZm9ybWF0aW9uDQoJCWludCBsUGFyYW0pOyAgICAvLyBBZGRpdGlvbmFsIG1lc3NhZ2Utc3BlY2lmaWMgaW5mb3JtYXRpb24NCg0KICAgIC8vIFJlZ2lzdGVyIEhvdGtleTogRGVmaW5lcyBhIHN5c3RlbS13aWRlIGhvdCBrZXkuDQogICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgUmVnaXN0ZXJIb3RLZXkoDQogICAgICAgIEludFB0ciBoV25kLCAgICAgICAgICAgICAvLyBIYW5kbGUgdG8gdGhlIHdpbmRvdyB0aGF0IHdpbGwgcmVjZWl2ZSBXTV9IT1RLRVkgbWVzc2FnZXMNCiAgICAgICAgaW50IGlkLCAgICAgICAgICAgICAgICAgIC8vIElkZW50aWZpZXIgb2YgdGhlIGhvdCBrZXkNCiAgICAgICAgdWludCBmc01vZGlmaWVycywgICAgICAgIC8vIEtleSBtb2RpZmllcnMgKE1PRF9BTFQsIE1PRF9DT05UUk9MLCBNT0RfU0hJRlQsIE1PRF9XSU4pDQogICAgICAgIHVpbnQgdmspOyAgICAgICAgICAgICAgICAvLyBWaXJ0dWFsLWtleSBjb2RlIG9mIHRoZSBob3Qga2V5DQoNCiAgICAvLyBVbnJlZ2lzdGVyIEhvdGtleTogRnJlZXMgYSBob3Qga2V5IHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBieSB0aGUgY2FsbGluZyB0aHJlYWQuDQogICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgVW5yZWdpc3RlckhvdEtleSgNCiAgICAgICAgSW50UHRyIGhXbmQsICAgICAgICAgICAgIC8vIEhhbmRsZSB0byB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgaG90IGtleQ0KICAgICAgICBpbnQgaWQpOyAgICAgICAgICAgICAgICAgLy8gSWRlbnRpZmllciBvZiB0aGUgaG90IGtleSB0byBiZSBmcmVlZA0KDQoJLy8vIDxzdW1tYXJ5Pg0KCS8vLyBIZWxwZXIgbWV0aG9kIHRvIGdldCBhIHdpbmRvdyBoYW5kbGUgKEludFB0cikgZnJvbSBlaXRoZXIgYW4gZXhpc3RpbmcgaGFuZGxlIG9yIGEgcHJvY2VzcyBJRC4NCgkvLy8gPC9zdW1tYXJ5Pg0KCS8vLyA8cGFyYW0gbmFtZT0id2luZG93SWRlbnRpZmllciI+RWl0aGVyIGFuIEludFB0ciB3aW5kb3cgaGFuZGxlIG9yIGFuIGludCBwcm9jZXNzIElELjwvcGFyYW0+DQoJLy8vIDxyZXR1cm5zPlRoZSB3aW5kb3cgaGFuZGxlIChJbnRQdHIpIG9yIEludFB0ci5aZXJvIGlmIG5vdCBmb3VuZC48L3JldHVybnM+DQoJcHVibGljIHN0YXRpYyBJbnRQdHIgR2V0V2luZG93SGFuZGxlKG9iamVjdCB3aW5kb3dJZGVudGlmaWVyKQ0KCXsNCgkJaWYgKHdpbmRvd0lkZW50aWZpZXIgaXMgSW50UHRyKQ0KCQl7DQoJCQlyZXR1cm4gKEludFB0cil3aW5kb3dJZGVudGlmaWVyOw0KCQl9DQoJCWlmICh3aW5kb3dJZGVudGlmaWVyIGlzIGludCkNCgkJew0KCQkJcmV0dXJuIEZpbmRXaW5kb3dCeVByb2Nlc3NJZCgoaW50KXdpbmRvd0lkZW50aWZpZXIpOw0KCQl9DQoJCXJldHVybiBJbnRQdHIuWmVybzsgLy8gUmV0dXJuIHplcm8gaWYgaWRlbnRpZmllciB0eXBlIGlzIGludmFsaWQNCgl9DQoNCgkvLy8gPHN1bW1hcnk+DQoJLy8vIEZpbmRzIHRoZSBtYWluIHdpbmRvdyBoYW5kbGUgZm9yIGEgZ2l2ZW4gcHJvY2VzcyBJRC4NCgkvLy8gPC9zdW1tYXJ5Pg0KCS8vLyA8cGFyYW0gbmFtZT0icHJvY2Vzc0lkIj5UaGUgSUQgb2YgdGhlIHByb2Nlc3MuPC9wYXJhbT4NCgkvLy8gPHJldHVybnM+VGhlIG1haW4gd2luZG93IGhhbmRsZSAoSW50UHRyKSBvciBJbnRQdHIuWmVybyBpZiB0aGUgcHJvY2VzcyBpcyBub3QgZm91bmQgb3IgaGFzIG5vIG1haW4gd2luZG93LjwvcmV0dXJucz4NCglwdWJsaWMgc3RhdGljIEludFB0ciBGaW5kV2luZG93QnlQcm9jZXNzSWQoaW50IHByb2Nlc3NJZCkNCgl7DQoJCS8vIERpcmVjdCBhY2Nlc3MgdXNpbmcgU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3MgZm9yIHNwZWVkDQoJCXRyeQ0KCQl7DQoJCQlQcm9jZXNzIHByb2Nlc3MgPSBQcm9jZXNzLkdldFByb2Nlc3NCeUlkKHByb2Nlc3NJZCk7DQoJCQlyZXR1cm4gcHJvY2Vzcy5NYWluV2luZG93SGFuZGxlOyAvLyBDYW4gYmUgSW50UHRyLlplcm8gaWYgbm8gbWFpbiB3aW5kb3cNCgkJfQ0KCQljYXRjaCAoQXJndW1lbnRFeGNlcHRpb24pIC8vIENhdGNoIGlmIHByb2Nlc3MgSUQgaXMgbm90IGZvdW5kDQoJCXsNCgkJCXJldHVybiBJbnRQdHIuWmVybzsNCgkJfQ0KCX0NCg0KCS8vLyA8c3VtbWFyeT4NCgkvLy8gQnJpbmdzIHRoZSBzcGVjaWZpZWQgd2luZG93IHRvIHRoZSBmb3JlZ3JvdW5kLiBJZiBtaW5pbWl6ZWQsIGl0IHJlc3RvcmVzIGl0IGZpcnN0Lg0KCS8vLyA8L3N1bW1hcnk+DQoJLy8vIDxwYXJhbSBuYW1lPSJ3aW5kb3dJZGVudGlmaWVyIj5FaXRoZXIgYW4gSW50UHRyIHdpbmRvdyBoYW5kbGUgb3IgYW4gaW50IHByb2Nlc3MgSUQuPC9wYXJhbT4NCgkvLy8gPHJldHVybnM+VHJ1ZSBpZiB0aGUgd2luZG93IHdhcyBzdWNjZXNzZnVsbHkgYnJvdWdodCB0byB0aGUgZnJvbnQsIGZhbHNlIG90aGVyd2lzZS48L3JldHVybnM+DQoJcHVibGljIHN0YXRpYyBib29sIEJyaW5nVG9Gcm9udChvYmplY3Qgd2luZG93SWRlbnRpZmllcikNCgl7DQoJCUludFB0ciB3aW5kb3dIYW5kbGUgPSBHZXRXaW5kb3dIYW5kbGUod2luZG93SWRlbnRpZmllcik7DQoJCWlmICh3aW5kb3dIYW5kbGUgPT0gSW50UHRyLlplcm8pDQoJCXsNCgkJCXJldHVybiBmYWxzZTsgLy8gV2luZG93IG5vdCBmb3VuZA0KCQl9DQoJCS8vIElmIHRoZSB3aW5kb3cgaXMgbWluaW1pemVkLCByZXN0b3JlIGl0IGZpcnN0DQoJCWlmIChOYXRpdmUuSXNXaW5kb3dNaW5pbWl6ZWQod2luZG93SGFuZGxlKSkNCgkJew0KCQkJTmF0aXZlLlNob3dXaW5kb3cod2luZG93SGFuZGxlLCBOYXRpdmUuU1dfUkVTVE9SRSk7DQoJCX0NCgkJLy8gU2V0IHRoZSB3aW5kb3cgdG8gdGhlIGZvcmVncm91bmQNCgkJcmV0dXJuIE5hdGl2ZS5TZXRGb3JlZ3JvdW5kV2luZG93KHdpbmRvd0hhbmRsZSk7DQoJfQ0KDQoJLy8vIDxzdW1tYXJ5Pg0KCS8vLyBQL0ludm9rZSBkZWZpbml0aW9ucyBmb3IgbW91c2UtcmVsYXRlZCBhY3Rpb25zLg0KCS8vLyA8L3N1bW1hcnk+DQoJW0RsbEltcG9ydCgidXNlcjMyLmRsbCIpXQ0KCXB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgQ2xpZW50VG9TY3JlZW4oSW50UHRyIGhXbmQscmVmIFBvaW50IGxwUG9pbnQpOyAvLyBDb252ZXJ0cyBjbGllbnQgY29vcmRpbmF0ZXMgdG8gc2NyZWVuIGNvb3JkaW5hdGVzDQoJW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsU2V0TGFzdEVycm9yPXRydWUpXQ0KCXB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgU2V0Q3Vyc29yUG9zKGludCB4LGludCB5KTsgLy8gTW92ZXMgdGhlIGN1cnNvciB0byB0aGUgc3BlY2lmaWVkIHNjcmVlbiBjb29yZGluYXRlcw0KCVtEbGxJbXBvcnQoInVzZXIzMi5kbGwiKV0NCglwdWJsaWMgc3RhdGljIGV4dGVybiB2b2lkIG1vdXNlX2V2ZW50KHVpbnQgZHdGbGFncywgdWludCBkeCwgdWludCBkeSwgdWludCBkd0RhdGEsIGludCBkd0V4dHJhSW5mbyk7IC8vIFN5bnRoZXNpemVzIG1vdXNlIG1vdGlvbiBhbmQgYnV0dG9uIGNsaWNrcw0KDQoJLy8vIDxzdW1tYXJ5Pg0KCS8vLyBNaW5pbWl6ZXMgdGhlIHNwZWNpZmllZCB3aW5kb3cuDQoJLy8vIDwvc3VtbWFyeT4NCgkvLy8gPHBhcmFtIG5hbWU9IndpbmRvd0lkZW50aWZpZXIiPkVpdGhlciBhbiBJbnRQdHIgd2luZG93IGhhbmRsZSBvciBhbiBpbnQgcHJvY2VzcyBJRC48L3BhcmFtPg0KCS8vLyA8cmV0dXJucz5UcnVlIGlmIHRoZSB3aW5kb3cgd2FzIHN1Y2Nlc3NmdWxseSBtaW5pbWl6ZWQsIGZhbHNlIG90aGVyd2lzZS48L3JldHVybnM+DQoJcHVibGljIHN0YXRpYyBib29sIFNlbmRUb0JhY2sob2JqZWN0IHdpbmRvd0lkZW50aWZpZXIpIC8vIE5vdGU6IE5hbWUgaW1wbGllcyBzZW5kaW5nIGJhY2ssIGJ1dCBhY3Rpb24gaXMgbWluaW1pemF0aW9uDQoJew0KCQlJbnRQdHIgd2luZG93SGFuZGxlID0gR2V0V2luZG93SGFuZGxlKHdpbmRvd0lkZW50aWZpZXIpOw0KCQlpZiAod2luZG93SGFuZGxlID09IEludFB0ci5aZXJvKQ0KCQl7DQoJCQlyZXR1cm4gZmFsc2U7IC8vIFdpbmRvdyBub3QgZm91bmQNCgkJfQ0KCQkvLyBNaW5pbWl6ZSB0aGUgd2luZG93DQoJCXJldHVybiBOYXRpdmUuU2hvd1dpbmRvdyh3aW5kb3dIYW5kbGUsIE5hdGl2ZS5TV19NSU5JTUlaRSk7DQoJfQ0KDQoJLy8vIDxzdW1tYXJ5Pg0KCS8vLyBDaGVja3MgaWYgdGhlIHNwZWNpZmllZCB3aW5kb3cgaXMgY3VycmVudGx5IG1pbmltaXplZC4NCgkvLy8gPC9zdW1tYXJ5Pg0KCS8vLyA8cGFyYW0gbmFtZT0id2luZG93SWRlbnRpZmllciI+RWl0aGVyIGFuIEludFB0ciB3aW5kb3cgaGFuZGxlIG9yIGFuIGludCBwcm9jZXNzIElELjwvcGFyYW0+DQoJLy8vIDxyZXR1cm5zPlRydWUgaWYgdGhlIHdpbmRvdyBpcyBtaW5pbWl6ZWQsIGZhbHNlIG90aGVyd2lzZSBvciBpZiBub3QgZm91bmQuPC9yZXR1cm5zPg0KCXB1YmxpYyBzdGF0aWMgYm9vbCBJc01pbmltaXplZChvYmplY3Qgd2luZG93SWRlbnRpZmllcikNCgl7DQoJCUludFB0ciB3aW5kb3dIYW5kbGUgPSBHZXRXaW5kb3dIYW5kbGUod2luZG93SWRlbnRpZmllcik7DQoJCWlmICh3aW5kb3dIYW5kbGUgPT0gSW50UHRyLlplcm8pDQoJCXsNCgkJCXJldHVybiBmYWxzZTsgLy8gV2luZG93IG5vdCBmb3VuZCwgYXNzdW1lIG5vdCBtaW5pbWl6ZWQNCgkJfQ0KCQlyZXR1cm4gTmF0aXZlLklzV2luZG93TWluaW1pemVkKHdpbmRvd0hhbmRsZSk7DQoJfQ0KDQoJLy8vIDxzdW1tYXJ5Pg0KCS8vLyBDaGVja3MgaWYgYSB3aW5kb3cgaXMgcmVzcG9uZGluZyBieSBzZW5kaW5nIGl0IGEgV01fTlVMTCBtZXNzYWdlIHdpdGggYSB0aW1lb3V0Lg0KCS8vLyA8L3N1bW1hcnk+DQoJLy8vIDxwYXJhbSBuYW1lPSJoV25kIj5UaGUgaGFuZGxlIG9mIHRoZSB3aW5kb3cgdG8gY2hlY2suPC9wYXJhbT4NCgkvLy8gPHBhcmFtIG5hbWU9InRpbWVvdXQiPlRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIHdhaXQgZm9yIGEgcmVzcG9uc2UuPC9wYXJhbT4NCgkvLy8gPHJldHVybnM+VHJ1ZSBpZiB0aGUgd2luZG93IHJlc3BvbmRlZCB3aXRoaW4gdGhlIHRpbWVvdXQsIGZhbHNlIG90aGVyd2lzZS48L3JldHVybnM+DQoJcHVibGljIHN0YXRpYyBib29sIFJlc3BvbnNpdmUoSW50UHRyIGhXbmQsIHVpbnQgdGltZW91dCA9IDEwMCkNCgl7DQoJCXRyeQ0KCQl7DQoJCQlpZiAoaFduZCA9PSBJbnRQdHIuWmVybykgcmV0dXJuIGZhbHNlOyAvLyBJbnZhbGlkIGhhbmRsZQ0KCQkJSW50UHRyIHJlc3VsdDsNCgkJCS8vIFNlbmQgV01fTlVMTCBtZXNzYWdlIGFuZCB3YWl0IGZvciBhIHJlc3BvbnNlIG9yIHRpbWVvdXQNCgkJCUludFB0ciBzZW5kUmVzdWx0ID0gTmF0aXZlLkdldFdpbmRvd1Jlc3BvbnNlKA0KCQkJCWhXbmQsDQoJCQkJTmF0aXZlLldNX05VTEwsICAgICAgICAgIC8vIE1lc3NhZ2UgdG8gc2VuZCAobm8gb3BlcmF0aW9uKQ0KCQkJCUludFB0ci5aZXJvLCAgICAgICAgICAgICAvLyB3UGFyYW0NCgkJCQlJbnRQdHIuWmVybywgICAgICAgICAgICAgLy8gbFBhcmFtDQoJCQkJTmF0aXZlLlNNVE9fQUJPUlRJRkhVTkcsIC8vIEZsYWdzOiBBYm9ydCBpZiB0aGUgd2luZG93IGlzIGh1bmcNCgkJCQl0aW1lb3V0LCAgICAgICAgICAgICAgICAgLy8gVGltZW91dCBkdXJhdGlvbg0KCQkJCW91dCByZXN1bHQpOyAgICAgICAgICAgICAvLyBSZWNlaXZlcyB0aGUgcmVzdWx0DQoNCgkJCS8vIFN1Y2Nlc3MgaXMgaW5kaWNhdGVkIGJ5IGEgbm9uLXplcm8gcmV0dXJuIHZhbHVlIGZyb20gU2VuZE1lc3NhZ2VUaW1lb3V0DQoJCQlyZXR1cm4gc2VuZFJlc3VsdCAhPSBJbnRQdHIuWmVybzsNCgkJfQ0KCQljYXRjaCAvLyBDYXRjaCBwb3RlbnRpYWwgZXhjZXB0aW9ucyBkdXJpbmcgdGhlIEFQSSBjYWxsDQoJCXsNCgkJCXJldHVybiBmYWxzZTsgLy8gQXNzdW1lIG5vdCByZXNwb25zaXZlIGlmIGFuIGVycm9yIG9jY3Vycw0KCQl9DQoJfQ0KDQoJLy8vIDxzdW1tYXJ5Pg0KCS8vLyBBc3luY2hyb25vdXNseSBjaGVja3MgaWYgYSB3aW5kb3cgaXMgcmVzcG9uZGluZy4NCgkvLy8gV3JhcHMgdGhlIHN5bmNocm9ub3VzIFJlc3BvbnNpdmUgbWV0aG9kIGluIGEgVGFzay4NCgkvLy8gPC9zdW1tYXJ5Pg0KCS8vLyA8cGFyYW0gbmFtZT0iaFduZCI+VGhlIGhhbmRsZSBvZiB0aGUgd2luZG93IHRvIGNoZWNrLjwvcGFyYW0+DQoJLy8vIDxwYXJhbSBuYW1lPSJ0aW1lb3V0Ij5UaW1lb3V0IGluIG1pbGxpc2Vjb25kcy48L3BhcmFtPg0KCS8vLyA8cmV0dXJucz5BIFRhc2sgdGhhdCByZXNvbHZlcyB0byB0cnVlIGlmIHJlc3BvbnNpdmUsIGZhbHNlIG90aGVyd2lzZS48L3JldHVybnM+DQoJcHVibGljIHN0YXRpYyBUYXNrPGJvb2w+IFJlc3BvbnNpdmVBc3luYyhJbnRQdHIgaFduZCwgdWludCB0aW1lb3V0ID0gMTAwKQ0KCXsNCgkJdmFyIHRjcyA9IG5ldyBUYXNrQ29tcGxldGlvblNvdXJjZTxib29sPigpOw0KCQkvLyBRdWV1ZSB0aGUgcmVzcG9uc2l2ZW5lc3MgY2hlY2sgdG8gcnVuIG9uIGEgdGhyZWFkIHBvb2wgdGhyZWFkDQoJCVRocmVhZFBvb2wuUXVldWVVc2VyV29ya0l0ZW0oc3RhdGUgPT4NCgkJCXsNCgkJCQl0cnkNCgkJCQl7DQoJCQkJCWJvb2wgaXNSZXNwb25zaXZlID0gUmVzcG9uc2l2ZShoV25kLCB0aW1lb3V0KTsNCgkJCQkJdGNzLlNldFJlc3VsdChpc1Jlc3BvbnNpdmUpOyAvLyBTZXQgdGhlIHRhc2sgcmVzdWx0DQoJCQkJfQ0KCQkJCWNhdGNoIChFeGNlcHRpb24gZXgpDQoJCQkJew0KCQkJCQl0Y3MuU2V0RXhjZXB0aW9uKGV4KTsgLy8gU2V0IGV4Y2VwdGlvbiBpZiB0aGUgY2hlY2sgZmFpbHMNCgkJCQl9DQoJCQl9KTsNCgkJcmV0dXJuIHRjcy5UYXNrOyAvLyBSZXR1cm4gdGhlIHRhc2sNCgl9DQoNCgkvLy8gPHN1bW1hcnk+DQoJLy8vIFN0cnVjdHVyZSB0byBob2xkIHdpbmRvdyBjb29yZGluYXRlcyAodXNlZCBieSBHZXRXaW5kb3dSZWN0KS4NCgkvLy8gPC9zdW1tYXJ5Pg0KCVtTdHJ1Y3RMYXlvdXQoTGF5b3V0S2luZC5TZXF1ZW50aWFsKV0NCglwdWJsaWMgc3RydWN0IFJFQ1QNCgl7DQoJCXB1YmxpYyBpbnQgTGVmdDsgICAvLyBTcGVjaWZpZXMgdGhlIHgtY29vcmRpbmF0ZSBvZiB0aGUgdXBwZXItbGVmdCBjb3JuZXIgb2YgdGhlIHJlY3RhbmdsZS4NCgkJcHVibGljIGludCBUb3A7ICAgIC8vIFNwZWNpZmllcyB0aGUgeS1jb29yZGluYXRlIG9mIHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgcmVjdGFuZ2xlLg0KCQlwdWJsaWMgaW50IFJpZ2h0OyAgLy8gU3BlY2lmaWVzIHRoZSB4LWNvb3JkaW5hdGUgb2YgdGhlIGxvd2VyLXJpZ2h0IGNvcm5lciBvZiB0aGUgcmVjdGFuZ2xlLg0KCQlwdWJsaWMgaW50IEJvdHRvbTsgLy8gU3BlY2lmaWVzIHRoZSB5LWNvb3JkaW5hdGUgb2YgdGhlIGxvd2VyLXJpZ2h0IGNvcm5lciBvZiB0aGUgcmVjdGFuZ2xlLg0KCX0NCg0KCS8vLyA8c3VtbWFyeT4NCgkvLy8gU3RydWN0dXJlIGNvbnRhaW5pbmcgbWVzc2FnZSBpbmZvcm1hdGlvbiBmcm9tIGEgdGhyZWFkJ3MgbWVzc2FnZSBxdWV1ZSAodXNlZCBieSBQZWVrTWVzc2FnZSwgZXRjLikuDQoJLy8vIDwvc3VtbWFyeT4NCglbU3RydWN0TGF5b3V0KExheW91dEtpbmQuU2VxdWVudGlhbCldDQoJcHVibGljIHN0cnVjdCBNU0cNCgl7DQoJCXB1YmxpYyBJbnRQdHIgaHduZDsgICAgICAvLyBBIGhhbmRsZSB0byB0aGUgd2luZG93IHdob3NlIHdpbmRvdyBwcm9jZWR1cmUgcmVjZWl2ZXMgdGhlIG1lc3NhZ2UuDQoJCXB1YmxpYyB1aW50IG1lc3NhZ2U7ICAgICAvLyBUaGUgbWVzc2FnZSBpZGVudGlmaWVyLg0KCQlwdWJsaWMgVUludFB0ciB3UGFyYW07ICAgLy8gQWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbWVzc2FnZS4gRGVwZW5kcyBvbiB0aGUgbWVzc2FnZSB2YWx1ZS4NCgkJcHVibGljIEludFB0ciBsUGFyYW07ICAgIC8vIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG1lc3NhZ2UuIERlcGVuZHMgb24gdGhlIG1lc3NhZ2UgdmFsdWUuDQoJCXB1YmxpYyB1aW50IHRpbWU7ICAgICAgICAvLyBUaGUgdGltZSBhdCB3aGljaCB0aGUgbWVzc2FnZSB3YXMgcG9zdGVkLg0KCQlwdWJsaWMgU3lzdGVtLkRyYXdpbmcuUG9pbnQgcHQ7IC8vIFRoZSBjdXJzb3IgcG9zaXRpb24sIGluIHNjcmVlbiBjb29yZGluYXRlcywgd2hlbiB0aGUgbWVzc2FnZSB3YXMgcG9zdGVkLg0KCX0NCg0KCS8vIC0tLSBDb25zdGFudHMgdXNlZCBieSB0aGUgTmF0aXZlIG1ldGhvZHMgLS0tDQoJLy8gV2luZG93IEhhbmRsZXMNCglwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEludFB0ciBUb3BXaW5kb3dIYW5kbGUgPSBuZXcgSW50UHRyKDApOyAvLyBVc2VkIHdpdGggU2V0V2luZG93UG9zIHRvIHBsYWNlIHdpbmRvdyBhdCB0b3ANCg0KCS8vIFdpbmRvdyBNZXNzYWdlcw0KCXB1YmxpYyBjb25zdCB1aW50IFdNX05VTEwgPSAweDAwMDA7IC8vIE51bGwgbWVzc2FnZSwgb2Z0ZW4gdXNlZCBmb3IgcmVzcG9uc2l2ZW5lc3MgY2hlY2tzDQogICAgLy8gSG90a2V5IE1vZGlmaWVycyAodXNlZCB3aXRoIFJlZ2lzdGVySG90S2V5KQ0KICAgIHB1YmxpYyBjb25zdCB1aW50IE1PRF9BTFQgPSAweDAwMDE7DQogICAgcHVibGljIGNvbnN0IHVpbnQgTU9EX0NPTlRST0wgPSAweDAwMDI7DQogICAgcHVibGljIGNvbnN0IHVpbnQgTU9EX1NISUZUID0gMHgwMDA0Ow0KICAgIHB1YmxpYyBjb25zdCB1aW50IE1PRF9XSU4gPSAweDAwMDg7DQogICAgcHVibGljIGNvbnN0IHVpbnQgTU9EX05PUkVQRUFUID0gMHg0MDAwOyAvLyBQcmV2ZW50cyB0aGUgaG90a2V5IG1lc3NhZ2UgZnJvbSBiZWluZyBnZW5lcmF0ZWQgcmVwZWF0ZWRseSB3aGVuIHRoZSBrZXkgaXMgaGVsZCBkb3duLg0KCXB1YmxpYyBjb25zdCBpbnQgV01fSE9US0VZID0gMHgwMzEyOyAvLyBIb3RrZXkgbWVzc2FnZSBpZGVudGlmaWVyDQoNCgkvLyBFcnJvciBDb2Rlcw0KCXB1YmxpYyBjb25zdCBpbnQgRVJST1JfVElNRU9VVCA9IDE0NjA7IC8vIFRpbWVvdXQgZXJyb3IgY29kZQ0KDQoJLy8gU2VuZE1lc3NhZ2VUaW1lb3V0IEZsYWdzDQoJcHVibGljIGNvbnN0IHVpbnQgU01UT19BQk9SVElGSFVORyA9IDB4MDAwMjsgLy8gRG8gbm90IHdhaXQgaWYgdGhlIHRhcmdldCB0aHJlYWQgaXMgaHVuZw0KDQoJLy8gU2hvd1dpbmRvdyBDb21tYW5kcyAobkNtZFNob3cgcGFyYW1ldGVyKQ0KCXB1YmxpYyBjb25zdCBpbnQgU1dfSElERSA9IDA7ICAgICAgIC8vIEhpZGVzIHRoZSB3aW5kb3cgYW5kIGFjdGl2YXRlcyBhbm90aGVyIHdpbmRvdy4NCglwdWJsaWMgY29uc3QgaW50IFNXX01JTklNSVpFID0gNjsgICAvLyBNaW5pbWl6ZXMgdGhlIHNwZWNpZmllZCB3aW5kb3cgYW5kIGFjdGl2YXRlcyB0aGUgbmV4dCB0b3AtbGV2ZWwgd2luZG93IGluIHRoZSBaIG9yZGVyLg0KCXB1YmxpYyBjb25zdCBpbnQgU1dfUkVTVE9SRSA9IDk7ICAgIC8vIEFjdGl2YXRlcyBhbmQgZGlzcGxheXMgdGhlIHdpbmRvdy4gSWYgdGhlIHdpbmRvdyBpcyBtaW5pbWl6ZWQgb3IgbWF4aW1pemVkLCB0aGUgc3lzdGVtIHJlc3RvcmVzIGl0IHRvIGl0cyBvcmlnaW5hbCBzaXplIGFuZCBwb3NpdGlvbi4NCglwdWJsaWMgY29uc3QgaW50IFNXX1NIT1cgPSA1OyAgICAgICAvLyBBY3RpdmF0ZXMgdGhlIHdpbmRvdyBhbmQgZGlzcGxheXMgaXQgaW4gaXRzIGN1cnJlbnQgc2l6ZSBhbmQgcG9zaXRpb24uDQoJcHVibGljIGNvbnN0IGludCBTV19NQVhJTUlaRSA9IDM7ICAgLy8gTWF4aW1pemVzIHRoZSBzcGVjaWZpZWQgd2luZG93Lg0KDQoJLy8gUXVldWUgU3RhdHVzIEZsYWdzIChkd1dha2VNYXNrIGZvciBNc2dXYWl0Rm9yTXVsdGlwbGVPYmplY3RzKQ0KCXB1YmxpYyBjb25zdCB1aW50IFFTX0FMTElOUFVUID0gMHgwNEZGOyAvLyBBbnkgbWVzc2FnZSBpcyBpbiB0aGUgcXVldWUuDQoNCgkvLyBQZWVrTWVzc2FnZSBGbGFncyAod1JlbW92ZU1zZyBwYXJhbWV0ZXIpDQoJcHVibGljIGNvbnN0IHVpbnQgUE1fUkVNT1ZFID0gMHgwMDAxOyAvLyBNZXNzYWdlcyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBxdWV1ZSBhZnRlciBwcm9jZXNzaW5nIGJ5IFBlZWtNZXNzYWdlLg0KDQoJLy8gV2FpdCBDb25zdGFudHMgKFJldHVybiB2YWx1ZSBmb3IgTXNnV2FpdEZvck11bHRpcGxlT2JqZWN0cykNCglwdWJsaWMgY29uc3QgdWludCBXQUlUX1RJTUVPVVQgPSAyNTg7IC8vIFRoZSB0aW1lLW91dCBpbnRlcnZhbCBlbGFwc2VkLCBhbmQgdGhlIG9iamVjdCdzIHN0YXRlIGlzIG5vbnNpZ25hbGVkLg0KDQoJLy8gU2V0V2luZG93UG9zIEZsYWdzIChDb21iaW5lZCB3aXRoIFdpbmRvd1Bvc2l0aW9uT3B0aW9ucyBlbnVtKQ0KCXB1YmxpYyBjb25zdCBpbnQgU1dQX05PWk9SREVSID0gMHgwMDA0OyAgIC8vIFJldGFpbnMgdGhlIGN1cnJlbnQgWiBvcmRlciAoaWdub3JlcyBpbnNlcnRBZnRlckhhbmRsZSkuDQoJcHVibGljIGNvbnN0IGludCBTV1BfTk9BQ1RJVkFURSA9IDB4MDAxMDsgLy8gRG9lcyBub3QgYWN0aXZhdGUgdGhlIHdpbmRvdy4NCglwdWJsaWMgY29uc3QgaW50IFNXUF9TSE9XV0lORE9XID0gMHgwMDQwOyAvLyBEaXNwbGF5cyB0aGUgd2luZG93Lg0KDQoJLy8vIDxzdW1tYXJ5Pg0KCS8vLyBGbGFncyBmb3IgdGhlIFNldFdpbmRvd1BvcyBmdW5jdGlvbiAoUG9zaXRpb25XaW5kb3cgbWV0aG9kKS4NCgkvLy8gPC9zdW1tYXJ5Pg0KCVtGbGFnc10NCglwdWJsaWMgZW51bSBXaW5kb3dQb3NpdGlvbk9wdGlvbnMgOiB1aW50DQoJew0KCQlOb1pPcmRlckNoYW5nZSA9IFNXUF9OT1pPUkRFUiwgICAvLyBSZXRhaW5zIHRoZSBjdXJyZW50IFogb3JkZXIgKGlnbm9yZXMgdGhlIGhXbmRJbnNlcnRBZnRlciBwYXJhbWV0ZXIpLg0KCQlEb05vdEFjdGl2YXRlID0gU1dQX05PQUNUSVZBVEUsIC8vIERvZXMgbm90IGFjdGl2YXRlIHRoZSB3aW5kb3cuIElmIHRoaXMgZmxhZyBpcyBub3Qgc2V0LCB0aGUgd2luZG93IGlzIGFjdGl2YXRlZCBhbmQgbW92ZWQgdG8gdGhlIHRvcCBvZiBlaXRoZXIgdGhlIHRvcG1vc3Qgb3Igbm9uLXRvcG1vc3QgZ3JvdXAgKGRlcGVuZGluZyBvbiB0aGUgc2V0dGluZyBvZiB0aGUgaFduZEluc2VydEFmdGVyIHBhcmFtZXRlcikuDQoJCU1ha2VWaXNpYmxlID0gU1dQX1NIT1dXSU5ET1cgICAgLy8gRGlzcGxheXMgdGhlIHdpbmRvdy4NCgl9DQp9DQoNCi8vLyA8c3VtbWFyeT4NCi8vLyBQcm92aWRlcyBhY2Nlc3MgdG8gZnVuY3Rpb25zIHdpdGhpbiB0aGUgRnRvb2wuZGxsIGxpYnJhcnkgdmlhIFAvSW52b2tlLg0KLy8vIFVzZWQgZm9yIGdhbWUtc3BlY2lmaWMgYXV0b21hdGlvbiB0YXNrcy4gUmVxdWlyZXMgRnRvb2wuZGxsIHRvIGJlIHByZXNlbnQuDQovLy8gVGhlIHBhdGggaXMgZHluYW1pY2FsbHkgZGV0ZXJtaW5lZCBieSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5QYXRocy5GdG9vbERMTC4NCi8vLyA8L3N1bW1hcnk+DQpwdWJsaWMgc3RhdGljIGNsYXNzIEZ0b29sDQp7DQoJLy8gUG9zdCBtZXNzYWdlIHVzaW5nIEZ0b29sOiBTZW5kcyBhIG1lc3NhZ2UgdmlhIHRoZSBGdG9vbCBETEwncyBzcGVjaWZpYyBtZWNoYW5pc20uDQoJLy8gVGhlIGV4YWN0IHBhdGggdG8gRnRvb2wuZGxsIGlzIGludGVycG9sYXRlZCBmcm9tIHRoZSBQb3dlclNoZWxsIGdsb2JhbCB2YXJpYWJsZSBhdCBjb21waWxlIHRpbWUuDQoJW0RsbEltcG9ydChAIiQoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUGF0aHMuRnRvb2xETEwpIiwgRW50cnlQb2ludCA9ICJmblBvc3RNZXNzYWdlIiwgQ2FsbGluZ0NvbnZlbnRpb24gPSBDYWxsaW5nQ29udmVudGlvbi5TdGRDYWxsKV0NCglwdWJsaWMgc3RhdGljIGV4dGVybiB2b2lkIGZuUG9zdE1lc3NhZ2UoDQoJCUludFB0ciBoV25kLCAgICAvLyBIYW5kbGUgdG8gdGhlIHRhcmdldCB3aW5kb3cNCgkJaW50IG1zZywgICAgICAgIC8vIE1lc3NhZ2UgaWRlbnRpZmllcg0KCQlpbnQgd1BhcmFtLCAgICAgLy8gTWVzc2FnZSBwYXJhbWV0ZXINCgkJaW50IGxQYXJhbSk7ICAgIC8vIE1lc3NhZ2UgcGFyYW1ldGVyDQp9DQoNCi8vLyA8c3VtbWFyeT4NCi8vLyBDbGFzcyB0byBoYW5kbGUgcmVhZGluZyBmcm9tIGFuZCB3cml0aW5nIHRvIElOSSBjb25maWd1cmF0aW9uIGZpbGVzLg0KLy8vIFByb3ZpZGVzIG1ldGhvZHMgdG8gcGFyc2Ugc2VjdGlvbnMsIGtleXMsIGFuZCB2YWx1ZXMuDQovLy8gVXNlcyBPcmRlcmVkRGljdGlvbmFyeSB0byBwcmVzZXJ2ZSBrZXkgb3JkZXIgd2l0aGluIHNlY3Rpb25zLg0KLy8vIEluY2x1ZGVzIHJldHJ5IGxvZ2ljIGZvciBmaWxlIGFjY2Vzcy4NCi8vLyA8L3N1bW1hcnk+DQpwdWJsaWMgY2xhc3MgSW5pRmlsZQ0Kew0KCXByaXZhdGUgc3RyaW5nIGZpbGVQYXRoOyAvLyBTdG9yZXMgdGhlIGZ1bGwgcGF0aCB0byB0aGUgSU5JIGZpbGUNCg0KCS8vLyA8c3VtbWFyeT4NCgkvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIEluaUZpbGUgY2xhc3MuDQoJLy8vIDwvc3VtbWFyeT4NCgkvLy8gPHBhcmFtIG5hbWU9ImZpbGVQYXRoIj5UaGUgcGF0aCB0byB0aGUgSU5JIGZpbGUgdG8gYmUgbWFuYWdlZC48L3BhcmFtPg0KCXB1YmxpYyBJbmlGaWxlKHN0cmluZyBmaWxlUGF0aCkNCgl7DQoJCXRoaXMuZmlsZVBhdGggPSBmaWxlUGF0aDsNCgl9DQoNCgkvLy8gPHN1bW1hcnk+DQoJLy8vIFJlYWRzIHRoZSBlbnRpcmUgSU5JIGZpbGUgYW5kIHJldHVybnMgaXRzIHN0cnVjdHVyZSBhcyBhIG5lc3RlZCBPcmRlcmVkRGljdGlvbmFyeS4NCgkvLy8gT3V0ZXIgZGljdGlvbmFyeSBrZXlzIGFyZSBzZWN0aW9uIG5hbWVzLCB2YWx1ZXMgYXJlIE9yZGVyZWREaWN0aW9uYXJpZXMgb2Yga2V5LXZhbHVlIHBhaXJzLg0KCS8vLyA8L3N1bW1hcnk+DQoJLy8vIDxyZXR1cm5zPkFuIE9yZGVyZWREaWN0aW9uYXJ5IHJlcHJlc2VudGluZyB0aGUgSU5JIGZpbGUgY29udGVudC48L3JldHVybnM+DQoJcHVibGljIE9yZGVyZWREaWN0aW9uYXJ5IFJlYWRJbmlGaWxlKCkNCgl7DQoJCU9yZGVyZWREaWN0aW9uYXJ5IGNvbmZpZyA9IG5ldyBPcmRlcmVkRGljdGlvbmFyeSgpOyAvLyBVc2UgT3JkZXJlZERpY3Rpb25hcnkgdG8gbWFpbnRhaW4gb3JkZXINCg0KCQlpZiAoIUZpbGUuRXhpc3RzKGZpbGVQYXRoKSkNCgkJew0KCQkJQ29uc29sZS5Xcml0ZUxpbmUoIldhcm5pbmc6IElOSSBmaWxlIG5vdCBmb3VuZCBhdDogIiArIGZpbGVQYXRoKTsNCgkJCXJldHVybiBjb25maWc7IC8vIFJldHVybiBlbXB0eSBkaWN0aW9uYXJ5IGlmIGZpbGUgZG9lc24ndCBleGlzdA0KCQl9DQoNCgkJdHJ5DQoJCXsNCgkJCXN0cmluZyBjdXJyZW50U2VjdGlvbiA9IG51bGw7DQoJCQlzdHJpbmdbXSBsaW5lcyA9IEZpbGUuUmVhZEFsbExpbmVzKGZpbGVQYXRoKTsgLy8gUmVhZCBhbGwgbGluZXMgZnJvbSB0aGUgZmlsZQ0KDQoJCQlmb3JlYWNoIChzdHJpbmcgbGluZSBpbiBsaW5lcykNCgkJCXsNCgkJCQlzdHJpbmcgdHJpbW1lZExpbmUgPSBsaW5lLlRyaW0oKTsgLy8gUmVtb3ZlIGxlYWRpbmcvdHJhaWxpbmcgd2hpdGVzcGFjZQ0KDQoJCQkJLy8gU2tpcCBlbXB0eSBsaW5lcyBhbmQgY29tbWVudHMgKGxpbmVzIHN0YXJ0aW5nIHdpdGggJzsnIG9yICcjJykNCgkJCQlpZiAoc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZSh0cmltbWVkTGluZSkgfHwgdHJpbW1lZExpbmUuU3RhcnRzV2l0aCgiOyIpIHx8IHRyaW1tZWRMaW5lLlN0YXJ0c1dpdGgoIiMiKSkNCgkJCQl7DQoJCQkJCWNvbnRpbnVlOw0KCQkJCX0NCg0KCQkJCS8vIENoZWNrIGlmIHRoZSBsaW5lIGRlZmluZXMgYSBzZWN0aW9uIGhlYWRlciAoZS5nLiwgIltTZWN0aW9uTmFtZV0iKQ0KCQkJCWlmICh0cmltbWVkTGluZS5TdGFydHNXaXRoKCJbIikgJiYgdHJpbW1lZExpbmUuRW5kc1dpdGgoIl0iKSkNCgkJCQl7DQoJCQkJCWN1cnJlbnRTZWN0aW9uID0gdHJpbW1lZExpbmUuU3Vic3RyaW5nKDEsIHRyaW1tZWRMaW5lLkxlbmd0aCAtIDIpLlRyaW0oKTsgLy8gRXh0cmFjdCBzZWN0aW9uIG5hbWUNCgkJCQkJaWYgKCFjb25maWcuQ29udGFpbnMoY3VycmVudFNlY3Rpb24pKQ0KCQkJCQl7DQoJCQkJCQkvLyBBZGQgdGhlIHNlY3Rpb24gYXMgYSBuZXcgT3JkZXJlZERpY3Rpb25hcnkgaWYgaXQgZG9lc24ndCBleGlzdA0KCQkJCQkJY29uZmlnW2N1cnJlbnRTZWN0aW9uXSA9IG5ldyBPcmRlcmVkRGljdGlvbmFyeSgpOw0KCQkJCQl9DQoJCQkJCWNvbnRpbnVlOyAvLyBNb3ZlIHRvIHRoZSBuZXh0IGxpbmUgYWZ0ZXIgcHJvY2Vzc2luZyBzZWN0aW9uIGhlYWRlcg0KCQkJCX0NCg0KCQkJCS8vIFByb2Nlc3Mga2V5LXZhbHVlIHBhaXJzIChlLmcuLCAiS2V5ID0gVmFsdWUiKQ0KCQkJCWludCBlcXVhbHNQb3MgPSB0cmltbWVkTGluZS5JbmRleE9mKCI9Iik7DQoJCQkJaWYgKGVxdWFsc1BvcyA+IDAgJiYgY3VycmVudFNlY3Rpb24gIT0gbnVsbCkgLy8gRW5zdXJlICc9JyBleGlzdHMgYW5kIHdlIGFyZSB3aXRoaW4gYSBzZWN0aW9uDQoJCQkJew0KCQkJCQlzdHJpbmcga2V5ID0gdHJpbW1lZExpbmUuU3Vic3RyaW5nKDAsIGVxdWFsc1BvcykuVHJpbSgpOyAvLyBFeHRyYWN0IGtleQ0KCQkJCQlzdHJpbmcgdmFsdWUgPSB0cmltbWVkTGluZS5TdWJzdHJpbmcoZXF1YWxzUG9zICsgMSkuVHJpbSgpOyAvLyBFeHRyYWN0IHZhbHVlDQoNCgkJCQkJLy8gUmVtb3ZlIHN1cnJvdW5kaW5nIHF1b3RlcyBmcm9tIHRoZSB2YWx1ZSBpZiBwcmVzZW50DQoJCQkJCWlmICh2YWx1ZS5TdGFydHNXaXRoKCJcIiIpICYmIHZhbHVlLkVuZHNXaXRoKCJcIiIpKQ0KCQkJCQl7DQoJCQkJCQl2YWx1ZSA9IHZhbHVlLlN1YnN0cmluZygxLCB2YWx1ZS5MZW5ndGggLSAyKTsNCgkJCQkJfQ0KDQoJCQkJCS8vIEFkZCB0aGUga2V5LXZhbHVlIHBhaXIgdG8gdGhlIGN1cnJlbnQgc2VjdGlvbidzIGRpY3Rpb25hcnkNCgkJCQkJKChPcmRlcmVkRGljdGlvbmFyeSljb25maWdbY3VycmVudFNlY3Rpb25dKVtrZXldID0gdmFsdWU7DQoJCQkJfQ0KCQkJfQ0KDQoJCQlyZXR1cm4gY29uZmlnOyAvLyBSZXR1cm4gdGhlIHBvcHVsYXRlZCBkaWN0aW9uYXJ5DQoJCX0NCgkJY2F0Y2ggKEV4Y2VwdGlvbiBleCkNCgkJew0KCQkJQ29uc29sZS5Xcml0ZUxpbmUoIkVycm9yIHJlYWRpbmcgSU5JIGZpbGUgJyIgKyBmaWxlUGF0aCArICInOiAiICsgZXguTWVzc2FnZSk7DQoJCQlyZXR1cm4gbmV3IE9yZGVyZWREaWN0aW9uYXJ5KCk7IC8vIFJldHVybiBlbXB0eSBkaWN0aW9uYXJ5IG9uIGVycm9yDQoJCX0NCgl9DQoNCgkvLy8gPHN1bW1hcnk+DQoJLy8vIFJlYWRzIGEgc3BlY2lmaWMgc2VjdGlvbiBmcm9tIHRoZSBJTkkgZmlsZS4NCgkvLy8gPC9zdW1tYXJ5Pg0KCS8vLyA8cGFyYW0gbmFtZT0ic2VjdGlvbiI+VGhlIG5hbWUgb2YgdGhlIHNlY3Rpb24gdG8gcmVhZC48L3BhcmFtPg0KCS8vLyA8cmV0dXJucz5BbiBPcmRlcmVkRGljdGlvbmFyeSBjb250YWluaW5nIHRoZSBrZXktdmFsdWUgcGFpcnMgZm9yIHRoZSBzcGVjaWZpZWQgc2VjdGlvbiwgb3IgYW4gZW1wdHkgZGljdGlvbmFyeSBpZiB0aGUgc2VjdGlvbiBpcyBub3QgZm91bmQuPC9yZXR1cm5zPg0KCXB1YmxpYyBPcmRlcmVkRGljdGlvbmFyeSBSZWFkU2VjdGlvbihzdHJpbmcgc2VjdGlvbikNCgl7DQoJCU9yZGVyZWREaWN0aW9uYXJ5IGNvbmZpZyA9IFJlYWRJbmlGaWxlKCk7IC8vIFJlYWQgdGhlIHdob2xlIGZpbGUgZmlyc3QNCg0KCQlpZiAoY29uZmlnLkNvbnRhaW5zKHNlY3Rpb24pKQ0KCQl7DQoJCQlyZXR1cm4gKE9yZGVyZWREaWN0aW9uYXJ5KWNvbmZpZ1tzZWN0aW9uXTsgLy8gUmV0dXJuIHRoZSBzcGVjaWZpYyBzZWN0aW9uJ3MgZGljdGlvbmFyeQ0KCQl9DQoNCgkJLy8gUmV0dXJuIGFuIGVtcHR5IGRpY3Rpb25hcnkgaWYgdGhlIHNlY3Rpb24gZG9lc24ndCBleGlzdA0KCQlyZXR1cm4gbmV3IE9yZGVyZWREaWN0aW9uYXJ5KCk7DQoJfQ0KDQoJLy8vIDxzdW1tYXJ5Pg0KCS8vLyBXcml0ZXMgYSBzaW5nbGUga2V5LXZhbHVlIHBhaXIgdG8gYSBzcGVjaWZpZWQgc2VjdGlvbiBpbiB0aGUgSU5JIGZpbGUuDQoJLy8vIElmIHRoZSBzZWN0aW9uIG9yIGtleSBkb2VzIG5vdCBleGlzdCwgdGhleSB3aWxsIGJlIGNyZWF0ZWQuDQoJLy8vIElmIHRoZSBrZXkgZXhpc3RzLCBpdHMgdmFsdWUgd2lsbCBiZSB1cGRhdGVkLg0KCS8vLyA8L3N1bW1hcnk+DQoJLy8vIDxwYXJhbSBuYW1lPSJzZWN0aW9uIj5UaGUgbmFtZSBvZiB0aGUgc2VjdGlvbi48L3BhcmFtPg0KCS8vLyA8cGFyYW0gbmFtZT0ia2V5Ij5UaGUgbmFtZSBvZiB0aGUga2V5LjwvcGFyYW0+DQoJLy8vIDxwYXJhbSBuYW1lPSJ2YWx1ZSI+VGhlIHZhbHVlIHRvIHdyaXRlLjwvcGFyYW0+DQoJcHVibGljIHZvaWQgV3JpdGVWYWx1ZShzdHJpbmcgc2VjdGlvbiwgc3RyaW5nIGtleSwgc3RyaW5nIHZhbHVlKQ0KCXsNCgkJLy8gRW5zdXJlIHRoZSBkaXJlY3RvcnkgYW5kIGZpbGUgZXhpc3QgYmVmb3JlIHdyaXRpbmcNCgkJRW5zdXJlRmlsZUV4aXN0cygpOw0KDQoJCS8vIFJlYWQgdGhlIGN1cnJlbnQgY29udGVudCBvZiB0aGUgZmlsZQ0KCQlMaXN0PHN0cmluZz4gY29udGVudCA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCgkJaWYgKEZpbGUuRXhpc3RzKGZpbGVQYXRoKSkNCgkJew0KCQkJY29udGVudC5BZGRSYW5nZShGaWxlLlJlYWRBbGxMaW5lcyhmaWxlUGF0aCkpOw0KCQl9DQoNCgkJLy8gLS0tIEZpbmQgb3IgY3JlYXRlIHRoZSBzZWN0aW9uIC0tLQ0KCQlib29sIHNlY3Rpb25Gb3VuZCA9IGZhbHNlOw0KCQlpbnQgc2VjdGlvbkluZGV4ID0gLTE7IC8vIEluZGV4IG9mIHRoZSBsaW5lIGNvbnRhaW5pbmcgdGhlIHNlY3Rpb24gaGVhZGVyDQoNCgkJZm9yIChpbnQgaSA9IDA7IGkgPCBjb250ZW50LkNvdW50OyBpKyspDQoJCXsNCgkJCWlmIChjb250ZW50W2ldLlRyaW0oKS5FcXVhbHMoIlsiICsgc2VjdGlvbiArICJdIiwgU3RyaW5nQ29tcGFyaXNvbi5PcmRpbmFsSWdub3JlQ2FzZSkpIC8vIENhc2UtaW5zZW5zaXRpdmUgc2VjdGlvbiBtYXRjaA0KCQkJew0KCQkJCXNlY3Rpb25Gb3VuZCA9IHRydWU7DQoJCQkJc2VjdGlvbkluZGV4ID0gaTsNCgkJCQlicmVhazsNCgkJCX0NCgkJfQ0KDQoJCS8vIElmIHNlY3Rpb24gd2Fzbid0IGZvdW5kLCBhZGQgaXQgYXQgdGhlIGVuZCBvZiB0aGUgZmlsZQ0KCQlpZiAoIXNlY3Rpb25Gb3VuZCkNCgkJew0KCQkJLy8gQWRkIGEgYmxhbmsgbGluZSBiZWZvcmUgdGhlIG5ldyBzZWN0aW9uIGlmIHRoZSBmaWxlIGlzIG5vdCBlbXB0eQ0KCQkJaWYgKGNvbnRlbnQuQ291bnQgPiAwICYmICFzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKGNvbnRlbnRbY29udGVudC5Db3VudCAtIDFdKSkNCgkJCXsNCgkJCQljb250ZW50LkFkZCgiIik7DQoJCQl9DQoJCQljb250ZW50LkFkZCgiWyIgKyBzZWN0aW9uICsgIl0iKTsNCgkJCXNlY3Rpb25JbmRleCA9IGNvbnRlbnQuQ291bnQgLSAxOyAvLyBVcGRhdGUgc2VjdGlvbiBpbmRleCB0byB0aGUgbmV3bHkgYWRkZWQgbGluZQ0KCQl9DQoNCgkJLy8gLS0tIEZpbmQgb3IgYWRkIHRoZSBrZXkgd2l0aGluIHRoZSBzZWN0aW9uIC0tLQ0KCQlib29sIGtleUZvdW5kID0gZmFsc2U7DQoJCWludCBrZXlJbmRleCA9IC0xOyAvLyBJbmRleCBvZiB0aGUgbGluZSBjb250YWluaW5nIHRoZSBrZXkNCg0KCQkvLyBTZWFyY2ggZm9yIHRoZSBrZXkgb25seSB3aXRoaW4gdGhlIHRhcmdldCBzZWN0aW9uDQoJCWZvciAoaW50IGkgPSBzZWN0aW9uSW5kZXggKyAxOyBpIDwgY29udGVudC5Db3VudDsgaSsrKQ0KCQl7DQoJCQlzdHJpbmcgY3VycmVudExpbmVUcmltbWVkID0gY29udGVudFtpXS5UcmltKCk7DQoJCQkvLyBTdG9wIHNlYXJjaGluZyBpZiB3ZSBoaXQgdGhlIHN0YXJ0IG9mIGFub3RoZXIgc2VjdGlvbiBvciBlbmQgb2YgZmlsZQ0KCQkJaWYgKGN1cnJlbnRMaW5lVHJpbW1lZC5TdGFydHNXaXRoKCJbIikgJiYgY3VycmVudExpbmVUcmltbWVkLkVuZHNXaXRoKCJdIikpDQoJCQl7DQoJCQkJYnJlYWs7DQoJCQl9DQoNCgkJCS8vIENoZWNrIGlmIHRoZSBjdXJyZW50IGxpbmUgc3RhcnRzIHdpdGggdGhlIGtleSBmb2xsb3dlZCBieSAnPScgKGFsbG93aW5nIGZvciBzcGFjZXMpDQoJCQlpZiAoY3VycmVudExpbmVUcmltbWVkLlN0YXJ0c1dpdGgoa2V5ICsgIiAiLCBTdHJpbmdDb21wYXJpc29uLk9yZGluYWxJZ25vcmVDYXNlKSB8fA0KCQkJCWN1cnJlbnRMaW5lVHJpbW1lZC5TdGFydHNXaXRoKGtleSArICI9IiwgU3RyaW5nQ29tcGFyaXNvbi5PcmRpbmFsSWdub3JlQ2FzZSkpDQoJCQl7DQoJCQkJLy8gTW9yZSBwcmVjaXNlIGNoZWNrIHRvIGF2b2lkIHBhcnRpYWwgbWF0Y2hlcyAoZS5nLiwgIktleTEiIG1hdGNoaW5nICJLZXkiKQ0KCQkJCWludCBlcXVhbHNQb3MgPSBjdXJyZW50TGluZVRyaW1tZWQuSW5kZXhPZigiPSIpOw0KCQkJCWlmIChlcXVhbHNQb3MgPiAwICYmIGN1cnJlbnRMaW5lVHJpbW1lZC5TdWJzdHJpbmcoMCwgZXF1YWxzUG9zKS5UcmltKCkuRXF1YWxzKGtleSwgU3RyaW5nQ29tcGFyaXNvbi5PcmRpbmFsSWdub3JlQ2FzZSkpDQoJCQkJew0KCQkJCQlrZXlGb3VuZCA9IHRydWU7DQoJCQkJCWtleUluZGV4ID0gaTsNCgkJCQkJYnJlYWs7DQoJCQkJfQ0KCQkJfQ0KCQl9DQoNCgkJLy8gRm9ybWF0IHRoZSB2YWx1ZTogQWRkIHF1b3RlcyBpZiBpdCBjb250YWlucyBzcGFjZXMgYW5kIGlzbid0IGFscmVhZHkgcXVvdGVkDQoJCWlmICh2YWx1ZS5Db250YWlucygiICIpICYmICEodmFsdWUuU3RhcnRzV2l0aCgiXCIiKSAmJiB2YWx1ZS5FbmRzV2l0aCgiXCIiKSkpDQoJCXsNCgkJCXZhbHVlID0gIlwiIiArIHZhbHVlICsgIlwiIjsNCgkJfQ0KDQoJCS8vIENvbnN0cnVjdCB0aGUgbmV3IGxpbmUgZm9yIHRoZSBrZXktdmFsdWUgcGFpcg0KCQlzdHJpbmcgbmV3TGluZSA9IGtleSArICIgPSAiICsgdmFsdWU7DQoNCgkJLy8gVXBkYXRlIHRoZSBleGlzdGluZyBrZXkgbGluZSBvciBpbnNlcnQgdGhlIG5ldyBrZXkgbGluZQ0KCQlpZiAoa2V5Rm91bmQpDQoJCXsNCgkJCWNvbnRlbnRba2V5SW5kZXhdID0gbmV3TGluZTsgLy8gUmVwbGFjZSB0aGUgZXhpc3RpbmcgbGluZQ0KCQl9DQoJCWVsc2UNCgkJew0KCQkJLy8gSW5zZXJ0IHRoZSBuZXcga2V5LXZhbHVlIHBhaXIgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIHNlY3Rpb24gaGVhZGVyDQoJCQljb250ZW50Lkluc2VydChzZWN0aW9uSW5kZXggKyAxLCBuZXdMaW5lKTsNCgkJfQ0KDQoJCS8vIFdyaXRlIHRoZSBtb2RpZmllZCBjb250ZW50IGJhY2sgdG8gdGhlIGZpbGUgdXNpbmcgcmV0cnkgbG9naWMNCgkJc3RyaW5nW10gY29udGVudEFycmF5ID0gY29udGVudC5Ub0FycmF5KCk7DQoJCVJldHJ5RmlsZU9wZXJhdGlvbigoKSA9PiB7IEZpbGUuV3JpdGVBbGxMaW5lcyhmaWxlUGF0aCwgY29udGVudEFycmF5KTsgfSk7DQoJfQ0KDQoJLy8vIDxzdW1tYXJ5Pg0KCS8vLyBXcml0ZXMgYWxsIGtleS12YWx1ZSBwYWlycyBmcm9tIGFuIE9yZGVyZWREaWN0aW9uYXJ5IHRvIGEgc3BlY2lmaWVkIHNlY3Rpb24gaW4gdGhlIElOSSBmaWxlLg0KCS8vLyBDYWxscyBXcml0ZVZhbHVlIGZvciBlYWNoIGVudHJ5IGluIHRoZSBkaWN0aW9uYXJ5Lg0KCS8vLyA8L3N1bW1hcnk+DQoJLy8vIDxwYXJhbSBuYW1lPSJzZWN0aW9uIj5UaGUgbmFtZSBvZiB0aGUgc2VjdGlvbi48L3BhcmFtPg0KCS8vLyA8cGFyYW0gbmFtZT0iZGF0YSI+QW4gT3JkZXJlZERpY3Rpb25hcnkgY29udGFpbmluZyB0aGUga2V5LXZhbHVlIHBhaXJzIGZvciB0aGUgc2VjdGlvbi48L3BhcmFtPg0KCXB1YmxpYyB2b2lkIFdyaXRlU2VjdGlvbihzdHJpbmcgc2VjdGlvbiwgT3JkZXJlZERpY3Rpb25hcnkgZGF0YSkNCgl7DQoJCWZvcmVhY2ggKERpY3Rpb25hcnlFbnRyeSBlbnRyeSBpbiBkYXRhKQ0KCQl7DQoJCQkvLyBFbnN1cmUga2V5cyBhbmQgdmFsdWVzIGFyZSBjb252ZXJ0ZWQgdG8gc3RyaW5ncyBiZWZvcmUgd3JpdGluZw0KCQkJV3JpdGVWYWx1ZShzZWN0aW9uLCBlbnRyeS5LZXkuVG9TdHJpbmcoKSwgZW50cnkuVmFsdWUuVG9TdHJpbmcoKSk7DQoJCX0NCgl9DQoNCgkvLy8gPHN1bW1hcnk+DQoJLy8vIFdyaXRlcyBhbiBlbnRpcmUgY29uZmlndXJhdGlvbiAocmVwcmVzZW50ZWQgYnkgYSBuZXN0ZWQgT3JkZXJlZERpY3Rpb25hcnkpIHRvIHRoZSBJTkkgZmlsZS4NCgkvLy8gVGhpcyBtZXRob2QgZWZmZWN0aXZlbHkgb3ZlcndyaXRlcyB0aGUgZXhpc3RpbmcgZmlsZSBjb250ZW50IHdpdGggdGhlIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb24uDQoJLy8vIDwvc3VtbWFyeT4NCgkvLy8gPHBhcmFtIG5hbWU9ImNvbmZpZyI+QW4gT3JkZXJlZERpY3Rpb25hcnkgd2hlcmUga2V5cyBhcmUgc2VjdGlvbiBuYW1lcyBhbmQgdmFsdWVzIGFyZSBPcmRlcmVkRGljdGlvbmFyaWVzIG9mIGtleS12YWx1ZSBwYWlycy48L3BhcmFtPg0KCXB1YmxpYyB2b2lkIFdyaXRlSW5pRmlsZShPcmRlcmVkRGljdGlvbmFyeSBjb25maWcpDQoJew0KCQkvLyBFbnN1cmUgdGhlIGZpbGUgZXhpc3RzIGFuZCBpcyBlbXB0eSAob3ZlcndyaXRlKQ0KCQlFbnN1cmVGaWxlRXhpc3RzKHRydWUpOw0KDQoJCUxpc3Q8c3RyaW5nPiBsaW5lcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCgkJYm9vbCBmaXJzdFNlY3Rpb24gPSB0cnVlOw0KDQoJCS8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHNlY3Rpb24gaW4gdGhlIGNvbmZpZ3VyYXRpb24gZGljdGlvbmFyeQ0KCQlmb3JlYWNoIChEaWN0aW9uYXJ5RW50cnkgc2VjdGlvbkVudHJ5IGluIGNvbmZpZykNCgkJew0KCQkJc3RyaW5nIHNlY3Rpb24gPSBzZWN0aW9uRW50cnkuS2V5LlRvU3RyaW5nKCk7DQoJCQlPcmRlcmVkRGljdGlvbmFyeSBzZWN0aW9uRGF0YSA9IChPcmRlcmVkRGljdGlvbmFyeSlzZWN0aW9uRW50cnkuVmFsdWU7DQoNCgkJCS8vIEFkZCBhIGJsYW5rIGxpbmUgYmVmb3JlIHNlY3Rpb25zIChleGNlcHQgdGhlIGZpcnN0IG9uZSkNCgkJCWlmICghZmlyc3RTZWN0aW9uKQ0KCQkJew0KCQkJCWxpbmVzLkFkZCgiIik7DQoJCQl9DQoJCQlsaW5lcy5BZGQoIlsiICsgc2VjdGlvbiArICJdIik7IC8vIEFkZCB0aGUgc2VjdGlvbiBoZWFkZXINCgkJCWZpcnN0U2VjdGlvbiA9IGZhbHNlOw0KDQoJCQkvLyBJdGVyYXRlIHRocm91Z2gga2V5LXZhbHVlIHBhaXJzIHdpdGhpbiB0aGUgc2VjdGlvbg0KCQkJZm9yZWFjaCAoRGljdGlvbmFyeUVudHJ5IGt2cEVudHJ5IGluIHNlY3Rpb25EYXRhKQ0KCQkJew0KCQkJCXN0cmluZyBrZXkgPSBrdnBFbnRyeS5LZXkuVG9TdHJpbmcoKTsNCgkJCQlzdHJpbmcgdmFsdWUgPSBrdnBFbnRyeS5WYWx1ZS5Ub1N0cmluZygpOw0KDQoJCQkJLy8gRm9ybWF0IHZhbHVlIChhZGQgcXVvdGVzIGlmIG5lZWRlZCkNCgkJCQlpZiAodmFsdWUuQ29udGFpbnMoIiAiKSAmJiAhKHZhbHVlLlN0YXJ0c1dpdGgoIlwiIikgJiYgdmFsdWUuRW5kc1dpdGgoIlwiIikpKQ0KCQkJCXsNCgkJCQkJdmFsdWUgPSAiXCIiICsgdmFsdWUgKyAiXCIiOw0KCQkJCX0NCgkJCQlsaW5lcy5BZGQoa2V5ICsgIiA9ICIgKyB2YWx1ZSk7IC8vIEFkZCB0aGUga2V5LXZhbHVlIGxpbmUNCgkJCX0NCgkJfQ0KDQoJCS8vIFdyaXRlIGFsbCBjb25zdHJ1Y3RlZCBsaW5lcyB0byB0aGUgZmlsZSB1c2luZyByZXRyeSBsb2dpYw0KCQlSZXRyeUZpbGVPcGVyYXRpb24oKCkgPT4geyBGaWxlLldyaXRlQWxsTGluZXMoZmlsZVBhdGgsIGxpbmVzKTsgfSk7DQoJfQ0KDQoJLy8vIDxzdW1tYXJ5Pg0KCS8vLyBFbnN1cmVzIHRoYXQgdGhlIGRpcmVjdG9yeSBmb3IgdGhlIElOSSBmaWxlIGV4aXN0cywgY3JlYXRpbmcgaXQgaWYgbmVjZXNzYXJ5Lg0KCS8vLyBPcHRpb25hbGx5IGNyZWF0ZXMgb3IgY2xlYXJzIHRoZSBJTkkgZmlsZSBpdHNlbGYuDQoJLy8vIDwvc3VtbWFyeT4NCgkvLy8gPHBhcmFtIG5hbWU9Im92ZXJ3cml0ZSI+SWYgdHJ1ZSwgdGhlIGZpbGUgd2lsbCBiZSBjcmVhdGVkIChvciBjbGVhcmVkIGlmIGl0IGV4aXN0cykuIElmIGZhbHNlLCB0aGUgZmlsZSBpcyBvbmx5IGNyZWF0ZWQgaWYgaXQgZG9lc24ndCBleGlzdC48L3BhcmFtPg0KCXByaXZhdGUgdm9pZCBFbnN1cmVGaWxlRXhpc3RzKGJvb2wgb3ZlcndyaXRlID0gZmFsc2UpDQoJew0KCQl0cnkNCgkJew0KCQkJc3RyaW5nIGRpcmVjdG9yeSA9IFBhdGguR2V0RGlyZWN0b3J5TmFtZShmaWxlUGF0aCk7DQoNCgkJCS8vIENyZWF0ZSBkaXJlY3RvcnkgaWYgaXQgZG9lc24ndCBleGlzdA0KCQkJaWYgKCFzdHJpbmcuSXNOdWxsT3JFbXB0eShkaXJlY3RvcnkpICYmICFEaXJlY3RvcnkuRXhpc3RzKGRpcmVjdG9yeSkpDQoJCQl7DQoJCQkJRGlyZWN0b3J5LkNyZWF0ZURpcmVjdG9yeShkaXJlY3RvcnkpOw0KCQkJfQ0KDQoJCQkvLyBDcmVhdGUgb3IgY2xlYXIgdGhlIGZpbGUgaWYgb3ZlcndyaXRlIGlzIHRydWUgb3IgaWYgdGhlIGZpbGUgZG9lc24ndCBleGlzdA0KCQkJaWYgKG92ZXJ3cml0ZSB8fCAhRmlsZS5FeGlzdHMoZmlsZVBhdGgpKQ0KCQkJew0KCQkJCS8vIFVzZSByZXRyeSBsb2dpYyBmb3IgdGhlIGZpbGUgY3JlYXRpb24vY2xlYXJpbmcgb3BlcmF0aW9uDQoJCQkJUmV0cnlGaWxlT3BlcmF0aW9uKCgpID0+IHsgRmlsZS5Xcml0ZUFsbFRleHQoZmlsZVBhdGgsICIiKTsgfSk7DQoJCQl9DQoJCX0NCgkJY2F0Y2ggKEV4Y2VwdGlvbiBleCkNCgkJew0KCQkJLy8gTG9nIGVycm9yIGlmIGRpcmVjdG9yeS9maWxlIGNyZWF0aW9uIGZhaWxzDQoJCQlDb25zb2xlLldyaXRlTGluZSgiRXJyb3IgZW5zdXJpbmcgSU5JIGZpbGUgZXhpc3RzICciICsgZmlsZVBhdGggKyAiJzogIiArIGV4Lk1lc3NhZ2UpOw0KCQkJLy8gRGVwZW5kaW5nIG9uIHJlcXVpcmVtZW50cywgbWlnaHQgcmUtdGhyb3cgb3IgaGFuZGxlIGRpZmZlcmVudGx5DQoJCX0NCgl9DQoNCgkvLy8gPHN1bW1hcnk+DQoJLy8vIEF0dGVtcHRzIHRvIHBlcmZvcm0gYSBmaWxlIG9wZXJhdGlvbiwgcmV0cnlpbmcgc2V2ZXJhbCB0aW1lcyB3aXRoIGRlbGF5cyBpZiBhbiBJT0V4Y2VwdGlvbiBvY2N1cnMgKGUuZy4sIGZpbGUgbG9ja2VkKS4NCgkvLy8gPC9zdW1tYXJ5Pg0KCS8vLyA8cGFyYW0gbmFtZT0ib3BlcmF0aW9uIj5UaGUgZmlsZSBvcGVyYXRpb24gKEFjdGlvbiBkZWxlZ2F0ZSkgdG8gcGVyZm9ybS48L3BhcmFtPg0KCS8vLyA8ZXhjZXB0aW9uIGNyZWY9IklPRXhjZXB0aW9uIj5UaHJvd3MgYW4gSU9FeGNlcHRpb24gaWYgdGhlIG9wZXJhdGlvbiBmYWlscyBhZnRlciBhbGwgcmV0cnkgYXR0ZW1wdHMuPC9leGNlcHRpb24+DQoJcHJpdmF0ZSB2b2lkIFJldHJ5RmlsZU9wZXJhdGlvbihBY3Rpb24gb3BlcmF0aW9uKQ0KCXsNCgkJaW50IG1heEF0dGVtcHRzID0gNTsgICAgICAvLyBNYXhpbXVtIG51bWJlciBvZiByZXRyeSBhdHRlbXB0cw0KCQlpbnQgcmV0cnlEZWxheU1zID0gMTAwOyAgIC8vIERlbGF5IGJldHdlZW4gcmV0cmllcyBpbiBtaWxsaXNlY29uZHMNCg0KCQlpbnQgYXR0ZW1wdHMgPSAwOw0KCQl3aGlsZSAoYXR0ZW1wdHMgPCBtYXhBdHRlbXB0cykNCgkJew0KCQkJdHJ5DQoJCQl7DQoJCQkJb3BlcmF0aW9uKCk7IC8vIEF0dGVtcHQgdGhlIGZpbGUgb3BlcmF0aW9uDQoJCQkJcmV0dXJuOyAgICAgIC8vIFN1Y2Nlc3MsIGV4aXQgdGhlIG1ldGhvZA0KCQkJfQ0KCQkJY2F0Y2ggKElPRXhjZXB0aW9uIGV4KSAvLyBDYXRjaCBvbmx5IElPRXhjZXB0aW9ucywgbGlrZWx5IHJlbGF0ZWQgdG8gZmlsZSBhY2Nlc3MNCgkJCXsNCgkJCQlhdHRlbXB0cysrOw0KCQkJCWlmIChhdHRlbXB0cyA+PSBtYXhBdHRlbXB0cykNCgkJCQl7DQoJCQkJCS8vIFRocm93IGEgZGV0YWlsZWQgZXhjZXB0aW9uIGlmIG1heCBhdHRlbXB0cyBhcmUgcmVhY2hlZA0KCQkJCQl0aHJvdyBuZXcgSU9FeGNlcHRpb24oIkZhaWxlZCB0byBhY2Nlc3MgSU5JIGZpbGUgIiArIGZpbGVQYXRoICsgIiBhZnRlciAiICsgbWF4QXR0ZW1wdHMgKyAiIGF0dGVtcHRzLiBMYXN0IGVycm9yOiAiICsgZXguTWVzc2FnZSk7DQoJCQkJfQ0KCQkJCS8vIFdhaXQgYmVmb3JlIHRoZSBuZXh0IHJldHJ5DQoJCQkJVGhyZWFkLlNsZWVwKHJldHJ5RGVsYXlNcyk7DQoJCQl9DQoJCQkvLyBPdGhlciBleGNlcHRpb25zIChlLmcuLCBVbmF1dGhvcml6ZWRBY2Nlc3NFeGNlcHRpb24pIGFyZSBub3QgY2F1Z2h0IGhlcmUgYW5kIHdpbGwgcHJvcGFnYXRlIGltbWVkaWF0ZWx5Lg0KCQl9DQoJfQ0KfQ0KDQovLy8gPHN1bW1hcnk+DQovLy8gQ3VzdG9tIENvbWJvQm94IGNvbnRyb2wgd2l0aCBhIGRhcmsgdGhlbWUgYXBwZWFyYW5jZS4NCi8vLyBPdmVycmlkZXMgcGFpbnRpbmcgbWV0aG9kcyB0byBkcmF3IGN1c3RvbSBiYWNrZ3JvdW5kLCBib3JkZXIsIHRleHQsIGFuZCBkcm9wZG93biBhcnJvdy4NCi8vLyBJbmhlcml0cyBmcm9tIFN5c3RlbS5XaW5kb3dzLkZvcm1zLkNvbWJvQm94Lg0KLy8vIDwvc3VtbWFyeT4NCnB1YmxpYyBjbGFzcyBEYXJrQ29tYm9Cb3ggOiBDb21ib0JveA0Kew0KCQkvLyBXaW5kb3dzIE1lc3NhZ2VzIGNvbnN0YW50cyB1c2VkIGluIFduZFByb2MNCgkJcHJpdmF0ZSBjb25zdCBpbnQgV01fUEFJTlQgPSAweDAwMEY7ICAgICAgLy8gTWVzc2FnZSBzZW50IHdoZW4gdGhlIHdpbmRvdyBuZWVkcyB0byBiZSBwYWludGVkDQoJCXByaXZhdGUgY29uc3QgaW50IFdNX05DUEFJTlQgPSAweDAwODU7ICAgIC8vIE1lc3NhZ2Ugc2VudCB0byBwYWludCB0aGUgbm9uLWNsaWVudCBhcmVhIChib3JkZXIsIHRpdGxlIGJhcikNCgkJcHJpdmF0ZSBjb25zdCBpbnQgV01fRVJBU0VCS0dORCA9IDB4MDAxNDsgLy8gTWVzc2FnZSBzZW50IHdoZW4gdGhlIHdpbmRvdyBiYWNrZ3JvdW5kIG11c3QgYmUgZXJhc2VkDQoNCgkJLy8gUC9JbnZva2UgZGVmaW5pdGlvbnMgZm9yIGRyYXdpbmcNCgkJW0RsbEltcG9ydCgidXNlcjMyLmRsbCIpXQ0KCQlzdGF0aWMgZXh0ZXJuIEludFB0ciBHZXRXaW5kb3dEQyhJbnRQdHIgaFduZCk7IC8vIEdldHMgdGhlIGRldmljZSBjb250ZXh0IChEQykgZm9yIHRoZSBlbnRpcmUgd2luZG93LCBpbmNsdWRpbmcgdGl0bGUgYmFyLCBtZW51cywgYW5kIHNjcm9sbCBiYXJzLg0KCQlbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIildDQoJCXN0YXRpYyBleHRlcm4gaW50IFJlbGVhc2VEQyhJbnRQdHIgaFduZCwgSW50UHRyIGhEQyk7IC8vIFJlbGVhc2VzIGEgZGV2aWNlIGNvbnRleHQuDQoJCVtEbGxJbXBvcnQoInVzZXIzMi5kbGwiKV0NCgkJc3RhdGljIGV4dGVybiBib29sIEludmFsaWRhdGVSZWN0KEludFB0ciBoV25kLCBJbnRQdHIgbHBSZWN0LCBib29sIGJFcmFzZSk7IC8vIEludmFsaWRhdGVzIGEgcmVjdGFuZ3VsYXIgYXJlYSBvZiBhIHdpbmRvdywgYWRkaW5nIGl0IHRvIHRoZSB1cGRhdGUgcmVnaW9uLg0KDQoJCS8vIC0tLSBDdXN0b21pemFibGUgQ29sb3JzIGZvciB0aGUgRGFyayBUaGVtZSAtLS0NCgkJcHJpdmF0ZSBDb2xvciBCYWNrZ3JvdW5kQ29sb3IgPSBDb2xvci5Gcm9tQXJnYig0NSwgNDUsIDQ4KTsgICAgIC8vIERhcmsgZ3JleSBiYWNrZ3JvdW5kDQoJCXByaXZhdGUgQ29sb3IgVGV4dENvbG9yID0gQ29sb3IuRnJvbUFyZ2IoMjQxLCAyNDEsIDI0MSk7ICAgLy8gTGlnaHQgZ3JleS93aGl0ZSB0ZXh0DQoJCXByaXZhdGUgQ29sb3IgQm9yZGVyQ29sb3IgPSBDb2xvci5Gcm9tQXJnYig2NywgNjcsIDcwKTsgICAgIC8vIFNsaWdodGx5IGxpZ2h0ZXIgZ3JleSBib3JkZXINCgkJcHJpdmF0ZSBDb2xvciBBcnJvd0NvbG9yID0gQ29sb3IuRnJvbUFyZ2IoMjQxLCAyNDEsIDI0MSk7ICAgIC8vIFdoaXRlIGFycm93DQoJCXByaXZhdGUgQ29sb3IgU2VsZWN0ZWRJdGVtQmFja0NvbG9yID0gQ29sb3IuRnJvbUFyZ2IoMCwgMTIyLCAyMDQpOyAvLyBCbHVlIGhpZ2hsaWdodCBmb3Igc2VsZWN0ZWQgaXRlbSBiYWNrZ3JvdW5kDQoJCXByaXZhdGUgQ29sb3IgU2VsZWN0ZWRJdGVtRm9yZUNvbG9yID0gQ29sb3IuV2hpdGU7ICAgICAgICAgICAvLyBXaGl0ZSB0ZXh0IGZvciBzZWxlY3RlZCBpdGVtDQoJCXByaXZhdGUgQ29sb3IgRHJvcERvd25CYWNrQ29sb3IgPSBDb2xvci5Gcm9tQXJnYigzNywgMzcsIDM4KTsgICAgICAvLyBCYWNrZ3JvdW5kIGNvbG9yIG9mIHRoZSBkcm9wZG93biBsaXN0DQoNCgkJLy8vIDxzdW1tYXJ5Pg0KCQkvLy8gQ29uc3RydWN0b3IgZm9yIHRoZSBEYXJrQ29tYm9Cb3guIFNldHMgbmVjZXNzYXJ5IGNvbnRyb2wgc3R5bGVzIGZvciBjdXN0b20gcGFpbnRpbmcuDQoJCS8vLyA8L3N1bW1hcnk+DQoJCXB1YmxpYyBEYXJrQ29tYm9Cb3goKSA6IGJhc2UoKQ0KCQl7DQoJCQkvLyBTZXQgY29udHJvbCBzdHlsZXMgdG8gZW5hYmxlIGN1c3RvbSBwYWludGluZyBhbmQgcmVkdWNlIGZsaWNrZXINCgkJCXRoaXMuU2V0U3R5bGUoQ29udHJvbFN0eWxlcy5Vc2VyUGFpbnQgfCAgICAgICAgICAgICAvLyBDb250cm9sIHBhaW50cyBpdHNlbGYgcmF0aGVyIHRoYW4gdGhlIE9TIGRvaW5nIHNvLg0KCQkJCQkJQ29udHJvbFN0eWxlcy5BbGxQYWludGluZ0luV21QYWludCB8ICAvLyBJZ25vcmUgV01fRVJBU0VCS0dORCB0byByZWR1Y2UgZmxpY2tlci4NCgkJCQkJCUNvbnRyb2xTdHlsZXMuT3B0aW1pemVkRG91YmxlQnVmZmVyIHwgLy8gUGFpbnQgdmlhIGEgYnVmZmVyIHRvIHJlZHVjZSBmbGlja2VyLg0KCQkJCQkJQ29udHJvbFN0eWxlcy5SZXNpemVSZWRyYXcsICAgICAgICAgICAvLyBSZWRyYXcgd2hlbiByZXNpemVkLg0KCQkJCQkJdHJ1ZSk7DQoJCQl0aGlzLkRyYXdNb2RlID0gRHJhd01vZGUuT3duZXJEcmF3Rml4ZWQ7IC8vIFNwZWNpZnkgdGhhdCBpdGVtcyBhcmUgZHJhd24gbWFudWFsbHkgYW5kIGFyZSBvZiBmaXhlZCBoZWlnaHQNCgkJCXRoaXMuRHJvcERvd25TdHlsZSA9IENvbWJvQm94U3R5bGUuRHJvcERvd25MaXN0OyAvLyBQcmV2ZW50IHVzZXIgdGV4dCBpbnB1dCwgb25seSBhbGxvdyBzZWxlY3Rpb24NCgkJCXRoaXMuRmxhdFN0eWxlID0gRmxhdFN0eWxlLkZsYXQ7IC8vIFVzZSBmbGF0IHN0eWxlIGFzIGJhc2UgZm9yIGN1c3RvbSBkcmF3aW5nDQoJCX0NCg0KCQkvLy8gPHN1bW1hcnk+DQoJCS8vLyBPdmVycmlkZXMgdGhlIE9uUGFpbnQgbWV0aG9kIHRvIGhhbmRsZSBjdXN0b20gZHJhd2luZyBvZiB0aGUgQ29tYm9Cb3ggY29udHJvbCBpdHNlbGYgKHRoZSBtYWluIGJveCkuDQoJCS8vLyA8L3N1bW1hcnk+DQoJCS8vLyA8cGFyYW0gbmFtZT0iZSI+UGFpbnRFdmVudEFyZ3MgY29udGFpbmluZyBncmFwaGljcyBjb250ZXh0IGFuZCBjbGlwcGluZyByZWN0YW5nbGUuPC9wYXJhbT4NCgkJcHJvdGVjdGVkIG92ZXJyaWRlIHZvaWQgT25QYWludChQYWludEV2ZW50QXJncyBlKQ0KCQl7DQoJCQlHcmFwaGljcyBnID0gZS5HcmFwaGljczsNCgkJCVJlY3RhbmdsZSBib3VuZHMgPSB0aGlzLkNsaWVudFJlY3RhbmdsZTsNCg0KCQkJLy8gMS4gRHJhdyB0aGUgYmFja2dyb3VuZA0KCQkJdXNpbmcgKFNvbGlkQnJ1c2ggYmFja0JydXNoID0gbmV3IFNvbGlkQnJ1c2godGhpcy5FbmFibGVkID8gQmFja2dyb3VuZENvbG9yIDogU3lzdGVtQ29sb3JzLkNvbnRyb2xEYXJrKSkgLy8gVXNlIGRpc2FibGVkIGNvbG9yIGlmIG5lZWRlZA0KCQkJew0KCQkJCWcuRmlsbFJlY3RhbmdsZShiYWNrQnJ1c2gsIGJvdW5kcyk7DQoJCQl9DQoNCgkJCS8vIDIuIERyYXcgdGhlIHNlbGVjdGVkIGl0ZW0gdGV4dCAoaWYgYXBwbGljYWJsZSkNCgkJCWlmICh0aGlzLkRyb3BEb3duU3R5bGUgPT0gQ29tYm9Cb3hTdHlsZS5Ecm9wRG93bkxpc3QgfHwgdGhpcy5Ecm9wRG93blN0eWxlID09IENvbWJvQm94U3R5bGUuRHJvcERvd24pDQoJCQl7DQoJCQkJc3RyaW5nIHRleHQgPSB0aGlzLlRleHQ7IC8vIFVzZSBUZXh0IHByb3BlcnR5IHdoaWNoIHJlZmxlY3RzIHNlbGVjdGVkIGl0ZW0gb3IgdHlwZWQgdGV4dA0KCQkJCWlmICghc3RyaW5nLklzTnVsbE9yRW1wdHkodGV4dCkpDQoJCQkJew0KCQkJCQkvLyBEZWZpbmUgdGV4dCByZWN0YW5nbGUsIGxlYXZpbmcgc3BhY2UgZm9yIGJvcmRlciBhbmQgZHJvcGRvd24gYnV0dG9uDQoJCQkJCVJlY3RhbmdsZSB0ZXh0UmVjdCA9IG5ldyBSZWN0YW5nbGUoYm91bmRzLkxlZnQgKyAzLCBib3VuZHMuVG9wICsgMiwgYm91bmRzLldpZHRoIC0gMjMsIGJvdW5kcy5IZWlnaHQgLSA0KTsNCgkJCQkJVGV4dEZvcm1hdEZsYWdzIGZsYWdzID0gVGV4dEZvcm1hdEZsYWdzLkxlZnQgfCBUZXh0Rm9ybWF0RmxhZ3MuVmVydGljYWxDZW50ZXIgfCBUZXh0Rm9ybWF0RmxhZ3MuRW5kRWxsaXBzaXM7IC8vIENlbnRlciB2ZXJ0aWNhbGx5LCBhZGQgZWxsaXBzaXMgaWYgdG9vIGxvbmcNCg0KCQkJCQkvLyBVc2UgYXBwcm9wcmlhdGUgdGV4dCBjb2xvciBiYXNlZCBvbiBlbmFibGVkIHN0YXRlDQoJCQkJCUNvbG9yIGN1cnJlbnRUZXh0Q29sb3IgPSB0aGlzLkVuYWJsZWQgPyBUZXh0Q29sb3IgOiBTeXN0ZW1Db2xvcnMuR3JheVRleHQ7DQoJCQkJCVRleHRSZW5kZXJlci5EcmF3VGV4dChnLCB0ZXh0LCB0aGlzLkZvbnQsIHRleHRSZWN0LCBjdXJyZW50VGV4dENvbG9yLCBmbGFncyk7DQoJCQkJfQ0KCQkJfQ0KDQoJCQkvLyAzLiBEcmF3IHRoZSBib3JkZXINCgkJCXVzaW5nIChQZW4gYm9yZGVyUGVuID0gbmV3IFBlbih0aGlzLkVuYWJsZWQgPyBCb3JkZXJDb2xvciA6IFN5c3RlbUNvbG9ycy5Db250cm9sRGFya0RhcmspKQ0KCQkJew0KCQkJCWcuRHJhd1JlY3RhbmdsZShib3JkZXJQZW4sIGJvdW5kcy5MZWZ0LCBib3VuZHMuVG9wLCBib3VuZHMuV2lkdGggLSAxLCBib3VuZHMuSGVpZ2h0IC0gMSk7DQoJCQl9DQoNCgkJCS8vIDQuIERyYXcgdGhlIGRyb3Bkb3duIGJ1dHRvbiBiYWNrZ3JvdW5kDQoJCQlSZWN0YW5nbGUgYnV0dG9uUmVjdCA9IG5ldyBSZWN0YW5nbGUoYm91bmRzLldpZHRoIC0gMjAsIGJvdW5kcy5Ub3AsIDIwLCBib3VuZHMuSGVpZ2h0KTsNCgkJCXVzaW5nIChTb2xpZEJydXNoIGJ1dHRvbkJydXNoID0gbmV3IFNvbGlkQnJ1c2godGhpcy5FbmFibGVkID8gQmFja2dyb3VuZENvbG9yIDogU3lzdGVtQ29sb3JzLkNvbnRyb2xEYXJrKSkNCgkJCXsNCgkJCQlnLkZpbGxSZWN0YW5nbGUoYnV0dG9uQnJ1c2gsIGJ1dHRvblJlY3QpOw0KCQkJfQ0KDQoJCQkvLyBEcmF3IGEgc2VwYXJhdG9yIGxpbmUgYmVmb3JlIHRoZSBidXR0b24NCgkJCXVzaW5nIChQZW4gc2VwUGVuID0gbmV3IFBlbih0aGlzLkVuYWJsZWQgPyBCb3JkZXJDb2xvciA6IFN5c3RlbUNvbG9ycy5Db250cm9sRGFya0RhcmspKQ0KCQkJew0KCQkJCWcuRHJhd0xpbmUoc2VwUGVuLCBidXR0b25SZWN0LkxlZnQgLTEsIGJvdW5kcy5Ub3AsIGJ1dHRvblJlY3QuTGVmdCAtMSwgYm91bmRzLkJvdHRvbSk7DQoJCQl9DQoNCgkJCS8vIDUuIERyYXcgdGhlIGRyb3Bkb3duIGFycm93DQoJCQlQb2ludCBjZW50ZXIgPSBuZXcgUG9pbnQoYnV0dG9uUmVjdC5MZWZ0ICsgYnV0dG9uUmVjdC5XaWR0aCAvIDIsIGJ1dHRvblJlY3QuVG9wICsgYnV0dG9uUmVjdC5IZWlnaHQgLyAyKTsNCgkJCVBvaW50W10gYXJyb3dQb2ludHMgPSBuZXcgUG9pbnRbXSB7DQoJCQkJbmV3IFBvaW50KGNlbnRlci5YIC0gNSwgY2VudGVyLlkgLSAyKSwgLy8gVG9wLWxlZnQNCgkJCQluZXcgUG9pbnQoY2VudGVyLlggKyA1LCBjZW50ZXIuWSAtIDIpLCAvLyBUb3AtcmlnaHQNCgkJCQluZXcgUG9pbnQoY2VudGVyLlgsIGNlbnRlci5ZICsgMykgICAgICAvLyBCb3R0b20tY2VudGVyDQoJCQl9Ow0KCQkJdXNpbmcgKFNvbGlkQnJ1c2ggYXJyb3dCcnVzaCA9IG5ldyBTb2xpZEJydXNoKHRoaXMuRW5hYmxlZCA/IEFycm93Q29sb3IgOiBTeXN0ZW1Db2xvcnMuR3JheVRleHQpKQ0KCQkJew0KCQkJCWcuRmlsbFBvbHlnb24oYXJyb3dCcnVzaCwgYXJyb3dQb2ludHMpOw0KCQkJfQ0KCQl9DQoNCgkJLy8vIDxzdW1tYXJ5Pg0KCQkvLy8gT3ZlcnJpZGVzIHRoZSB3aW5kb3cgcHJvY2VkdXJlIHRvIGhhbmRsZSBzcGVjaWZpYyBwYWludC1yZWxhdGVkIG1lc3NhZ2VzIGZvciBjdXN0b20gZHJhd2luZy4NCgkJLy8vIFRoaXMgaGVscHMgZW5zdXJlIGNvbnNpc3RlbnQgYXBwZWFyYW5jZSwgZXNwZWNpYWxseSBmb3IgdGhlIG5vbi1jbGllbnQgYXJlYSAoYm9yZGVyKS4NCgkJLy8vIDwvc3VtbWFyeT4NCgkJLy8vIDxwYXJhbSBuYW1lPSJtIj5UaGUgV2luZG93cyBNZXNzYWdlLjwvcGFyYW0+DQoJCXByb3RlY3RlZCBvdmVycmlkZSB2b2lkIFduZFByb2MocmVmIE1lc3NhZ2UgbSkNCgkJew0KCQkJLy8gSW50ZXJjZXB0IHBhaW50IG1lc3NhZ2VzIHRvIGVuc3VyZSBjdXN0b20gZHJhd2luZw0KCQkJaWYgKG0uTXNnID09IFdNX1BBSU5UKQ0KCQkJew0KCQkJCWJhc2UuV25kUHJvYyhyZWYgbSk7IC8vIExldCB0aGUgYmFzZSBjb250cm9sIGhhbmRsZSB0aGUgcGFpbnQgZmlyc3QNCgkJCQkvLyBOb3csIHBlcmZvcm0gb3VyIGN1c3RvbSBwYWludGluZyBvdmVyIGl0LCBlc3BlY2lhbGx5IHRoZSBib3JkZXIgYW5kIGJ1dHRvbg0KCQkJCXVzaW5nIChHcmFwaGljcyBnID0gR3JhcGhpY3MuRnJvbUh3bmQodGhpcy5IYW5kbGUpKQ0KCQkJCXsNCgkJCQkJUmVjdGFuZ2xlIGJvdW5kcyA9IHRoaXMuQ2xpZW50UmVjdGFuZ2xlOw0KCQkJCQkvLyBSZWRyYXcgYm9yZGVyDQoJCQkJCXVzaW5nIChQZW4gYm9yZGVyUGVuID0gbmV3IFBlbihCb3JkZXJDb2xvcikpDQoJCQkJCXsNCgkJCQkJCWcuRHJhd1JlY3RhbmdsZShib3JkZXJQZW4sIDAsIDAsIHRoaXMuV2lkdGggLSAxLCB0aGlzLkhlaWdodCAtIDEpOw0KCQkJCQl9DQoJCQkJCS8vIFJlZHJhdyBkcm9wZG93biBidXR0b24gYXJlYSAoYmFja2dyb3VuZCBhbmQgYXJyb3cpDQoJCQkJCVJlY3RhbmdsZSBidXR0b25SZWN0ID0gbmV3IFJlY3RhbmdsZSh0aGlzLldpZHRoIC0gMjAsIDAsIDIwLCB0aGlzLkhlaWdodCk7DQoJCQkJCXVzaW5nIChTb2xpZEJydXNoIGJ1dHRvbkJydXNoID0gbmV3IFNvbGlkQnJ1c2goQmFja2dyb3VuZENvbG9yKSkgeyBnLkZpbGxSZWN0YW5nbGUoYnV0dG9uQnJ1c2gsIGJ1dHRvblJlY3QpOyB9DQoJCQkJCVBvaW50IGNlbnRlciA9IG5ldyBQb2ludChidXR0b25SZWN0LkxlZnQgKyBidXR0b25SZWN0LldpZHRoIC8gMiwgYnV0dG9uUmVjdC5Ub3AgKyBidXR0b25SZWN0LkhlaWdodCAvIDIpOw0KCQkJCQlQb2ludFtdIGFycm93UG9pbnRzID0gbmV3IFBvaW50W10geyBuZXcgUG9pbnQoY2VudGVyLlggLSA1LCBjZW50ZXIuWSAtIDIpLCBuZXcgUG9pbnQoY2VudGVyLlggKyA1LCBjZW50ZXIuWSAtIDIpLCBuZXcgUG9pbnQoY2VudGVyLlgsIGNlbnRlci5ZICsgMykgfTsNCgkJCQkJdXNpbmcgKFNvbGlkQnJ1c2ggYXJyb3dCcnVzaCA9IG5ldyBTb2xpZEJydXNoKEFycm93Q29sb3IpKSB7IGcuRmlsbFBvbHlnb24oYXJyb3dCcnVzaCwgYXJyb3dQb2ludHMpOyB9DQoJCQkJCS8vIERyYXcgc2VwYXJhdG9yIGxpbmUNCgkJCQkJdXNpbmcgKFBlbiBzZXBQZW4gPSBuZXcgUGVuKEJvcmRlckNvbG9yKSkgeyBnLkRyYXdMaW5lKHNlcFBlbiwgYnV0dG9uUmVjdC5MZWZ0IC0xLCAwLCBidXR0b25SZWN0LkxlZnQgLTEsIGJvdW5kcy5Cb3R0b20pOyB9DQoJCQkJfQ0KCQkJCW0uUmVzdWx0ID0gSW50UHRyLlplcm87IC8vIEluZGljYXRlIG1lc3NhZ2Ugd2FzIGhhbmRsZWQNCgkJCX0NCgkJCWVsc2UgaWYgKG0uTXNnID09IFdNX0VSQVNFQktHTkQpIC8vIENvcnJlY3RlZCAnZWxzZWlmJyB0byAnZWxzZSBpZicNCgkJCXsNCgkJCQkvLyBQcmV2ZW50IGRlZmF1bHQgYmFja2dyb3VuZCBlcmFzaW5nIHRvIHJlZHVjZSBmbGlja2VyDQoJCQkJbS5SZXN1bHQgPSAoSW50UHRyKTE7IC8vIEluZGljYXRlIHdlIGhhbmRsZWQgaXQNCgkJCX0NCgkJCWVsc2UNCgkJCXsNCgkJCQliYXNlLlduZFByb2MocmVmIG0pOyAvLyBIYW5kbGUgb3RoZXIgbWVzc2FnZXMgbm9ybWFsbHkNCgkJCX0NCgkJfQ0KDQoJCS8vLyA8c3VtbWFyeT4NCgkJLy8vIE92ZXJyaWRlcyB0aGUgT25EcmF3SXRlbSBtZXRob2QgdG8gaGFuZGxlIGN1c3RvbSBkcmF3aW5nIG9mIGluZGl2aWR1YWwgaXRlbXMgaW4gdGhlIGRyb3Bkb3duIGxpc3QuDQoJCS8vLyA8L3N1bW1hcnk+DQoJCS8vLyA8cGFyYW0gbmFtZT0iZSI+RHJhd0l0ZW1FdmVudEFyZ3MgY29udGFpbmluZyBpdGVtIGluZGV4LCBzdGF0ZSwgZ3JhcGhpY3MgY29udGV4dCwgYW5kIGJvdW5kcy48L3BhcmFtPg0KCQlwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBPbkRyYXdJdGVtKERyYXdJdGVtRXZlbnRBcmdzIGUpDQoJCXsNCgkJCWlmIChlLkluZGV4IDwgMCB8fCBlLkluZGV4ID49IHRoaXMuSXRlbXMuQ291bnQpIHJldHVybjsgLy8gQ2hlY2sgZm9yIHZhbGlkIGluZGV4DQoNCgkJCUdyYXBoaWNzIGcgPSBlLkdyYXBoaWNzOw0KCQkJUmVjdGFuZ2xlIGJvdW5kcyA9IGUuQm91bmRzOw0KDQoJCQkvLyBEZXRlcm1pbmUgYmFja2dyb3VuZCBhbmQgdGV4dCBjb2xvcnMgYmFzZWQgb24gaXRlbSBzdGF0ZSAoc2VsZWN0ZWQsIGZvY3VzZWQsIGV0Yy4pDQoJCQlDb2xvciBjdXJyZW50QmFja0NvbG9yOw0KCQkJQ29sb3IgY3VycmVudEZvcmVDb2xvcjsNCg0KCQkJaWYgKChlLlN0YXRlICYgRHJhd0l0ZW1TdGF0ZS5TZWxlY3RlZCkgPT0gRHJhd0l0ZW1TdGF0ZS5TZWxlY3RlZCkNCgkJCXsNCgkJCQljdXJyZW50QmFja0NvbG9yID0gU2VsZWN0ZWRJdGVtQmFja0NvbG9yOyAvLyBVc2UgaGlnaGxpZ2h0IGNvbG9yIGZvciBzZWxlY3RlZCBpdGVtIGJhY2tncm91bmQNCgkJCQljdXJyZW50Rm9yZUNvbG9yID0gU2VsZWN0ZWRJdGVtRm9yZUNvbG9yOyAvLyBVc2UgaGlnaGxpZ2h0IGNvbG9yIGZvciBzZWxlY3RlZCBpdGVtIHRleHQNCgkJCX0NCgkJCWVsc2UNCgkJCXsNCgkJCQljdXJyZW50QmFja0NvbG9yID0gRHJvcERvd25CYWNrQ29sb3I7IC8vIFVzZSBkZWZhdWx0IGRyb3Bkb3duIGJhY2tncm91bmQgY29sb3INCgkJCQljdXJyZW50Rm9yZUNvbG9yID0gVGV4dENvbG9yOyAgICAgICAgIC8vIFVzZSBkZWZhdWx0IHRleHQgY29sb3INCgkJCX0NCg0KCQkJLy8gRHJhdyB0aGUgaXRlbSBiYWNrZ3JvdW5kDQoJCQl1c2luZyAoU29saWRCcnVzaCBiYWNrQnJ1c2ggPSBuZXcgU29saWRCcnVzaChjdXJyZW50QmFja0NvbG9yKSkNCgkJCXsNCgkJCQlnLkZpbGxSZWN0YW5nbGUoYmFja0JydXNoLCBib3VuZHMpOw0KCQkJfQ0KDQoJCQkvLyBEcmF3IHRoZSBpdGVtIHRleHQNCgkJCXN0cmluZyBpdGVtVGV4dCA9IHRoaXMuSXRlbXNbZS5JbmRleF0uVG9TdHJpbmcoKTsNCgkJCVRleHRGb3JtYXRGbGFncyBmbGFncyA9IFRleHRGb3JtYXRGbGFncy5MZWZ0IHwgVGV4dEZvcm1hdEZsYWdzLlZlcnRpY2FsQ2VudGVyIHwgVGV4dEZvcm1hdEZsYWdzLkVuZEVsbGlwc2lzOyAvLyBBbGlnbiBsZWZ0LCBjZW50ZXIgdmVydGljYWxseQ0KCQkJUmVjdGFuZ2xlIHRleHRCb3VuZHMgPSBuZXcgUmVjdGFuZ2xlKGJvdW5kcy5MZWZ0ICsgMywgYm91bmRzLlRvcCwgYm91bmRzLldpZHRoIC0gNiwgYm91bmRzLkhlaWdodCk7IC8vIEFkZCBwYWRkaW5nDQoNCgkJCVRleHRSZW5kZXJlci5EcmF3VGV4dChnLCBpdGVtVGV4dCwgdGhpcy5Gb250LCB0ZXh0Qm91bmRzLCBjdXJyZW50Rm9yZUNvbG9yLCBmbGFncyk7DQoNCgkJCS8vIERyYXcgZm9jdXMgcmVjdGFuZ2xlIGlmIHRoZSBpdGVtIGhhcyBmb2N1cyAob3B0aW9uYWwsIGJ1dCBnb29kIGZvciBhY2Nlc3NpYmlsaXR5KQ0KCQkJaWYgKChlLlN0YXRlICYgRHJhd0l0ZW1TdGF0ZS5Gb2N1cykgPT0gRHJhd0l0ZW1TdGF0ZS5Gb2N1cyAmJiAoZS5TdGF0ZSAmIERyYXdJdGVtU3RhdGUuTm9Gb2N1c1JlY3QpID09IDApDQoJCQl7DQoJCQkJLy8gQ29udHJvbFBhaW50LkRyYXdGb2N1c1JlY3RhbmdsZShnLCBib3VuZHMsIGN1cnJlbnRGb3JlQ29sb3IsIGN1cnJlbnRCYWNrQ29sb3IpOyAvLyBTdGFuZGFyZCBmb2N1cyByZWN0DQoJCQkJLy8gT3IgYSBjdXN0b20gZm9jdXMgaW5kaWNhdG9yOg0KCQkJCXVzaW5nIChQZW4gZm9jdXNQZW4gPSBuZXcgUGVuKFNlbGVjdGVkSXRlbUJhY2tDb2xvciwgMSkpIC8vIFVzZSBzZWxlY3Rpb24gY29sb3IgZm9yIGZvY3VzIGJvcmRlcg0KCQkJCXsNCgkJCQkJZm9jdXNQZW4uRGFzaFN0eWxlID0gU3lzdGVtLkRyYXdpbmcuRHJhd2luZzJELkRhc2hTdHlsZS5Eb3Q7DQoJCQkJCWcuRHJhd1JlY3RhbmdsZShmb2N1c1BlbiwgYm91bmRzLkxlZnQsIGJvdW5kcy5Ub3AsIGJvdW5kcy5XaWR0aCAtIDEsIGJvdW5kcy5IZWlnaHQgLSAxKTsNCgkJCQl9DQoJCQl9DQoNCgkJCS8vIENhbGwgYmFzZSBtZXRob2QgaWYgbmVlZGVkLCB0aG91Z2ggdXN1YWxseSBub3QgcmVxdWlyZWQgd2l0aCBmdWxsIGN1c3RvbSBkcmF3DQoJCQkvLyBiYXNlLk9uRHJhd0l0ZW0oZSk7DQoJCX0NCg0KCQkvLyBPdmVycmlkZSBPbk1lYXN1cmVJdGVtIGlmIERyYXdNb2RlIGlzIE93bmVyRHJhd1ZhcmlhYmxlDQoJCS8vIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIE9uTWVhc3VyZUl0ZW0oTWVhc3VyZUl0ZW1FdmVudEFyZ3MgZSkgeyAuLi4gfQ0KDQoJCS8vIE92ZXJyaWRlIGJhY2tncm91bmQgY29sb3IgcHJvcGVydHkgaWYgbmVlZGVkDQoJCS8vIHB1YmxpYyBvdmVycmlkZSBDb2xvciBCYWNrQ29sb3IgeyBnZXQgPT4gQmFja2dyb3VuZENvbG9yOyBzZXQgeyBCYWNrZ3JvdW5kQ29sb3IgPSB2YWx1ZTsgSW52YWxpZGF0ZSgpOyB9IH0NCn0NCg0KLy8vIDxzdW1tYXJ5Pg0KLy8vIEluaGVyaXRzIGZyb20gTmF0aXZlV2luZG93IHRvIGludGVyY2VwdCBXaW5kb3dzIG1lc3NhZ2VzIGZvciBhIHNwZWNpZmljIGZvcm0sDQovLy8gc3BlY2lmaWNhbGx5IGZvciBoYW5kbGluZyBob3RrZXlzIHJlZ2lzdGVyZWQgdmlhIFJlZ2lzdGVySG90S2V5Lg0KLy8vIDwvc3VtbWFyeT4NCnB1YmxpYyBjbGFzcyBIb3RrZXlIYW5kbGVyIDogTmF0aXZlV2luZG93DQp7DQoJCS8vIFByb3BlcnRpZXMgdG8gaG9sZCBjb250ZXh0DQoJCXB1YmxpYyBGb3JtIFRhcmdldEZvcm0geyBnZXQ7IHNldDsgfQ0KCQlwdWJsaWMgaW50IEhvdGtleUlkIHsgZ2V0OyBzZXQ7IH0NCgkJcHVibGljIFNjcmlwdEJsb2NrIEFjdGlvbiB7IGdldDsgc2V0OyB9IC8vIFBvd2VyU2hlbGwgU2NyaXB0QmxvY2sNCg0KCQkvLyBDb25zdHJ1Y3RvciAob3B0aW9uYWwsIHByb3BlcnRpZXMgY2FuIGJlIHNldCBhZnRlciBjcmVhdGlvbikNCgkJcHVibGljIEhvdGtleUhhbmRsZXIoRm9ybSBmb3JtLCBpbnQgaG90a2V5SWQsIFNjcmlwdEJsb2NrIGFjdGlvbikNCgkJew0KCQkJdGhpcy5UYXJnZXRGb3JtID0gZm9ybTsNCgkJCXRoaXMuSG90a2V5SWQgPSBob3RrZXlJZDsNCgkJCXRoaXMuQWN0aW9uID0gYWN0aW9uOw0KCQkJLy8gQXNzaWduIHRoZSBoYW5kbGUgb2YgdGhlIGZvcm0gd2Ugd2FudCB0byBsaXN0ZW4gdG8NCgkJCS8vIE5vdGU6IFRoaXMgc2hvdWxkIGlkZWFsbHkgYmUgZG9uZSAqYWZ0ZXIqIHRoZSBmb3JtIGhhbmRsZSBpcyBjcmVhdGVkLg0KCQkJLy8gSXQncyBvZnRlbiBiZXR0ZXIgdG8gY2FsbCBBc3NpZ25IYW5kbGUgZXh0ZXJuYWxseSBhZnRlciBmb3JtIGlzIHNob3duLg0KCQkJLy8gaWYgKGZvcm0gIT0gbnVsbCAmJiBmb3JtLklzSGFuZGxlQ3JlYXRlZCkNCgkJCS8vIHsNCgkJCS8vICAgICB0aGlzLkFzc2lnbkhhbmRsZShmb3JtLkhhbmRsZSk7DQoJCQkvLyB9DQoJCX0NCg0KCQkvLyBEZWZhdWx0IGNvbnN0cnVjdG9yDQoJCXB1YmxpYyBIb3RrZXlIYW5kbGVyKCkgeyB9IC8vIEFkZGVkIG1pc3NpbmcgYm9keQ0KDQoJCS8vIE92ZXJyaWRlIFduZFByb2MgdG8gaGFuZGxlIG1lc3NhZ2VzIGZvciB0aGUgYXNzaWduZWQgd2luZG93IGhhbmRsZQ0KCQlwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBXbmRQcm9jKHJlZiBNZXNzYWdlIG0pDQoJCXsNCgkJCS8vIENoZWNrIGlmIHRoZSBtZXNzYWdlIGlzIFdNX0hPVEtFWSBhbmQgaWYgdGhlIFdQYXJhbSBtYXRjaGVzIG91ciByZWdpc3RlcmVkIElEDQoJCQlpZiAobS5Nc2cgPT0gTmF0aXZlLldNX0hPVEtFWSAmJiBtLldQYXJhbS5Ub0ludDMyKCkgPT0gdGhpcy5Ib3RrZXlJZCkNCgkJCXsNCgkJCQkvLyBFeGVjdXRlIHRoZSBhc3NvY2lhdGVkIFBvd2VyU2hlbGwgYWN0aW9uDQoJCQkJaWYgKHRoaXMuQWN0aW9uICE9IG51bGwpDQoJCQkJew0KCQkJCQl0cnkNCgkJCQkJew0KCQkJCQkJLy8gVXNlIEludm9rZSgpIG1ldGhvZCBvZiB0aGUgU2NyaXB0QmxvY2sNCgkJCQkJCXRoaXMuQWN0aW9uLkludm9rZSgpOw0KCQkJCQl9DQoJCQkJCWNhdGNoIChFeGNlcHRpb24gZXgpDQoJCQkJCXsNCgkJCQkJCS8vIExvZyBlcnJvciAtIENvbnNpZGVyIGEgbW9yZSByb2J1c3QgbG9nZ2luZyBtZWNoYW5pc20NCgkJCQkJCUNvbnNvbGUuRXJyb3IuV3JpdGVMaW5lKCJGVE9PTDogRXJyb3IgZXhlY3V0aW5nIGhvdGtleSBhY3Rpb246ICIgKyBleC5NZXNzYWdlKTsNCgkJCQkJfQ0KCQkJCX0NCgkJCQkvLyBNYXJrIHRoZSBtZXNzYWdlIGFzIGhhbmRsZWQNCgkJCQltLlJlc3VsdCA9IEludFB0ci5aZXJvOw0KCQkJfQ0KCQkJZWxzZQ0KCQkJew0KCQkJCS8vIEhhbmRsZSBvdGhlciBtZXNzYWdlcyBub3JtYWxseSBieSBjYWxsaW5nIHRoZSBiYXNlIGNsYXNzDQoJCQkJYmFzZS5XbmRQcm9jKHJlZiBtKTsNCgkJCX0NCgkJfQ0KfSAvLyBFbmQgb2YgSG90a2V5SGFuZGxlciBjbGFzcw0KDQoiQCAjIEVuZCBvZiBDIyBoZXJlLXN0cmluZw0KICAgICNlbmRyZWdpb24gU3RlcDogRGVmaW5lIEMjIENsYXNzIFN0cmluZw0KI2VuZHJlZ2lvbiBDIyBDbGFzcyBEZWZpbml0aW9ucw0KDQojcmVnaW9uIE1vZHVsZSBJbml0aWFsaXphdGlvbg0KICAgICNyZWdpb24gRnVuY3Rpb246IEluaXRpYWxpemUtQ2xhc3Nlc01vZHVsZQ0KICAgICAgICBmdW5jdGlvbiBJbml0aWFsaXplLUNsYXNzZXNNb2R1bGUNCiAgICAgICAgew0KICAgICAgICAgICAgPCMNCiAgICAgICAgICAgIC5TWU5PUFNJUw0KICAgICAgICAgICAgICAgIEluaXRpYWxpemVzIHRoZSBtb2R1bGUgYnkgY29tcGlsaW5nIHRoZSBlbWJlZGRlZCBDIyBjbGFzc2VzIHVzaW5nIEFkZC1UeXBlLg0KICAgICAgICAgICAgLkRFU0NSSVBUSU9ODQogICAgICAgICAgICAgICAgVGhpcyBmdW5jdGlvbiB0YWtlcyB0aGUgQyMgY29kZSBkZWZpbmVkIGluIHRoZSAkY2xhc3NlcyB2YXJpYWJsZSBhbmQgY29tcGlsZXMgaXQNCiAgICAgICAgICAgICAgICBpbnRvIHRoZSBjdXJyZW50IFBvd2VyU2hlbGwgc2Vzc2lvbiB1c2luZyB0aGUgQWRkLVR5cGUgY21kbGV0LiBUaGlzIG1ha2VzIHRoZQ0KICAgICAgICAgICAgICAgIE5hdGl2ZSwgRnRvb2wsIEluaUZpbGUsIGFuZCBEYXJrQ29tYm9Cb3ggY2xhc3NlcyBhdmFpbGFibGUgZm9yIHVzZSB3aXRoaW4gdGhlIHNlc3Npb24uDQogICAgICAgICAgICAgICAgSXQgdXNlcyB0aGUgY29uZmlndXJhdGlvbiBzdG9yZWQgaW4gJHNjcmlwdDpDb21waWxhdGlvbk9wdGlvbnMuDQogICAgICAgICAgICAuUEFSQU1FVEVSDQogICAgICAgICAgICAgICAgTm9uZS4gVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBhY2NlcHQgYW55IHBhcmFtZXRlcnMuDQogICAgICAgICAgICAuT1VUUFVUUw0KICAgICAgICAgICAgICAgIFtib29sXSBSZXR1cm5zICR0cnVlIGlmIHRoZSBDIyBjbGFzc2VzIHdlcmUgY29tcGlsZWQgc3VjY2Vzc2Z1bGx5LCAkZmFsc2Ugb3RoZXJ3aXNlLg0KICAgICAgICAgICAgLk5PVEVTDQogICAgICAgICAgICAgICAgVGhpcyBmdW5jdGlvbiBpcyB0eXBpY2FsbHkgY2FsbGVkIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGUgbW9kdWxlIGlzIGltcG9ydGVkLg0KICAgICAgICAgICAgICAgIEl0IGluY2x1ZGVzIGJhc2ljIGVycm9yIGhhbmRsaW5nIHRvIHJlcG9ydCBjb21waWxhdGlvbiBmYWlsdXJlcy4NCiAgICAgICAgICAgICAgICBSZXF1aXJlcyBhcHByb3ByaWF0ZSAuTkVUIEZyYW1ld29yayB2ZXJzaW9uIGFuZCByZWZlcmVuY2VkIGFzc2VtYmxpZXMgdG8gYmUgYXZhaWxhYmxlLg0KICAgICAgICAgICAgIz4NCiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldDQogICAgICAgICAgICBwYXJhbSgpDQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ29tcGlsZSBDIyBDbGFzc2VzIHdpdGggRXJyb3IgSGFuZGxpbmcNCiAgICAgICAgICAgICAgICB0cnkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogRGlzcGxheSBJbml0aWFsaXphdGlvbiBNZXNzYWdlDQogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJJbml0aWFsaXppbmcgc3lzdGVtIGludGVncmF0aW9uIGNsYXNzZXMgKE5hdGl2ZSwgRnRvb2wsIEluaUZpbGUsIERhcmtDb21ib0JveCkuLi4iIC1Gb3JlZ3JvdW5kQ29sb3IgQ3lhbg0KICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IERpc3BsYXkgSW5pdGlhbGl6YXRpb24gTWVzc2FnZQ0KDQogICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogRGVmaW5lIEFkZC1UeXBlIEFyZ3VtZW50cw0KICAgICAgICAgICAgICAgICAgICAgICAgIyBQcmVwYXJlIGFyZ3VtZW50cyBmb3IgQWRkLVR5cGUgYmFzZWQgb24gc2NyaXB0LWxldmVsIGNvbmZpZ3VyYXRpb24NCiAgICAgICAgICAgICAgICAgICAgICAgICRhZGRUeXBlQXJncyA9IEB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVHlwZURlZmluaXRpb24gICAgICAgPSAkY2xhc3NlcyAjIFRoZSBDIyBzb3VyY2UgY29kZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhbmd1YWdlICAgICAgICAgICAgID0gJHNjcmlwdDpDb21waWxhdGlvbk9wdGlvbnMuTGFuZ3VhZ2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWZlcmVuY2VkQXNzZW1ibGllcyA9ICRzY3JpcHQ6Q29tcGlsYXRpb25PcHRpb25zLlJlZmVyZW5jZWRBc3NlbWJsaWVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgV2FybmluZ0FjdGlvbiAgICAgICAgPSAkc2NyaXB0OkNvbXBpbGF0aW9uT3B0aW9ucy5XYXJuaW5nQWN0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRXJyb3JBY3Rpb24gICAgICAgICAgPSAnU3RvcCcgIyBFbnN1cmUgY29tcGlsYXRpb24gZXJyb3JzIHRocm93IHRlcm1pbmF0aW5nIGV4Y2VwdGlvbnMNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBEZWZpbmUgQWRkLVR5cGUgQXJndW1lbnRzDQoNCiAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDb21waWxlIEMjIENvZGUNCiAgICAgICAgICAgICAgICAgICAgICAgICMgRXhlY3V0ZSBBZGQtVHlwZSB0byBjb21waWxlIHRoZSBjbGFzc2VzIGludG8gdGhlIGN1cnJlbnQgc2Vzc2lvbg0KICAgICAgICAgICAgICAgICAgICAgICAgQWRkLVR5cGUgQGFkZFR5cGVBcmdzDQogICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ29tcGlsZSBDIyBDb2RlDQoNCiAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBIYW5kbGUgU3VjY2Vzcw0KICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiU3lzdGVtIGludGVncmF0aW9uIGNsYXNzZXMgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5LiIgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0cnVlDQogICAgICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogSGFuZGxlIFN1Y2Nlc3MNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY2F0Y2gNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogSGFuZGxlIEVycm9ycw0KICAgICAgICAgICAgICAgICAgICAgICAgIyBMb2cgZGV0YWlsZWQgZXJyb3IgaW5mb3JtYXRpb24gaWYgY29tcGlsYXRpb24gZmFpbHMNCiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLUVycm9yICJGYWlsZWQgdG8gaW5pdGlhbGl6ZS9jb21waWxlIHN5c3RlbSBpbnRlZ3JhdGlvbiBjbGFzc2VzLiBFcnJvcjogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiDQogICAgICAgICAgICAgICAgICAgICAgICAjIE9wdGlvbmFsbHkgbG9nIG1vcmUgZGV0YWlsczogJF8gfCBGb3JtYXQtTGlzdCAqIC1Gb3JjZSB8IE91dC1TdHJpbmcgfCBXcml0ZS1FcnJvcg0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBFcnJvcnMNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENvbXBpbGUgQyMgQ2xhc3NlcyB3aXRoIEVycm9yIEhhbmRsaW5nDQogICAgICAgIH0NCiAgICAjZW5kcmVnaW9uIEZ1bmN0aW9uOiBJbml0aWFsaXplLUNsYXNzZXNNb2R1bGUNCg0KICAgICNyZWdpb24gU3RlcDogQ29tcGlsZSBDbGFzc2VzIG9uIE1vZHVsZSBJbXBvcnQNCiAgICAgICAgIyBBdXRvbWF0aWNhbGx5IGF0dGVtcHQgdG8gY29tcGlsZSB0aGUgY2xhc3NlcyB3aGVuIHRoaXMgbW9kdWxlIGlzIGltcG9ydGVkLg0KICAgICAgICAjIFRoZSByZXN1bHQgKCR0cnVlLyRmYWxzZSkgaXMgaW1wbGljaXRseSByZXR1cm5lZCBidXQgdXN1YWxseSBub3QgY2FwdHVyZWQgaGVyZS4NCiAgICAgICAgSW5pdGlhbGl6ZS1DbGFzc2VzTW9kdWxlDQogICAgI2VuZHJlZ2lvbiBTdGVwOiBDb21waWxlIENsYXNzZXMgb24gTW9kdWxlIEltcG9ydA0KI2VuZHJlZ2lvbiBNb2R1bGUgSW5pdGlhbGl6YXRpb24NCg0KI3JlZ2lvbiBNb2R1bGUgRXhwb3J0cw0KICAgICNyZWdpb24gU3RlcDogRXhwb3J0IFB1YmxpYyBGdW5jdGlvbnMNCiAgICAgICAgIyBFeHBvcnQgdGhlIGZ1bmN0aW9ucyBpbnRlbmRlZCBmb3IgdXNlIGJ5IG90aGVyIG1vZHVsZXMgb3IgdGhlIG1haW4gc2NyaXB0Lg0KICAgICAgICBFeHBvcnQtTW9kdWxlTWVtYmVyIC1GdW5jdGlvbiBJbml0aWFsaXplLUNsYXNzZXNNb2R1bGUNCiNlbmRyZWdpb24gTW9kdWxlIEV4cG9ydHM=
				'
			}
			'ini.psm1'      = @{ 
				Priority = 'Critical';  
				Order = 2; 
				Dependencies = @('classes.psm1');
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ini.psm1');
				Base64Content = '
					
				'
			}
			'ui.psm1'       = @{ 
				Priority = 'Critical';  
				Order = 3; 
				Dependencies = @('classes.psm1', 'ini.psm1');
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ui.psm1');
				Base64Content = '
					
				'
			}
			
			# Important modules: Add major features. Failure might limit things, but the app can still start.
			'datagrid.psm1' = @{ 
				Priority = 'Important'; 
				Order = 4; 
				Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1');
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'datagrid.psm1');
				Base64Content = '
					
				'
			}
			
			# Optional modules: Add extra, non-essential features. Failure is logged, but the app still starts.
			'launch.psm1'   = @{ 
				Priority = 'Optional';  
				Order = 5; 
				Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'launch.psm1');
				Base64Content = '
					
				'
			}
			'login.psm1'    = @{ 
				Priority = 'Optional';  
				Order = 6; 
				Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'login.psm1');
				Base64Content = '
					
				'
			}
			'ftool.psm1'    = @{ 
				Priority = 'Optional';  
				Order = 7; 
				Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ftool.psm1');
				Base64Content = '
					
				'
			}
			'ftool.dll'     = @{ 
				Priority = 'Optional';  
				Order = 8; 
				Dependencies = @('ftool.psm1');
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ftool.dll');
				Base64Content = '
					
				'
			}
			'icon.ico'      = @{ 
				Priority = 'Optional';  
				Order = 9; 
				Dependencies = @();
				#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'icon.ico');
				Base64Content = '
					AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAAAAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AgIC/wICAv8CAgL/BAQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wQEAv8CAgL/AgIC/wICAv8DAwP/AwMD/wMDA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8GBgP/BQUD/wUEA/8NDgP/DQ4D/wUEA/8FBQP/BgYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BgYD/wMDA/8DAwP/AwMD/wQEBP8EBAT/BAQE/wMDBP8DAwT/AwME/wMDBP8DAwT/AwME/wQFBP8CAwT/BQQE/xIPA/8jHQP/LiUD/zo0A/86NAP/LiUD/yMdA/8SDwP/BQQE/wIDBP8EBQT/AwME/wMDBP8DAwT/AwME/wMDBP8DAwT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8DAwT/EBME/ycmBP84LQP/OC0E/ykhBP8cFwT/FxME/xcTBP8cFwT/KSEE/zgtBP84LQP/JyYE/xATBP8DAwT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BAQF/w0MBf83LgT/OjIE/xYSBf8JCgX/Cw0F/w4QBf8PEQX/DhEF/w4QBf8LDQX/CQoF/xYSBf86MgT/OC4E/w0MBf8EBAX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wYGBv8GBgb/BgYG/wYGBv8GBgb/BgYG/wUFBv8SEAb/PjIF/yMdBf8JCQb/DxIG/xETBv8MDgb/CQoG/wgJBv8ICQb/CQoG/wwOBv8REwb/DxIG/wkJBv8jHQX/PjIF/xIQBv8FBQb/BgYG/wYGBv8GBgb/BgYG/wYGBv8GBgb/BwcH/wcHB/8HBwf/BwcH/wcHB/8GBgf/Dw0H/z4zBf8dGAb/CwwH/xIVBv8MDQf/BwcH/wYGB/8HBwf/BwcH/wcHB/8HBwf/BgYH/wcHB/8MDQf/EhUG/wsMB/8dGAb/PjMF/w8NB/8GBgf/BwcH/wcHB/8HBwf/BwcH/wcHB/8ICAj/CAgI/wgICP8ICAj/CQkI/xMWB/85MAb/JR4H/wsNCP8TFgf/CQoI/wgHCP8ICAj/CAgI/wgICP8ICAj/CAgI/wgICP8ICAj/CAgI/wgHCP8JCgj/ExYH/wsNCP8lHgf/OTAG/xMWB/8JCQj/CAgI/wgICP8ICAj/CAgI/wkJCf8JCQn/CQkJ/wkJCf8ICAn/KykH/z01B/8LDAn/FBcI/woKCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8KCgn/FBcI/wsMCf89NQf/KykH/wgICf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/woKCf88MQf/GRYI/xIVCf8ODwn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8ODwn/EhUJ/xkWCP88MQf/CgoJ/wkJCf8JCQn/CQkJ/wkJCf8KCgr/CgoK/woKCv8JCQr/GBUJ/zwyCP8ODgr/FRcK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8UFwr/Dg4K/zwyCP8YFQn/CQkK/woKCv8KCgr/CgoK/wsLC/8LCwv/CwsL/wkKC/8qIwr/LiYJ/xATC/8REwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/xETC/8QEgv/LiYJ/yojCv8JCgv/CwsL/wsLC/8LCwv/DAwM/wwMDP8MDAz/CgoM/zUsCv8jHgv/FBcL/w8QDP8MDAz/DAwM/wwMDP8MDAz/DAwM/wwMDP8MDAz/CwoM/wsKDP8MDAz/DAwM/wwMDP8MDAz/DAwM/wwMDP8MDAz/DxAM/xQXC/8jHgv/NSwK/woKDP8MDAz/DAwM/wwMDP8NDQ3/DQ0N/w0NDf8SFQ3/QTsK/x4bDP8WGQz/Dw8N/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/wwMDf9JWQn/SVkJ/wwMDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/w0NDf8PEA3/FxoM/x4bDP9BOwr/EhUN/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/xMVDf9COwr/HhsM/xYZDP8PDw3/DQ0N/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/CwoN/1ltCP9ZbQj/CwoN/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/w8QDf8XGgz/HhsM/0I7Cv8TFQ3/DQ0N/w0NDf8NDQ3/Dg4O/w4ODv8ODg7/DAwO/zYuDP8lIA3/FhkN/xESDv8ODg7/Dg4O/w4ODv8ODg7/Dg4O/w4ODv8MCw7/Mz0L/zM9C/8MCw7/Dg4O/w4ODv8ODg7/Dg4O/w4ODv8ODg7/ERIO/xYZDf8lIA3/Ni4M/wwMDv8ODg7/Dg4O/w4ODv8PDw//Dw8P/w8PD/8NDg//LScN/zEqDf8UFg//FRcO/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w0MD/81Pwz/NT8M/w0MD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8VFw//FBYP/zEqDf8tJw3/DQ4P/w8PD/8PDw//Dw8P/xAQEP8QEBD/EBAQ/w8PEP8eGw//QTYN/xMUEP8aHQ//EBAQ/xAQEP8QEBD/EBAQ/xAQEP8QEBD/Dg0Q/zZADf82QA3/Dg0Q/xAQEP8QEBD/EBAQ/xAQEP8QEBD/EBAQ/xodD/8TFBD/QTYN/x4bD/8PDxD/EBAQ/xAQEP8QEBD/ERER/xEREf8RERH/ERER/xISEf9CNw3/IB0Q/xkcEP8VFhD/ERER/xEREf8RERH/ERER/xEREf8PDhH/NkAO/zZADv8PDhH/ERER/xEREf8RERH/ERER/xEREf8VFhD/GRwQ/yAdEP9CNw3/EhIR/xEREf8RERH/ERER/xEREf8RERH/ERER/xEREf8RERH/EBAR/zIxD/9EPA7/FBUR/xwfEP8TExH/ERER/xEREf8RERH/ERER/w8OEf82QA7/NkAO/w8OEf8RERH/ERER/xEREf8RERH/ExMR/xwfEP8UFBH/RDwO/zIxD/8QEBH/ERER/xEREf8RERH/ERER/xISEv8SEhL/EhIS/xISEv8TExL/HSAR/0I5D/8uKBD/FhgS/x0gEf8UFBL/EhIS/xISEv8SEhL/EA8S/zdBDv83QQ7/EA8S/xISEv8SEhL/EhIS/xQUEv8dIBH/FhcS/y4oEP9COQ//HSAR/xMTEv8SEhL/EhIS/xISEv8SEhL/ExMT/xMTE/8TExP/ExMT/xMTE/8SEhP/GxkS/0g8D/8oIxH/FxgT/x4hEv8XGRP/ExMT/xMTE/8REBP/OEIP/zhCD/8REBP/ExMT/xMTE/8XGRP/HiES/xcYE/8oIxH/SDwP/xsZEv8SEhP/ExMT/xMTE/8TExP/ExMT/xMTE/8UFBT/FBQU/xQUFP8UFBT/FBQU/xQUFP8TExT/IB0T/0k9D/8vKRL/FhcU/xwfE/8eIRP/GhwT/xUVFP87RRD/O0UQ/xUVFP8aHBP/HiAT/xwfE/8WFxT/LykS/0k9D/8gHRP/ExMU/xQUFP8UFBT/FBQU/xQUFP8UFBT/FBQU/xUVFf8VFRX/FRUV/xUVFf8VFRX/FRUV/xUVFf8UFBX/HBsU/0Q7EP9GPhD/JCAT/xgZFP8aHBT/Gx0U/zpFEP87RhD/Gx0U/xocFP8YGRT/JCAT/0Y+EP9EOxD/HBsU/xQUFf8VFRX/FRUV/xUVFf8VFRX/FRUV/xUVFf8VFRX/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8VFBb/ICMV/zY0Ev9FOxH/RTsR/zcvEv8rJhT/KSYU/ykmFP8rJhT/Ny8S/0U7Ef9FOxH/NjQS/yAjFP8VFBb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8XFxb/FRYW/xcXFv8kIRX/NC0U/z01E/9JQhH/SUIR/z41E/80LRT/JCEV/xcXFv8VFhb/FxcW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xYXF/8VFhf/FRUX/xwfFv8cHxb/FRUX/xUWF/8WFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
				'
			}
		}
	#endregion Step: Define Module Metadata

#endregion Global Configuration

#region Environment Initialization and Checks

	#region Function: Show-ErrorDialog
		function Show-ErrorDialog
		{
			<#
			.SYNOPSIS
				Displays a standardized error message box using Windows Forms for critical errors.
			
			.PARAMETER Message
				[string] The error message text to display in the dialog box. This message should clearly state the problem encountered. (Mandatory)
			
			.OUTPUTS
				[void] This function does not return any value. Its purpose is to display a modal error dialog to the user.
			
			.NOTES
				This function requires the System.Windows.Forms .NET assembly to be loaded. It attempts to load the assembly if not already present.
				If displaying the Windows Forms MessageBox fails (e.g., in a non-interactive session or if assembly loading fails), it falls back to writing
				the error message to the PowerShell error stream using Write-Verbose for logging purposes. This function is intended for critical errors
				that need immediate user attention, often before exiting the script.
			#>
			param(
				[Parameter(Mandatory = $true)]
				[string]$Message
			)
			try
			{
				#region Step: Ensure WinForms Assembly is Loaded
					# Try loading the .NET part needed for MessageBox. Use -ErrorAction Stop to catch errors.
					# See if it's already loaded to avoid trying again/warnings.
					if (-not ([System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')))
					{
						Add-Type -AssemblyName System.Windows.Forms -ErrorAction Stop
					}
					#endregion Step: Ensure WinForms Assembly is Loaded
					
					#region Step: Display WinForms MessageBox
					# Show the error pop-up box to the user.
					# Title shows the app name clearly. MessageBoxIcon.Error gives a visual hint.
					[System.Windows.Forms.MessageBox]::Show($Message, 'Entropia Dashboard Error',
						[System.Windows.Forms.MessageBoxButtons]::OK,
						[System.Windows.Forms.MessageBoxIcon]::Error) | Out-Null # Send to Out-Null to hide the 'OK' button result.
				#endregion Step: Display WinForms MessageBox
			}
			catch
			{
				# Backup plan if the WinForms MessageBox doesn't work.
				# Write the original message and why the pop-up failed to the error output.
				Write-Verbose "Failed to display error dialog: `"$Message`". Dialog Display Error: $($_.Exception.Message)" -ForegroundColor Red
			}
		}
	#endregion Function: Show-ErrorDialog

	#region Function: Request-Elevation
		function Request-Elevation
		{
			<#
			.SYNOPSIS
				Checks for required execution context (Admin rights, 32-bit, Bypass Policy) and attempts to restart the script if necessary.
			
			.DESCRIPTION
				This function assesses the current script execution environment. It verifies:
				1. Administrator Privileges: Checks if the current user is a member of the Administrators group.
				2. 32-bit Execution: Confirms if the current PowerShell process is running in 32-bit mode (required for potential interaction with 32-bit game clients or libraries).
				3. Execution Policy: Ensures the effective execution policy for the current process is 'Bypass' to allow dynamic script and module loading.
				
				If any of these conditions are not met, the function attempts to relaunch the script using the 32-bit PowerShell executable located in SysWOW64.
				The relaunch uses the 'RunAs' verb, triggering a UAC prompt for elevation if needed, and explicitly sets the execution policy to 'Bypass' for the new process.
				Upon successfully starting the new process, the *current* script instance exits immediately.
			
			.OUTPUTS
				[void] This function does not return a value. It either determines no restart is needed and returns silently, or it attempts to start a new process and then exits the current one using 'exit'.
			
			.NOTES
				- Relies on the existence of the 32-bit PowerShell executable at '$env:SystemRoot\SysWOW64\WindowsPowerShell\v1.0\powershell.exe'. If not found, the script will exit with an error.
				- Uses the '$myinvocation' automatic variable to get the path of the currently running script for the relaunch command.
				- If the relaunch attempt fails (e.g., user cancels UAC, file not found), an error dialog is shown, and the script exits.
				- The use of '-ExecutionPolicy Bypass' in the relaunch arguments is a security consideration; see the main script notes.
			#>
			param() # No inputs needed for this function.
			
			#region Step: Check Current Environment State
				Write-Verbose "Checking current execution environment (Admin, 32-bit, Execution Policy)..." -ForegroundColor Cyan
				# $needsRestart - Flag ($true/$false), set to $true if something isn't right.
				[bool]$needsRestart = $false
				# $reason - A list to gather easy-to-read reasons why we need a restart.
				[System.Collections.ArrayList]$reason = @()
				
				# Check if we're running as Admin.
				# $isAdmin - Flag ($true/$false), $true if the current user is an Admin.
				[bool]$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
				if (-not $isAdmin)
				{
					$needsRestart = $true; $null = $reason.Add('Administrator privileges required.') # Add reason if not admin.
				}
				
				# Check if this process is 32-bit. [IntPtr]::Size is 4 for 32-bit, 8 for 64-bit.
				# $is32Bit - Flag ($true/$false), $true if the process is 32-bit.
				[bool]$is32Bit = [IntPtr]::Size -eq 4
				if (-not $is32Bit)
				{
					$needsRestart = $true; $null = $reason.Add('32-bit execution required.') # Add reason if not 32-bit.
				}
				
				# Check the Execution Policy just for this running process.
				# $currentPolicy - Text showing the execution policy (like 'Restricted', 'Bypass').
				[string]$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue # SilentlyContinue handles if it's not set for the process.
				# Needs 'Bypass' for loading/running things the way we planned.
				if ($currentPolicy -ne 'Bypass')
				{
					$needsRestart = $true
					if ($currentPolicy -ne '') {
						$effectivePolicy = $currentPolicy
					} else {
						$effectivePolicy = Get-ExecutionPolicy
					}
					$null = $reason.Add("Execution Policy 'Bypass' required for Process scope (Current effective: '$effectivePolicy').") # Show the actual policy being used.
				}
			#endregion Step: Check Current Environment State
			
			#region Step: Perform Restart if Necessary
				if ($needsRestart)
				{
					# Write down the reasons we're trying to restart.
					Write-Verbose "  Restarting script needed: $($reason -join ' ')" -ForegroundColor Yellow
					
					# Set the path to the 32-bit PowerShell program.
					# $psExe - Text, full path to the 32-bit powershell.exe.
					[string]$psExe = Join-Path $env:SystemRoot 'SysWOW64\WindowsPowerShell\v1.0\powershell.exe'
					if (-not (Test-Path $psExe -PathType Leaf)) # Check if the program file exists.
					{
						# Show error and quit if the needed program is missing.
						Show-ErrorDialog "FATAL: Required 32-bit PowerShell executable not found at '$psExe'. Cannot continue."
						exit 1 # Exit code 1 means there was an error.
					}
					
					# Get everything inside the current script file.
					$encodedCommand = @"
						
"@

					# Decode the command
					try {
						$decodedBytes = [System.Convert]::FromBase64String($encodedCommand)
						# IMPORTANT: Use the right encoding the script was saved with! UTF8 is typical, but PowerShell might use UTF8 with BOM or UTF16LE. Assume UTF8 here.
						$decodedCommand = [System.Text.Encoding]::UTF8.GetString($decodedBytes)
					} catch {
						Show-ErrorDialog "FATAL: Failed to decode the embedded command. Error: $($_.Exception.Message)"
						exit 1
					}

					# Make a temporary file path
					$tempScriptPath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), ([System.Guid]::NewGuid().ToString() + ".ps1"))

					try
					{
						# Save the decoded command to the temp file (using the right encoding)
						[System.IO.File]::WriteAllText($tempScriptPath, $decodedCommand, [System.Text.Encoding]::UTF8) # Match encoding from GetString

						# Build the NEW arguments using -File
						# Added -ExecutionPolicy Bypass, often needed when running scripts like this.
						# $psArgs - Text holding the command-line arguments.
						[string]$psArgs = "-noexit -ExecutionPolicy Bypass -File `"$tempScriptPath`"" # Note the quotes around the path

						# Set up the ProcessStartInfo object
						$psi = New-Object System.Diagnostics.ProcessStartInfo
						$psi.FileName = $psExe         # The program to run. Make sure $psExe is set!
						$psi.Arguments = $psArgs       # The arguments for the program.
						$psi.UseShellExecute = $true   # MUST be $true to use the 'Verb' property.
						$psi.Verb = 'RunAs'            # Ask for Admin rights (UAC).

						Write-Verbose "  Attempting to start new elevated/32-bit process via temp file: `"$psExe`" $psArgs" -ForegroundColor Cyan
						Write-Verbose "  Temporary script file: $tempScriptPath" -ForegroundColor DarkGray

						# Start the new process
						[System.Diagnostics.Process]::Start($psi) | Out-Null

						# Success (request sent)
						Write-Verbose "  Successfully requested elevated/32-bit process start. Exiting current process." -ForegroundColor Green
						exit 0
					}
					catch
					{
						# Error handling
						Show-ErrorDialog "FATAL: Failed to restart script with required settings (Admin/32-bit/Bypass). Error: $($_.Exception.Message)"
						# Delete the temp file if it failed (might not work if permissions are odd)
						if (Test-Path $tempScriptPath) {
							try { Remove-Item $tempScriptPath -ErrorAction Stop } catch {}
						}
						exit 1
					}
				}
				else
				{
					# Log that the script is already running with the right settings.
					Write-Verbose "  Script already running with required environment settings (Admin, 32-bit, Bypass Policy)." -ForegroundColor Green
				}
			#endregion Step: Perform Restart if Necessary
		}
	#endregion Function: Request-Elevation

	#region Function: Initialize-ScriptEnvironment
		function Initialize-ScriptEnvironment
		{
			<#
			.SYNOPSIS
				Verifies that the script environment meets all requirements *after* any potential restart attempt by Request-Elevation.
			
			.DESCRIPTION
				This function performs final checks to ensure the script is operating in the correct environment before proceeding with core logic.
				It re-validates:
				1. Administrator Privileges: Confirms the script is now running elevated.
				2. 32-bit Mode: Confirms the script is now running in a 32-bit PowerShell process.
				3. Execution Policy: Confirms the process scope execution policy is 'Bypass'. If not (which shouldn't happen if Request-Elevation worked),
				it makes a final attempt to set it using Set-ExecutionPolicy.
				
				If any check fails, it displays a specific error message using Show-ErrorDialog and returns $false.
			
			.OUTPUTS
				[bool] Returns $true if all environment checks pass successfully, otherwise returns $false.
			
			.NOTES
				- This function should be called *after* Request-Elevation. It acts as a final safeguard.
				- Failure here is typically fatal for the application, as indicated by the error messages and the return value.
				- The attempt to set ExecutionPolicy within this function is a fallback; ideally, Request-Elevation should have ensured this.
			#>
			[CmdletBinding()]
			[OutputType([bool])] 
			param()
			
			Write-Verbose "Verifying final script environment settings..." -ForegroundColor Cyan
			try
			{
				#region Step: Verify Administrator Privileges
					# $isAdmin - Flag ($true/$false), $true if the current user is an Admin.
					[bool]$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
					if (-not $isAdmin)
					{
						# Show error and return $false if not running as Admin.
						Show-ErrorDialog 'FATAL: Application requires administrator privileges to run.'
						return $false
					}
					Write-Verbose "[OK] Running with administrator privileges." -ForegroundColor Green
				#endregion Step: Verify Administrator Privileges
				
				#region Step: Verify 32-bit Execution Mode
					# $is32Bit - Flag ($true/$false), $true if the process is 32-bit.
					[bool]$is32Bit = [IntPtr]::Size -eq 4
					if (-not $is32Bit)
					{
						# Show error and return $false if not running in 32-bit mode.
						Show-ErrorDialog 'FATAL: Application must run in 32-bit PowerShell mode.'
						return $false
					}
					Write-Verbose "[OK] Running in 32-bit mode." -ForegroundColor Green
				#endregion Step: Verify 32-bit Execution Mode
				
				#region Step: Verify Process Execution Policy
					# $currentPolicy - Text, the execution policy for this process.
					[string]$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue
					if ($currentPolicy -ne 'Bypass')
					{
						# This is a backup. Ideally, Request-Elevation already set 'Bypass'.
						Write-Verbose "  Process Execution Policy is not 'Bypass' (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })'). Attempting final Set..." -ForegroundColor Yellow
						try
						{
							# Try to force the policy to Bypass for this process.
							Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force -ErrorAction Stop
							# Check again after trying.
							$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue
							if ($currentPolicy -ne 'Bypass')
							{
								# If it still didn't work, report a major error.
								Show-ErrorDialog "FATAL: Failed to set required PowerShell Execution Policy to 'Bypass'.  (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })')."
								return $false
							}
							Write-Verbose "[OK] Execution policy successfully forced to Bypass for this process." -ForegroundColor Green
						}
						catch
						{
							# Catch errors during the last Set-ExecutionPolicy try.
							Show-ErrorDialog "FATAL: Error setting PowerShell Execution Policy to 'Bypass'.  (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })'). Error: $($_.Exception.Message)"
							return $false
						}
					}
					else
					{
						Write-Verbose "[OK] Execution policy is '$currentPolicy'." -ForegroundColor Green
					}
				#endregion Step: Verify Process Execution Policy
				
				# If all checks passed:
				Write-Verbose "  Environment verification successful." -ForegroundColor Green
				return $true
			}
			catch
			{
				# Catch any surprise errors during the check itself.
				Show-ErrorDialog "FATAL: An unexpected error occurred during environment verification: $($_.Exception.Message)"
				return $false
			}
		}
	#endregion Function: Initialize-ScriptEnvironment

	#region Function: Initialize-BaseConfig
		function Initialize-BaseConfig
		{
			<#
			.SYNOPSIS
				Ensures necessary application data directories exist in %APPDATA% and are writable.
			
			.DESCRIPTION
				This function is responsible for setting up the fundamental directory structure required by the application
				within the user's roaming application data folder (%APPDATA%). It specifically checks for and, if necessary, creates:
				1. The main application directory: %APPDATA%\Entropia_Dashboard
				2. The modules subdirectory: %APPDATA%\Entropia_Dashboard\modules
				
				After ensuring the directories exist, it performs a quick write test in each directory by creating and immediately
				deleting a temporary file ('write_test.tmp'). This verifies that the script has the necessary permissions to write
				files (like modules and configuration) to these locations.
			
			.OUTPUTS
				[bool] Returns $true if both directories exist (or were created successfully) AND are verified as writable. Returns $false if
				directory creation fails or if either directory is found to be non-writable.
			
			.NOTES
				- Upon successful completion (returning $true), it sets the global state flag '$global:DashboardConfig.State.ConfigInitialized' to $true.
				- Errors during directory creation or the write test are logged to the error stream and presented to the user via Show-ErrorDialog,
				as these are typically fatal issues preventing the application from functioning correctly.
				- Uses -Force with New-Item to create parent directories if they don't exist.
			#>
			[CmdletBinding()]
			[OutputType([bool])]
			param()

			Write-Verbose "Initializing base configuration directories in %APPDATA%..." -ForegroundColor Cyan
			try
			{
				# List of essential folders that must exist and be writable.
				# $directories - List of text paths for the required folders.
				[string[]]$directories = @(
					$global:DashboardConfig.Paths.App,     # e.g., C:\Users\User\AppData\Roaming\Entropia_Dashboard\
					$global:DashboardConfig.Paths.Modules  # e.g., C:\Users\User\AppData\Roaming\Entropia_Dashboard\modules\
				)
				
				# Go through each needed folder path.
				foreach ($dir in $directories)
				{
					#region Step: Ensure Directory Exists
						# Check if the path exists and is actually a folder (Container).
						if (-not (Test-Path -Path $dir -PathType Container))
						{
							Write-Verbose "  Directory not found. Creating: '$dir'" -ForegroundColor DarkGray
							try
							{
								# Create the folder. -Force makes parent folders too. -ErrorAction Stop stops if it fails.
								$null = New-Item -Path $dir -ItemType Directory -Force -ErrorAction Stop
							}
							catch
							{
								# Handle errors when creating the folder (like permissions, bad path).
								$errorMsg = "  Failed to create required directory '$dir'. Please check permissions or path validity. Error: $($_.Exception.Message)"
								Write-Verbose $errorMsg -ForegroundColor Red
								Show-ErrorDialog $errorMsg
								return $false # Can't continue if creating the folder fails.
							}
						}
						else
						{
							Write-Verbose "  Directory exists: '$dir'" -ForegroundColor DarkGray
						}
					#endregion Step: Ensure Directory Exists
					
					#region Step: Test Directory Writability
						# Make a temporary file path in the current folder for a write test.
						# $testFile - Text, path for the temporary test file.
						[string]$testFile = Join-Path -Path $dir -ChildPath 'write_test.tmp'
						try
						{
							# Try writing a small bit of text to the test file.
							[System.IO.File]::WriteAllText($testFile, 'TestWriteAccess')
							# If writing works, delete the test file right away. -Force skips asking.
							Remove-Item -Path $testFile -Force -ErrorAction Stop
							Write-Verbose "  Directory is writable: '$dir'" -ForegroundColor DarkGray
						}
						catch
						{
							# Handle errors during writing or deleting (probably bad permissions).
							$errorMsg = "  Cannot write to directory '$dir'. Please check permissions. Error: $($_.Exception.Message)"
							Write-Verbose $errorMsg -ForegroundColor Red
							Show-ErrorDialog $errorMsg
							# Try cleaning up the test file just in case it was made but couldn't be deleted.
							if (Test-Path -Path $testFile -PathType Leaf)
							{
								Remove-Item -Path $testFile -Force -ErrorAction SilentlyContinue
							}
							return $false # Can't continue if the folder isn't writable.
						}
					#endregion Step: Test Directory Writability
				} # End of the loop for each directory.
				
				# If the loop finishes without returning false, all folders are ready.
				Write-Verbose "  Base configuration directories initialized and verified successfully." -ForegroundColor Green
				# Set the main state flag.
				$global:DashboardConfig.State.ConfigInitialized = $true
				return $true
			}
			catch
			{
				# Catch any surprise errors during the whole setup process.
				$errorMsg = "  An unexpected error occurred during base configuration directory initialization: $($_.Exception.Message)"
				Write-Verbose $errorMsg -ForegroundColor Red
				Show-ErrorDialog $errorMsg
				return $false
			}
		}
	#endregion Function: Initialize-BaseConfig

#endregion Environment Initialization and Checks

#region Module Handling Functions

	#region Function: Write-Module
		# ... (Keep Write-Module function as it was) ...
        function Write-Module
		{
			<#
			.SYNOPSIS
				Writes module content (from a source file or Base64 string) to the designated modules directory in %APPDATA%, performing hash checks to avoid redundant writes.
			
			.DESCRIPTION
				This function handles the deployment of module files (e.g., .psm1, .dll, .ico) from their source location or embedded Base64 representation
				to the application's 'modules' directory under %APPDATA% (defined in $global:DashboardConfig.Paths.Modules).
				
				Key operations:
				1. Ensures the target 'modules' directory exists, attempting to create it if necessary.
				2. Retrieves the module content as a byte array, either by reading the source file specified by the -Content parameter or by decoding the Base64 string provided via -ContentBase64.
				3. If the target file already exists in the 'modules' directory:
				a. Compares the file size of the existing file with the size of the new content. If different, an update is needed.
				b. If sizes match, calculates the SHA256 hash of both the existing file and the new content in memory.
				c. If the hashes match, the function logs that no update is needed and returns the path to the existing file, avoiding an unnecessary write operation.
				d. If hashes differ, an update is needed.
				4. If the target file does not exist or an update is required (sizes/hashes differ), the function attempts to write the new content (byte array) to the target path.
				5. Includes a simple retry mechanism (up to 5 seconds) with short delays (100ms) specifically for System.IO.IOException errors during the write attempt, which often indicate temporary file locks.
			
			.PARAMETER ModuleName
				[string] The destination filename for the module in the target directory (e.g., 'ui.psm1', 'ftool.dll', 'icon.ico'). (Mandatory)
			
			.PARAMETER Content
				[string] Used in the 'FilePath' parameter set. The full path to the source file containing the module content to be copied. (Mandatory, ParameterSetName='FilePath')
			
			.PARAMETER ContentBase64
				[string] Used in the 'Base64Content' parameter set. A Base64 encoded string containing the module content to be decoded and written. (Mandatory, ParameterSetName='Base64Content')
			
			.OUTPUTS
				[string] Returns the full path to the successfully written (or verified existing and matching) module file in the target 'modules' directory.
				Returns $null if any critical operation fails (e.g., directory creation, source file reading, Base64 decoding, final write attempt after retries).
			
			.NOTES
				- Uses SHA256 hash comparison for efficient and reliable detection of unchanged files.
				- Error handling is implemented for directory creation, file reading, Base64 decoding, hash calculation, and file writing.
				- The write retry loop is basic and may not handle all concurrent access scenarios perfectly but addresses common temporary locks.
				- Uses [System.IO.File]::ReadAllBytes and ::WriteAllBytes for potentially better performance with binary files (.dll, .ico) compared to Get-Content/Set-Content.
			#>
			[CmdletBinding(DefaultParameterSetName = 'FilePath')] # Default to FilePath if only unnamed inputs are used.
			[OutputType([string])]
			param (
				[Parameter(Mandatory = $true, Position = 0)]
				[string]$ModuleName, # e.g., 'ui.psm1'
			
				[Parameter(Mandatory = $true, ParameterSetName = 'FilePath', Position = 1)]
				[ValidateScript({ Test-Path $_ -PathType Leaf })] # Basic check: make sure path exists and is a file.
				[string]$Content, # Source file path, e.g., 'C:\path\to\source\ui.psm1'
			
				[Parameter(Mandatory = $true, ParameterSetName = 'Base64Content')]
				[string]$ContentBase64 # Base64 encoded content text
			)
			
			# Get the destination folder path from the main config.
			# $modulesDir - Text, destination folder for modules.
			[string]$modulesDir = $global:DashboardConfig.Paths.Modules
			# Build the full path for the destination file.
			# $finalPath - Text, full destination path for the module file.
			[string]$finalPath = Join-Path -Path $modulesDir -ChildPath $ModuleName
			
			Write-Verbose "Executing Write-Module for '$ModuleName' to '$finalPath'" -ForegroundColor Cyan
			try
			{
				#region Step: Ensure Target Directory Exists
					# Check if the destination folder exists; try creating it if not.
					if (-not (Test-Path -Path $modulesDir -PathType Container))
					{
						Write-Verbose "Target module directory not found, attempting creation: '$modulesDir'" -ForegroundColor DarkGray
						try
						{
							$null = New-Item -Path $modulesDir -ItemType Directory -Force -ErrorAction Stop
							Write-Verbose "Target module directory created successfully: '$modulesDir'" -ForegroundColor Green
						}
						catch
						{
							# Major error if folder cannot be created.
							Write-Verbose "Failed to create target module directory '$modulesDir': $($_.Exception.Message)" -ForegroundColor Red
							return $null # Cannot continue.
						}
					}
				#endregion Step: Ensure Target Directory Exists
				
				#region Step: Get Content Bytes from Source (File or Base64)
					# $bytes - Array of bytes that will hold the module content.
					[byte[]]$bytes = $null
					Write-Verbose "  ParameterSetName: $($PSCmdlet.ParameterSetName)" -ForegroundColor DarkGray
					
					# Handle Base64 input
					if ($PSCmdlet.ParameterSetName -eq 'Base64Content')
					{
						if ([string]::IsNullOrEmpty($ContentBase64))
						{
							Write-Verbose "  ModuleName '$ModuleName': ContentBase64 parameter was provided but is empty." -ForegroundColor Yellow
							return $null
						}
						try
						{
							$bytes = [System.Convert]::FromBase64String($ContentBase64)
							Write-Verbose "  Decoded Base64 content for '$ModuleName' ($($bytes.Length) bytes)." -ForegroundColor DarkGray
						}
						catch
						{
							# Major error if Base64 decoding fails.
							Write-Verbose "  Failed to decode Base64 content for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
							return $null
						}
					}
					# Handle FilePath input
					elseif ($PSCmdlet.ParameterSetName -eq 'FilePath')
					{
						# File existence already checked by ValidateScript, but double-check path is valid.
						if ([string]::IsNullOrEmpty($Content) -or -not ([System.IO.File]::Exists($Content)) )
						{
							Write-Verbose "  ModuleName '$ModuleName': Source file path '$Content' is invalid or does not exist." -ForegroundColor Red
							return $null # Shouldn't happen with ValidateScript, but good safety check.
						}
						try
						{
							$bytes = [System.IO.File]::ReadAllBytes($Content)
							Write-Verbose "  Read source file content for '$ModuleName' from '$Content' ($($bytes.Length) bytes)." -ForegroundColor DarkGray
						}
						catch
						{
							# Major error if source file cannot be read.
							Write-Verbose "  Failed to read source file '$Content' for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
							return $null
						}
					}
					else # Shouldn't get here because of parameter sets
					{
						Write-Verbose "  ModuleName '$ModuleName': Invalid parameter combination or missing content." -ForegroundColor Red
						return $null
					}
					
					# Final check if the byte array got filled.
					if ($null -eq $bytes)
					{
						Write-Verbose "  Failed to obtain content bytes for '$ModuleName'. Source data might be empty or invalid." -ForegroundColor Red
						return $null
					}
				#endregion Step: Get Content Bytes from Source (File or Base64)
				
				#region Step: Check if File Needs Updating (Size and Hash Comparison)
					# $updateNeeded - Flag ($true/$false), decides if the file needs writing.
					[bool]$updateNeeded = $true
					if (Test-Path -Path $finalPath -PathType Leaf) # Check if the destination file exists.
					{
						Write-Verbose "  Target file exists: '$finalPath'. Comparing size and hash..." -ForegroundColor DarkGray
						try
						{
							# Get info about the existing file.
							# $fileInfo - File info object for the existing file.
							$fileInfo = Get-Item -LiteralPath $finalPath -Force -ErrorAction Stop
							
							# 1. Compare file sizes first (quick check).
							if ($fileInfo.Length -eq $bytes.Length)
							{
								Write-Verbose "  File sizes match ($($bytes.Length) bytes). Comparing SHA256 hashes..." -ForegroundColor DarkGray
								# 2. If sizes match, compare SHA256 hashes.
								# $existingHash - Text, SHA256 hash of the file on disk.
								[string]$existingHash = (Get-FileHash -LiteralPath $finalPath -Algorithm SHA256 -ErrorAction Stop).Hash
								
								# Calculate hash of the new content (bytes) in memory.
								# $memStream - Memory stream to feed bytes to Get-FileHash. 'Using' cleans it up.
								$newHash = try
								{
									$memStream = New-Object System.IO.MemoryStream(,$bytes)
									(Get-FileHash -InputStream $memStream -Algorithm SHA256 -ErrorAction Stop).Hash
								}
								finally
								{
									if ($memStream)
									{
										$memStream.Dispose() 
									}
								}
								
								Write-Verbose " - Existing Hash: $existingHash" -ForegroundColor DarkGray
								Write-Verbose " - New Hash:    - $newHash" -ForegroundColor DarkGray
								
								# If hashes match, no update needed.
								if ($existingHash -eq $newHash)
								{
									Write-Verbose "  Hashes match for '$ModuleName'. No update needed." -ForegroundColor DarkGray
									$updateNeeded = $false
									# Return path to the existing, checked file.
									return $finalPath
								}
								else
								{
									Write-Verbose "  Hashes differ for '$ModuleName'. Update required." -ForegroundColor Yellow 
								}
							}
							else
							{
								Write-Verbose "  File sizes differ (Existing: $($fileInfo.Length), New: $($bytes.Length)). Update required." -ForegroundColor Yellow 
							}
						}
						catch
						{
							# Handle errors during size/hash compare (like file locked, permissions).
							# Log a warning and assume an update is needed.
							Write-Verbose "  Could not compare size/hash for '$ModuleName' (Path: '$finalPath'). Will attempt to overwrite. Error: $($_.Exception.Message)" -ForegroundColor Yellow
							$updateNeeded = $true
						}
					}
					else
					{
						Write-Verbose "  Target file does not exist: '$finalPath'. Writing new file." -ForegroundColor DarkGray 
						$updateNeeded = $true
					}
				#endregion Step: Check if File Needs Updating (Size and Hash Comparison)
				
				#region Step: Write File to Target Path (with Retry on IO Exception)
					if ($updateNeeded)
					{
						# Set up retry settings.
						# $timeoutMilliseconds - Number, max time (ms) to spend retrying the write.
						[int]$timeoutMilliseconds = 5000  # 5 seconds total retry time.
						# $retryDelayMilliseconds - Number, delay (ms) between retries.
						[int]$retryDelayMilliseconds = 100 # Wait 100ms before trying again.
						# $startTime - DateTime, when the retry loop started.
						[datetime]$startTime = Get-Date
						# $fileWritten - Flag ($true/$false) if file was written okay within the time limit.
						[bool]$fileWritten = $false
						# $attempts - Number, counts how many times we tried writing.
						[int]$attempts = 0
						
						Write-Verbose "  Attempting to write file: '$finalPath'" -ForegroundColor DarkGray
						while (((Get-Date) - $startTime).TotalMilliseconds -lt $timeoutMilliseconds)
						{
							$attempts++
							try
							{
								# Try writing all bytes to the final path using a .NET method.
								[System.IO.File]::WriteAllBytes($finalPath, $bytes)
								$fileWritten = $true
								Write-Verbose "  Successfully wrote '$ModuleName' to '$finalPath' on attempt $attempts." -ForegroundColor Green
								break # Exit the retry loop if write worked.
							}
							catch [System.IO.IOException]
							{
								# Catch IO errors specifically (probably file lock). Log warning and retry after delay.
								Write-Verbose "  Attempt $($attempts): IO Error writing '$finalPath' (Retrying in $retryDelayMilliseconds ms): $($_.Exception.Message)" -ForegroundColor Red
								# Check if time is almost up before waiting.
								if (((Get-Date) - $startTime).TotalMilliseconds + $retryDelayMilliseconds -ge $timeoutMilliseconds)
								{
									Write-Verbose "  Timeout nearing, breaking retry loop for '$finalPath'." -ForegroundColor Yellow
									break # Don't wait longer than the timeout.
								}
								Start-Sleep -Milliseconds $retryDelayMilliseconds
							}
							catch
							{
								# Catch other surprise, non-retryable errors during write. Log error and stop loop.
								Write-Verbose "  Attempt $($attempts): Non-IO Error writing '$finalPath': $($_.Exception.Message)" -ForegroundColor Red
								$fileWritten = $false # Make sure flag is false.
								break # Exit loop on non-retryable error.
							}
						} # End of while retry loop
						
						# Check if the file was written okay after the loop.
						if (-not $fileWritten)
						{
							Write-Verbose "  Failed to write module '$ModuleName' to '$finalPath' after $attempts attempts within $timeoutMilliseconds ms timeout." -ForegroundColor Red
							return $null # Return null to show it failed.
						}
					} # End if($updateNeeded)
				#endregion Step: Write File to Target Path (with Retry on IO Exception)
				
				# If we get here, the file exists and is current, or it was just written successfully.
				return $finalPath
			}
			catch
			{
				# Catch any surprise errors in the main function part (like input check failed earlier).
				Write-Verbose "  An unexpected error occurred in Write-Module for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
				return $null
			}
		}
	#endregion Function: Write-Module


	#region Function: Import-ModuleUsingReflection
		# ... (Keep Import-ModuleUsingReflection function as it was) ...
        function Import-ModuleUsingReflection
		{
			<#
			.SYNOPSIS
				(Alternative Method) Imports a PowerShell module by reading, modifying (adding no-op Export-ModuleMember), and executing its content directly in the global scope via Invoke-Command.

			.DESCRIPTION
				This function offers another non-standard way to load a .psm1 module, aiming to address issues where `Import-Module` or `InvokeScript` fail due to `$using:` variables.
				Its process involves:
				1. Reading the entire content of the specified .psm1 file into a string.
				2. Storing the original content in $global:DashboardConfig.Resources.LoadedModuleContent.
				3. Prepending a simple, no-operation `Export-ModuleMember` function definition to the beginning of the content string.
				4. Creating a single `ScriptBlock` object from this modified content string.
				5. Executing this `ScriptBlock` directly in the current (global) execution context using `Invoke-Command -ScriptBlock $scriptBlock`. This method is chosen specifically because `Invoke-Command` executed locally *can* resolve `$using:` variables against the caller's scope.

			.PARAMETER Path
				[string] The full path to the .psm1 module file to be imported using this method. (Mandatory)

			.PARAMETER ModuleName
				[string] The logical name of the module being imported (e.g., 'ui.psm1'), used primarily for logging. (Mandatory)

			.OUTPUTS
				[bool] Returns $true if the `Invoke-Command` execution completes without throwing a terminating error.
				Returns $false if a fatal error occurs (e.g., file not found, terminating error during script execution).
				*Note: Returning $true indicates execution finished, but doesn't guarantee the module loaded correctly or that all its functions are available/working.*

			.NOTES
				- Global Scope Pollution: This method directly defines all functions, variables, and aliases from the module into the global scope.
				- Use Case: Fallback specifically intended to handle modules containing `$using:` variables that cause standard import/InvokeScript methods to fail.
				- Error Handling: Relies on catching terminating errors from `Invoke-Command`. Non-terminating errors within the module code will be logged by PowerShell but won't cause this function to return $false unless `-ErrorAction Stop` was used inside the module code itself.
			#>
			[CmdletBinding()]
			[OutputType([bool])]
			param(
				[Parameter(Mandatory = $true)]
				[ValidateScript({ Test-Path $_ -PathType Leaf })] # Make sure path exists and is a file.
				[string]$Path,

				[Parameter(Mandatory = $true)]
				[string]$ModuleName
			)

			Write-Verbose "Attempting reflection-style import (InvokeCommand in global scope) for '$ModuleName'." -ForegroundColor Cyan

			try
			{
				#region Step: Check File Existence (Redundant with ValidateScript but safe)
					if (-not (Test-Path -Path $Path -PathType Leaf))
					{
						Write-Verbose "Import-ModuleUsingReflection: Module file not found or is not a file: '$Path'" -ForegroundColor Red
						return $false
					}
				#endregion Step: Check File Existence

				#region Step: Read and Store Original Module Content
					[string]$moduleContent = [System.IO.File]::ReadAllText($Path)
					if ($null -eq $moduleContent)
					{
						if (Test-Path -Path $Path -PathType Leaf)
						{
							Write-Verbose "Import-ModuleUsingReflection: Module file '$Path' is empty. Considering import successful (no-op)." -ForegroundColor Yellow
							$global:DashboardConfig.Resources.LoadedModuleContent[$ModuleName] = ''
							return $true
						}
						else
						{
							Write-Verbose "Import-ModuleUsingReflection: Failed to read module file '$Path'." -ForegroundColor Red
							return $false
						}
					}
					# Ensure Resources hashtable exists before storing
                    if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('Resources')) {
                        $global:DashboardConfig['Resources'] = @{}
                    }
                    # Ensure LoadedModuleContent hashtable exists
                     if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and -not $global:DashboardConfig.Resources.ContainsKey('LoadedModuleContent')) {
                        $global:DashboardConfig.Resources['LoadedModuleContent'] = @{}
                    }
					$global:DashboardConfig.Resources.LoadedModuleContent[$ModuleName] = $moduleContent
					Write-Verbose "Read and stored original content for '$ModuleName'." -ForegroundColor DarkGray
				#endregion Step: Read and Store Original Module Content

				#region Step: Prepend No-Op Export-ModuleMember to Content
					# Define a simple Export-ModuleMember to potentially satisfy calls within the script
					# It does NOT actually export anything in the module sense.
					[string]$noOpExportFunc = @"
function Export-ModuleMember { 
	param(
	[string]`$Function='*', 
	[string]`$Variable='*', 
	[string]`$Alias='*', 
	[string]`$Cmdlet='*'
	)
}
"@
					[string]$modifiedContent = @"
$noOpExportFunc

# --- Original Module Content Start ---
$moduleContent
# --- Original Module Content End ---
"@
				#endregion Step: Prepend No-Op Export-ModuleMember to Content

				#region Step: Create ScriptBlock and Execute Globally via Invoke-Command
					Write-Verbose "Creating ScriptBlock and executing modified content globally via Invoke-Command for '$ModuleName'..." -ForegroundColor DarkGray
					[scriptblock]$scriptBlock = [ScriptBlock]::Create($modifiedContent)
					try
					{
						# Execute the script block in the current scope using Invoke-Command
						# This method allows $using: variables to resolve against the caller's scope locally
						$null = Invoke-Command -ScriptBlock $scriptBlock
						
						# Check the automatic variable $? to see if any *non-terminating* errors occurred during execution
						if (-not $?)
						{
							# Log if non-terminating errors happened, but execution still finished
							Write-Verbose "Execution of '$ModuleName' content via Invoke-Command completed, but non-terminating errors occurred within the script (check logs above)." -ForegroundColor Yellow
                            # We still return $true here as execution technically finished, but the caller (Import-DashboardModules)
                            # should perform additional checks (like Get-Command) to verify function availability.
						}
						else
						{
							# Log successful completion of the Invoke-Command call
							Write-Verbose "Successfully finished executing modified script block for '$ModuleName' via Invoke-Command." -ForegroundColor Green
						}
                        # Return true indicating Invoke-Command completed without *terminating* errors.
                        # Does NOT guarantee functions are correctly defined globally.
                        return $true 
					}
					catch # Catch only *terminating* errors from Invoke-Command itself
					{
						Write-Verbose "Terminating error occurred during Invoke-Command execution for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
						Write-Verbose "Stack Trace: $($_.ScriptStackTrace)"
						# Return false indicating a fatal error during execution.
						return $false 
					}
				#endregion Step: Create ScriptBlock and Execute Globally via Invoke-Command
			}
			catch # Catch errors during setup (read file, create scriptblock etc.)
			{
				Write-Verbose "FATAL error during reflection-style import (InvokeCommand) setup for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
				return $false # Return false indicating setup failure
			}
		}
	#endregion Function: Import-ModuleUsingReflection


	#region Function: Import-DashboardModules
		function Import-DashboardModules
		{
			<#
			.SYNOPSIS
				Loads all defined dashboard modules according to priority, dependencies, and execution context (Script vs EXE).
			
			.DESCRIPTION
				This crucial function orchestrates the loading of all modules specified in '$global:DashboardConfig.Modules'.
				It performs the following steps:
				1. Initializes tracking variables for loaded and failed modules.
				2. Determines if the script is running as a compiled EXE or a standard .ps1 script, storing the result in '$global:DashboardConfig.State.IsRunningAsExe'. This influences the import strategy.
				3. Sorts the modules based on the 'Order' property defined in their metadata to ensure correct loading sequence.
				4. Iterates through the sorted modules:
				a. Checks if all dependencies listed for the current module are already present in '$global:DashboardConfig.LoadedModules'. If not, skips the module and records the failure. Critical module dependency failures trigger a critical failure flag.
				b. Calls 'Write-Module' to ensure the module file (or resource like .dll, .ico) exists in the %APPDATA%\modules directory, handling source file paths or Base64 content, and using hash checks for efficiency. If Write-Module fails, records the failure. Critical module write failures trigger the critical failure flag.
				c. If Write-Module succeeds, adds the module name and its written path to '$global:DashboardConfig.LoadedModules'. This satisfies dependency checks for subsequent modules, including non-PSM1 files like DLLs or icons.
				d. If the module is a PowerShell module (.psm1):
				i. Attempts multiple import strategies in sequence until one succeeds:
				- Attempt 1 (Preferred): Standard `Import-Module`. If running as EXE, it first modifies the content in memory to prepend a no-op `Export-ModuleMember`, writes this to a temporary file, imports the temp file, and then deletes it. If running as a script, it imports the written module path directly. Success is verified by checking `Get-Module`.
				- Attempt 2 (Alternative): Calls `Import-ModuleUsingReflection` function (InvokeCommand in global scope). **Crucially, after this attempt returns true, this function now performs an additional verification step using `Get-Command` for key functions expected from the module.** If key functions are missing, Attempt 2 is marked as failed, and the process proceeds to Attempt 3.
				- Attempt 3 (Last Resort): Uses `Invoke-Expression` on the module content after attempting to remove/comment out `Export-ModuleMember` calls using string replacement. This attempt includes its own verification and global re-definition of functions. **(Security Risk)**
				ii. If all import attempts fail for a .psm1 module, records the failure, removes the module from '$global:DashboardConfig.LoadedModules' (as it was written but not imported), and triggers the critical failure flag if the module was critical.
				5. After processing all modules, checks the critical failure flag. If set, returns a status object indicating failure.
				6. Logs warnings for any 'Important' modules that failed and informational messages for 'Optional' module failures.
				7. If no critical failures occurred, returns a status object indicating overall success (though non-critical modules may have failed).
			
			.OUTPUTS
				[PSCustomObject] Returns an object with the following properties:
				- Status [bool]: $true if all 'Critical' modules were successfully written and (if applicable) imported without fatal errors. $false if any 'Critical' module failed or if an unhandled exception occurred.
				- LoadedModules [hashtable]: A hashtable containing {ModuleName = Path} entries for all modules that were successfully written to the AppData directory by Write-Module (includes .psm1, .dll, .ico, etc.). Note that for .psm1, inclusion here doesn't guarantee successful *import*, only successful writing/verification. Check FailedModules for import status.
				- FailedModules [hashtable]: A hashtable containing {ModuleName = ErrorMessage} entries for modules that failed during dependency check, writing (Write-Module), or importing (for .psm1 files).
				- CriticalFailure [bool]: $true if a module marked with Priority='Critical' failed at any stage (dependency, write, or import). $false otherwise.
				- Exception [string]: (Optional) Included only if an unexpected, unhandled exception occurred within the Import-DashboardModules function itself. Contains the exception message.
			
			.NOTES
				- The multi-attempt import strategy for .psm1 files adds complexity but aims for robustness, especially in potentially problematic EXE execution environments.
				- Attempt 2 now includes verification. If it passes, Attempt 3 (Invoke-Expression) is skipped.
				- The use of `Invoke-Expression` (Attempt 3) remains a significant security risk and should ideally be avoided by refactoring modules to work with Attempt 1 or a reliable Attempt 2.
				- Dependency checking relies on modules being added to `$global:DashboardConfig.LoadedModules` *after* successful execution of `Write-Module`.
				- Error reporting distinguishes between Critical, Important, and Optional module failures. Only Critical failures halt the application startup process.
			#>
			[CmdletBinding()]
			[OutputType([PSCustomObject])]
			param()
			
			Write-Verbose "Initializing module import process..." -ForegroundColor Cyan
			
			# Set up the return object structure and internal tracking variables.
			# $result - PSCustomObject to return. Start with default failure state.
			$result = [PSCustomObject]@{
				Status          = $false # Default to failure until proven successful.
				LoadedModules   = $global:DashboardConfig.LoadedModules # Use global directly, shows state during the run.
				FailedModules   = @{}    # List to store {ModuleName = ErrorMessage}.
				CriticalFailure = $false # Flag for critical module failures.
				Exception       = $null  # Placeholder for errors we didn't handle.
			}
			# $failedModules - Local reference to the list inside the result object for easier updates.
			[hashtable]$failedModules = $result.FailedModules
			
			try
			{
				#region Step: Determine Execution Context (EXE vs. Script)
					# Get info about the current running process.
					# $currentProcess - Process object for the current PowerShell instance.
					$currentProcess = Get-Process -Id $PID -ErrorAction Stop # Use Get-Process instead of GetCurrentProcess() for consistent MainModule access.

					# $processPath - Text, the full path of the program file for the current process. Use Path property.
					[string]$processPath = $currentProcess.Path # Use Path property, usually more reliable

					# Check if the process path ends with .exe and is NOT a normal PowerShell program.
					# $isRunningAsExe - Flag ($true/$false).
					[bool]$isRunningAsExe = $processPath -like '*.exe' -and ($processPath -notlike '*powershell.exe' -and $processPath -notlike '*pwsh.exe')
					
                    # Ensure State exists before setting IsRunningAsExe
                    if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('State')) {
                        $global:DashboardConfig['State'] = @{}
                    }
                    if ($global:DashboardConfig -and $global:DashboardConfig.State) {
					    $global:DashboardConfig.State.IsRunningAsExe = $isRunningAsExe # Store globally.
                    }
					Write-Verbose "  Execution context detected: $(if($isRunningAsExe){'Compiled EXE'} else {'PowerShell Script'}) (Process Path: '$processPath')" -ForegroundColor DarkGray
				#endregion Step: Determine Execution Context (EXE vs. Script)
				
				#region Step: Sort Modules by Defined 'Order' Property
					Write-Verbose "  Sorting modules based on 'Order' property..." -ForegroundColor DarkGray
					# $sortedModules - A list of module entries (Key/Value pairs) sorted by the 'Order' value in the module's info.
					# Need to handle errors if module config is messed up.
					$sortedModules = $global:DashboardConfig.Modules.GetEnumerator() |
					Where-Object {
						# Basic check: Make sure key exists and value is a hashtable with an 'Order' property.
						$_.Value -is [hashtable] -and $_.Value.ContainsKey('Order') -and $_.Value.Order -is [int]
					} |
					Sort-Object { $_.Value.Order } -ErrorAction SilentlyContinue # Sort based on the number 'Order' value.
					
					if (-not $sortedModules -or $sortedModules.Count -ne $global:DashboardConfig.Modules.Count)
					{
						# Check if sorting failed or if some modules were skipped due to bad structure.
						$invalidModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { -not ($_.Value -is [hashtable] -and $_.Value.ContainsKey('Order') -and $_.Value.Order -is [int]) }
						$errorMessage = "  Failed to sort modules or found invalid module configurations. Check structure in `$global:DashboardConfig.Modules."
						if ($invalidModules)
						{
							$errorMessage += " Invalid modules: $($invalidModules.Key -join ', ')"
						}
						Write-Verbose $errorMessage -ForegroundColor Red
						$result.Status = $false
						$result.CriticalFailure = $true # Treat sorting/config errors as critical.
						$failedModules['Module Sorting/Validation'] = $errorMessage
						return $result # Return failure right away.
					}
					Write-Verbose "  Processing $($sortedModules.Count) modules in defined order." -ForegroundColor DarkGray
				#endregion Step: Sort Modules by Defined 'Order' Property
				
				#region Step: Process Each Module in Sorted Order
					foreach ($entry in $sortedModules)
					{
						# $moduleName - Text, the key/filename of the module (e.g., 'ui.psm1').
						[string]$moduleName = $entry.Key
						# $moduleInfo - Hashtable holding info for this module (Priority, Order, Dependencies, FilePath/Base64Content).
						$moduleInfo = $entry.Value # Already checked as a hashtable during sorting.
						
						Write-Verbose "Processing Module: '$moduleName' (Priority: $($moduleInfo.Priority), Order: $($moduleInfo.Order))" -ForegroundColor Cyan
						
						#region SubStep: Check Dependencies
							Write-Verbose "- Checking dependencies..." -ForegroundColor DarkGray
							# $dependenciesMet - Flag ($true/$false), assume true until a missing dependency found.
							[bool]$dependenciesMet = $true
							# Check if Dependencies key exists, is an array, and has items.
							if ($moduleInfo.Dependencies -and $moduleInfo.Dependencies -is [array] -and $moduleInfo.Dependencies.Count -gt 0)
							{
								Write-Verbose "  - Required: $($moduleInfo.Dependencies -join ', ')" -ForegroundColor DarkGray
								foreach ($dependency in $moduleInfo.Dependencies)
								{
									# Check if the dependency is a key in the *global* loaded modules list.
									if (-not $global:DashboardConfig.LoadedModules.ContainsKey($dependency))
									{
										$errorMessage = "- Dependency NOT MET: Module '$dependency' must be loaded before '$moduleName'."
										Write-Verbose "- $errorMessage" -ForegroundColor Yellow
										$failedModules[$moduleName] = $errorMessage
										$dependenciesMet = $false
										# Check if this failure is critical.
										if ($moduleInfo.Priority -eq 'Critical')
										{
											Write-Verbose "- CRITICAL FAILURE: Critical module '$moduleName' cannot load due to missing dependency '$dependency'." -ForegroundColor Red
											$result.CriticalFailure = $true
										}
										break # No need to check more dependencies for this module.
									}
									else
									{
										Write-Verbose "  - Dependency satisfied: '$dependency' is loaded." -ForegroundColor DarkGray
									}
								}
							}
							else
							{
								Write-Verbose "  - No dependencies listed for '$moduleName'." -ForegroundColor DarkGray
							}
							
							# If dependencies aren't met, skip the rest of this module.
							if (-not $dependenciesMet)
							{
								continue
							} # Go to the next module in the loop.
						
						#endregion SubStep: Check Dependencies
						
						#region SubStep: Write Module to AppData Directory (Using Write-Module)
							# $modulePath - Text, path where module was written/checked. $null on failure.
							[string]$modulePath = $null
							Write-Verbose "- Ensuring module file exists in AppData via Write-Module for '$moduleName'..." -ForegroundColor DarkGray
							
							# Call Write-Module, giving inputs based on module's config (FilePath or Base64Content).
							try
							{
								if ($moduleInfo.ContainsKey('FilePath'))
								{
									[string]$sourceFilePath = $moduleInfo.FilePath
									# --- Add check for source file path ---
									if (-not (Test-Path $sourceFilePath -PathType Leaf)) {
										throw "Source FilePath specified in config does not exist or is not a file: '$sourceFilePath'"
									}
									Write-Verbose "Calling Write-Module with source FilePath: '$sourceFilePath'" -ForegroundColor Cyan
									$modulePath = Write-Module -ModuleName $moduleName -Content $sourceFilePath -ErrorAction Stop # Use Stop to catch errors here.
								}
								elseif ($moduleInfo.ContainsKey('Base64Content'))
								{
									[string]$base64Content = $moduleInfo.Base64Content
									Write-Verbose "Calling Write-Module with Base64Content (Length: $($base64Content.Length))" -ForegroundColor Cyan
									# Make sure content isn't null/empty before passing
									if ([string]::IsNullOrEmpty($base64Content))
									{
										throw "Base64Content for module '$moduleName' is empty."
									}
									$modulePath = Write-Module -ModuleName $moduleName -ContentBase64 $base64Content -ErrorAction Stop
								}
								else
								{
									# Shouldn't get here if sorting check worked.
									throw "Invalid module configuration format for '$moduleName' - missing FilePath or Base64Content."
								}
									
								# Check if Write-Module returned a valid path.
								if ([string]::IsNullOrEmpty($modulePath))
								{
									# Write-Module should ideally error out on failure with ErrorAction Stop, but double-check.
									throw "Write-Module returned null or empty path for '$moduleName', indicating write failure."
								}
									
								Write-Verbose "- [OK] Module file ready/verified: '$modulePath'" -ForegroundColor Green
								# Add/Update path in global loaded modules list. Happens for ALL written files (.psm1, .dll, .ico).
								# This is key for checking dependencies of non-PSM1 files.
                                # Ensure LoadedModules hashtable exists
                                if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('LoadedModules')) {
                                    $global:DashboardConfig['LoadedModules'] = @{}
                                }
                                if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules) {
								    $global:DashboardConfig.LoadedModules[$moduleName] = $modulePath
                                }
									
							}
							catch
							{
								# Catch errors from Write-Module call or the code block above.
								$errorMessage = "- Failed to write or verify module file for '$moduleName'. Error: $($_.Exception.Message)"
								Write-Verbose "- $errorMessage" -ForegroundColor Red
								$failedModules[$moduleName] = $errorMessage
								# Check if this failure is critical.
								if ($moduleInfo.Priority -eq 'Critical')
								{
									Write-Verbose "- CRITICAL FAILURE: Failed to write critical module '$moduleName'." -ForegroundColor Red
									$result.CriticalFailure = $true
								}
								continue # Go to the next module.
							}
						#endregion SubStep: Write Module to AppData Directory (Using Write-Module)
							
						#region SubStep: Import PowerShell Modules (.psm1)
							# Only try PowerShell import steps if the module is a .psm1 file.
							if ($moduleName -like '*.psm1')
							{
								Write-Verbose "Attempting to import PowerShell module '$moduleName' from '$modulePath'..." -ForegroundColor Cyan
								# $importSuccess - Flag ($true/$false) for successful import of this specific PSM1 module.
								[bool]$importSuccess = $false
								# $importErrorDetails - Text to store failure details if all tries fail.
								[string]$importErrorDetails = 'All import attempts failed.'
								[string]$moduleBaseName = [System.IO.Path]::GetFileNameWithoutExtension($moduleName)

								# --- Import Try 1: Standard Import-Module (with EXE changes if needed) ---
								if (-not $importSuccess)
								{
									Write-Verbose "- Attempt 1: Using standard Import-Module..." -ForegroundColor Cyan
									try
									{
										# $effectiveModulePath - Path for Import-Module (might be temp path for EXE).
										[string]$effectiveModulePath = $modulePath
										# $tempModulePath - Path to temp changed file if running as EXE.
										[string]$tempModulePath = $null
											
										if ($isRunningAsExe)
										{
											Write-Verbose "  - (Running as EXE: Prepending no-op Export-ModuleMember to temporary file for import)" -ForegroundColor DarkGray
											# Create a unique temporary file path.
											$tempModulePath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), ('{0}_{1}.psm1' -f $moduleBaseName, [System.Guid]::NewGuid().ToString('N')))
											Write-Verbose "  - Temp file path: $tempModulePath" -ForegroundColor DarkGray
												
											# Read original content (already in global config or re-read to be safe).
											# $originalContent - Text, content of the module.
                                            # Ensure Resources and LoadedModuleContent exist
                                            [string]$originalContent = $null
                                            if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.LoadedModuleContent -and $global:DashboardConfig.Resources.LoadedModuleContent.ContainsKey($moduleName)) {
											    $originalContent = $global:DashboardConfig.Resources.LoadedModuleContent[$moduleName]
                                            }
											if ($null -eq $originalContent)
											{
												$originalContent = [System.IO.File]::ReadAllText($modulePath)
											} # Re-read if not found
												
											# Define the dummy function text.
											$noOpExportFunc = "function Export-ModuleMember { param([Parameter(ValueFromPipeline=`$true)][string[]]`$Function='*', [string[]]`$Variable='*', [string[]]`$Alias='*', [string[]]`$Cmdlet='*') { Write-Verbose ""Ignoring Export-ModuleMember (EXE Mode Import for '$($using:moduleName)')"" -ForegroundColor Cyan} }"
											# Add to beginning and write to temp file using UTF8 encoding.
											Set-Content -Path $tempModulePath -Value "$noOpExportFunc`n`n# --- Original module content ($moduleName) follows ---`n$originalContent" -Encoding UTF8 -Force -ErrorAction Stop
											$effectiveModulePath = $tempModulePath # Use the temp path for import.
										}
											
										# Run Import-Module. -Force re-imports if already loaded (good for dev/debug).
										Import-Module -Name $effectiveModulePath -Force -ErrorAction Stop
											
										# Check module loaded okay by using Get-Module with the base name.
										if (Get-Module -Name $moduleBaseName -ErrorAction SilentlyContinue)
										{
											$importSuccess = $true
											Write-Verbose "- [OK] Attempt 1: SUCCESS (Standard Import-Module verified for '$moduleBaseName')." -ForegroundColor Green
										}
										else
										{
											# This might happen if Import-Module finishes but the module somehow doesn't show up right.
											Write-Verbose "- Attempt 1: FAILED (Standard Import-Module) - Module '$moduleBaseName' not found via Get-Module after import call." -ForegroundColor Yellow
											$importErrorDetails = "Standard Import-Module completed but module '$moduleBaseName' could not be verified via Get-Module."
											# If import failed, make sure any existing module state is removed before trying next way.
											Remove-Module -Name $moduleBaseName -Force -ErrorAction SilentlyContinue
										}
											
									}
									catch
									{
										Write-Verbose "- Attempt 1: FAILED (Standard Import-Module Error): $($_.Exception.Message)" -ForegroundColor Yellow
										$importErrorDetails = "Standard Import-Module Error: $($_.Exception.Message)"
										# Make sure any partial/failed module state is removed.
										Remove-Module -Name $moduleBaseName -Force -ErrorAction SilentlyContinue
									}
									finally
									{
										# Clean up temp file if one was made for EXE mode.
										if ($tempModulePath -and (Test-Path $tempModulePath))
										{
											Write-Verbose "  - Cleaning up temporary file: $tempModulePath" -ForegroundColor DarkGray
											Remove-Item -Path $tempModulePath -Force -ErrorAction SilentlyContinue
										}
									}
								} # End Try 1
																	
								# --- Import Try 2: Import-ModuleUsingReflection (WITH VERIFICATION) ---
								if (-not $importSuccess)
								{
									# Check if the alternative function exists.
									if (Get-Command Import-ModuleUsingReflection -ErrorAction SilentlyContinue)
									{
										Write-Verbose "- Attempt 2: Using alternative Import-ModuleUsingReflection (InvokeCommand)..." -ForegroundColor Yellow
										try
										{
                                            # Call the reflection import function
											if (Import-ModuleUsingReflection -Path $modulePath -ModuleName $moduleName -ErrorAction Stop)
											{
                                                # --- Verification Step Added ---
                                                Write-Verbose "  - Attempt 2: InvokeCommand finished. Verifying key functions globally for '$moduleName'..." -ForegroundColor Magenta

                                                # Get the list of expected functions for this module (reuse from Attempt 3 logic)
                                                $keyFunctionsToVerify = @()
                                                if ($moduleName -eq 'ini.psm1')       { $keyFunctionsToVerify = @('Initialize-IniConfig', 'Get-IniFileContent', 'Read-Config', 'Write-Config', 'Copy-OrderedDictionary', 'LoadDefaultConfigOnError') }
                                                elseif ($moduleName -eq 'ui.psm1') { $keyFunctionsToVerify = @('Initialize-UI', 'Set-UIElement', 'Show-SettingsForm', 'Hide-SettingsForm', 'Sync-ConfigToUI', 'Sync-UIToConfig', 'Register-UIEventHandlers') }
                                                elseif ($moduleName -eq 'datagrid.psm1') { $keyFunctionsToVerify = @('Test-ValidParameters', 'Get-ProcessList', 'Remove-TerminatedProcesses', 'New-RowLookupDictionary', 'Update-ExistingRow', 'UpdateRowIndices', 'Add-NewProcessRow', 'Start-WindowStateCheck', 'Find-TargetRow', 'Clear-OldProcessCache', 'Update-DataGrid', 'Start-DataGridUpdateTimer' ) }
                                                elseif ($moduleName -eq 'launch.psm1')   { $keyFunctionsToVerify = @('Start-ClientLaunch', 'Stop-ClientLaunch') }
                                                elseif ($moduleName -eq 'login.psm1')    { $keyFunctionsToVerify = @('Restore-Window', 'Set-WindowForeground', 'Test-UserMouseIntervention', 'Wait-ForResponsive', 'Wait-ForFileAccess', 'Write-LogWithRetry', 'Invoke-MouseClick', 'Invoke-KeyPress', 'LoginSelectedRow') }
                                                elseif ($moduleName -eq 'ftool.psm1')    { $keyFunctionsToVerify = @('LoadFtoolSettings', 'FindOrCreateProfile', 'InitializeExtensionTracking', 'GetNextExtensionNumber', 'FindExtensionKeyByControl', 'LoadExtensionSettings', 'UpdateSettings', 'CreatePositionTimer', 'RepositionExtensions', 'CreateSpammerTimer', 'ToggleButtonState', 'CheckRateLimit', 'AddFormCleanupHandler', 'CleanupInstanceResources', 'Stop-FtoolForm', 'RemoveExtension', 'FtoolSelectedRow', 'CreateFtoolForm', 'AddFtoolEventHandlers', 'CreateExtensionPanel', 'AddExtensionEventHandlers') }
                                                
                                                [bool]$attempt2VerificationPassed = $true # Assume success until proven otherwise
                                                [string]$missingFunction = $null

                                                if ($keyFunctionsToVerify.Count -gt 0) {
                                                    foreach ($funcName in $keyFunctionsToVerify) {
                                                        if (-not (Get-Command -Name $funcName -CommandType Function -ErrorAction SilentlyContinue)) {
                                                            $attempt2VerificationPassed = $false
                                                            $missingFunction = $funcName
                                                            Write-Verbose "  - Attempt 2: VERIFICATION FAILED. Function '$funcName' not found globally after InvokeCommand." -ForegroundColor Red
                                                            $importErrorDetails = "Attempt 2 (InvokeCommand) completed but verification failed: Function '$funcName' not found globally."
                                                            break # Stop checking if one is missing
                                                        }
                                                    }
                                                } else {
                                                    Write-Verbose "  - Attempt 2: No specific key functions listed for verification for '$moduleName'. Assuming success based on InvokeCommand completion." -ForegroundColor DarkGray
                                                    # If no functions to verify, trust the $true return from Import-ModuleUsingReflection
                                                    $attempt2VerificationPassed = $true 
                                                }

                                                # Set final import success based on verification
                                                if ($attempt2VerificationPassed) {
                                                    Write-Verbose "- [OK] Attempt 2: SUCCESS (InvokeCommand completed AND key functions verified for '$moduleName')." -ForegroundColor Green
													$importSuccess = $true
                                                } else {
                                                    # Failure already logged above
                                                    $importSuccess = $false
                                                }
                                                # --- End Verification Step ---
											}
											else # Import-ModuleUsingReflection returned false (fatal error during its execution)
											{
												Write-Verbose "- Attempt 2: FAILED (Import-ModuleUsingReflection returned false)." -ForegroundColor Yellow
												$importErrorDetails = 'Import-ModuleUsingReflection returned false (fatal execution error).'
                                                $importSuccess = $false # Ensure flag is false
											}
										}
										catch # Catch errors *calling* Import-ModuleUsingReflection
										{
											Write-Verbose "- Attempt 2: FAILED (Error calling Import-ModuleUsingReflection): $($_.Exception.Message)" -ForegroundColor Yellow
											$importErrorDetails = "Error calling Import-ModuleUsingReflection: $($_.Exception.Message)"
                                            $importSuccess = $false # Ensure flag is false
										}
									}
									else # Import-ModuleUsingReflection command not found
									{
										Write-Verbose "- Attempt 2: SKIPPED (Import-ModuleUsingReflection function not found)." -ForegroundColor Yellow
									}
								} # End Try 2
									
								# --- Import Try 3: Direct Invoke-Expression (Last Resort - Security Risk!) ---
								# This only runs if $importSuccess is still $false after Attempt 1 and Attempt 2 (including verification)
								if (-not $importSuccess)
								{
									Write-Verbose "- Attempt 3: Using LAST RESORT Invoke-Expression (Security Risk!)..." -ForegroundColor Yellow
									# === Add a variable to track functions caught just in *this* try ===
									$functionsCapturedInThisAttempt = @{}
									try
									{
										# Read module content (might be saved in global config).
                                        [string]$invokeContent = $null
                                        if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.LoadedModuleContent -and $global:DashboardConfig.Resources.LoadedModuleContent.ContainsKey($moduleName)) {
                                            $invokeContent = $global:DashboardConfig.Resources.LoadedModuleContent[$moduleName]
                                        }
										if ($null -eq $invokeContent)
										{
											$invokeContent = [System.IO.File]::ReadAllText($modulePath)
										} # Re-read if needed.

										# Basic try to disable Export-ModuleMember calls using multi-line regex replace.
										$invokeContent = $invokeContent -replace '(?m)^\s*Export-ModuleMember.*', "# Export-ModuleMember call disabled by Invoke-Expression wrapper for $moduleName"

										# Run the (maybe changed) content directly in the global space.
										Invoke-Expression -Command $invokeContent -ErrorAction Stop

										# First check if IEX finished without MAJOR error
										$iexCompletedWithoutTerminatingError = $?

										# Check key functions right away AND grab them if found
										$keyFunctionsToCapture = @()
										# --- LIST ALL EXPECTED EXPORTED/USED FUNCTIONS FOR EACH MODULE ---
										if ($moduleName -eq 'ini.psm1')       { $keyFunctionsToCapture = @('Initialize-IniConfig', 'Get-IniFileContent', 'Read-Config', 'Write-Config', 'Copy-OrderedDictionary', 'LoadDefaultConfigOnError') }
										elseif ($moduleName -eq 'ui.psm1') { $keyFunctionsToCapture = @('Initialize-UI', 'Set-UIElement', 'Show-SettingsForm', 'Hide-SettingsForm', 'Sync-ConfigToUI', 'Sync-UIToConfig', 'Register-UIEventHandlers') }
										elseif ($moduleName -eq 'datagrid.psm1') { $keyFunctionsToCapture = @('Test-ValidParameters', 'Get-ProcessList', 'Remove-TerminatedProcesses', 'New-RowLookupDictionary', 'Update-ExistingRow', 'UpdateRowIndices', 'Add-NewProcessRow', 'Start-WindowStateCheck', 'Find-TargetRow', 'Clear-OldProcessCache', 'Update-DataGrid', 'Start-DataGridUpdateTimer' ) }
										elseif ($moduleName -eq 'launch.psm1')   { $keyFunctionsToCapture = @('Start-ClientLaunch', 'Stop-ClientLaunch') }
										elseif ($moduleName -eq 'login.psm1')    { $keyFunctionsToCapture = @('Restore-Window', 'Set-WindowForeground', 'Test-UserMouseIntervention', 'Wait-ForResponsive', 'Wait-ForFileAccess', 'Write-LogWithRetry', 'Invoke-MouseClick', 'Invoke-KeyPress', 'LoginSelectedRow') }
										elseif ($moduleName -eq 'ftool.psm1')    { $keyFunctionsToCapture = @('LoadFtoolSettings', 'FindOrCreateProfile', 'InitializeExtensionTracking', 'GetNextExtensionNumber', 'FindExtensionKeyByControl', 'LoadExtensionSettings', 'UpdateSettings', 'CreatePositionTimer', 'RepositionExtensions', 'CreateSpammerTimer', 'ToggleButtonState', 'CheckRateLimit', 'AddFormCleanupHandler', 'CleanupInstanceResources', 'Stop-FtoolForm', 'RemoveExtension', 'FtoolSelectedRow', 'CreateFtoolForm', 'AddFtoolEventHandlers', 'CreateExtensionPanel', 'AddExtensionEventHandlers') }

										# Create captured functions storage if it doesn't exist
                                        if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and -not $global:DashboardConfig.Resources.ContainsKey('CapturedFunctions')) {
											$global:DashboardConfig.Resources['CapturedFunctions'] = @{}
										}

										$captureSuccess = $true # Assume capture worked at first
										$criticalFunctionMissing = $false

										if ($keyFunctionsToCapture.Count -gt 0) {
											Write-Verbose "- Attempt 3: Verifying and capturing key functions for '$moduleName' immediately after IEX..." -ForegroundColor Magenta
											foreach ($funcName in $keyFunctionsToCapture) {
												$funcInfo = Get-Command -Name $funcName -CommandType Function -ErrorAction SilentlyContinue
												if ($funcInfo) {
													$capturedScriptBlock = $funcInfo.ScriptBlock
													Write-Verbose "  - Found and capturing ScriptBlock for '$funcName'." -ForegroundColor Magenta
													# Store globally for possible later use (though direct global definition is main now)
                                                    if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.CapturedFunctions) {
													    $global:DashboardConfig.Resources.CapturedFunctions[$funcName] = $capturedScriptBlock
                                                    }
													# === Store locally for immediate global definition ===
													$functionsCapturedInThisAttempt[$funcName] = $capturedScriptBlock
												} else {
													Write-Verbose "  - WARNING: Could not find/capture function '$funcName' immediately after IEX for '$moduleName'." -ForegroundColor Yellow
													$captureSuccess = $false
													# Check if the missing function is critical FOR STARTUP
													# --- Adjusted Critical Function Check ---
													$isCriticalModule = $moduleInfo.Priority -eq 'Critical' 
													# Consider a function critical if it's in a Critical module AND in the key function list
													if ($isCriticalModule) { 
													    $criticalFunctionMissing = $true
													    $importErrorDetails += "; Critical function '$funcName' not found after IEX in Critical module '$moduleName'"
                                                        Write-Verbose "    - Missing function '$funcName' is considered critical for module '$moduleName'." -ForegroundColor Red
													} else {
                                                         $importErrorDetails += "; Non-critical function '$funcName' not found after IEX for module '$moduleName'"
                                                    }
                                                    # --- End Adjusted Critical Function Check ---
												}
											}
										}

										# Decide overall success for Try 3
										# Success means IEX didn't have non-terminating errors ($?),
										# capture succeeded, AND no *critical* functions were missing.
										if ($iexCompletedWithoutTerminatingError -and $captureSuccess -and (-not $criticalFunctionMissing)) {
											Write-Verbose "  - Attempt 3: IEX completed and key functions captured/verified for '$moduleName'." -ForegroundColor DarkGreen

											# === Define captured functions globally RIGHT AWAY ===
											Write-Verbose "  - Defining captured functions globally for '$moduleName'..." -ForegroundColor Magenta
											$definitionSuccess = $true # Track success of this small step
											foreach ($kvp in $functionsCapturedInThisAttempt.GetEnumerator()) {
												$funcNameToDefine = $kvp.Key
												$scriptBlockToDefine = $kvp.Value
												try {
													# Define in global function space
													Set-Item -Path "Function:\global:$funcNameToDefine" -Value $scriptBlockToDefine -Force -ErrorAction Stop
													Write-Verbose "    - Defined Function:\global:$funcNameToDefine" -ForegroundColor DarkMagenta
												} catch {
													Write-Verbose "    - FAILED to define Function:\global:$funcNameToDefine globally: $($_.Exception.Message)" -ForegroundColor Red
													$definitionSuccess = $false
													$importErrorDetails += "; Failed to define captured function '$funcNameToDefine' globally."
													# If defining a critical function fails, mark critical failure for the whole import process
                                                    # --- Adjusted Critical Function Check ---
                                                    if ($moduleInfo.Priority -eq 'Critical') {
														$result.CriticalFailure = $true
														Write-Verbose "    - Defining critical function '$funcNameToDefine' failed. Marking import as critical failure." -ForegroundColor Red
													}
                                                     # --- End Adjusted Critical Function Check ---
													break # Stop trying to define others for this module if one fails
												}
											}

											# Only mark the whole import successful if definitions also worked
											if ($definitionSuccess) {
												$importSuccess = $true
												Write-Verbose "- [OK] Attempt 3: SUCCESS (Invoke-Expression completed, key functions captured AND globally defined for $moduleName)." -ForegroundColor Green
											} else {
												$importSuccess = $false # Failed during definition
												Write-Verbose "- Attempt 3: FAILED during global definition phase for $moduleName." -ForegroundColor Red
											}

										} else { # IEX failed, capture failed, or critical function missing
											Write-Verbose "- Attempt 3: FAILED (IEX completed=$iexCompletedWithoutTerminatingError, CaptureSuccess=$captureSuccess, CriticalMissing=$criticalFunctionMissing) for $moduleName." -ForegroundColor Red
											if (-not $iexCompletedWithoutTerminatingError) { $importErrorDetails += "; IEX failed with non-terminating error detected by `$?."}
                                            if ($criticalFunctionMissing) { $importErrorDetails += "; Critical function missing prevented Attempt 3 success." }
                                            if (-not $captureSuccess) { $importErrorDetails += "; Function capture failed during Attempt 3." }
											$importSuccess = $false # Make sure import is marked as failed
										}
									}
									catch # Catch MAJOR errors from Invoke-Expression itself
									{
										Write-Verbose "- Attempt 3: FAILED (Invoke-Expression Error): $($_.Exception.Message)" -ForegroundColor Red
										$importErrorDetails = "Invoke-Expression Error: $($_.Exception.Message)"
										$importSuccess = $false # Make sure success is false if IEX throws major error
									}
								} # End Try 3

								# --- Final Check for PSM1 Import Success --- 
								if ($importSuccess)
								{
									Write-Verbose "- [OK] Successfully imported PSM1 module: '$moduleName'." -ForegroundColor Green
									# Module already added to $global:DashboardConfig.LoadedModules after Write-Module step.
								}
								else
								{
									$errorMessage = "All import methods FAILED for PSM1 module: '$moduleName'. Last error detail: $importErrorDetails"
									Write-Verbose "- $errorMessage" -ForegroundColor Red
									$failedModules[$moduleName] = $errorMessage
									# Critical: Remove from LoadedModules list if import failed after writing okay, as it's not really usable.
									if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules -and $global:DashboardConfig.LoadedModules.ContainsKey($moduleName))
									{
										Write-Verbose "- Removing '$moduleName' from LoadedModules list due to import failure." -ForegroundColor Yellow
										$global:DashboardConfig.LoadedModules.Remove($moduleName)
									}
									# Check if this failure is critical.
									if ($moduleInfo.Priority -eq 'Critical')
									{
										Write-Verbose "- CRITICAL FAILURE: Failed to import critical PSM1 module '$moduleName'." -ForegroundColor Red
										$result.CriticalFailure = $true
									}
								}
							}
						#endregion SubStep: Import PowerShell Modules (.psm1)
					} # End foreach ($entry in $sortedModules)
				#endregion Step: Process Each Module in Sorted Order
					
				#region Step: Final Status Check and Result Construction
					Write-Verbose "Module import check..." -ForegroundColor Cyan
						
					# Check for Critical Failures gathered during the loop.
					if ($result.CriticalFailure)
					{
						Write-Verbose "  CRITICAL FAILURE: One or more critical modules failed to load or write. Application cannot continue." -ForegroundColor Red
						# Find which critical modules exactly failed.
						$criticalModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Critical' }
						$failedCritical = $criticalModules | Where-Object { $failedModules.ContainsKey($_.Key) }
						if ($failedCritical)
						{
							Write-Verbose "  Failed critical modules: $($failedCritical.Key -join ', ')" -ForegroundColor Red
							$failedCritical | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor Red } 
						}
						$result.Status = $false # Make sure status is false.
						# Return the result object showing critical failure.
						return $result
					}
						
					# Report Important Module Failures (as Warnings).
					$importantModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Important' }
					$failedImportant = $importantModules | Where-Object { $failedModules.ContainsKey($_.Key) }
					if ($failedImportant.Count -gt 0)
					{
						Write-Verbose "  IMPORTANT module failures detected: $($failedImportant.Key -join ', '). Application may have limited functionality." -ForegroundColor Yellow
						# Log details of failures for important modules.
						$failedImportant | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor Yellow } 
					}
						
					# Report Optional Module Failures (as Info/DarkYellow).
					$optionalModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Optional' }
					$failedOptional = $optionalModules | Where-Object { $failedModules.ContainsKey($_.Key) }
					if ($failedOptional.Count -gt 0)
					{
						Write-Verbose "  Optional module failures detected: $($failedOptional.Key -join ', '). Non-essential features might be unavailable." -ForegroundColor DarkYellow
						# Log details.
						$failedOptional | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor DarkGray }
					}
						
					# If no critical failures happened, the whole process is seen as successful for startup.
                    $successCount = 0
                    if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules) {
                        $successCount = $global:DashboardConfig.LoadedModules.Count
                    }
					$failCount = $failedModules.Count
					Write-Verbose "  Module loading phase complete. Modules written/verified: $successCount. Failures (any type): $failCount." -ForegroundColor DarkGray
					if ($successCount -gt 0)
					{
						Write-Verbose "  Successfully written/verified modules: $($global:DashboardConfig.LoadedModules.Keys -join ', ')" -ForegroundColor DarkGray
					}
					if ($failCount -gt 0)
					{
						Write-Verbose "  Failed modules logged above." -ForegroundColor Yellow
					}
						
					# Set final status to true as no critical failures happened.
					$result.Status = $true
					$result.CriticalFailure = $false # Explicitly set false.
					# Return the final result object.
					return $result
				#endregion Step: Final Status Check and Result Construction
			}
			catch
			{
				# Catch surprise, unhandled errors within the main Import-DashboardModules function body.
				$errorMessage = "  FATAL UNHANDLED EXCEPTION in Import-DashboardModules: $($_.Exception.Message)"
				Write-Verbose $errorMessage -ForegroundColor Red
				Write-Verbose "  Stack trace: $($_.ScriptStackTrace)" -ForegroundColor Red
				# Fill and return the result object showing critical failure due to the error.
				$result.Status = $false
				$result.CriticalFailure = $true
				$result.Exception = $_.Exception.Message # Store error message.
				$failedModules['Unhandled Exception'] = $errorMessage # Add to failed modules list.
				return $result
			}
		}
	#endregion Function: Import-DashboardModules

#endregion Module Handling Functions
	
#region UI and Application Lifecycle Functions

	#region Function: Start-Dashboard
		function Start-Dashboard
		{
			<#
				.SYNOPSIS
					Initializes and displays the main dashboard user interface (UI) form.
				
				.DESCRIPTION
					This function orchestrates the startup of the application's graphical user interface. It performs these actions:
					1. Checks if the 'Initialize-UI' function, expected to be loaded from the 'ui.psm1' module, exists using `Get-Command`. If not found, it throws a terminating error as the UI cannot be built.
					2. Calls the `Initialize-UI` function. It assumes this function is responsible for creating all UI elements (forms, controls) and populating the '$global:DashboardConfig.UI' hashtable, including setting '$global:DashboardConfig.UI.MainForm'.
					3. Checks the return value of `Initialize-UI`. If it returns $false or null (interpreted as failure), it throws a terminating error.
					4. Verifies that '$global:DashboardConfig.UI.MainForm' exists and is a valid '[System.Windows.Forms.Form]' object after `Initialize-UI` returns successfully. If not, it throws a terminating error.
					5. If the MainForm is valid, it calls the `.Show()` method to make the main window visible and `.Activate()` to bring it to the foreground.
					6. Sets the global state flag '$global:DashboardConfig.State.UIInitialized' to $true.
				
				.OUTPUTS
					[bool] Returns $true if the UI is successfully initialized, the main form is found, shown, and activated.
					Returns $false if any step fails (missing function, initialization failure, missing main form), typically after throwing an error that gets caught by the main execution block.
				
				.NOTES
					- This function has a strong dependency on the 'ui.psm1' module being loaded correctly and functioning as expected (defining `Initialize-UI` and creating `MainForm`).
					- Errors encountered during this process are considered fatal for the application and are thrown to be caught by the main script's try/catch block, which should then display an error using `Show-ErrorDialog`.
			#>
			[CmdletBinding()]
			[OutputType([bool])]
			param()

			Write-Verbose "Starting Dashboard User Interface..." -ForegroundColor Cyan
			try
			{
				#region Step: Check for and Call Initialize-UI Function
					Write-Verbose "- Checking for required Initialize-UI function (from ui.psm1)..." -ForegroundColor DarkGray
					# Check that the Initialize-UI command (function) is available now.
					if (-not (Get-Command Initialize-UI -ErrorAction SilentlyContinue))
					{
						# Throw a major error if the function is missing.
						throw "FATAL: Initialize-UI function not found. Ensure 'ui.psm1' module loaded correctly and defines this function."
					}

					Write-Verbose "- Calling Initialize-UI function..." -ForegroundColor DarkGray
					# Run the UI setup function. Save its return value.
					Initialize-UI # Call directly now

					Write-Verbose "- [OK] Initialize-UI function executed successfully." -ForegroundColor Green
				#endregion Step: Check for and Call Initialize-UI Function

				#region Step: Verify, Show, and Activate Main Form
					Write-Verbose "- Verifying presence and type of UI.MainForm object..." -ForegroundColor DarkGray
					# Check if MainForm property exists in UI config and is a valid Form object.
					if ($null -eq $global:DashboardConfig.UI.MainForm -or -not ($global:DashboardConfig.UI.MainForm -is [System.Windows.Forms.Form]))
					{
						# Throw a major error if main form is missing or invalid after successful Initialize-UI call.
						throw 'FATAL: UI.MainForm object not found or is not a valid System.Windows.Forms.Form in $global:DashboardConfig after successful Initialize-UI call.'
					}

					Write-Verbose "- [OK] UI.MainForm found and is valid. Showing and activating window..." -ForegroundColor Green
					# Make the main app window visible.
					$global:DashboardConfig.UI.MainForm.Show()
					# Bring the main window to the front and focus it.
					$global:DashboardConfig.UI.MainForm.Activate()

					# Update the global state flag to show the UI is now set up and running.
					$global:DashboardConfig.State.UIInitialized = $true
					Write-Verbose "  Dashboard UI started and activated successfully." -ForegroundColor Green
				#endregion Step: Verify, Show, and Activate Main Form

				# Return true showing successful UI startup.
				return $true
			}
			catch
			{
				$errorMsg = "  FATAL: Failed to start dashboard UI. Error: $($_.Exception.Message)"
				Write-Verbose $errorMsg -ForegroundColor Red
				# Throw the error again to send it up to the main run block's catch.
				throw $_ # Use throw $_ to keep original error details.
			}
		}
	#endregion Function: Start-Dashboard
		
	#region Function: Start-MessageLoop
		function Start-MessageLoop
		{
			<#
				.SYNOPSIS
					Runs the Windows Forms message loop to keep the UI responsive until the main form is closed.
				
				.DESCRIPTION
					This function implements the core message processing loop required for a Windows Forms application. It keeps the UI alive and responsive to user interactions, window events, and timer ticks.
					
					The function first performs pre-checks:
					1. Verifies that the UI has been initialized (`$global:DashboardConfig.State.UIInitialized`).
					2. Verifies that the main form object (`$global:DashboardConfig.UI.MainForm`) exists, is a valid Form, and is not already disposed.
					
					If checks pass, it determines the loop method:
					- Preferred Native Loop: If the 'Native' class (expected from 'classes.psm1') and its required P/Invoke methods (`AsyncExecution`, `PeekMessage`, `TranslateMessage`, `DispatchMessage`) are detected, it uses an efficient loop based on `MsgWaitForMultipleObjectsEx` (wrapped in `AsyncExecution`). This waits for messages or a timeout, processing messages only when they arrive, thus minimizing CPU usage when idle.
					- Fallback DoEvents Loop: If the Native methods are unavailable, it falls back to a loop using `[System.Windows.Forms.Application]::DoEvents()`. This processes all pending messages but does not wait efficiently, potentially consuming more CPU. A short `Start-Sleep` (e.g., 20ms) is added within this loop to prevent 100% CPU usage.
					
					The chosen loop runs continuously as long as the main form (`$global:DashboardConfig.UI.MainForm`) is visible and not disposed.
				
				.OUTPUTS
					[void] This function runs synchronously and blocks execution until the main UI form is closed or disposed. It does not return a value.
				
				.NOTES
					- Requires the main UI form (`$global:DashboardConfig.UI.MainForm`) to be successfully initialized and shown by `Start-Dashboard` before being called.
					- The efficiency of the UI heavily depends on the availability and correctness of the 'Native' class methods from 'classes.psm1'. The `DoEvents` fallback is less performant.
					- Includes basic error handling within the loop itself and a final `DoEvents` fallback attempt if the primary loop method encounters an unhandled exception.
					- Logs the chosen loop method and status messages during execution and upon exit.
				#>
			[CmdletBinding()]
			[OutputType([void])]
			param()
				
			Write-Verbose "`Starting UI message loop..." -ForegroundColor Cyan
				
			#region Step: Pre-Loop Checks for UI State and Main Form Validity
				Write-Verbose "  Checking UI state before starting message loop..." -ForegroundColor DarkGray
				# Check if UI setup flag is set.
				if (-not $global:DashboardConfig.State.UIInitialized)
				{
					Write-Verbose "  UI not marked as initialized ($global:DashboardConfig.State.UIInitialized is $false). Skipping message loop." -ForegroundColor Yellow
					return # Exit function if UI isn't ready.
				}
				# Check if MainForm object exists and is a valid, non-disposed Form.
				$mainForm = $global:DashboardConfig.UI.MainForm # Local variable to make things easier.
				if ($null -eq $mainForm -or -not ($mainForm -is [System.Windows.Forms.Form]))
				{
					Write-Verbose "  MainForm object ($global:DashboardConfig.UI.MainForm) is missing or not a valid Form object. Cannot start message loop." -ForegroundColor Yellow
					return # Exit function if MainForm is invalid.
				}
				if ($mainForm.IsDisposed)
				{
					Write-Verbose "  MainForm ($global:DashboardConfig.UI.MainForm) is already disposed. Cannot start message loop." -ForegroundColor Yellow
					return # Exit function if MainForm is already disposed (cleaned up).
				}
				Write-Verbose "  Pre-loop checks passed. MainForm is valid and UI is initialized." -ForegroundColor Green
			#endregion Step: Pre-Loop Checks for UI State and Main Form Validity
				
			# $loopMethod - Text showing which loop type is used ('Native' or 'DoEvents').
			[string]$loopMethod = 'Unknown'
			try
			{
				#region Step: Determine Loop Method (Efficient Native P/Invoke vs. Fallback DoEvents)
					# $useNativeLoop - Flag ($true/$false), $true if Native methods seem available.
					[bool]$useNativeLoop = $false
					Write-Verbose "Detecting availability of Native methods for efficient loop..." -ForegroundColor Cyan
					try
					{
						# Check if the 'Native' type exists and has the key methods we need.
						# Use GetType() which errors if type not found, unlike PSTypeName.
						$nativeType = [type]'Native' # Errors if 'Native' class not loaded.
						if (($nativeType.GetMethod('AsyncExecution')) -and
							($nativeType.GetMethod('PeekMessage')) -and
							($nativeType.GetMethod('TranslateMessage')) -and
							($nativeType.GetMethod('DispatchMessage')))
						{
							Write-Verbose "- [OK] Native P/Invoke methods found (requires 'classes.psm1'). Using efficient message loop." -ForegroundColor Green
							$useNativeLoop = $true
							$loopMethod = 'Native'
						}
						else
						{
							Write-Verbose "- Native class found, but required methods (AsyncExecution, PeekMessage, etc.) are missing. Falling back to DoEvents loop." -ForegroundColor Yellow
							$loopMethod = 'DoEvents'
						}
					}
					catch [System.Management.Automation.RuntimeException]
					{
						# Catch specific error for type not found.
						Write-Verbose "- Native class not found. Falling back to less efficient Application.DoEvents() loop." -ForegroundColor Red
						$loopMethod = 'DoEvents'
					}
					catch
					{
						Write-Verbose "- Error checking for Native methods: $($_.Exception.Message). Falling back to DoEvents loop." -ForegroundColor Red
						$loopMethod = 'DoEvents'
					}
						
					# Make sure WinForms part is loaded if using DoEvents backup.
					if (-not $useNativeLoop)
					{
						Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue # Load if not already loaded.
					}
				#endregion Step: Determine Loop Method (Efficient Native P/Invoke vs. Fallback DoEvents)
					
				#region Step: Run the Chosen Message Loop
					Write-Verbose "Entering message loop (Method: $loopMethod). Loop runs until main form is closed..." -ForegroundColor Cyan
					# Loop keeps going as long as MainForm is valid, visible, and not disposed.
					# Re-check $mainForm validity inside the loop to be safe.
					while ($mainForm -and $mainForm.Visible -and -not $mainForm.IsDisposed)
					{
						if ($useNativeLoop)
						{
							# --- Efficient Native P/Invoke Loop ---
							try
							{
								# Wait efficiently for window messages (QS_ALLINPUT) or a timeout (like 50ms).
								# $result - Return value from AsyncExecution (based on MsgWaitForMultipleObjectsEx).
								# WAIT_OBJECT_0 (0) means a message arrived. WAIT_TIMEOUT (0x102) means timeout.
								$result = [Native]::AsyncExecution(0, [IntPtr[]]@(), $false, 50, [Native]::QS_ALLINPUT) # Timeout 50ms
									
								# If a message arrived (result is not WAIT_TIMEOUT).
								if ($result -ne 0x102) # Compare with decimal value of WAIT_TIMEOUT.
								{
									# Handle all waiting messages currently in the queue.
									# $msg - Structure to hold message details (Native+MSG).
									$msg = New-Object Native+MSG
									# PeekMessage with PM_REMOVE gets and removes message. Loop while messages exist.
									while ([Native]::PeekMessage([ref]$msg, [IntPtr]::Zero, 0, 0, [Native]::PM_REMOVE))
									{
										# Turn virtual-key messages into character messages.
										$null = [Native]::TranslateMessage([ref]$msg)
										# Send the message to the right window handler.
										$null = [Native]::DispatchMessage([ref]$msg)
									}
								}
								# If it was a timeout ($result -eq 0x102), the loop just continues and waits again. Nothing needed.
							}
							catch
							{
								# Catch errors *inside* the native loop run (e.g., P/Invoke call failed).
								Write-Verbose "  Error during Native message loop iteration: $($_.Exception.Message). Attempting to fall back to DoEvents..." -ForegroundColor Red
								$useNativeLoop = $false # Switch to DoEvents for the next loops.
								$loopMethod = 'DoEvents_Fallback'
								Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue # Make sure assembly loaded for backup.
								Start-Sleep -Milliseconds 50 # Add a small pause before maybe starting DoEvents loop next time.
							}
						}
						else # Use Backup DoEvents Loop
						{
							# --- Backup Application.DoEvents() Loop ---
							try
							{
								# Handle all messages currently in the queue. Less efficient as it does everything even if idle.
								[System.Windows.Forms.Application]::DoEvents()
								# Add a small pause to stop this backup loop from using 100% CPU if no messages.
								Start-Sleep -Milliseconds 20 # 20ms pause balances responsiveness and CPU use.
							}
							catch
							{
								# Catch errors during DoEvents() or Start-Sleep.
								Write-Verbose "  Error during DoEvents fallback loop iteration: $($_.Exception.Message). Loop may become unresponsive." -ForegroundColor Red
								# Maybe add longer pause or break if errors keep happening? For now, just log and continue loop.
								Start-Sleep -Milliseconds 100
							}
						}
					} # End while ($mainForm.Visible -and -not $mainForm.IsDisposed)
				#endregion Step: Run the Chosen Message Loop
			}
			catch
			{
				# Catch surprise errors setting up or during the main loop logic (outside the inner try/catch).
				Write-Verbose "  FATAL Error occurred within the UI message loop setup or main structure: $($_.Exception.Message)" -ForegroundColor Red
				# Try a very basic DoEvents loop as a last resort if the main loop structure failed.
				Write-Verbose "  Attempting basic DoEvents fallback loop after critical error..." -ForegroundColor Cyan
				try
				{
					if ($mainForm -and -not $mainForm.IsDisposed)
					{
						Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue 
					}
						
					while ($mainForm -and $mainForm.Visible -and -not $mainForm.IsDisposed)
					{
						[System.Windows.Forms.Application]::DoEvents()
						Start-Sleep -Milliseconds 50 # Slightly longer pause in emergency backup.
					}
				}
				catch
				{
					Write-Verbose "  Emergency fallback DoEvents loop also failed: $($_.Exception.Message)" -ForegroundColor Red
					# At this point, the UI is probably frozen or gone.
				}
			}
			finally
			{
				# This block runs when the message loop stops, either normally (window closed) or due to an error caught above.
				# Log the final state of the main form. Use $? to check if $mainForm variable exists before using its properties.
				if ($mainForm -and ($mainForm -is [System.Windows.Forms.Form]))
				{
					Write-Verbose "UI message loop exited (Method: $loopMethod). Final Form State -> Visible: $($mainForm.Visible), Disposed: $($mainForm.IsDisposed)" -ForegroundColor Cyan
				}
				else
				{
					Write-Verbose "UI message loop exited (Method: $loopMethod). MainForm object appears invalid or null upon exit." -ForegroundColor Yellow
				}
				# Mark UI as not initialized anymore *after* the loop finishes.
				$global:DashboardConfig.State.UIInitialized = $false
			}
		}
	#endregion Function: Start-MessageLoop
		
	#region Function: Stop-Dashboard
		function Stop-Dashboard
		{
			<#
				.SYNOPSIS
					Performs comprehensive cleanup of application resources during shutdown.
				
				.DESCRIPTION
					This function is responsible for gracefully stopping and releasing all resources allocated by the application
					and its modules. It's designed to be called within the main script's `finally` block to ensure cleanup
					happens reliably, even if errors occurred during execution.
					
					Cleanup is performed in a specific order to minimize dependency issues and errors:
					1.  **Ftool Forms:** If the optional 'ftool.psm1' module was loaded and created forms (tracked in `$global:DashboardConfig.Resources.FtoolForms`), it attempts to close and dispose of them. It preferably calls a `Stop-FtoolForm` function (if defined by ftool.psm1) for module-specific cleanup before falling back to basic `.Close()` and `.Dispose()` calls.
					2.  **Timers:** Stops and disposes of all `System.Windows.Forms.Timer` objects registered in `$global:DashboardConfig.Resources.Timers`. Handles nested collections if necessary.
					3.  **Main UI Form:** Disposes of the main application window (`$global:DashboardConfig.UI.MainForm`) if it exists and isn't already disposed.
					4.  **Runspaces & Module Cleanup:**
					*   Disposes of known background runspaces (e.g., `$global:DashboardConfig.Resources.LaunchResources` if used by 'launch.psm1').
					*   Calls specific cleanup functions (e.g., `Stop-ClientLaunch`, `CleanupLogin`, `CleanupFtool`) if they exist (assumed to be defined by the respective modules). These functions are expected to handle module-specific resource release (e.g., closing handles, stopping threads).
					5.  **Application State:** Resets global state flags (`UIInitialized`, `LoginActive`, `LaunchActive`) to $false.
				
				.OUTPUTS
					[bool] Returns $true if all cleanup steps attempted completed without throwing *new* errors during the cleanup process itself.
					Returns $false if any cleanup step encountered an error (logged as a warning). The function attempts to continue subsequent cleanup steps even if one fails.
				
				.NOTES
					- Uses individual `try/catch` blocks around major cleanup sections (Ftool forms, Timers, Main Form, Runspaces/Modules) to ensure robustness. An error in one section should not prevent others from running.
					- Errors encountered *during cleanup* are logged using `Write-Verbose` and cause the function to return $false, but they do not typically halt the entire cleanup process.
					- Relies on modules potentially defining specific cleanup functions (`Cleanup<ModuleName>`) or resources (like `$global:DashboardConfig.Resources.LaunchResources`). These need to be implemented correctly within the modules themselves.
					- The order of operations is important (e.g., dispose child forms before main form, stop timers before disposing forms they might interact with).
				#>
			[CmdletBinding()]
			[OutputType([bool])]
			param()
				
			Write-Verbose "Stopping Dashboard and Cleaning Up Application Resources..." -ForegroundColor Cyan
			# $cleanupOverallSuccess - Flag ($true/$false) to track if *any* cleanup step had an error. Default to true.
			[bool]$cleanupOverallSuccess = $true

			#region Step 0: Clean Up launch recources
			Write-Verbose "Step 0: Cleaning up Launch..." -ForegroundColor Cyan
			Stop-ClientLaunch
			#endregion Step 0: Clean Up launch recources
				
			#region Step 1: Clean Up Ftool Forms (if Ftool module was loaded/used)
				Write-Verbose "Step 1: Cleaning up Ftool forms..." -ForegroundColor Cyan
				try
				{
					# Check if the FtoolForms list exists and has items. Use .PSObject.Properties to check safely.
					$ftoolForms = $global:DashboardConfig.Resources.FtoolForms
					if ($ftoolForms -and $ftoolForms.Count -gt 0)
					{
						# Check if the special cleanup function from ftool.psm1 exists.
						# $stopFtoolFormCmd - FunctionInfo object or null.
						$stopFtoolFormCmd = Get-Command -Name Stop-FtoolForm -ErrorAction SilentlyContinue
						# Make a copy of the keys to loop over, as we change the list during the loop.
						# $formKeys - List of text (form names).
						[string[]]$formKeys = @($ftoolForms.Keys)
						Write-Verbose "- Found $($formKeys.Count) Ftool form(s) registered. Attempting cleanup..." -ForegroundColor DarkGray
							
						foreach ($key in $formKeys)
						{
							# Get the form object safely.
							# $form - The Ftool form object, maybe null or disposed.
							$form = $ftoolForms[$key]
							# Check if it's a valid, non-disposed Windows Form.
							if ($form -and $form -is [System.Windows.Forms.Form] -and -not $form.IsDisposed)
							{
								$formText = try
								{
									$form.Text 
								}
								catch
								{
									'(Error getting text)' 
								} # Get form text safely.
								Write-Verbose "  - Stopping Ftool form '$formText' (Key: $key)." -ForegroundColor Cyan
								try
								{
									# Use the module's special cleanup function if available.
									if ($stopFtoolFormCmd)
									{
										Write-Verbose "  - Using Stop-FtoolForm function..." -ForegroundColor Cyan
										Stop-FtoolForm -Form $form -ErrorAction Stop # Call specific cleanup.
									}
									else # Basic backup cleanup.
									{
										Write-Verbose "  - Stop-FtoolForm command not found. Performing basic Close() for form '$formText'." -ForegroundColor Yellow
										# Ask the form to close nicely. This triggers FormClosing/FormClosed events.
										$form.Close()
										# Give a tiny moment for events to process, maybe not needed but can help sometimes.
										Start-Sleep -Milliseconds 20
									}
								}
								catch # Catch errors specifically from Stop-FtoolForm or Close().
								{
									Write-Verbose "  - Error during Stop-FtoolForm or Close() for form '$formText': $($_.Exception.Message)" -ForegroundColor Red
									# Mark overall cleanup as possibly failed, but continue to make sure Dispose() is called.
									$cleanupOverallSuccess = $false
								}
								finally # Always try to dispose the form directly, whether Close() worked or not.
								{
									Write-Verbose "  - Ensuring Dispose() is called for form '$formText'." -ForegroundColor Cyan
									try
									{
										if (-not $form.IsDisposed)
										{
											$form.Dispose() 
										}
									}
									catch
									{
										Write-Verbose "  - Error during final Dispose() for form '$formText': $($_.Exception.Message)" -ForegroundColor Red
										$cleanupOverallSuccess = $false
									}
								}
							}
							elseif ($form -and $form -is [System.Windows.Forms.Form] -and $form.IsDisposed)
							{
								Write-Verbose "  - Ftool form with Key '$key' was already disposed." -ForegroundColor DarkGray
							}
							else
							{
								Write-Verbose "  - Ftool form entry with Key '$key' is null or not a valid Form object." -ForegroundColor Yellow
								$cleanupOverallSuccess = $false
							}
								
							# Remove the entry from the tracking list after trying cleanup.
							$ftoolForms.Remove($key) | Out-Null
						} # End foreach form key
						Write-Verbose "- Finished Ftool form cleanup." -ForegroundColor Green
					}
					else
					{
						Write-Verbose "  No active Ftool forms found in configuration to clean up." -ForegroundColor DarkGray 
					}
				}
				catch # Catch errors in the Ftool cleanup part setup (e.g., accessing FtoolForms).
				{
					Write-Verbose "Error during Ftool form cleanup phase setup: $($_.Exception.Message)" -ForegroundColor Red
					$cleanupOverallSuccess = $false
				}
			#endregion Step 1: Clean Up Ftool Forms (if Ftool module was loaded/used)
				
			#region Step 2: Clean Up Application Timers
				Write-Verbose "Step 2: Cleaning up application timers..." -ForegroundColor Cyan
				try
				{
					# Check if the Timers list exists and has items.
					$timersCollection = $global:DashboardConfig.Resources.Timers
					if ($timersCollection -and $timersCollection.Count -gt 0)
					{
						Write-Verbose "- Found $($timersCollection.Count) timer registration(s). Stopping and disposing..." -ForegroundColor Cyan
						# Use a temporary list to gather all unique timer objects, handling possible nesting or duplicates.
						# $uniqueTimers - List of separate timer objects.
						[System.Collections.Generic.List[System.Windows.Forms.Timer]]$uniqueTimers = New-Object System.Collections.Generic.List[System.Windows.Forms.Timer]
							
						# Go through the registered items in the Timers list.
						# Items could be single timers, or nested lists (like hashtables) of timers.
						foreach ($item in $timersCollection.Values)
						{
							if ($item -is [System.Windows.Forms.Timer])
							{
								if (-not $uniqueTimers.Contains($item))
								{
									$uniqueTimers.Add($item) 
								}
							}
							elseif ($item -is [System.Collections.IDictionary])
							{
								# If item is another list, go through its values.
								$item.Values | Where-Object { $_ -is [System.Windows.Forms.Timer] } | ForEach-Object {
									if (-not $uniqueTimers.Contains($_))
									{
										$uniqueTimers.Add($_) 
									}
								}
							}
							# Add checks for other possible list types if used (like ArrayList).
						}
						Write-Verbose "- Found $($uniqueTimers.Count) unique System.Windows.Forms.Timer object(s) to dispose." -ForegroundColor Cyan
							
						# Go through the unique timer objects.
						foreach ($timer in $uniqueTimers)
						{
							try
							{
								# Check if timer object is valid and not already disposed.
								if ($timer -and -not $timer.IsDisposed) # Check IsDisposed before accessing properties like Enabled.
								{
									Write-Verbose "  - Disposing timer (Was Enabled: $($timer.Enabled))." -ForegroundColor Green
									# Stop the timer first if it's running now.
									if ($timer.Enabled)
									{
										$timer.Stop() 
									}
									# Dispose of the timer object to free up resources.
									$timer.Dispose()
								}
								else
								{
									Write-Verbose "  - Skipping already disposed or invalid timer object." -ForegroundColor DarkGray
								}
							}
							catch # Catch errors during individual timer Stop() or Dispose().
							{
								Write-Verbose "  - Error stopping or disposing a timer: $($_.Exception.Message)" -ForegroundColor Red
								$cleanupOverallSuccess = $false # Mark overall cleanup as possibly incomplete.
							}
						} # End foreach timer
							
						# Clear the main timer list in the global config after trying disposal.
						Write-Verbose "- Clearing global timer registration collection." -ForegroundColor Cyan
						$timersCollection.Clear()
						Write-Verbose "- Finished timer cleanup." -ForegroundColor Green
					}
					else
					{
						Write-Verbose "- No active timers found in configuration to clean up." -ForegroundColor DarkGray 
					}
				}
				catch # Catch errors in the timer cleanup part setup.
				{
					Write-Verbose "Error during timer cleanup phase setup: $($_.Exception.Message)" -ForegroundColor Red
					$cleanupOverallSuccess = $false
				}
			#endregion Step 2: Clean Up Application Timers
				
			#region Step 3: Clean Up Main UI Form
				Write-Verbose "Step 3: Cleaning up main UI form..." -ForegroundColor Cyan
				try
				{
					# Check if the main form object exists, is a Form, and is not already disposed.
					$mainForm = $global:DashboardConfig.UI.PSObject.Properties['MainForm']
					if ($mainForm -and $mainForm.Value -is [System.Windows.Forms.Form] -and -not $mainForm.Value.IsDisposed)
					{
						Write-Verbose "- Disposing MainForm object..." -ForegroundColor DarkGray
						# Dispose of the main form object. Should trigger its FormClosed event if not already closed.
						$mainForm.Value.Dispose()
						Write-Verbose "- [OK] MainForm disposed." -ForegroundColor Green
					}
					elseif ($mainForm -and $mainForm.Value -is [System.Windows.Forms.Form] -and $mainForm.Value.IsDisposed)
					{
						Write-Verbose "- MainForm was already disposed." -ForegroundColor Yellow
					}
					else
					{
						Write-Verbose "- MainForm object not found or invalid in configuration." -ForegroundColor Yellow
					}
				}
				catch # Catch errors during main form disposal.
				{
					Write-Verbose "Error disposing main UI form: $($_.Exception.Message)" -ForegroundColor Red
					$cleanupOverallSuccess = $false
				}
			#endregion Step 3: Clean Up Main UI Form
				
			#region Step 4: Reset Application State Flags
				Write-Verbose "Step 5: Resetting application state flags..." -ForegroundColor Cyan
				try
				{
					# Reset flags to show the app is no longer active/set up.
					$global:DashboardConfig.State.UIInitialized = $null
					$global:DashboardConfig.State.LoginActive = $null
					$global:DashboardConfig.State.LaunchActive = $null
					$global:DashboardConfig.State.ConfigInitialized = $null
					$global:DashboardConfig.LoadedModules = $null
					Write-Verbose "- State flags reset." -ForegroundColor Green
				}
				catch # Catch errors during state flag resetting.
				{
					Write-Verbose "  Error resetting global state flags: $($_.Exception.Message)" -ForegroundColor Red
					# Continue cleanup even with this small issue.
					$cleanupOverallSuccess = $false
				}
			#endregion Step 4: Reset Application State Flags
					
			#region Step 5: Final Log Message for Cleanup Status
				# Set log color based on overall cleanup success flag.
				# $finalColor - Text, 'Green' for success, 'Yellow' for partial success/warnings.
				[string]$finalColor = if ($cleanupOverallSuccess)
				{
					'Green' 
				}
				else
				{
					'Yellow' 
				}
				Write-Verbose "--- Dashboard Cleanup Finished. Overall Success: $cleanupOverallSuccess ---" -ForegroundColor $finalColor
			#endregion Step 5: Final Log Message
				
			# Return the overall success status of the cleanup actions.
			return $cleanupOverallSuccess
		}
	#endregion Function: Stop-Dashboard

#endregion UI and Application Lifecycle Functions
	
#region Main Execution Block

	# This is the main start point and control flow of the script.
	Write-Verbose "=========================================" -ForegroundColor Cyan
	Write-Verbose "=== Initializing Entropia Dashboard ===" -ForegroundColor Cyan
	Write-Verbose "=== Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ===" -ForegroundColor Cyan
	Write-Verbose "=========================================" -ForegroundColor Cyan
		
	# Main try/catch/finally block to manage the app life cycle and ensure cleanup.
	try
	{
		#region Step 1: Ensure Correct Execution Environment (Admin, 32-bit, Bypass Policy)
			Write-Verbose "--- Step 1: Ensuring Correct Execution Environment ---" -ForegroundColor Cyan
			# Request-Elevation checks and might restart the script. If it restarts, this one exits here.
			Request-Elevation
			# If script continues, Request-Elevation decided no restart needed OR restart failed (error shown, exited).
			# Initialize-ScriptEnvironment does final checks *after* possible restart.
			if (-not (Initialize-ScriptEnvironment))
			{
				# If checks fail even after possible restart try, throw a major error. Show-ErrorDialog was probably called inside.
				throw 'Environment verification failed (Admin/32-bit/Bypass). Cannot continue.'
			}
			Write-Verbose "[OK] Environment verified successfully." -ForegroundColor Green
		#endregion Step 1: Ensure Correct Execution Environment (Admin, 32-bit, Bypass Policy)
			
		#region Step 2: Initialize Base Configuration (AppData Paths)
			Write-Verbose "--- Step 2: Initializing Base Configuration (AppData Paths) ---" -ForegroundColor Cyan
			if (-not (Initialize-BaseConfig))
			{
				# If essential paths can't be made/checked writable, throw major error. Show-ErrorDialog probably called inside.
				throw 'Failed to initialize base application paths in %APPDATA%. Cannot continue.'
			}
			Write-Verbose "[OK] Base configuration paths initialized successfully." -ForegroundColor Green
		#endregion Step 2: Initialize Base Configuration (AppData Paths)
			
		#region Step 3: Load Dashboard Modules (Write to AppData & Import)
			Write-Verbose "--- Step 3: Loading Dashboard Modules ---" -ForegroundColor Cyan
			# $importResult - PSCustomObject holding Status, LoadedModules, FailedModules, CriticalFailure.
			$importResult = Import-DashboardModules
			# $global:DashboardConfig.LoadedModules is updated directly inside Import-DashboardModules.
				
			# Check if the import process reported overall failure (specifically critical failure).
			if (-not $importResult.Status) # Status is false if CriticalFailure is true or an unhandled error happened.
			{
				# If critical modules failed, throw major error. Error details logged inside Import-DashboardModules.
				throw 'Critical module loading failed. Cannot continue.'
			}
			# Non-critical failures were logged as warnings/info inside Import-DashboardModules.
			Write-Verbose "[OK] Core modules loaded successfully (Non-critical failures may exist, see logs)." -ForegroundColor Green
		#endregion Step 3: Load Dashboard Modules (Write to AppData & Import)
			
		#region Step 4: Load INI Configuration File
			Write-Verbose "--- Step 4: Loading INI Configuration ---" -ForegroundColor Cyan
			# Check if the Initialize-IniConfig function (expected from ini.psm1) is available.
			if (Get-Command Initialize-IniConfig -ErrorAction SilentlyContinue) # Just use Get-Command
			{
				Write-Verbose "Calling Initialize-IniConfig..." -ForegroundColor Cyan
				try
				{
					# Run the INI loading function. Assuming it returns true/false or handles errors itself.
					[bool]$iniLoadSuccess = Initialize-IniConfig -ErrorAction Stop # Call directly
					if (-not $iniLoadSuccess)
					{
						# Log a warning if INI loading fails (as function reported), but continue with defaults.
						Write-Verbose "  Initialize-IniConfig reported failure. Default configuration values may be used." -ForegroundColor Yellow
					}
					else
					{
						Write-Verbose "[OK] INI configuration loaded successfully." -ForegroundColor Green 
					}
				}
				catch
				{
					Write-Verbose "  Error occurred during Initialize-IniConfig execution: $($_.Exception.Message). Default configuration values may be used." -ForegroundColor Yellow
				}
			}
			else
			{
				# Log a warning if the function is missing
				Write-Verbose "  Initialize-IniConfig function not found. Skipping INI load, defaults will be used." -ForegroundColor Yellow
			}
		#endregion Step 4: Load INI Configuration File
			
		#region Step 5: Start Dashboard User Interface
			Write-Verbose "--- Step 5: Starting Dashboard UI ---" -ForegroundColor Cyan
			# Start-Dashboard sets up and shows the main window. It errors out on failure.
			if (-not (Start-Dashboard)) # This check is a bit extra as Start-Dashboard errors on failure, but safe.
			{
				# Error should have been thrown by Start-Dashboard and caught by outer catch block.
				# This throw might not be reached but makes sure script stops if Start-Dashboard somehow returned false without erroring.
				throw 'Start-Dashboard returned failure. Cannot continue.'
			}
			Write-Verbose "[OK] Dashboard UI started successfully." -ForegroundColor Green
		#endregion Step 5: Start Dashboard User Interface
			
		#region Step 6: Run UI Message Loop
			Write-Verbose "--- Step 6: Running UI Message Loop ---" -ForegroundColor Cyan
			# Start-MessageLoop pauses execution here until the main UI window is closed by user or code.
			# It handles UI responsiveness.
			Start-MessageLoop
			# Execution continues here only *after* the UI message loop has stopped (main window closed/disposed).
			Write-Verbose "UI Message loop finished. Proceeding to final cleanup..." -ForegroundColor Green
		#endregion Step 6: Run UI Message Loop
	}
	catch
	{
		# --- Main Catch Block ---
		# Catches any unhandled major errors from the main setup or run steps (Steps 1-6).
		$errorMessage = "`nFATAL UNHANDLED ERROR during application lifecycle: $($_.Exception.Message)"
		Write-Verbose $errorMessage -ForegroundColor Red
			
		# Try showing the critical error in a pop-up box for the user to see.
		try
		{
			Show-ErrorDialog ($errorMessage + "`n`nPlease check console logs for details.`n`nStack Trace:`n" + $($_.ScriptStackTrace))
		}
		catch
		{
			# If even the error pop-up fails, log that failure to the error output.
			Write-Verbose "  Failed to show final error dialog. The critical error was: $errorMessage" -ForegroundColor Red
		}
		# App will then go to the 'finally' block for cleanup.
	}
	finally
	{
		# --- Main Finally Block ---
		# This block *always* runs, whether the 'try' block finished okay,
		# threw an error caught by 'catch', or quit early via 'exit' (though cleanup after 'exit' can be iffy).
		# Very important to make sure resource cleanup happens.
		#region Step 7: Final Application Cleanup
			Write-Verbose "--- Step 7: Entering Final Application Cleanup ---" -ForegroundColor Cyan
			# Make sure Stop-Dashboard function exists before calling it.
			if (Get-Command Stop-Dashboard -ErrorAction SilentlyContinue)
			{
				# Call the main cleanup function.
				$cleanupStatus = Stop-Dashboard # Save return status (true/false) if needed.
				Write-Verbose "[OK] Stop-Dashboard execution completed (Overall Success: $cleanupStatus)." -ForegroundColor Green
			}
			else
			{
				# Log a warning if the main cleanup function is missing (shouldn't happen if modules loaded).
				Write-Verbose "  Stop-Dashboard function not found! Full resource cleanup may not occur." -ForegroundColor Yellow
				# Try minimal essential backup cleanup if possible (like dispose main form).
				Write-Verbose "  Attempting basic MainForm dispose as fallback..." -ForegroundColor Cyan
				try
				{
					$finalMainForm = $global:DashboardConfig.UI.PSObject.Properties['MainForm']
					if ($finalMainForm -and $finalMainForm.Value -is [System.Windows.Forms.Form] -and -not $finalMainForm.Value.IsDisposed)
					{
						$finalMainForm.Value.Dispose()
						Write-Verbose "  Fallback MainForm dispose successful." -ForegroundColor Red
					}
					else
					{
						Write-Verbose "  Fallback MainForm dispose skipped (form null, invalid, or already disposed)."  -ForegroundColor Red
					}
				}
				catch
				{
					Write-Verbose "  Fallback MainForm dispose attempt failed: $($_.Exception.Message)"  -ForegroundColor Red
				}
			}
				
			# Optional: Explicitly exit the Windows Forms app context if it was used.
			# Check if the assembly is loaded before calling Application static methods.
			if ([System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms'))
			{
				Write-Verbose "Requesting Windows Forms application context exit..." -ForegroundColor Cyan
				try
				{
					[System.Windows.Forms.Application]::ExitThread() 
				}
				catch
				{
					Write-Verbose "  Error calling Application.ExitThread(): $($_.Exception.Message)" -ForegroundColor Red
				} # ExitThread is often better in PS scripts than Exit().
				# try { [System.Windows.Forms.Application]::Exit() } catch { Write-Verbose "Error calling Application.Exit(): $($_.Exception.Message)"} -ForegroundColor Red
			}
				
			Write-Verbose "=========================================" -ForegroundColor Cyan
			Write-Verbose "=== Entropia Dashboard Exited ===" -ForegroundColor Cyan
			Write-Verbose "=== Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ===" -ForegroundColor Cyan
			Write-Verbose "=========================================" -ForegroundColor Cyan
		#endregion Step 7: Final Application Cleanup
	}

#endregion Main Execution Block