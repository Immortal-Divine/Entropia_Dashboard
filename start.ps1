<# start.ps1
	.SYNOPSIS
		Initializes and launches the Entropia Dashboard application.

	.DESCRIPTION
		This script serves as the main entry point for the Entropia Dashboard. It performs critical environment checks,
		including Administrator rights verification, ensuring 32-bit execution context, and setting the required PowerShell
		Execution Policy ('Bypass') for the current process. It establishes necessary application paths within the user's
		AppData directory. The script manages the deployment and loading of PowerShell modules (.psm1) and associated
		resources (.dll, .ico) from the source directory or Base64 content to the AppData directory, respecting defined load 
		order and dependencies. It includes robust fallback mechanisms for module loading, particularly for scenarios where 
		the	script might be running in different environments. Configuration settings are loaded from 'config.ini',
		with defaults applied if the file or specific settings are missing. Finally, it initializes the Windows Forms
		user interface (UI), runs the application message loop to keep the UI responsive, and handles graceful
		shutdown and resource cleanup via the 'finally' block and the Stop-Dashboard function.

	.NOTES
		Author: Immortal / Divine
		Version: 1.1.3
		Requires: PowerShell 5.1+, .NET Framework 4.5+, Administrator privileges, Bypassed 32-bit PowerShell execution.

		Documentation Standards Followed:
		- Module Level Documentation: Synopsis, Description, Notes.
		- Function Level Documentation: Synopsis, Parameter Descriptions, Output Specifications.
		- Code Organization: Logical grouping using #region / #endregion. Functions organized by workflow.
		- Step Documentation: Code blocks enclosed in '#region Step: Description' / '#endregion Step: Description'.
		- Variable Definitions: Inline comments describing the purpose of significant variables.
		- Error Handling: Comprehensive try/catch/finally blocks with verbose logging and user notification on critical failure.

		Execution Policy Note: This script requires and attempts to set the execution policy to 'Bypass' for the *current process*.
		This is necessary for its dynamic module loading and execution features but reduces script execution security restrictions.
		Ensure you understand the implications before running this script in sensitive environments.

		Invoke-Expression Note: The fallback module import methods uses Invoke-Expression. This cmdlet
		can execute arbitrary code and poses a security risk if the module content is compromised.
#>

#region Custom Write-Verbose

[CmdletBinding()]
param()

#region Step: Detect -Verbose argument when running as EXE/Script
	# If -Verbose is passed as a command-line argument, manually set the $VerbosePreference. 
	if ($args -contains '-Verbose') {
		$VerbosePreference = "Continue"
		Write-Verbose "-Verbose argument detected, enabling verbose preference."
	}
#endregion Step: Detect -Verbose argument when running as EXE/Script

Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force -ErrorAction Stop

function Write-Verbose {
	[CmdletBinding()]
	param(
	[Parameter(Mandatory = $true, Position = 0)]
	[string]$Message,
	[string]$ForegroundColor = 'DarkGray'
	)
	
	# Only proceed if verbose output is enabled
	if ($VerbosePreference -eq "Continue") {
		$dateStr = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
		$callStack = Get-PSCallStack
		$caller = if ($callStack.Count -gt 1) { $callStack[1] } else { $callStack[0] }
		
		$callerName = if ($caller.Command) { $caller.Command } else { "Script" }
		
		$bracketedCaller = "[$callerName]"
		$paddedCaller = $bracketedCaller.PadRight(35)
		$prefix = " | $dateStr - $paddedCaller - "
		$indentation = " " * $prefix.Length + "| "
		
		# Get console width for proper wrapping
		$consoleWidth = if ($Host.UI.RawUI.WindowSize.Width -gt 800) {
			$Host.UI.RawUI.WindowSize.Width # Use actual width if available
		} else {
			800 # Default fallback width if console width can't be determined or is to small
		}
		# Ensure consoleWidth is an integer for calculations
		try {
			$consoleWidth = [int]$consoleWidth
		} catch {
			$consoleWidth = 800 # Fallback if conversion fails
		}

		# Process message with proper wrapping and indentation
		$lines = $Message -split "`r`n"
		$formattedLines = @()
		
		# Calculate available width for text once
		$availableWidth = $consoleWidth - $prefix.Length - 5 # Subtract 2 for potential padding/margin

		foreach ($line in $lines) {
			# If line is shorter than available width, add it as-is
			if ($line.Length -le $availableWidth) {
				$formattedLines += $line
			} else {
				# For long lines, wrap them with proper word breaks
				$words = $line -split ' '
				$currentLine = ""
				
				foreach ($word in $words) {
					# Check if adding this word would exceed the line length
					if (($currentLine.Length + $word.Length + 1) -le $availableWidth) {
						# Add word with space
						if ($currentLine.Length -gt 0) {
							$currentLine += " $word"
						} else {
							$currentLine = $word
						}
					} else {
						# Line would be too long, add current line to results and start a new one
						if ($currentLine.Length -gt 0) {
							$formattedLines += $currentLine
							$currentLine = $word
						} else {
							# Word itself is too long for a line, add it anyway (might still overflow slightly)
							$formattedLines += $word
							$currentLine = ""
						}
					}
				}
				
				# Add the last line if not empty
				if ($currentLine.Length -gt 0) {
					$formattedLines += $currentLine
				}
			}
		}
		
		# Join lines with proper indentation for wrapped lines
		$formattedMessage = ""
		if ($formattedLines.Count -gt 0) {
			$formattedMessage = $formattedLines[0]
			for ($i = 1; $i -lt $formattedLines.Count; $i++) {
				$formattedMessage += "`r`n$indentation$($formattedLines[$i])"
			}
		}
		
		# Set color based on message type
		$color = switch ($ForegroundColor.ToLower()) {
			'red'    { [ConsoleColor]::Red }
			'yellow' { [ConsoleColor]::Yellow }
			'green'  { [ConsoleColor]::Green }
			'cyan'   { [ConsoleColor]::Cyan }
			default  { [ConsoleColor]::DarkGray }
		}

		# Output to console with color
		$originalColor = $host.UI.RawUI.ForegroundColor
		try {
			$host.UI.RawUI.ForegroundColor = $color
			# Write to Error stream to ensure it appears like standard Write-Verbose
			[Console]::Error.WriteLine("$prefix$formattedMessage")
		} finally {
			$host.UI.RawUI.ForegroundColor = $originalColor
		}
		
		# Also write to the verbose stream for proper logging/capture
		$wrappedCmdlet = $ExecutionContext.InvokeCommand.GetCommand(
		"Microsoft.PowerShell.Utility\Write-Verbose",
		[System.Management.Automation.CommandTypes]::Cmdlet
		)
		
		# Use steppable pipeline
		$scriptCmd = { & $wrappedCmdlet "$prefix$formattedMessage" }
		$steppablePipeline = $scriptCmd.GetSteppablePipeline()
		$steppablePipeline.Begin($true)
		# Ensure pipeline output is ended if necessary
		$steppablePipeline.End() # Ensure pipeline completes
	}
}

try {
	Add-Type -AssemblyName System.Windows.Forms, System.Drawing
	Write-Verbose "INFO: Loaded System.Windows.Forms and System.Drawing assembly" # This will now work if -Verbose was passed
} catch {
	# Use the custom Write-Verbose for consistency, it checks $VerbosePreference internally
	Write-Verbose "ERROR: Failed to load required assemblies: $_" -ForegroundColor Red
	throw "Failed to initialize application. Required assemblies could not be loaded: $_"
}

#endregion Custom Write-Verbose

#region Global Configuration

#region Step: Define Global Configuration Hashtable
	# This main hashtable holds all our settings, states, paths, resources, and module info. It's available everywhere in the script.
	$global:DashboardConfig = @{
		# Paths: Stores important folders and file locations for the app.
		Paths            = @{
			# Source: Folder with the dashboard's source scripts (.ps1, .psm1) and things like .dlls or .icos. Usually in the user's profile.
			Source   = Join-Path $env:USERPROFILE 'Entropia_Dashboard\.main'
			# App: The main app data folder in AppData\Roaming. We put modules, config files, and maybe logs here.
			App      = Join-Path $env:APPDATA 'Entropia_Dashboard\'
			# Modules: Subfolder in the AppData path. Write-Module puts module files (.psm1), libraries (.dll), and icons (.ico) here before loading them.
			Modules  = Join-Path $env:APPDATA 'Entropia_Dashboard\modules'
			# Icon: Full path to the app's icon file (.ico) for the main window. It should end up in the Modules folder.
			Icon     = Join-Path $env:APPDATA 'Entropia_Dashboard\modules\icon.ico'
			# FtoolDLL: Full path to ftool.dll, needed if the optional 'ftool.psm1' module is used. Should also be in the Modules folder.
			FtoolDLL = Join-Path $env:APPDATA 'Entropia_Dashboard\modules\ftool.dll'
			# Config: Full path to the main settings file ('config.ini'). Saves user choices and app settings. Found in the main AppData folder.
			Ini   = Join-Path $env:APPDATA 'Entropia_Dashboard\config.ini'
		}
		# State: Keeps track of what the application is doing right now.
		State            = @{
			# ConfigInitialized: Flag ($true/$false) to check if basic setup (like creating app folders) worked.
			ConfigInitialized   = $false
			# UIInitialized: Flag ($true/$false) to see if the main window was set up correctly by 'ui.psm1'.
			UIInitialized       = $false
			# LoginActive: Flag ($true/$false) showing if an auto-login (from 'login.psm1') is running. Prevents doing it twice.
			LoginActive         = $false
			# LaunchActive: Flag ($true/$false) showing if a game launch (from 'launch.psm1') is happening. Prevents double launches.
			LaunchActive        = $false
			# PreviousLaunchState: Flag ($true/$false) showing if a game launch (from 'launch.psm1') happened.
			PreviousLaunchState = $false
			# PreviousLoginState: Flag ($true/$false) showing if a game login (from 'login.psm1') happened.
			PreviousLoginState  = $false
			# IsRunningAsExe: Flag ($true/$false) figured out at start. True if running as an .exe, not a .ps1 script. Changes how modules load.
			IsRunningAsExe      = $false
			IsDragging 			= $false
		}
		# Resources: Groups for handling things that change, like timers, windows, and shared info.
		Resources        = @{
			# Timers: An ordered list ([ordered]@{...}) holding active timers (System.Windows.Forms.Timer) used by the app or modules. Stopped/cleaned up on exit.
			Timers              = [ordered]@{}
			# FtoolForms: An ordered list ([ordered]@{...}) keeping track of active Ftool windows (from 'ftool.psm1'). Closed/cleaned up on exit.
			FtoolForms          = [ordered]@{}
			# LastEventTimes: A list (@{...}) remembering when named events last happened. Good for slowing down or grouping actions in modules.
			LastEventTimes      = @{}
			# ExtensionData: A general list (@{...}) for modules/extensions to store and share any data needed across the app.
			ExtensionData       = @{}
			# ExtensionTracking: A list (@{...}) for modules/extensions to track things like status flags, process IDs, or other state info.
			ExtensionTracking   = @{}
			# LoadedModuleContent: A list (@{...}) holding the actual text content of loaded .psm1 modules. Mainly for backup loading methods or debugging.
			LoadedModuleContent = @{}
			# LaunchResources: A list (@{...}) for the launch module to store resources specific to launching game clients.
			LaunchResources     = @{}
			DragSourceGrid 		= $null
		}
		# UI: Empty list (@{...}) filled by 'ui.psm1' when the UI starts. Holds references to important UI parts (windows, buttons, grids).
		UI               = @{
			Login        = @{}
		}
		# DefaultConfig: An ordered list ([ordered]@{...}) with default settings. Used by 'ini.psm1' if 'config.ini' is missing or incomplete.
		DefaultConfig    = [ordered]@{
			'LauncherPath' = [ordered]@{ 'LauncherPath' = 'Select_Launcher' } # Default if the game launcher path isn't in config.ini.
			'ProcessName'  = [ordered]@{ 'ProcessName' = 'neuz' }         # Default game process name to watch or use.
			'MaxClients'   = [ordered]@{ 'MaxClients' = '1' }                # Default max number of game clients allowed.
			'Login'        = [ordered]@{ 'Login' = '1,1,1,1,1,1,1,1,1,1'; 'FinalizeCollectorLogin' = '0'; 'NeverRestartingCollectorLogin' = '0' }             # Default list of login settings (format depends on 'login.psm1').
			'Ftool'        = [ordered]@{}                                    # Default empty section for 'ftool.psm1' related settings.
		}
		# Config: An ordered list ([ordered]@{...}) filled by 'ini.psm1' with settings from 'config.ini'. Overwrites defaults.
		Config           = [ordered]@{}
		# ConfigWriteTimer: Might hold a timer used by 'ini.psm1' to delay saving 'config.ini' often. Better performance, less disk activity.
		ConfigWriteTimer = @{}
		# LoadedModules: A list (@{...}) tracking filenames and full paths of modules that were written to AppData and/or loaded. Used for checking dependencies.
		LoadedModules    = @{}
	}
#endregion Step: Define Global Configuration Hashtable

#region Step: Define Module Metadata
	# Info about all known app modules: load order, importance (critical?), dependencies, and source file path.
	$global:DashboardConfig.Modules = @{
		# Critical modules: Must have these for the dashboard to work. If they fail, the app won't start.
		'ftool.dll'     = @{ 
			Priority = 'Critical';  
			Order = 1; 
			Dependencies = @();
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ftool.dll');
			Base64Content = '
				
			'
		}
		'icon.ico'      = @{ 
			Priority = 'Critical';  
			Order = 2; 
			Dependencies = @();
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'icon.ico');
			Base64Content = '
				AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAAAAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AgIC/wICAv8CAgL/BAQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wUEAv8FBAL/BQQC/wQEAv8CAgL/AgIC/wICAv8DAwP/AwMD/wMDA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8GBgP/BQUD/wUEA/8NDgP/DQ4D/wUEA/8FBQP/BgYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BwYD/wcGA/8HBgP/BgYD/wMDA/8DAwP/AwMD/wQEBP8EBAT/BAQE/wMDBP8DAwT/AwME/wMDBP8DAwT/AwME/wQFBP8CAwT/BQQE/xIPA/8jHQP/LiUD/zo0A/86NAP/LiUD/yMdA/8SDwP/BQQE/wIDBP8EBQT/AwME/wMDBP8DAwT/AwME/wMDBP8DAwT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8DAwT/EBME/ycmBP84LQP/OC0E/ykhBP8cFwT/FxME/xcTBP8cFwT/KSEE/zgtBP84LQP/JyYE/xATBP8DAwT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BAQF/w0MBf83LgT/OjIE/xYSBf8JCgX/Cw0F/w4QBf8PEQX/DhEF/w4QBf8LDQX/CQoF/xYSBf86MgT/OC4E/w0MBf8EBAX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wYGBv8GBgb/BgYG/wYGBv8GBgb/BgYG/wUFBv8SEAb/PjIF/yMdBf8JCQb/DxIG/xETBv8MDgb/CQoG/wgJBv8ICQb/CQoG/wwOBv8REwb/DxIG/wkJBv8jHQX/PjIF/xIQBv8FBQb/BgYG/wYGBv8GBgb/BgYG/wYGBv8GBgb/BwcH/wcHB/8HBwf/BwcH/wcHB/8GBgf/Dw0H/z4zBf8dGAb/CwwH/xIVBv8MDQf/BwcH/wYGB/8HBwf/BwcH/wcHB/8HBwf/BgYH/wcHB/8MDQf/EhUG/wsMB/8dGAb/PjMF/w8NB/8GBgf/BwcH/wcHB/8HBwf/BwcH/wcHB/8ICAj/CAgI/wgICP8ICAj/CQkI/xMWB/85MAb/JR4H/wsNCP8TFgf/CQoI/wgHCP8ICAj/CAgI/wgICP8ICAj/CAgI/wgICP8ICAj/CAgI/wgHCP8JCgj/ExYH/wsNCP8lHgf/OTAG/xMWB/8JCQj/CAgI/wgICP8ICAj/CAgI/wkJCf8JCQn/CQkJ/wkJCf8ICAn/KykH/z01B/8LDAn/FBcI/woKCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8KCgn/FBcI/wsMCf89NQf/KykH/wgICf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/woKCf88MQf/GRYI/xIVCf8ODwn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8JCQn/CQkJ/wkJCf8ODwn/EhUJ/xkWCP88MQf/CgoJ/wkJCf8JCQn/CQkJ/wkJCf8KCgr/CgoK/woKCv8JCQr/GBUJ/zwyCP8ODgr/FRcK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8UFwr/Dg4K/zwyCP8YFQn/CQkK/woKCv8KCgr/CgoK/wsLC/8LCwv/CwsL/wkKC/8qIwr/LiYJ/xATC/8REwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/wsLC/8LCwv/CwsL/xETC/8QEgv/LiYJ/yojCv8JCgv/CwsL/wsLC/8LCwv/DAwM/wwMDP8MDAz/CgoM/zUsCv8jHgv/FBcL/w8QDP8MDAz/DAwM/wwMDP8MDAz/DAwM/wwMDP8MDAz/CwoM/wsKDP8MDAz/DAwM/wwMDP8MDAz/DAwM/wwMDP8MDAz/DxAM/xQXC/8jHgv/NSwK/woKDP8MDAz/DAwM/wwMDP8NDQ3/DQ0N/w0NDf8SFQ3/QTsK/x4bDP8WGQz/Dw8N/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/wwMDf9JWQn/SVkJ/wwMDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/w0NDf8PEA3/FxoM/x4bDP9BOwr/EhUN/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/xMVDf9COwr/HhsM/xYZDP8PDw3/DQ0N/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/CwoN/1ltCP9ZbQj/CwoN/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/DQ0N/w8QDf8XGgz/HhsM/0I7Cv8TFQ3/DQ0N/w0NDf8NDQ3/Dg4O/w4ODv8ODg7/DAwO/zYuDP8lIA3/FhkN/xESDv8ODg7/Dg4O/w4ODv8ODg7/Dg4O/w4ODv8MCw7/Mz0L/zM9C/8MCw7/Dg4O/w4ODv8ODg7/Dg4O/w4ODv8ODg7/ERIO/xYZDf8lIA3/Ni4M/wwMDv8ODg7/Dg4O/w4ODv8PDw//Dw8P/w8PD/8NDg//LScN/zEqDf8UFg//FRcO/w8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w0MD/81Pwz/NT8M/w0MD/8PDw//Dw8P/w8PD/8PDw//Dw8P/w8PD/8VFw//FBYP/zEqDf8tJw3/DQ4P/w8PD/8PDw//Dw8P/xAQEP8QEBD/EBAQ/w8PEP8eGw//QTYN/xMUEP8aHQ//EBAQ/xAQEP8QEBD/EBAQ/xAQEP8QEBD/Dg0Q/zZADf82QA3/Dg0Q/xAQEP8QEBD/EBAQ/xAQEP8QEBD/EBAQ/xodD/8TFBD/QTYN/x4bD/8PDxD/EBAQ/xAQEP8QEBD/ERER/xEREf8RERH/ERER/xISEf9CNw3/IB0Q/xkcEP8VFhD/ERER/xEREf8RERH/ERER/xEREf8PDhH/NkAO/zZADv8PDhH/ERER/xEREf8RERH/ERER/xEREf8VFhD/GRwQ/yAdEP9CNw3/EhIR/xEREf8RERH/ERER/xEREf8RERH/ERER/xEREf8RERH/EBAR/zIxD/9EPA7/FBUR/xwfEP8TExH/ERER/xEREf8RERH/ERER/w8OEf82QA7/NkAO/w8OEf8RERH/ERER/xEREf8RERH/ExMR/xwfEP8UFBH/RDwO/zIxD/8QEBH/ERER/xEREf8RERH/ERER/xISEv8SEhL/EhIS/xISEv8TExL/HSAR/0I5D/8uKBD/FhgS/x0gEf8UFBL/EhIS/xISEv8SEhL/EA8S/zdBDv83QQ7/EA8S/xISEv8SEhL/EhIS/xQUEv8dIBH/FhcS/y4oEP9COQ//HSAR/xMTEv8SEhL/EhIS/xISEv8SEhL/ExMT/xMTE/8TExP/ExMT/xMTE/8SEhP/GxkS/0g8D/8oIxH/FxgT/x4hEv8XGRP/ExMT/xMTE/8REBP/OEIP/zhCD/8REBP/ExMT/xMTE/8XGRP/HiES/xcYE/8oIxH/SDwP/xsZEv8SEhP/ExMT/xMTE/8TExP/ExMT/xMTE/8UFBT/FBQU/xQUFP8UFBT/FBQU/xQUFP8TExT/IB0T/0k9D/8vKRL/FhcU/xwfE/8eIRP/GhwT/xUVFP87RRD/O0UQ/xUVFP8aHBP/HiAT/xwfE/8WFxT/LykS/0k9D/8gHRP/ExMU/xQUFP8UFBT/FBQU/xQUFP8UFBT/FBQU/xUVFf8VFRX/FRUV/xUVFf8VFRX/FRUV/xUVFf8UFBX/HBsU/0Q7EP9GPhD/JCAT/xgZFP8aHBT/Gx0U/zpFEP87RhD/Gx0U/xocFP8YGRT/JCAT/0Y+EP9EOxD/HBsU/xQUFf8VFRX/FRUV/xUVFf8VFRX/FRUV/xUVFf8VFRX/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8VFBb/ICMV/zY0Ev9FOxH/RTsR/zcvEv8rJhT/KSYU/ykmFP8rJhT/Ny8S/0U7Ef9FOxH/NjQS/yAjFP8VFBb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8XFxb/FRYW/xcXFv8kIRX/NC0U/z01E/9JQhH/SUIR/z41E/80LRT/JCEV/xcXFv8VFhb/FxcW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FhYW/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xYXF/8VFhf/FRUX/xwfFv8cHxb/FRUX/xUWF/8WFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/FxcX/xcXF/8XFxf/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8YGBj/GBgY/xgYGP8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xkZGf8ZGRn/GRkZ/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/Ghoa/xoaGv8aGhr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
			'
		}
		'classes.psm1'  = @{ 
			Priority = 'Critical';  
			Order = 3; 
			Dependencies = @();
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'classes.psm1');
			Base64Content = '
				
			'
		}
		'ini.psm1'      = @{ 
			Priority = 'Critical';  
			Order = 4; 
			Dependencies = @('classes.psm1');
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ini.psm1');
			Base64Content = '
				PCMgaW5pLnBzbTENCiAgICAuU1lOT1BTSVMNCiAgICAgICAgSU5JIENvbmZpZ3VyYXRpb24gTWFuYWdlbWVudCBNb2R1bGUgZm9yIEVudHJvcGlhIERhc2hib2FyZC4NCiAgICAuREVTQ1JJUFRJT04NCiAgICAgICAgVGhpcyBQb3dlclNoZWxsIG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdG8gaGFuZGxlIGNvbmZpZ3VyYXRpb24gZmlsZSBvcGVyYXRpb25zDQogICAgICAgIChyZWFkaW5nIGFuZCB3cml0aW5nIElOSSBmaWxlcykgZm9yIHRoZSBFbnRyb3BpYSBEYXNoYm9hcmQgYXBwbGljYXRpb24uDQogICAgICAgIEl0IGludGVyYWN0cyB3aXRoIHRoZSBnbG9iYWwgZGFzaGJvYXJkIGNvbmZpZ3VyYXRpb24gc3RhdGUgYW5kIHV0aWxpemVzIHRoZQ0KICAgICAgICBjdXN0b20gQyMgJ0luaUZpbGUnIGNsYXNzIChkZWZpbmVkIGluIGNsYXNzZXMucHNtMSkgZm9yIGZpbGUgcGFyc2luZyBhbmQgd3JpdGluZy4NCg0KICAgICAgICBLZXkgRnVuY3Rpb25zOg0KICAgICAgICAtIEluaXRpYWxpemUtSW5pQ29uZmlnOiBFbnN1cmVzIHRoZSBtYWluIGNvbmZpZ3VyYXRpb24gZmlsZSBleGlzdHMgYW5kIGlzIHBvcHVsYXRlZCB3aXRoIG5lY2Vzc2FyeSBkZWZhdWx0cy4NCiAgICAgICAgLSBSZWFkLUNvbmZpZzogUmVhZHMgdGhlIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgSU5JIGZpbGUgaW50byB0aGUgZ2xvYmFsIHN0YXRlLg0KICAgICAgICAtIFdyaXRlLUNvbmZpZzogV3JpdGVzIHRoZSBjdXJyZW50IGdsb2JhbCBjb25maWd1cmF0aW9uIHN0YXRlIGJhY2sgdG8gdGhlIElOSSBmaWxlLg0KICAgICAgICAtIEdldC1JbmlGaWxlQ29udGVudDogUmVhZHMgYW4gYXJiaXRyYXJ5IElOSSBmaWxlIGludG8gYSBQb3dlclNoZWxsIE9yZGVyZWREaWN0aW9uYXJ5Lg0KICAgICAgICAtIENvcHktT3JkZXJlZERpY3Rpb25hcnk6IEhlbHBlciB0byBkZWVwLWNvcHkgb3JkZXJlZCBkaWN0aW9uYXJpZXMuDQogICAgLk5PVEVTDQogICAgICAgIEF1dGhvcjogSW1tb3J0YWwgLyBEaXZpbmUNCiAgICAgICAgVmVyc2lvbjogMS4xLjMNCiAgICAgICAgUmVxdWlyZXM6DQogICAgICAgIC0gUG93ZXJTaGVsbCA1LjErDQogICAgICAgIC0gLk5FVCBGcmFtZXdvcmsgNC41Kw0KICAgICAgICAtIEVudHJvcGlhX0Rhc2hib2FyZCBtb2R1bGUgJ2NsYXNzZXMucHNtMScgKGZvciB0aGUgSW5pRmlsZSBDIyBjbGFzcykNCiAgICAgICAgLSBFbnRyb3BpYV9EYXNoYm9hcmQgZ2xvYmFsIHZhcmlhYmxlICckZ2xvYmFsOkRhc2hib2FyZENvbmZpZycgKGV4cGVjdGVkIHN0cnVjdHVyZSkNCg0KICAgICAgICBEb2N1bWVudGF0aW9uIFN0YW5kYXJkcyBGb2xsb3dlZDoNCiAgICAgICAgLSBNb2R1bGUgTGV2ZWwgRG9jdW1lbnRhdGlvbjogU3lub3BzaXMsIERlc2NyaXB0aW9uLCBOb3Rlcy4NCiAgICAgICAgLSBGdW5jdGlvbiBMZXZlbCBEb2N1bWVudGF0aW9uOiBTeW5vcHNpcywgUGFyYW1ldGVyIERlc2NyaXB0aW9ucywgT3V0cHV0IFNwZWNpZmljYXRpb25zLg0KICAgICAgICAtIENvZGUgT3JnYW5pemF0aW9uOiBMb2dpY2FsIGdyb3VwaW5nIHVzaW5nICNyZWdpb24gLyAjZW5kcmVnaW9uLiBGdW5jdGlvbnMgb3JnYW5pemVkIGJ5IHdvcmtmbG93Lg0KICAgICAgICAtIFN0ZXAgRG9jdW1lbnRhdGlvbjogQ29kZSBibG9ja3MgZW5jbG9zZWQgaW4gJyNyZWdpb24gU3RlcDogRGVzY3JpcHRpb24nIC8gJyNlbmRyZWdpb24gU3RlcDogRGVzY3JpcHRpb24nLg0KICAgICAgICAtIFZhcmlhYmxlIERlZmluaXRpb25zOiBJbmxpbmUgY29tbWVudHMgZGVzY3JpYmluZyB0aGUgcHVycG9zZSBvZiBzaWduaWZpY2FudCB2YXJpYWJsZXMuDQogICAgICAgIC0gRXJyb3IgSGFuZGxpbmc6IENvbXByZWhlbnNpdmUgdHJ5L2NhdGNoL2ZpbmFsbHkgYmxvY2tzIHdpdGggZXJyb3IgbG9nZ2luZyBhbmQgdXNlciBub3RpZmljYXRpb24uDQoNCiAgICAgICAgUmVsaWVzIGhlYXZpbHkgb24gdGhlIHN0cnVjdHVyZSBhbmQgYXZhaWxhYmlsaXR5IG9mIHRoZSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZyB2YXJpYWJsZS4NCiAgICAgICAgRW5zdXJlIHRoZSBJbmlGaWxlIEMjIGNsYXNzIGZyb20gJ2NsYXNzZXMucHNtMScgaXMgbG9hZGVkIGJlZm9yZSB1c2luZyB0aGVzZSBmdW5jdGlvbnMuDQojPg0KDQojcmVnaW9uIEhlbHBlciBGdW5jdGlvbnMNCg0KICAgICNyZWdpb24gRnVuY3Rpb246IENvcHktT3JkZXJlZERpY3Rpb25hcnkNCiAgICBmdW5jdGlvbiBDb3B5LU9yZGVyZWREaWN0aW9uYXJ5DQogICAgew0KICAgICAgICA8Iw0KICAgICAgICAuU1lOT1BTSVMNCiAgICAgICAgICAgIFJlY3Vyc2l2ZWx5IGNvcGllcyBhIFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeSBvciBhIFBvd2VyU2hlbGwgW29yZGVyZWRdIGRpY3Rpb25hcnkuDQogICAgICAgIC5ERVNDUklQVElPTg0KICAgICAgICAgICAgQ3JlYXRlcyBhIGRlZXAgY29weSBvZiBhbiBvcmRlcmVkIGRpY3Rpb25hcnksIGhhbmRsaW5nIG5lc3RlZCBvcmRlcmVkIGRpY3Rpb25hcmllcy4NCiAgICAgICAgICAgIFRoaXMgaXMgdXNlZnVsIGZvciBjcmVhdGluZyBpbmRlcGVuZGVudCBjb3BpZXMgb2YgY29uZmlndXJhdGlvbiBvYmplY3RzLg0KICAgICAgICAuUEFSQU1FVEVSIERpY3Rpb25hcnkNCiAgICAgICAgICAgIFtTeXN0ZW0uQ29sbGVjdGlvbnMuSURpY3Rpb25hcnldIFRoZSBvcmRlcmVkIGRpY3Rpb25hcnkgKFtTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnldIG9yIFtvcmRlcmVkXSkgdG8gY29weS4gKE1hbmRhdG9yeSkNCiAgICAgICAgLk9VVFBVVFMNCiAgICAgICAgICAgIFtvcmRlcmVkXSBBIG5ldyBQb3dlclNoZWxsIG9yZGVyZWQgZGljdGlvbmFyeSBjb250YWluaW5nIGEgZGVlcCBjb3B5IG9mIHRoZSBpbnB1dC4NCiAgICAgICAgLk5PVEVTDQogICAgICAgICAgICBFbnN1cmVzIG5lc3RlZCBkaWN0aW9uYXJpZXMgYXJlIGFsc28gY29waWVkLCBub3QganVzdCByZWZlcmVuY2VkLg0KICAgICAgICAgICAgSGFuZGxlcyBwb3RlbnRpYWwgZXJyb3JzIGR1cmluZyB0aGUgY29weSBwcm9jZXNzLg0KICAgICAgICAjPg0KICAgICAgICBwYXJhbSAoDQogICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0NCiAgICAgICAgICAgIFtWYWxpZGF0ZU5vdE51bGwoKV0NCiAgICAgICAgICAgIFtTeXN0ZW0uQ29sbGVjdGlvbnMuSURpY3Rpb25hcnldJERpY3Rpb25hcnkgIyBBY2NlcHRzIGJvdGggLk5FVCBhbmQgUFMgb3JkZXJlZCBkaWN0aW9uYXJpZXMNCiAgICAgICAgKQ0KDQogICAgICAgICNyZWdpb24gU3RlcDogSW5pdGlhbGl6ZSBPdXRwdXQgRGljdGlvbmFyeQ0KICAgICAgICAgICAgIyAkY29weTogVGhlIG5ldyBvcmRlcmVkIGRpY3Rpb25hcnkgdG8gaG9sZCB0aGUgY29waWVkIGRhdGEuDQogICAgICAgICAgICAkY29weSA9IFtvcmRlcmVkXUB7fQ0KICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEluaXRpYWxpemUgT3V0cHV0IERpY3Rpb25hcnkNCg0KICAgICAgICAjcmVnaW9uIFN0ZXA6IEl0ZXJhdGUgVGhyb3VnaCBLZXlzIGFuZCBDb3B5IFZhbHVlcw0KICAgICAgICB0cnkNCiAgICAgICAgew0KICAgICAgICAgICAgZm9yZWFjaCAoJGtleSBpbiAkRGljdGlvbmFyeS5LZXlzKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ2hlY2sgZm9yIE5lc3RlZCBEaWN0aW9uYXJ5DQogICAgICAgICAgICAgICAgaWYgKCREaWN0aW9uYXJ5WyRrZXldIC1pcyBbU3lzdGVtLkNvbGxlY3Rpb25zLklEaWN0aW9uYXJ5XSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogUmVjdXJzaXZlbHkgQ29weSBOZXN0ZWQgRGljdGlvbmFyeQ0KICAgICAgICAgICAgICAgICAgICAkY29weVska2V5XSA9IENvcHktT3JkZXJlZERpY3Rpb25hcnkgLURpY3Rpb25hcnkgJERpY3Rpb25hcnlbJGtleV0NCiAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBSZWN1cnNpdmVseSBDb3B5IE5lc3RlZCBEaWN0aW9uYXJ5DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ2hlY2sgZm9yIE5lc3RlZCBEaWN0aW9uYXJ5DQogICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDb3B5IFNpbXBsZSBWYWx1ZQ0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICRjb3B5WyRrZXldID0gJERpY3Rpb25hcnlbJGtleV0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDb3B5IFNpbXBsZSBWYWx1ZQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGNhdGNoDQogICAgICAgIHsNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogRXJyb3IgSGFuZGxpbmcgLSBGYWlsZWQgdG8gQ29weSBEaWN0aW9uYXJ5IEVsZW1lbnQNCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgRmFpbGVkIHRvIGNvcHkgZGljdGlvbmFyeSBlbGVtZW50IHdpdGgga2V5ICcka2V5JzogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICAjIENvbnNpZGVyIHJlLXRocm93aW5nIG9yIHJldHVybmluZyBudWxsL2VtcHR5IGRlcGVuZGluZyBvbiBkZXNpcmVkIGJlaGF2aW9yDQogICAgICAgICAgICB0aHJvdyAiRmFpbGVkIHRvIGNvbXBsZXRlIGRpY3Rpb25hcnkgY29weS4iDQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEVycm9yIEhhbmRsaW5nIC0gRmFpbGVkIHRvIENvcHkgRGljdGlvbmFyeSBFbGVtZW50DQogICAgICAgIH0NCiAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBJdGVyYXRlIFRocm91Z2ggS2V5cyBhbmQgQ29weSBWYWx1ZXMNCg0KICAgICAgICAjcmVnaW9uIFN0ZXA6IFJldHVybiBDb3B5DQogICAgICAgIHJldHVybiAkY29weQ0KICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFJldHVybiBDb3B5DQogICAgfQ0KICAgICNlbmRyZWdpb24gRnVuY3Rpb246IENvcHktT3JkZXJlZERpY3Rpb25hcnkNCg0KICAgICNyZWdpb24gRnVuY3Rpb246IEdldC1JbmlGaWxlQ29udGVudA0KICAgIGZ1bmN0aW9uIEdldC1JbmlGaWxlQ29udGVudA0KICAgIHsNCiAgICAgICAgPCMNCiAgICAgICAgLlNZTk9QU0lTDQogICAgICAgICAgICBSZWFkcyB0aGUgY29udGVudCBvZiBhIHNwZWNpZmllZCBJTkkgZmlsZSBpbnRvIGEgUG93ZXJTaGVsbCBvcmRlcmVkIGRpY3Rpb25hcnkuDQogICAgICAgIC5ERVNDUklQVElPTg0KICAgICAgICAgICAgVXNlcyB0aGUgQyMgJ0luaUZpbGUnIGNsYXNzIChmcm9tIGNsYXNzZXMucHNtMSkgdG8gcmVhZCB0aGUgc3RydWN0dXJlIGFuZCBjb250ZW50IG9mIGFuIElOSSBmaWxlLg0KICAgICAgICAgICAgSXQgdGhlbiBjb252ZXJ0cyB0aGUgLk5FVCBPcmRlcmVkRGljdGlvbmFyeSByZXR1cm5lZCBieSB0aGUgY2xhc3MgaW50byBhIFBvd2VyU2hlbGwgW29yZGVyZWRdIGRpY3Rpb25hcnkNCiAgICAgICAgICAgIGZvciBlYXNpZXIgbWFuaXB1bGF0aW9uIHdpdGhpbiBzY3JpcHRzLg0KICAgICAgICAuUEFSQU1FVEVSIEluaVBhdGgNCiAgICAgICAgICAgIFtzdHJpbmddIFRoZSBmdWxsIHBhdGggdG8gdGhlIElOSSBmaWxlIHRvIGJlIHJlYWQuIChNYW5kYXRvcnkpDQogICAgICAgIC5PVVRQVVRTDQogICAgICAgICAgICBbb3JkZXJlZF0gQW4gb3JkZXJlZCBkaWN0aW9uYXJ5IHJlcHJlc2VudGluZyB0aGUgSU5JIGZpbGUgc3RydWN0dXJlIChbU2VjdGlvbl1bS2V5XSA9IFZhbHVlKS4NCiAgICAgICAgICAgIFJldHVybnMgYW4gZW1wdHkgb3JkZXJlZCBkaWN0aW9uYXJ5IGlmIHRoZSBmaWxlIGlzIG5vdCBmb3VuZCBvciBhbiBlcnJvciBvY2N1cnMgZHVyaW5nIHJlYWRpbmcuDQogICAgICAgIC5OT1RFUw0KICAgICAgICAgICAgUmVxdWlyZXMgdGhlICdJbmlGaWxlJyBjbGFzcyB0byBiZSBhdmFpbGFibGUgKHR5cGljYWxseSBsb2FkZWQgdmlhIEFkZC1UeXBlIGZyb20gY2xhc3Nlcy5wc20xKS4NCiAgICAgICAgICAgIEVycm9yIG1lc3NhZ2VzIGFyZSB3cml0dGVuIHRvIHRoZSBob3N0IHN0cmVhbS4NCiAgICAgICAgIz4NCiAgICAgICAgW0NtZGxldEJpbmRpbmcoKV0NCiAgICAgICAgW091dHB1dFR5cGUoW29yZGVyZWRdKV0NCiAgICAgICAgcGFyYW0oDQogICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0NCiAgICAgICAgICAgIFtzdHJpbmddJEluaVBhdGgNCiAgICAgICAgKQ0KDQogICAgICAgICNyZWdpb24gU3RlcDogSW5pdGlhbGl6ZSBSZXN1bHQgRGljdGlvbmFyeQ0KICAgICAgICAjICRyZXN1bHQ6IFRoZSBvcmRlcmVkIGRpY3Rpb25hcnkgdG8gc3RvcmUgdGhlIElOSSBjb250ZW50Lg0KICAgICAgICAkcmVzdWx0ID0gW29yZGVyZWRdQHt9DQogICAgICAgICNlbmRyZWdpb24gU3RlcDogSW5pdGlhbGl6ZSBSZXN1bHQgRGljdGlvbmFyeQ0KDQogICAgICAgICNyZWdpb24gU3RlcDogUmVhZCBJTkkgRmlsZSB1c2luZyBDIyBDbGFzcw0KICAgICAgICB0cnkNCiAgICAgICAgew0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBWYWxpZGF0ZSBGaWxlIEV4aXN0ZW5jZQ0KICAgICAgICAgICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkSW5pUGF0aCAtUGF0aFR5cGUgTGVhZikpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChHZXQtSW5pRmlsZUNvbnRlbnQpOiBGaWxlIG5vdCBmb3VuZCBhdCAnJEluaVBhdGgnLiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCiAgICAgICAgICAgICAgICByZXR1cm4gJHJlc3VsdCAjIFJldHVybiBlbXB0eSBkaWN0aW9uYXJ5DQogICAgICAgICAgICB9DQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFZhbGlkYXRlIEZpbGUgRXhpc3RlbmNlDQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogSW5zdGFudGlhdGUgSW5pRmlsZSBIYW5kbGVyDQogICAgICAgICAgICAjIEVuc3VyZSByZXF1aXJlZCAuTkVUIGFzc2VtYmxpZXMgYXJlIGxvYWRlZCAodGhvdWdoIGlkZWFsbHkgZG9uZSBhdCBtb2R1bGUgbG9hZCkNCiAgICAgICAgICAgIGlmICgtbm90IChbU3lzdGVtLlJlZmxlY3Rpb24uQXNzZW1ibHldOjpMb2FkV2l0aFBhcnRpYWxOYW1lKCdTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQnKSkpIHsNCiAgICAgICAgICAgICAgICBBZGQtVHlwZSAtQXNzZW1ibHlOYW1lIFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKC1ub3QgKFtTeXN0ZW0uUmVmbGVjdGlvbi5Bc3NlbWJseV06OkxvYWRXaXRoUGFydGlhbE5hbWUoJ1N5c3RlbS5JTycpKSkgew0KICAgICAgICAgICAgICAgIEFkZC1UeXBlIC1Bc3NlbWJseU5hbWUgU3lzdGVtLklPDQogICAgICAgICAgICB9DQogICAgICAgICAgICAjIEFzc3VtaW5nIEluaUZpbGUgY2xhc3MgaXMgbG9hZGVkIGVsc2V3aGVyZSAoZS5nLiwgYXQgbW9kdWxlIGltcG9ydCkNCiAgICAgICAgICAgICMgJGluaUhhbmRsZXI6IEluc3RhbmNlIG9mIHRoZSBDIyBjbGFzcyB1c2VkIHRvIGludGVyYWN0IHdpdGggdGhlIElOSSBmaWxlLg0KICAgICAgICAgICAgJGluaUhhbmRsZXIgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBJbmlGaWxlIC1Bcmd1bWVudExpc3QgJEluaVBhdGgNCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogSW5zdGFudGlhdGUgSW5pRmlsZSBIYW5kbGVyDQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogUmVhZCBGaWxlIENvbnRlbnQNCiAgICAgICAgICAgICMgJGluaUNvbnRlbnQ6IFRoZSByYXcgY29udGVudCByZWFkIGZyb20gdGhlIElOSSBmaWxlIGFzIGEgLk5FVCBPcmRlcmVkRGljdGlvbmFyeS4NCiAgICAgICAgICAgICRpbmlDb250ZW50ID0gJGluaUhhbmRsZXIuUmVhZEluaUZpbGUoKQ0KICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBSZWFkIEZpbGUgQ29udGVudA0KDQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENvbnZlcnQgLk5FVCBEaWN0aW9uYXJ5IHRvIFBvd2VyU2hlbGwgT3JkZXJlZCBEaWN0aW9uYXJ5DQogICAgICAgICAgICBpZiAoJG51bGwgLW5lICRpbmlDb250ZW50KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRzZWN0aW9uIGluICRpbmlDb250ZW50LktleXMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAkcmVzdWx0WyRzZWN0aW9uXSA9IFtvcmRlcmVkXUB7fQ0KICAgICAgICAgICAgICAgICAgICAkc2VjdGlvbkRpY3QgPSAkaW5pQ29udGVudFskc2VjdGlvbl0NCiAgICAgICAgICAgICAgICAgICAgIyBFbnN1cmUgdGhlIHNlY3Rpb24ncyB2YWx1ZSBpcyBkaWN0aW9uYXJ5LWxpa2UgYmVmb3JlIGl0ZXJhdGluZw0KICAgICAgICAgICAgICAgICAgICBpZiAoJHNlY3Rpb25EaWN0IC1pcyBbU3lzdGVtLkNvbGxlY3Rpb25zLklEaWN0aW9uYXJ5XSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGtleSBpbiAkc2VjdGlvbkRpY3QuS2V5cykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVzdWx0WyRzZWN0aW9uXVska2V5XSA9ICRzZWN0aW9uRGljdFska2V5XQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChHZXQtSW5pRmlsZUNvbnRlbnQpOiBTZWN0aW9uICdbJHNlY3Rpb25dJyBpbiAnJEluaVBhdGgnIGRvZXMgbm90IGNvbnRhaW4gZXhwZWN0ZWQga2V5LXZhbHVlIHBhaXJzLiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ29udmVydCAuTkVUIERpY3Rpb25hcnkgdG8gUG93ZXJTaGVsbCBPcmRlcmVkIERpY3Rpb25hcnkNCiAgICAgICAgfQ0KICAgICAgICBjYXRjaA0KICAgICAgICB7DQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEVycm9yIEhhbmRsaW5nIC0gRmFpbGVkIHRvIFJlYWQgSU5JDQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIElOSTogKEdldC1JbmlGaWxlQ29udGVudCk6IEZhaWxlZCB0byByZWFkIElOSSBmaWxlICckSW5pUGF0aCcuIEVycm9yOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIgLUZvcmVncm91bmRDb2xvciBSZWQNCiAgICAgICAgICAgICMgUmV0dXJuIGVtcHR5IGRpY3Rpb25hcnkgb24gZmFpbHVyZQ0KICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBFcnJvciBIYW5kbGluZyAtIEZhaWxlZCB0byBSZWFkIElOSQ0KICAgICAgICB9DQogICAgICAgICNlbmRyZWdpb24gU3RlcDogUmVhZCBJTkkgRmlsZSB1c2luZyBDIyBDbGFzcw0KDQogICAgICAgICNyZWdpb24gU3RlcDogUmV0dXJuIFJlc3VsdA0KICAgICAgICByZXR1cm4gJHJlc3VsdA0KICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFJldHVybiBSZXN1bHQNCiAgICB9DQogICAgI2VuZHJlZ2lvbiBGdW5jdGlvbjogR2V0LUluaUZpbGVDb250ZW50DQoNCiAgICAjcmVnaW9uIEZ1bmN0aW9uOiBMb2FkRGVmYXVsdENvbmZpZ09uRXJyb3INCiAgICBmdW5jdGlvbiBMb2FkRGVmYXVsdENvbmZpZ09uRXJyb3INCiAgICB7DQogICAgICAgIDwjDQogICAgICAgIC5TWU5PUFNJUw0KICAgICAgICAgICAgSW50ZXJuYWwgaGVscGVyIGZ1bmN0aW9uIHRvIGxvYWQgZGVmYXVsdCBjb25maWd1cmF0aW9uIHdoZW4gYW4gZXJyb3Igb2NjdXJzIGR1cmluZyByZWFkaW5nLg0KICAgICAgICAuREVTQ1JJUFRJT04NCiAgICAgICAgICAgIENhbGxlZCBieSBSZWFkLUNvbmZpZyB3aGVuIGl0IGZhaWxzIHRvIHJlYWQgdGhlIHNwZWNpZmllZCBJTkkgZmlsZS4gSXQgbG9ncyBhIHdhcm5pbmcNCiAgICAgICAgICAgIHdpdGggdGhlIHJlYXNvbiBhbmQgYXR0ZW1wdHMgdG8gcG9wdWxhdGUgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnIHdpdGggYSBjb3B5DQogICAgICAgICAgICBvZiAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5EZWZhdWx0Q29uZmlnLg0KICAgICAgICAuUEFSQU1FVEVSIFJlYXNvbg0KICAgICAgICAgICAgW3N0cmluZ10gQSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3IgdGhhdCB0cmlnZ2VyZWQgbG9hZGluZyBkZWZhdWx0cy4gKE1hbmRhdG9yeSkNCiAgICAgICAgLk9VVFBVVFMNCiAgICAgICAgICAgIFtib29sXSBBbHdheXMgcmV0dXJucyAkZmFsc2UgdG8gaW5kaWNhdGUgdGhhdCB0aGUgb3JpZ2luYWwgcmVhZCBvcGVyYXRpb24gZmFpbGVkLA0KICAgICAgICAgICAgZXZlbiBpZiBsb2FkaW5nIGRlZmF1bHRzIHdhcyBzdWNjZXNzZnVsLiBSZXR1cm5zICRmYWxzZSBhbHNvIGlmIGxvYWRpbmcgZGVmYXVsdHMgZmFpbHMuDQogICAgICAgIC5OT1RFUw0KICAgICAgICAgICAgTW9kaWZpZXMgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnLg0KICAgICAgICAgICAgVXNlcyBDb3B5LU9yZGVyZWREaWN0aW9uYXJ5Lg0KICAgICAgICAgICAgTG9ncyBlcnJvcnMgaWYgbG9hZGluZyBkZWZhdWx0cyBhbHNvIGZhaWxzLg0KICAgICAgICAjPg0KICAgICAgICBwYXJhbSgNCiAgICAgICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQ0KICAgICAgICAgICAgW3N0cmluZ10kUmVhc29uDQogICAgICAgICkNCg0KICAgICAgICAjcmVnaW9uIFN0ZXA6IExvZyBXYXJuaW5nIGFuZCBBdHRlbXB0IHRvIExvYWQgRGVmYXVsdHMNCiAgICAgICAgdHJ5DQogICAgICAgIHsNCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgSU5JOiAoUmVhZC1Db25maWcpOiBMb2FkaW5nIGRlZmF1bHQgY29uZmlndXJhdGlvbiBiZWNhdXNlOiAkUmVhc29uIiAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KICAgICAgICAgICAgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnID0gQ29weS1PcmRlcmVkRGljdGlvbmFyeSAtRGljdGlvbmFyeSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5EZWZhdWx0Q29uZmlnIC1FcnJvckFjdGlvbiBTdG9wDQogICAgICAgICAgICByZXR1cm4gJGZhbHNlICMgSW5kaWNhdGUgZmFpbHVyZSB0byByZWFkIG9yaWdpbmFsLCBidXQgZGVmYXVsdHMgbG9hZGVkDQogICAgICAgIH0NCiAgICAgICAgY2F0Y2gNCiAgICAgICAgew0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBFcnJvciBIYW5kbGluZyAtIENyaXRpY2FsIEZhaWx1cmUgdG8gTG9hZCBEZWZhdWx0cw0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChSZWFkLUNvbmZpZyk6IENSSVRJQ0FMIEVSUk9SIC0gRmFpbGVkIGV2ZW4gdG8gbG9hZCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24hIEVycm9yOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIgLUZvcmVncm91bmRDb2xvciBSZWQNCiAgICAgICAgICAgICMgRW5zdXJlIENvbmZpZyBpcyBhdCBsZWFzdCBhbiBlbXB0eSBkaWN0aW9uYXJ5IHRvIHByZXZlbnQgbGF0ZXIgZXJyb3JzDQogICAgICAgICAgICAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcgPSBbb3JkZXJlZF1Ae30NCiAgICAgICAgICAgIHJldHVybiAkZmFsc2UgIyBJbmRpY2F0ZSBjcml0aWNhbCBmYWlsdXJlDQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEVycm9yIEhhbmRsaW5nIC0gQ3JpdGljYWwgRmFpbHVyZSB0byBMb2FkIERlZmF1bHRzDQogICAgICAgIH0NCiAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBMb2cgV2FybmluZyBhbmQgQXR0ZW1wdCB0byBMb2FkIERlZmF1bHRzDQogICAgfQ0KICAgICNlbmRyZWdpb24gRnVuY3Rpb246IExvYWREZWZhdWx0Q29uZmlnT25FcnJvcg0KDQojZW5kcmVnaW9uIEhlbHBlciBGdW5jdGlvbnMNCg0KI3JlZ2lvbiBDb3JlIENvbmZpZ3VyYXRpb24gRnVuY3Rpb25zDQoNCiAgICAjcmVnaW9uIEZ1bmN0aW9uOiBJbml0aWFsaXplLUluaUNvbmZpZw0KICAgIGZ1bmN0aW9uIEluaXRpYWxpemUtSW5pQ29uZmlnDQogICAgew0KICAgICAgICA8Iw0KICAgICAgICAuU1lOT1BTSVMNCiAgICAgICAgICAgIEluaXRpYWxpemVzIHRoZSBnbG9iYWwgZGFzaGJvYXJkIGNvbmZpZ3VyYXRpb24gKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZykuDQogICAgICAgIC5ERVNDUklQVElPTg0KICAgICAgICAgICAgVGhpcyBmdW5jdGlvbiBlbnN1cmVzIHRoZSBkYXNoYm9hcmQncyBjb25maWd1cmF0aW9uIGlzIHJlYWR5IGZvciB1c2UuIEl0IHBlcmZvcm1zIHRoZSBmb2xsb3dpbmcgc3RlcHM6DQogICAgICAgICAgICAxLiBDaGVja3MgaWYgdGhlIGNvbmZpZ3VyYXRpb24gSU5JIGZpbGUgKGRlZmluZWQgaW4gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUGF0aHMuSW5pKSBleGlzdHMuDQogICAgICAgICAgICAyLiBJZiB0aGUgZmlsZSBkb2Vzbid0IGV4aXN0LCBpdCBjcmVhdGVzIGEgbmV3IG9uZSBieSBjb3B5aW5nIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkRlZmF1bHRDb25maWcpIGFuZCB3cml0aW5nIGl0IHVzaW5nIFdyaXRlLUNvbmZpZy4NCiAgICAgICAgICAgIDMuIElmIHRoZSBmaWxlIGV4aXN0cywgaXQgcmVhZHMgdGhlIGNvbmZpZ3VyYXRpb24gdXNpbmcgUmVhZC1Db25maWcuDQogICAgICAgICAgICA0LiBJdCB0aGVuIHZlcmlmaWVzIHRoYXQgYWxsIHNlY3Rpb25zIGFuZCBrZXlzIGRlZmluZWQgaW4gdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBhcmUgcHJlc2VudCBpbiB0aGUgbG9hZGVkIGNvbmZpZ3VyYXRpb24uIE1pc3Npbmcgc2VjdGlvbnMgb3Iga2V5cyBhcmUgYWRkZWQgZnJvbSB0aGUgZGVmYXVsdHMuDQogICAgICAgICAgICA1LiBJZiBhbnkgZGVmYXVsdHMgd2VyZSBhZGRlZCwgdGhlIHVwZGF0ZWQgY29uZmlndXJhdGlvbiBpcyB3cml0dGVuIGJhY2sgdG8gdGhlIGZpbGUgdXNpbmcgV3JpdGUtQ29uZmlnLg0KICAgICAgICAuT1VUUFVUUw0KICAgICAgICAgICAgW2Jvb2xdIFJldHVybnMgJHRydWUgaWYgaW5pdGlhbGl6YXRpb24gKGluY2x1ZGluZyByZWFkaW5nL3dyaXRpbmcgdGhlIGNvbmZpZyBmaWxlIGFuZCB2ZXJpZnlpbmcgc3RydWN0dXJlKSBjb21wbGV0ZXMgc3VjY2Vzc2Z1bGx5Lg0KICAgICAgICAgICAgUmV0dXJucyAkZmFsc2UgaWYgYW55IGNyaXRpY2FsIHN0ZXAgZmFpbHMgKGUuZy4sIGNhbm5vdCB3cml0ZSBpbml0aWFsIGNvbmZpZywgY2Fubm90IHJlYWQgZXhpc3RpbmcgY29uZmlnLCBjYW5ub3Qgd3JpdGUgdXBkYXRlZCBjb25maWcpLg0KICAgICAgICAuTk9URVMNCiAgICAgICAgICAgIC0gTW9kaWZpZXMgdGhlICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZyB2YXJpYWJsZS4NCiAgICAgICAgICAgIC0gUmVsaWVzIGhlYXZpbHkgb24gdGhlIHN0cnVjdHVyZSBvZiAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZyAoc3BlY2lmaWNhbGx5IC5QYXRocy5JbmksIC5Db25maWcsIC5EZWZhdWx0Q29uZmlnKS4NCiAgICAgICAgICAgIC0gRGVwZW5kcyBvbiBoZWxwZXIgZnVuY3Rpb25zOiBDb3B5LU9yZGVyZWREaWN0aW9uYXJ5LCBSZWFkLUNvbmZpZywgV3JpdGUtQ29uZmlnLg0KICAgICAgICAgICAgLSBMb2dzIHByb2dyZXNzIGFuZCBvdXRjb21lcyB0byB0aGUgaG9zdCBzdHJlYW0uDQogICAgICAgICM+DQogICAgICAgIFtDbWRsZXRCaW5kaW5nKCldDQogICAgICAgIFtPdXRwdXRUeXBlKFtib29sXSldDQogICAgICAgIHBhcmFtKCkNCg0KICAgICAgICAjcmVnaW9uIFN0ZXA6IExvZyBJbml0aWFsaXphdGlvbiBTdGFydA0KICAgICAgICBXcml0ZS1WZXJib3NlICcgIElOSTogKEluaXRpYWxpemUtSW5pQ29uZmlnKTogSW5pdGlhbGl6aW5nIGRhc2hib2FyZCBjb25maWd1cmF0aW9uLi4uJyAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCiAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBMb2cgSW5pdGlhbGl6YXRpb24gU3RhcnQNCg0KICAgICAgICAjcmVnaW9uIFN0ZXA6IERlZmluZSBDb25maWcgUGF0aA0KICAgICAgICAjICRjb25maWdQYXRoOiBUaGUgZnVsbCBwYXRoIHRvIHRoZSBtYWluIElOSSBjb25maWd1cmF0aW9uIGZpbGUuDQogICAgICAgICRjb25maWdQYXRoID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUGF0aHMuSW5pDQogICAgICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JXaGl0ZVNwYWNlKCRjb25maWdQYXRoKSkgew0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChJbml0aWFsaXplLUluaUNvbmZpZyk6IENvbmZpZ3VyYXRpb24gcGF0aCAoXCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkluaSkgaXMgbm90IGRlZmluZWQuIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KICAgICAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgICAgICB9DQogICAgICAgICNlbmRyZWdpb24gU3RlcDogRGVmaW5lIENvbmZpZyBQYXRoDQoNCiAgICAgICAgI3JlZ2lvbiBTdGVwOiBDaGVjayBpZiBDb25maWcgRmlsZSBFeGlzdHMNCiAgICAgICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkY29uZmlnUGF0aCAtUGF0aFR5cGUgTGVhZikpICMgVXNlIExlYWYgdG8gZW5zdXJlIGl0J3MgYSBmaWxlLCBub3QgYSBkaXJlY3RvcnkNCiAgICAgICAgew0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDb25maWcgRmlsZSBOb3QgRm91bmQgLSBDcmVhdGUgZnJvbSBEZWZhdWx0cw0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChJbml0aWFsaXplLUluaUNvbmZpZyk6IENvbmZpZyBmaWxlIG5vdCBmb3VuZCBhdCAnJGNvbmZpZ1BhdGgnLiBDcmVhdGluZyBmcm9tIGRlZmF1bHRzLiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCiAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQ29weSBEZWZhdWx0IENvbmZpZyB0byBHbG9iYWwgVmFyaWFibGUNCiAgICAgICAgICAgICAgICAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcgPSBDb3B5LU9yZGVyZWREaWN0aW9uYXJ5IC1EaWN0aW9uYXJ5ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkRlZmF1bHRDb25maWcgLUVycm9yQWN0aW9uIFN0b3ANCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENvcHkgRGVmYXVsdCBDb25maWcgdG8gR2xvYmFsIFZhcmlhYmxlDQoNCiAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IFdyaXRlIEluaXRpYWwgQ29uZmlnIEZpbGUNCiAgICAgICAgICAgICAgICAkd3JpdGVTdWNjZXNzID0gV3JpdGUtQ29uZmlnIC1Db25maWdQYXRoICRjb25maWdQYXRoIC1Db25maWcgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnDQogICAgICAgICAgICAgICAgaWYgKC1ub3QgJHdyaXRlU3VjY2VzcykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgSU5JOiAoSW5pdGlhbGl6ZS1JbmlDb25maWcpOiBGYWlsZWQgdG8gd3JpdGUgaW5pdGlhbCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gdG8gJyRjb25maWdQYXRoJy4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICAgICAgICAgICMgRW5zdXJlIGNvbmZpZyBpcyByZXNldCBvciBudWxsZWQgaWYgd3JpdGUgZmFpbHM/IEZvciBub3csIGxlYXZlIGl0IGFzIGNvcGllZCBkZWZhdWx0cy4NCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRmYWxzZSAjIEluZGljYXRlIGluaXRpYWxpemF0aW9uIGZhaWx1cmUNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChJbml0aWFsaXplLUluaUNvbmZpZyk6IFN1Y2Nlc3NmdWxseSBjcmVhdGVkIGFuZCB3cm90ZSBkZWZhdWx0IGNvbmZpZyB0byAnJGNvbmZpZ1BhdGgnLiIgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KICAgICAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogV3JpdGUgSW5pdGlhbCBDb25maWcgRmlsZQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2gNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEVycm9yIEhhbmRsaW5nIC0gRmFpbGVkIHRvIENyZWF0ZSBEZWZhdWx0IENvbmZpZw0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgSU5JOiAoSW5pdGlhbGl6ZS1JbmlDb25maWcpOiBFcnJvciBjcmVhdGluZyBkZWZhdWx0IGNvbmZpZ3VyYXRpb24uIEVycm9yOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIgLUZvcmVncm91bmRDb2xvciBSZWQNCiAgICAgICAgICAgICAgICAjIEVuc3VyZSBjb25maWcgaXMgYXQgbGVhc3QgYW4gZW1wdHkgZGljdGlvbmFyeSBvbiBjYXRhc3Ryb3BoaWMgZmFpbHVyZQ0KICAgICAgICAgICAgICAgICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZyA9IFtvcmRlcmVkXUB7fQ0KICAgICAgICAgICAgICAgIHJldHVybiAkZmFsc2UgIyBJbmRpY2F0ZSBpbml0aWFsaXphdGlvbiBmYWlsdXJlDQogICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBFcnJvciBIYW5kbGluZyAtIEZhaWxlZCB0byBDcmVhdGUgRGVmYXVsdCBDb25maWcNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ29uZmlnIEZpbGUgTm90IEZvdW5kIC0gQ3JlYXRlIGZyb20gRGVmYXVsdHMNCiAgICAgICAgfQ0KICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENoZWNrIGlmIENvbmZpZyBGaWxlIEV4aXN0cw0KICAgICAgICAjcmVnaW9uIFN0ZXA6IENvbmZpZyBGaWxlIEV4aXN0cyAtIFJlYWQgYW5kIFZlcmlmeQ0KICAgICAgICBlbHNlDQogICAgICAgIHsNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogUmVhZCBFeGlzdGluZyBDb25maWcgRmlsZQ0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChJbml0aWFsaXplLUluaUNvbmZpZyk6IEV4aXN0aW5nIGNvbmZpZyBmaWxlIGZvdW5kIGF0ICckY29uZmlnUGF0aCcuIFJlYWRpbmcuLi4iIC1Gb3JlZ3JvdW5kQ29sb3IgQ3lhbg0KICAgICAgICAgICAgJHJlYWRTdWNjZXNzID0gUmVhZC1Db25maWcgLUNvbmZpZ1BhdGggJGNvbmZpZ1BhdGggIyBQYXNzIHBhdGggZXhwbGljaXRseQ0KICAgICAgICAgICAgaWYgKC1ub3QgJHJlYWRTdWNjZXNzKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICMgUmVhZC1Db25maWcgbG9ncyBlcnJvcnMgYW5kIGF0dGVtcHRzIHRvIGxvYWQgZGVmYXVsdHMgb24gZmFpbHVyZS4NCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIElOSTogKEluaXRpYWxpemUtSW5pQ29uZmlnKTogRmFpbGVkIHRvIHJlYWQgZXhpc3RpbmcgY29uZmlndXJhdGlvbiBmaWxlICckY29uZmlnUGF0aCcuIENoZWNrIHByZXZpb3VzIGVycm9ycy4gSW5pdGlhbGl6YXRpb24gY2Fubm90IGNvbnRpbnVlIHJlbGlhYmx5LiIgLUZvcmVncm91bmRDb2xvciBSZWQNCiAgICAgICAgICAgICAgICAjIElmIFJlYWQtQ29uZmlnIGZhaWxlZCBidXQgbG9hZGVkIGRlZmF1bHRzLCBzaG91bGQgd2UgcHJvY2VlZD8gQXNzdW1pbmcgZmFpbHVyZSBpcyBjcml0aWNhbCBoZXJlLg0KICAgICAgICAgICAgICAgIHJldHVybiAkZmFsc2UgIyBJbmRpY2F0ZSBpbml0aWFsaXphdGlvbiBmYWlsdXJlDQogICAgICAgICAgICB9DQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIElOSTogKEluaXRpYWxpemUtSW5pQ29uZmlnKTogU3VjY2Vzc2Z1bGx5IHJlYWQgZXhpc3RpbmcgY29uZmlnLiIgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBSZWFkIEV4aXN0aW5nIENvbmZpZyBGaWxlDQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogVmVyaWZ5IENvbmZpZyBTdHJ1Y3R1cmUgQWdhaW5zdCBEZWZhdWx0cw0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChJbml0aWFsaXplLUluaUNvbmZpZyk6IFZlcmlmeWluZyBjb25maWcgc3RydWN0dXJlIGFnYWluc3QgZGVmYXVsdHMuLi4iIC1Gb3JlZ3JvdW5kQ29sb3IgQ3lhbg0KICAgICAgICAgICAgIyAkbmVlZHNVcGRhdGU6IEZsYWcgaW5kaWNhdGluZyBpZiB0aGUgY29uZmlnIGZpbGUgbmVlZHMgdG8gYmUgcmV3cml0dGVuIHdpdGggYWRkZWQgZGVmYXVsdHMuDQogICAgICAgICAgICAkbmVlZHNVcGRhdGUgPSAkZmFsc2UNCiAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogSXRlcmF0ZSBEZWZhdWx0IFNlY3Rpb25zDQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHNlY3Rpb24gaW4gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuRGVmYXVsdENvbmZpZy5LZXlzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBpZiBzZWN0aW9uIGV4aXN0cyBpbiBsb2FkZWQgY29uZmlnDQogICAgICAgICAgICAgICAgICAgIGlmICgtbm90ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZy5Db250YWlucygkc2VjdGlvbikpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICNyZWdpb24gU3RlcDogQWRkIE1pc3NpbmcgU2VjdGlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChJbml0aWFsaXplLUluaUNvbmZpZyk6IEFkZGluZyBtaXNzaW5nIHNlY3Rpb24gJ1skc2VjdGlvbl0nIGZyb20gZGVmYXVsdHMuIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQogICAgICAgICAgICAgICAgICAgICAgICAjIENvcHkgdGhlIGVudGlyZSBkZWZhdWx0IHNlY3Rpb24NCiAgICAgICAgICAgICAgICAgICAgICAgICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skc2VjdGlvbl0gPSBDb3B5LU9yZGVyZWREaWN0aW9uYXJ5IC1EaWN0aW9uYXJ5ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkRlZmF1bHRDb25maWdbJHNlY3Rpb25dIC1FcnJvckFjdGlvbiBTdG9wDQogICAgICAgICAgICAgICAgICAgICAgICAkbmVlZHNVcGRhdGUgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBBZGQgTWlzc2luZyBTZWN0aW9uDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAjIFNlY3Rpb24gZXhpc3RzLCBjaGVjayBrZXlzIHdpdGhpbiB0aGUgc2VjdGlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBJdGVyYXRlIERlZmF1bHQgS2V5cyBpbiBTZWN0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgka2V5IGluICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkRlZmF1bHRDb25maWdbJHNlY3Rpb25dLktleXMpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBpZiBrZXkgZXhpc3RzIGluIHRoZSBsb2FkZWQgY29uZmlnJ3Mgc2VjdGlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtbm90ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skc2VjdGlvbl0uQ29udGFpbnMoJGtleSkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEFkZCBNaXNzaW5nIEtleQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIElOSTogKEluaXRpYWxpemUtSW5pQ29uZmlnKTogQWRkaW5nIG1pc3Npbmcga2V5ICcka2V5JyBpbiBzZWN0aW9uICdbJHNlY3Rpb25dJyBmcm9tIGRlZmF1bHRzLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJHNlY3Rpb25dWyRrZXldID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuRGVmYXVsdENvbmZpZ1skc2VjdGlvbl1bJGtleV0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG5lZWRzVXBkYXRlID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBBZGQgTWlzc2luZyBLZXkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEl0ZXJhdGUgRGVmYXVsdCBLZXlzIGluIFNlY3Rpb24NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IEl0ZXJhdGUgRGVmYXVsdCBTZWN0aW9ucw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2gNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEVycm9yIEhhbmRsaW5nIC0gRmFpbGVkIFN0cnVjdHVyZSBWZXJpZmljYXRpb24NCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIElOSTogKEluaXRpYWxpemUtSW5pQ29uZmlnKTogRXJyb3IgdmVyaWZ5aW5nIGNvbmZpZyBzdHJ1Y3R1cmUgYWdhaW5zdCBkZWZhdWx0cy4gRXJyb3I6ICQoJF8uRXhjZXB0aW9uLk1lc3NhZ2UpIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KICAgICAgICAgICAgICAgIHJldHVybiAkZmFsc2UgIyBJbmRpY2F0ZSBpbml0aWFsaXphdGlvbiBmYWlsdXJlDQogICAgICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBFcnJvciBIYW5kbGluZyAtIEZhaWxlZCBTdHJ1Y3R1cmUgVmVyaWZpY2F0aW9uDQogICAgICAgICAgICB9DQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFZlcmlmeSBDb25maWcgU3RydWN0dXJlIEFnYWluc3QgRGVmYXVsdHMNCg0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBXcml0ZSBVcGRhdGVkIENvbmZpZyBpZiBOZWNlc3NhcnkNCiAgICAgICAgICAgIGlmICgkbmVlZHNVcGRhdGUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBXcml0ZSBVcGRhdGVkIENvbmZpZyBGaWxlDQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnICBJTkk6IChJbml0aWFsaXplLUluaUNvbmZpZyk6IENvbmZpZ3VyYXRpb24gdXBkYXRlZCB3aXRoIG1pc3NpbmcgZGVmYXVsdHMuIFdyaXRpbmcgY2hhbmdlcy4uLicgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KICAgICAgICAgICAgICAgICR3cml0ZVN1Y2Nlc3MgPSBXcml0ZS1Db25maWcgLUNvbmZpZ1BhdGggJGNvbmZpZ1BhdGggLUNvbmZpZyAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcNCiAgICAgICAgICAgICAgICBpZiAoLW5vdCAkd3JpdGVTdWNjZXNzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChJbml0aWFsaXplLUluaUNvbmZpZyk6IEZhaWxlZCB0byB3cml0ZSB1cGRhdGVkIGNvbmZpZ3VyYXRpb24gdG8gJyRjb25maWdQYXRoJy4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkZmFsc2UgIyBJbmRpY2F0ZSBpbml0aWFsaXphdGlvbiBmYWlsdXJlDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgSU5JOiAoSW5pdGlhbGl6ZS1JbmlDb25maWcpOiBTdWNjZXNzZnVsbHkgd3JvdGUgdXBkYXRlZCBjb25maWcgdG8gJyRjb25maWdQYXRoJy4iIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFdyaXRlIFVwZGF0ZWQgQ29uZmlnIEZpbGUNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IExvZyBObyBVcGRhdGVzIE5lZWRlZA0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgSU5JOiAoSW5pdGlhbGl6ZS1JbmlDb25maWcpOiBDb25maWcgc3RydWN0dXJlIHZlcmlmaWVkLiBObyB1cGRhdGVzIG5lZWRlZC4iIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IExvZyBObyBVcGRhdGVzIE5lZWRlZA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBXcml0ZSBVcGRhdGVkIENvbmZpZyBpZiBOZWNlc3NhcnkNCiAgICAgICAgfQ0KICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IENvbmZpZyBGaWxlIEV4aXN0cyAtIFJlYWQgYW5kIFZlcmlmeQ0KDQogICAgICAgICNyZWdpb24gU3RlcDogRmluYWwgU3VjY2Vzcw0KICAgICAgICBXcml0ZS1WZXJib3NlICIgIElOSTogKEluaXRpYWxpemUtSW5pQ29uZmlnKTogQ29uZmlndXJhdGlvbiBpbml0aWFsaXphdGlvbiBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LiIgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KICAgICAgICByZXR1cm4gJHRydWUgIyBJbmRpY2F0ZSBzdWNjZXNzZnVsIGluaXRpYWxpemF0aW9uDQogICAgICAgICNlbmRyZWdpb24gU3RlcDogRmluYWwgU3VjY2Vzcw0KICAgIH0NCiAgICAjZW5kcmVnaW9uIEZ1bmN0aW9uOiBJbml0aWFsaXplLUluaUNvbmZpZw0KDQogICAgI3JlZ2lvbiBGdW5jdGlvbjogUmVhZC1Db25maWcNCiAgICBmdW5jdGlvbiBSZWFkLUNvbmZpZw0KICAgIHsNCiAgICAgICAgPCMNCiAgICAgICAgLlNZTk9QU0lTDQogICAgICAgICAgICBSZWFkcyB0aGUgY29uZmlndXJhdGlvbiBmcm9tIHRoZSBzcGVjaWZpZWQgSU5JIGZpbGUgaW50byB0aGUgZ2xvYmFsIGNvbmZpZyB2YXJpYWJsZS4NCiAgICAgICAgLkRFU0NSSVBUSU9ODQogICAgICAgICAgICBVc2VzIHRoZSBDIyAnSW5pRmlsZScgY2xhc3MgdG8gcmVhZCB0aGUgSU5JIGZpbGUgc3BlY2lmaWVkIGJ5IHRoZSBDb25maWdQYXRoIHBhcmFtZXRlcg0KICAgICAgICAgICAgKG9yIGRlZmF1bHRzIHRvICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkluaSkuDQogICAgICAgICAgICBQb3B1bGF0ZXMgdGhlICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZyBvcmRlcmVkIGRpY3Rpb25hcnkgd2l0aCB0aGUgY29udGVudCByZWFkIGZyb20gdGhlIGZpbGUuDQogICAgICAgICAgICBJZiByZWFkaW5nIGZhaWxzIChlLmcuLCBmaWxlIG5vdCBmb3VuZCwgcGFyc2luZyBlcnJvciksIGl0IGxvZ3MgYW4gZXJyb3IgYW5kIGF0dGVtcHRzIHRvIHBvcHVsYXRlDQogICAgICAgICAgICB0aGUgZ2xvYmFsIGNvbmZpZyB3aXRoIGRlZmF1bHQgdmFsdWVzICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5EZWZhdWx0Q29uZmlnKSBhcyBhIGZhbGxiYWNrLA0KICAgICAgICAgICAgdXNpbmcgdGhlIExvYWREZWZhdWx0Q29uZmlnT25FcnJvciBoZWxwZXIgZnVuY3Rpb24uDQogICAgICAgIC5QQVJBTUVURVIgQ29uZmlnUGF0aA0KICAgICAgICAgICAgW3N0cmluZ10gVGhlIGZ1bGwgcGF0aCB0byB0aGUgSU5JIGNvbmZpZ3VyYXRpb24gZmlsZSB0byByZWFkLiBEZWZhdWx0cyB0byAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5QYXRocy5JbmkgaWYgbm90IHByb3ZpZGVkLg0KICAgICAgICAuT1VUUFVUUw0KICAgICAgICAgICAgW2Jvb2xdIFJldHVybnMgJHRydWUgaWYgdGhlIGNvbmZpZyBmaWxlIHdhcyByZWFkIHN1Y2Nlc3NmdWxseSBhbmQgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnIHdhcyBwb3B1bGF0ZWQgZnJvbSB0aGUgZmlsZS4NCiAgICAgICAgICAgIFJldHVybnMgJGZhbHNlIGlmIHJlYWRpbmcgZmFpbGVkIGFuZCBkZWZhdWx0cyB3ZXJlIGxvYWRlZCBpbnN0ZWFkIChvciBpZiBsb2FkaW5nIGRlZmF1bHRzIGFsc28gZmFpbGVkKS4NCiAgICAgICAgLk5PVEVTDQogICAgICAgICAgICAtIE1vZGlmaWVzICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZy4NCiAgICAgICAgICAgIC0gUmVxdWlyZXMgdGhlICdJbmlGaWxlJyBjbGFzcyAoZnJvbSBjbGFzc2VzLnBzbTEpLg0KICAgICAgICAgICAgLSBSZWxpZXMgb24gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcgc3RydWN0dXJlICguUGF0aHMuSW5pLCAuRGVmYXVsdENvbmZpZykuDQogICAgICAgICAgICAtIFVzZXMgdGhlIGludGVybmFsIExvYWREZWZhdWx0Q29uZmlnT25FcnJvciBmdW5jdGlvbiBmb3IgZmFsbGJhY2suDQogICAgICAgICAgICAtIExvZ3Mgb3V0Y29tZXMgYW5kIGVycm9ycyB0byB0aGUgaG9zdCBzdHJlYW0uDQogICAgICAgICM+DQogICAgICAgIFtDbWRsZXRCaW5kaW5nKCldDQogICAgICAgIFtPdXRwdXRUeXBlKFtib29sXSldDQogICAgICAgIHBhcmFtKA0KICAgICAgICAgICAgW1BhcmFtZXRlcigpXQ0KICAgICAgICAgICAgW3N0cmluZ10kQ29uZmlnUGF0aCA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkluaQ0KICAgICAgICApDQoNCiAgICAgICAgI3JlZ2lvbiBTdGVwOiBWYWxpZGF0ZSBDb25maWcgUGF0aA0KICAgICAgICBpZiAoW3N0cmluZ106OklzTnVsbE9yV2hpdGVTcGFjZSgkQ29uZmlnUGF0aCkpIHsNCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgSU5JOiAoUmVhZC1Db25maWcpOiBDb25maWd1cmF0aW9uIHBhdGggaXMgbm90IGRlZmluZWQuIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KICAgICAgICAgICAgIyBBdHRlbXB0IHRvIGxvYWQgZGVmYXVsdHMgYXMgcGVyIG9yaWdpbmFsIGNhdGNoIGxvZ2ljDQogICAgICAgICAgICBSZXR1cm4gKExvYWREZWZhdWx0Q29uZmlnT25FcnJvciAtUmVhc29uICJDb25maWd1cmF0aW9uIHBhdGggbm90IGRlZmluZWQiKQ0KICAgICAgICB9DQogICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgSU5JOiAoUmVhZC1Db25maWcpOiBSZWFkaW5nIGNvbmZpZyBmcm9tICckQ29uZmlnUGF0aCciIC1Gb3JlZ3JvdW5kQ29sb3IgQ3lhbg0KICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFZhbGlkYXRlIENvbmZpZyBQYXRoDQoNCiAgICAgICAgI3JlZ2lvbiBTdGVwOiBSZWFkIElOSSBGaWxlDQogICAgICAgIHRyeQ0KICAgICAgICB7DQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IENoZWNrIEZpbGUgRXhpc3RlbmNlL1R5cGUNCiAgICAgICAgICAgIGlmICgtbm90IChUZXN0LVBhdGggLVBhdGggJENvbmZpZ1BhdGggLVBhdGhUeXBlIExlYWYpKSB7DQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChSZWFkLUNvbmZpZyk6IENvbmZpZyBmaWxlIG5vdCBmb3VuZCBvciBpcyBhIGRpcmVjdG9yeSBhdCAnJENvbmZpZ1BhdGgnLiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCiAgICAgICAgICAgICAgICAjIFBvcHVsYXRlIHdpdGggZGVmYXVsdHMgYXMgcGVyIG9yaWdpbmFsIGxvZ2ljDQogICAgICAgICAgICAgICAgUmV0dXJuIChMb2FkRGVmYXVsdENvbmZpZ09uRXJyb3IgLVJlYXNvbiAiQ29uZmlnIGZpbGUgbm90IGZvdW5kIGF0ICckQ29uZmlnUGF0aCciKQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBDaGVjayBGaWxlIEV4aXN0ZW5jZS9UeXBlDQoNCiAgICAgICAgICAgICNyZWdpb24gU3RlcDogVXNlIEluaUZpbGUgQ2xhc3MgdG8gUmVhZA0KICAgICAgICAgICAgIyBBc3N1bWluZyBJbmlGaWxlIGNsYXNzIGlzIGxvYWRlZA0KICAgICAgICAgICAgIyAkaW5pSGFuZGxlcjogSW5zdGFuY2Ugb2YgdGhlIEMjIGNsYXNzIHVzZWQgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgSU5JIGZpbGUuDQogICAgICAgICAgICAkaW5pSGFuZGxlciA9IFtJbmlGaWxlXTo6bmV3KCRDb25maWdQYXRoKQ0KICAgICAgICAgICAgIyAkcmVhZENvbmZpZzogVGhlIHJhdyBjb250ZW50IHJlYWQgZnJvbSB0aGUgSU5JIGZpbGUgYXMgYSAuTkVUIE9yZGVyZWREaWN0aW9uYXJ5Lg0KICAgICAgICAgICAgJHJlYWRDb25maWcgPSAkaW5pSGFuZGxlci5SZWFkSW5pRmlsZSgpDQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFVzZSBJbmlGaWxlIENsYXNzIHRvIFJlYWQNCg0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBDb252ZXJ0IHRvIFBvd2VyU2hlbGwgT3JkZXJlZERpY3Rpb25hcnkgJiBTdG9yZSBHbG9iYWxseQ0KICAgICAgICAgICAgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnID0gW29yZGVyZWRdQHt9DQogICAgICAgICAgICBpZiAoJG51bGwgLW5lICRyZWFkQ29uZmlnKSB7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHNlY3Rpb24gaW4gJHJlYWRDb25maWcuS2V5cykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skc2VjdGlvbl0gPSBbb3JkZXJlZF1Ae30NCiAgICAgICAgICAgICAgICAgICAgIyBFbnN1cmUgdGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGUgc2VjdGlvbiBrZXkgaXMgZGljdGlvbmFyeS1saWtlIGJlZm9yZSBpdGVyYXRpbmcga2V5cw0KICAgICAgICAgICAgICAgICAgICBpZiAoJHJlYWRDb25maWdbJHNlY3Rpb25dIC1pcyBbU3lzdGVtLkNvbGxlY3Rpb25zLklEaWN0aW9uYXJ5XSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGtleSBpbiAkcmVhZENvbmZpZ1skc2VjdGlvbl0uS2V5cykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJHNlY3Rpb25dWyRrZXldID0gJHJlYWRDb25maWdbJHNlY3Rpb25dWyRrZXldDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIElOSTogKFJlYWQtQ29uZmlnKTogU2VjdGlvbiAnWyRzZWN0aW9uXScgaW4gSU5JIGZpbGUgJyRDb25maWdQYXRoJyBkb2VzIG5vdCBjb250YWluIGtleS12YWx1ZSBwYWlycy4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgSU5JOiAoUmVhZC1Db25maWcpOiBSZWFkaW5nICckQ29uZmlnUGF0aCcgcmV0dXJuZWQgbnVsbC4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICAgICAgIyBJZiBudWxsLCB0cmVhdCBhcyBlcnJvciBhbmQgbG9hZCBkZWZhdWx0cw0KICAgICAgICAgICAgICAgIFJldHVybiAoTG9hZERlZmF1bHRDb25maWdPbkVycm9yIC1SZWFzb24gIlJlYWRpbmcgY29uZmlnIGZpbGUgJyRDb25maWdQYXRoJyByZXR1cm5lZCBudWxsIikNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogQ29udmVydCB0byBQb3dlclNoZWxsIE9yZGVyZWREaWN0aW9uYXJ5ICYgU3RvcmUgR2xvYmFsbHkNCg0KICAgICAgICAgICAgI3JlZ2lvbiBTdGVwOiBTdWNjZXNzDQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIElOSTogKFJlYWQtQ29uZmlnKTogQ29uZmlnIGxvYWRlZCBzdWNjZXNzZnVsbHkgZnJvbSAnJENvbmZpZ1BhdGgnLiIgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KICAgICAgICAgICAgcmV0dXJuICR0cnVlDQogICAgICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFN1Y2Nlc3MNCiAgICAgICAgfQ0KICAgICAgICBjYXRjaA0KICAgICAgICB7DQogICAgICAgICAgICAjcmVnaW9uIFN0ZXA6IEVycm9yIEhhbmRsaW5nIC0gRmFpbGVkIHRvIFJlYWQvUHJvY2Vzcw0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChSZWFkLUNvbmZpZyk6IEZhaWxlZCB0byByZWFkL3Byb2Nlc3MgY29uZmlnIGZpbGUgJyRDb25maWdQYXRoJy4gRXJyb3I6ICQoJF8uRXhjZXB0aW9uLk1lc3NhZ2UpIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KICAgICAgICAgICAgIyBBdHRlbXB0IHRvIGxvYWQgZGVmYXVsdHMgYXMgYSBmYWxsYmFjaw0KICAgICAgICAgICAgUmV0dXJuIChMb2FkRGVmYXVsdENvbmZpZ09uRXJyb3IgLVJlYXNvbiAiRXJyb3IgcmVhZGluZy9wcm9jZXNzaW5nICckQ29uZmlnUGF0aCc6ICQoJF8uRXhjZXB0aW9uLk1lc3NhZ2UpIikNCiAgICAgICAgICAgICNlbmRyZWdpb24gU3RlcDogRXJyb3IgSGFuZGxpbmcgLSBGYWlsZWQgdG8gUmVhZC9Qcm9jZXNzDQogICAgICAgIH0NCiAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBSZWFkIElOSSBGaWxlDQogICAgfQ0KICAgICNlbmRyZWdpb24gRnVuY3Rpb246IFJlYWQtQ29uZmlnDQoNCiAgICAjcmVnaW9uIEZ1bmN0aW9uOiBXcml0ZS1Db25maWcNCiAgICBmdW5jdGlvbiBXcml0ZS1Db25maWcNCiAgICB7DQogICAgICAgIDwjDQogICAgICAgIC5TWU5PUFNJUw0KICAgICAgICAgICAgV3JpdGVzIGEgY29uZmlndXJhdGlvbiBkaWN0aW9uYXJ5IHRvIGFuIElOSSBmaWxlLg0KICAgICAgICAuREVTQ1JJUFRJT04NCiAgICAgICAgICAgIFRha2VzIGEgUG93ZXJTaGVsbCBvcmRlcmVkIGRpY3Rpb25hcnkgKHR5cGljYWxseSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcpIGFuZCB3cml0ZXMgaXQNCiAgICAgICAgICAgIHRvIHRoZSBzcGVjaWZpZWQgSU5JIGZpbGUgcGF0aCB1c2luZyB0aGUgQyMgJ0luaUZpbGUnIGNsYXNzLg0KICAgICAgICAgICAgSXQgaGFuZGxlcyBjb252ZXJ0aW5nIGFycmF5IHZhbHVlcyB3aXRoaW4gdGhlIGRpY3Rpb25hcnkgdG8gY29tbWEtc2VwYXJhdGVkIHN0cmluZ3MsDQogICAgICAgICAgICBhcyBJTkkgZmlsZXMgZG8gbm90IG5hdGl2ZWx5IHN1cHBvcnQgYXJyYXlzLg0KICAgICAgICAgICAgSXQgYWxzbyBlbnN1cmVzIHRoZSB0YXJnZXQgZGlyZWN0b3J5IGZvciB0aGUgSU5JIGZpbGUgZXhpc3RzLCBjcmVhdGluZyBpdCBpZiBuZWNlc3NhcnkuDQogICAgICAgIC5QQVJBTUVURVIgQ29uZmlnDQogICAgICAgICAgICBbU3lzdGVtLkNvbGxlY3Rpb25zLklEaWN0aW9uYXJ5XSBUaGUgY29uZmlndXJhdGlvbiBkYXRhIChbb3JkZXJlZF0gZGljdGlvbmFyeSkgdG8gd3JpdGUuIERlZmF1bHRzIHRvICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZyBpZiBub3QgcHJvdmlkZWQuDQogICAgICAgIC5QQVJBTUVURVIgQ29uZmlnUGF0aA0KICAgICAgICAgICAgW3N0cmluZ10gVGhlIGZ1bGwgcGF0aCB0byB0aGUgSU5JIGZpbGUgdG8gd3JpdGUuIERlZmF1bHRzIHRvICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkluaSBpZiBub3QgcHJvdmlkZWQuDQogICAgICAgIC5PVVRQVVRTDQogICAgICAgICAgICBbYm9vbF0gUmV0dXJucyAkdHJ1ZSBpZiB0aGUgY29uZmlndXJhdGlvbiB3YXMgd3JpdHRlbiBzdWNjZXNzZnVsbHkgdG8gdGhlIGZpbGUuDQogICAgICAgICAgICBSZXR1cm5zICRmYWxzZSBpZiBhbnkgZXJyb3Igb2NjdXJyZWQgZHVyaW5nIGRpcmVjdG9yeSBjcmVhdGlvbiwgZGF0YSBwcmVwYXJhdGlvbiwgb3IgZmlsZSB3cml0aW5nLg0KICAgICAgICAuTk9URVMNCiAgICAgICAgICAgIC0gUmVxdWlyZXMgdGhlICdJbmlGaWxlJyBjbGFzcyAoZnJvbSBjbGFzc2VzLnBzbTEpLg0KICAgICAgICAgICAgLSBDcmVhdGVzIHRoZSBkZXN0aW5hdGlvbiBkaXJlY3RvcnkgaWYgaXQgZG9lc24ndCBleGlzdC4NCiAgICAgICAgICAgIC0gQ29udmVydHMgYXJyYXkgdmFsdWVzIHRvIGNvbW1hLXNlcGFyYXRlZCBzdHJpbmdzLiBPdGhlciBjb21wbGV4IHR5cGVzIG1pZ2h0IG5vdCBiZSBoYW5kbGVkIGNvcnJlY3RseS4NCiAgICAgICAgICAgIC0gU3VwcG9ydHMgLVdoYXRJZiBhbmQgLUNvbmZpcm0gdGhyb3VnaCBbQ21kbGV0QmluZGluZyhTdXBwb3J0c1Nob3VsZFByb2Nlc3M9JHRydWUpXS4NCiAgICAgICAgICAgIC0gTG9ncyBwcm9ncmVzcyBhbmQgZXJyb3JzIHRvIHRoZSBob3N0IHN0cmVhbS4NCiAgICAgICAgIz4NCiAgICAgICAgW0NtZGxldEJpbmRpbmcoU3VwcG9ydHNTaG91bGRQcm9jZXNzPSR0cnVlKV0gIyBBZGRlZCBTaG91bGRQcm9jZXNzIHN1cHBvcnQNCiAgICAgICAgW091dHB1dFR5cGUoW2Jvb2xdKV0NCiAgICAgICAgcGFyYW0oDQogICAgICAgICAgICBbUGFyYW1ldGVyKCldDQogICAgICAgICAgICBbU3lzdGVtLkNvbGxlY3Rpb25zLklEaWN0aW9uYXJ5XSRDb25maWcgPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcsICMgQWNjZXB0IFBTIFtvcmRlcmVkXSBvciAuTkVUDQoNCiAgICAgICAgICAgIFtQYXJhbWV0ZXIoKV0NCiAgICAgICAgICAgIFtzdHJpbmddJENvbmZpZ1BhdGggPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5QYXRocy5JbmkNCiAgICAgICAgKQ0KDQogICAgICAgICNyZWdpb24gU3RlcDogVmFsaWRhdGUgSW5wdXRzDQogICAgICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JXaGl0ZVNwYWNlKCRDb25maWdQYXRoKSkgew0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChXcml0ZS1Db25maWcpOiBDb25maWd1cmF0aW9uIHBhdGggaXMgbm90IGRlZmluZWQuIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KICAgICAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgICAgICB9DQogICAgICAgIGlmICgkbnVsbCAtZXEgJENvbmZpZykgew0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChXcml0ZS1Db25maWcpOiBDb25maWd1cmF0aW9uIGRhdGEgdG8gd3JpdGUgaXMgbnVsbC4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgICAgIH0NCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChXcml0ZS1Db25maWcpOiBQcmVwYXJpbmcgdG8gd3JpdGUgY29uZmlnIHRvICckQ29uZmlnUGF0aCciIC1Gb3JlZ3JvdW5kQ29sb3IgQ3lhbg0KDQogICAgICAgIGlmICgtbm90ICRwc2NtZGxldC5TaG91bGRQcm9jZXNzKCRDb25maWdQYXRoLCAiV3JpdGUgQ29uZmlndXJhdGlvbiIpKSB7DQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIElOSTogKFdyaXRlLUNvbmZpZyk6IFdyaXRlIG9wZXJhdGlvbiBjYW5jZWxsZWQgYnkgU2hvdWxkUHJvY2Vzcy4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQogICAgICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgICAgIH0NCiAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBWYWxpZGF0ZSBJbnB1dHMNCg0KICAgICAgICAjcmVnaW9uIFN0ZXA6IEVuc3VyZSBEaXJlY3RvcnkgRXhpc3RzDQogICAgICAgIHRyeQ0KICAgICAgICB7DQogICAgICAgICAgICAkY29uZmlnRGlyID0gU3BsaXQtUGF0aCAtUGF0aCAkQ29uZmlnUGF0aCAtUGFyZW50DQogICAgICAgICAgICBpZiAoLW5vdCAoVGVzdC1QYXRoIC1QYXRoICRjb25maWdEaXIgLVBhdGhUeXBlIENvbnRhaW5lcikpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChXcml0ZS1Db25maWcpOiBDcmVhdGluZyBkaXJlY3RvcnkgJyRjb25maWdEaXInLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KICAgICAgICAgICAgICAgIE5ldy1JdGVtIC1JdGVtVHlwZSBEaXJlY3RvcnkgLVBhdGggJGNvbmZpZ0RpciAtRm9yY2UgLUVycm9yQWN0aW9uIFN0b3AgfCBPdXQtTnVsbA0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGNhdGNoDQogICAgICAgIHsNCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgSU5JOiAoV3JpdGUtQ29uZmlnKTogRmFpbGVkIHRvIGNyZWF0ZSBkaXJlY3RvcnkgJyRjb25maWdEaXInLiBFcnJvcjogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgICAgIH0NCiAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBFbnN1cmUgRGlyZWN0b3J5IEV4aXN0cw0KDQogICAgICAgICNyZWdpb24gU3RlcDogUHJlcGFyZSBEYXRhIGZvciBXcml0aW5nIChIYW5kbGUgQXJyYXlzLCBDb252ZXJ0IHRvIC5ORVQgRGljdGlvbmFyeSkNCiAgICAgICAgIyBOZWVkIHRvIGNvbnZlcnQgUFMgW29yZGVyZWRdIHRvIC5ORVQgT3JkZXJlZERpY3Rpb25hcnkgZm9yIHRoZSBDIyBjbGFzcw0KICAgICAgICAjICRjb25maWdUb1dyaXRlOiBUaGUgLk5FVCBPcmRlcmVkRGljdGlvbmFyeSBwcmVwYXJlZCBmb3IgdGhlIEMjIEluaUZpbGUgY2xhc3MuDQogICAgICAgICRjb25maWdUb1dyaXRlID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkNCg0KICAgICAgICB0cnkNCiAgICAgICAgew0KICAgICAgICAgICAgZm9yZWFjaCAoJHNlY3Rpb25LZXkgaW4gJENvbmZpZy5LZXlzKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICRzZWN0aW9uTmFtZSA9ICRzZWN0aW9uS2V5LlRvU3RyaW5nKCkgIyBFbnN1cmUgc3RyaW5nIGtleQ0KICAgICAgICAgICAgICAgICMgRW5zdXJlIHNlY3Rpb24gdmFsdWUgaXMgYSBkaWN0aW9uYXJ5IGJlZm9yZSBwcm9jZWVkaW5nDQogICAgICAgICAgICAgICAgaWYgKCRDb25maWdbJHNlY3Rpb25LZXldIC1pcyBbU3lzdGVtLkNvbGxlY3Rpb25zLklEaWN0aW9uYXJ5XSkgew0KICAgICAgICAgICAgICAgICAgICAkc2VjdGlvbkRhdGEgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICAgICAgICAgICAgICAgICAkc291cmNlU2VjdGlvbiA9ICRDb25maWdbJHNlY3Rpb25LZXldDQoNCiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGl0ZW1LZXkgaW4gJHNvdXJjZVNlY3Rpb24uS2V5cykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgJGl0ZW1OYW1lID0gJGl0ZW1LZXkuVG9TdHJpbmcoKSAjIEVuc3VyZSBzdHJpbmcga2V5DQogICAgICAgICAgICAgICAgICAgICAgICAkdmFsdWUgPSAkc291cmNlU2VjdGlvblskaXRlbUtleV0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgIyBQcm9jZXNzIGFycmF5czogQ29udmVydCB0aGVtIHRvIGNvbW1hLXNlcGFyYXRlZCBzdHJpbmdzDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHZhbHVlIC1pcyBbQXJyYXldKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRmlsdGVyIG91dCBwb3RlbnRpYWwgJG51bGwgZWxlbWVudHMgYmVmb3JlIGpvaW5pbmcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RyaW5nRWxlbWVudHMgPSAkdmFsdWUgfCBXaGVyZS1PYmplY3QgeyAkXyAtbmUgJG51bGwgfSB8IEZvckVhY2gtT2JqZWN0IHsgJF8uVG9TdHJpbmcoKSB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHByZXBhcmVkVmFsdWUgPSAkc3RyaW5nRWxlbWVudHMgLWpvaW4gJywnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBVc2UgVmVyYm9zZSBzdHJlYW0gZm9yIHRoaXMgZGV0YWlsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiSU5JOiAoV3JpdGUtQ29uZmlnKTogQ29udmVydGVkIGFycmF5IGZvciBbJHNlY3Rpb25OYW1lXSRpdGVtTmFtZSB0byAnJHByZXBhcmVkVmFsdWUnIg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmICgkbnVsbCAtbmUgJHZhbHVlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ29udmVydCBvdGhlciBub24tbnVsbCB2YWx1ZXMgdG8gc3RyaW5nIGp1c3QgaW4gY2FzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwcmVwYXJlZFZhbHVlID0gJHZhbHVlLlRvU3RyaW5nKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEhhbmRsZSBudWxsIHZhbHVlICh3cml0ZSBhcyBlbXB0eSBzdHJpbmcpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHByZXBhcmVkVmFsdWUgPSAnJw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgJHNlY3Rpb25EYXRhLkFkZCgkaXRlbU5hbWUsICRwcmVwYXJlZFZhbHVlKQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICRjb25maWdUb1dyaXRlLkFkZCgkc2VjdGlvbk5hbWUsICRzZWN0aW9uRGF0YSkNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIgIElOSTogKFdyaXRlLUNvbmZpZyk6IFNlY3Rpb24gJyRzZWN0aW9uTmFtZScgaXMgbm90IGEgZGljdGlvbmFyeSwgc2tpcHBpbmcgd3JpdGUgZm9yIHRoaXMgc2VjdGlvbi4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIHsNCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgSU5JOiAoV3JpdGUtQ29uZmlnKTogRmFpbGVkIHRvIHByZXBhcmUgY29uZmlndXJhdGlvbiBkYXRhIGZvciB3cml0aW5nLiBFcnJvcjogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgICAgIH0NCiAgICAgICAgI2VuZHJlZ2lvbiBTdGVwOiBQcmVwYXJlIERhdGEgZm9yIFdyaXRpbmcgKEhhbmRsZSBBcnJheXMsIENvbnZlcnQgdG8gLk5FVCBEaWN0aW9uYXJ5KQ0KDQogICAgICAgICNyZWdpb24gU3RlcDogV3JpdGUgdXNpbmcgSW5pRmlsZSBDbGFzcw0KICAgICAgICB0cnkNCiAgICAgICAgew0KICAgICAgICAgICAgIyBBc3N1bWluZyBJbmlGaWxlIGNsYXNzIGlzIGxvYWRlZA0KICAgICAgICAgICAgIyAkaW5pRmlsZTogSW5zdGFuY2Ugb2YgdGhlIEMjIGNsYXNzIHVzZWQgdG8gd3JpdGUgdGhlIElOSSBmaWxlLg0KICAgICAgICAgICAgJGluaUZpbGUgPSBbSW5pRmlsZV06Om5ldygkQ29uZmlnUGF0aCkNCiAgICAgICAgICAgICMgUGFzcyB0aGUgcHJlcGFyZWQgLk5FVCBPcmRlcmVkRGljdGlvbmFyeSB0byB0aGUgd3JpdGluZyBtZXRob2QNCiAgICAgICAgICAgICRpbmlGaWxlLldyaXRlSW5pRmlsZSgkY29uZmlnVG9Xcml0ZSkgIyBBc3N1bWVzIFdyaXRlSW5pRmlsZSBoYW5kbGVzIHBvdGVudGlhbCBJT0V4Y2VwdGlvbnMNCg0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiICBJTkk6IChXcml0ZS1Db25maWcpOiBDb25maWcgd3JpdHRlbiBzdWNjZXNzZnVsbHkgdG8gJyRDb25maWdQYXRoJy4iIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCiAgICAgICAgICAgIHJldHVybiAkdHJ1ZQ0KICAgICAgICB9DQogICAgICAgIGNhdGNoICMgQ2F0Y2ggZXJyb3JzIHNwZWNpZmljYWxseSBmcm9tIHRoZSBXcml0ZUluaUZpbGUgY2FsbCBvciBpbnN0YW50aWF0aW9uDQogICAgICAgIHsNCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiAgSU5JOiAoV3JpdGUtQ29uZmlnKTogRmFpbGVkIHRvIHdyaXRlIGNvbmZpZyB1c2luZyBJbmlGaWxlIGNsYXNzIHRvICckQ29uZmlnUGF0aCcuIEVycm9yOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIgLUZvcmVncm91bmRDb2xvciBSZWQNCiAgICAgICAgICAgIHJldHVybiAkZmFsc2UNCiAgICAgICAgfQ0KICAgICAgICAjZW5kcmVnaW9uIFN0ZXA6IFdyaXRlIHVzaW5nIEluaUZpbGUgQ2xhc3MNCiAgICB9DQogICAgI2VuZHJlZ2lvbiBGdW5jdGlvbjogV3JpdGUtQ29uZmlnDQoNCiNlbmRyZWdpb24gQ29yZSBDb25maWd1cmF0aW9uIEZ1bmN0aW9ucw0KDQojcmVnaW9uIE1vZHVsZSBFeHBvcnRzDQoNCiAgICAjcmVnaW9uIFN0ZXA6IEV4cG9ydCBQdWJsaWMgRnVuY3Rpb25zDQogICAgIyBFeHBvcnQgZnVuY3Rpb25zIGludGVuZGVkIGZvciBleHRlcm5hbCB1c2UgYnkgb3RoZXIgbW9kdWxlcyBvciBzY3JpcHRzLg0KICAgIEV4cG9ydC1Nb2R1bGVNZW1iZXIgLUZ1bmN0aW9uIEluaXRpYWxpemUtSW5pQ29uZmlnLCBSZWFkLUNvbmZpZywgV3JpdGUtQ29uZmlnLCBHZXQtSW5pRmlsZUNvbnRlbnQsIENvcHktT3JkZXJlZERpY3Rpb25hcnksIExvYWREZWZhdWx0Q29uZmlnT25FcnJvcg0KICAgICNlbmRyZWdpb24gU3RlcDogRXhwb3J0IFB1YmxpYyBGdW5jdGlvbnMNCg0KI2VuZHJlZ2lvbiBNb2R1bGUgRXhwb3J0cw==
			'
		}
		'ui.psm1'       = @{ 
			Priority = 'Critical';  
			Order = 5; 
			Dependencies = @('classes.psm1', 'ini.psm1');
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ui.psm1');
			Base64Content = '
				PCMgdWkucHNtMQ0KICAgIC5TWU5PUFNJUw0KICAgICAgICBVc2VyIEludGVyZmFjZSBNYW5hZ2VyIGZvciBFbnRyb3BpYSBEYXNoYm9hcmQuDQogICAgLkRFU0NSSVBUSU9ODQogICAgICAgIFRoaXMgbW9kdWxlIGNyZWF0ZXMgYW5kIG1hbmFnZXMgdGhlIGNvbXBsZXRlIHVzZXIgaW50ZXJmYWNlIGZvciBFbnRyb3BpYSBEYXNoYm9hcmQ6DQogICAgICAgIC0gQnVpbGRzIHRoZSBtYWluIGFwcGxpY2F0aW9uIHdpbmRvdyBhbmQgYWxsIGRpYWxvZyBmb3Jtcw0KICAgICAgICAtIENyZWF0ZXMgaW50ZXJhY3RpdmUgY29udHJvbHMgKGJ1dHRvbnMsIHBhbmVscywgZ3JpZHMsIHRleHQgYm94ZXMpDQogICAgICAgIC0gSGFuZGxlcyB3aW5kb3cgZHJhZ2dpbmcsIHJlc2l6aW5nLCBhbmQgcG9zaXRpb25pbmcNCiAgICAgICAgLSBNYW5hZ2VzIGNsaWVudCBwcm9jZXNzIG1vbml0b3JpbmcgZGlzcGxheQ0KICAgICAgICAtIEltcGxlbWVudHMgc2V0dGluZ3MgbWFuYWdlbWVudCB0aHJvdWdoIHZpc3VhbCBpbnRlcmZhY2UNCiAgICAgICAgLSBNYWludGFpbnMgcmVzcG9uc2l2ZSBsYXlvdXQgYWNyb3NzIGRpZmZlcmVudCBzY3JlZW4gc2l6ZXMNCiAgICAgICAgLSBQcm92aWRlcyBMYXVuY2ggLyBMb2dpbiAvIEZ0b29sIGF1dG9tYXRpb24NCiAgICAuTk9URVMNCiAgICAgICAgQXV0aG9yOiBJbW1vcnRhbCAvIERpdmluZQ0KICAgICAgICBWZXJzaW9uOiAxLjEuMw0KICAgICAgICBSZXF1aXJlczogUG93ZXJTaGVsbCA1LjErLCAuTkVUIEZyYW1ld29yayA0LjUrLCBjbGFzc2VzLnBzbTEsIGluaS5wc20xLCBkYXRhZ3JpZC5wc20xDQoNCiAgICAgICAgRG9jdW1lbnRhdGlvbiBTdGFuZGFyZHMgRm9sbG93ZWQ6DQogICAgICAgIC0gTW9kdWxlIExldmVsIERvY3VtZW50YXRpb246IFN5bm9wc2lzLCBEZXNjcmlwdGlvbiwgTm90ZXMuDQogICAgICAgIC0gRnVuY3Rpb24gTGV2ZWwgRG9jdW1lbnRhdGlvbjogU3lub3BzaXMsIFBhcmFtZXRlciBEZXNjcmlwdGlvbnMsIE91dHB1dCBTcGVjaWZpY2F0aW9ucy4NCiAgICAgICAgLSBDb2RlIE9yZ2FuaXphdGlvbjogTG9naWNhbCBncm91cGluZyB1c2luZyAjcmVnaW9uIC8gI2VuZHJlZ2lvbi4gRnVuY3Rpb25zIG9yZ2FuaXplZCBieSB3b3JrZmxvdy4NCiAgICAgICAgLSBTdGVwIERvY3VtZW50YXRpb246IENvZGUgYmxvY2tzIGVuY2xvc2VkIGluICcjcmVnaW9uIFN0ZXA6IERlc2NyaXB0aW9uJyAvICcjZW5kcmVnaW9uIFN0ZXA6IERlc2NyaXB0aW9uJy4NCiAgICAgICAgLSBWYXJpYWJsZSBEZWZpbml0aW9uczogSW5saW5lIGNvbW1lbnRzIGRlc2NyaWJpbmcgdGhlIHB1cnBvc2Ugb2Ygc2lnbmlmaWNhbnQgdmFyaWFibGVzLg0KICAgICAgICAtIEVycm9yIEhhbmRsaW5nOiBDb21wcmVoZW5zaXZlIHRyeS9jYXRjaC9maW5hbGx5IGJsb2NrcyB3aXRoIGVycm9yIGxvZ2dpbmcgYW5kIHVzZXIgbm90aWZpY2F0aW9uLg0KDQogICAgICAgIFRoaXMgbW9kdWxlIHJlbGllcyBoZWF2aWx5IG9uIHRoZSBnbG9iYWwgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcgb2JqZWN0IGZvciBzdGF0ZSBhbmQgY29uZmlndXJhdGlvbi4NCiM+DQoNCiNyZWdpb24gSGVscGVyIEZ1bmN0aW9ucw0KICAgICNyZWdpb24gRnVuY3Rpb246IFN5bmMtVUlUb0NvbmZpZw0KCWZ1bmN0aW9uIFN5bmMtVUlUb0NvbmZpZw0KCXsNCgkJPCMNCgkJLlNZTk9QU0lTDQoJCQlTeW5jaHJvbml6ZXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgVUkgaW5wdXQgZWxlbWVudHMgdG8gdGhlIGdsb2JhbCBjb25maWd1cmF0aW9uIG9iamVjdC4NCgkJLk9VVFBVVFMNCgkJCVtib29sXSBSZXR1cm5zICR0cnVlIGlmIHN5bmNocm9uaXphdGlvbiB3YXMgc3VjY2Vzc2Z1bCwgJGZhbHNlIG90aGVyd2lzZS4NCgkJLk5PVEVTDQoJCQlSZWFkcyB2YWx1ZXMgZnJvbSBVSSBjb250cm9scyAoVGV4dEJveGVzLCBDb21ib0JveGVzKSBhbmQgdXBkYXRlcyB0aGUgY29ycmVzcG9uZGluZw0KCQkJa2V5cyBpbiB0aGUgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnIGhhc2h0YWJsZS4gRW5zdXJlcyBuZWNlc3Nhcnkgc2VjdGlvbnMgZXhpc3QuDQoJCSM+DQoJCVtDbWRsZXRCaW5kaW5nKCldDQoJCVtPdXRwdXRUeXBlKFtib29sXSldDQoJCXBhcmFtKCkNCg0KCQkjcmVnaW9uIFN0ZXA6IEF0dGVtcHQgdG8gc3luYyBVSSBzdGF0ZSB0byBnbG9iYWwgY29uZmlnDQoJCQl0cnkNCgkJCXsNCgkJCQkjcmVnaW9uIFN0ZXA6IExvZyBTeW5jIFN0YXJ0DQoJCQkJCVdyaXRlLVZlcmJvc2UgJyAgVUk6IFN5bmNpbmcgVUkgdG8gY29uZmlnJyAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCgkJCQkjZW5kcmVnaW9uIFN0ZXA6IExvZyBTeW5jIFN0YXJ0DQoNCgkJCQkjcmVnaW9uIFN0ZXA6IFZhbGlkYXRlIFVJIGFuZCBDb25maWcgb2JqZWN0cw0KCQkJCQkkVUkgPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSQ0KCQkJCQlpZiAoLW5vdCAoJFVJIC1hbmQgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnKSkNCgkJCQkJew0KCQkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogVUkgb3IgQ29uZmlnIG9iamVjdCBub3QgZm91bmQsIGNhbm5vdCBzeW5jLicgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJCQkJCXJldHVybiAkZmFsc2UNCgkJCQkJfQ0KCQkJCSNlbmRyZWdpb24gU3RlcDogVmFsaWRhdGUgVUkgYW5kIENvbmZpZyBvYmplY3RzDQoNCgkJCQkjcmVnaW9uIFN0ZXA6IEVuc3VyZSByZXF1aXJlZCBjb25maWcgc2VjdGlvbnMgZXhpc3QNCgkJCQkJIyBFbnN1cmUgc2VjdGlvbnMgZXhpc3QgaW4gdGhlIGNvbmZpZyBoYXNodGFibGUgYmVmb3JlIGF0dGVtcHRpbmcgdG8gd3JpdGUgdG8gdGhlbS4NCgkJCQkJQCgnTGF1bmNoZXJQYXRoJywgJ1Byb2Nlc3NOYW1lJywgJ01heENsaWVudHMnLCAnTG9naW4nKSB8IEZvckVhY2gtT2JqZWN0IHsNCgkJCQkJCWlmICgtbm90ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZy5Db250YWlucygkXykpDQoJCQkJCQl7DQoJCQkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWyRfXSA9IFtvcmRlcmVkXUB7fQ0KCQkJCQkJfQ0KCQkJCQl9DQoJCQkJI2VuZHJlZ2lvbiBTdGVwOiBFbnN1cmUgcmVxdWlyZWQgY29uZmlnIHNlY3Rpb25zIGV4aXN0DQoNCgkJCQkjcmVnaW9uIFN0ZXA6IFN5bmMgYmFzaWMgVUkgY29udHJvbCB2YWx1ZXMgdG8gY29uZmlnDQoJCQkJCSMgUmVhZCB2YWx1ZXMgZnJvbSBUZXh0Qm94ZXMgYW5kIHVwZGF0ZSB0aGUgY29uZmlnLg0KCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ0xhdW5jaGVyUGF0aCddWydMYXVuY2hlclBhdGgnXSA9ICRVSS5JbnB1dExhdW5jaGVyLlRleHQNCgkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydQcm9jZXNzTmFtZSddWydQcm9jZXNzTmFtZSddID0gJFVJLklucHV0UHJvY2Vzcy5UZXh0DQoJCQkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snTWF4Q2xpZW50cyddWydNYXhDbGllbnRzJ10gPSAkVUkuSW5wdXRNYXguVGV4dA0KCQkJCSNlbmRyZWdpb24gU3RlcDogU3luYyBiYXNpYyBVSSBjb250cm9sIHZhbHVlcyB0byBjb25maWcNCg0KCQkJCSNyZWdpb24gU3RlcDogU3luYyBsb2dpbiBwb3NpdGlvbiBDb21ib0JveCBzZWxlY3Rpb25zIHRvIGNvbmZpZw0KCQkJCQkjIENvbGxlY3Qgc2VsZWN0ZWQgaXRlbXMgZnJvbSBsb2dpbiBwb3NpdGlvbiBDb21ib0JveGVzLg0KCQkJCQkkbG9naW5Qb3MgPSBAKCkNCgkJCQkJJFVJLkxvZ2luLktleXMgfCBTb3J0LU9iamVjdCB7IFtpbnRdKCRfIC1yZXBsYWNlICdMb2dpbicsICcnKSB9IHwgRm9yRWFjaC1PYmplY3Qgew0KCQkJCQkJJGNvbWJvID0gJFVJLkxvZ2luWyRfXQ0KCQkJCQkJJGxvZ2luUG9zICs9IGlmICgkY29tYm8uU2VsZWN0ZWRJdGVtKQ0KCQkJCQkJew0KCQkJCQkJCSRjb21iby5TZWxlY3RlZEl0ZW0NCgkJCQkJCX0NCgkJCQkJCWVsc2UNCgkJCQkJCXsNCgkJCQkJCQknMScgIyBEZWZhdWx0IHRvICcxJyBpZiBub3RoaW5nIGlzIHNlbGVjdGVkDQoJCQkJCQl9DQoJCQkJCX0NCgkJCQkJIyBTdG9yZSB0aGUgY29sbGVjdGVkIHBvc2l0aW9ucyBhcyBhIGNvbW1hLXNlcGFyYXRlZCBzdHJpbmcgaW4gdGhlIGNvbmZpZy4NCgkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMb2dpbiddWydMb2dpbiddID0gJGxvZ2luUG9zIC1qb2luICcsJw0KCQkJCSNlbmRyZWdpb24gU3RlcDogU3luYyBsb2dpbiBwb3NpdGlvbiBDb21ib0JveCBzZWxlY3Rpb25zIHRvIGNvbmZpZw0KDQoJCQkJI3JlZ2lvbiBTdGVwOiBTeW5jIGZpbmFsaXplIGNvbGxlY3RvciBsb2dpbiBjaGVja2JveCB0byBjb25maWcNCgkJCQkJIyBSZWFkIGNoZWNrYm94IHN0YXRlIGFuZCBzdG9yZSBhcyBzdHJpbmcgKDAgZm9yIGZhbHNlLCAxIGZvciB0cnVlKS4NCgkJCQkJJGZpbmFsaXplTG9naW5WYWx1ZSA9IGlmICgkVUkuRmluYWxpemVDb2xsZWN0b3JMb2dpbi5DaGVja2VkKSB7ICcxJyB9IGVsc2UgeyAnMCcgfQ0KCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ0xvZ2luJ11bJ0ZpbmFsaXplQ29sbGVjdG9yTG9naW4nXSA9ICRmaW5hbGl6ZUxvZ2luVmFsdWUNCgkJCQkjZW5kcmVnaW9uIFN0ZXA6IFN5bmMgZmluYWxpemUgY29sbGVjdG9yIGxvZ2luIGNoZWNrYm94IHRvIGNvbmZpZw0KDQoJCQkJI3JlZ2lvbiBTdGVwOiBTeW5jIE5ldmVyUmVzdGFydGluZyBjb2xsZWN0b3IgbG9naW4gY2hlY2tib3ggdG8gY29uZmlnDQoJCQkJCSMgUmVhZCBjaGVja2JveCBzdGF0ZSBhbmQgc3RvcmUgYXMgc3RyaW5nICgwIGZvciBmYWxzZSwgMSBmb3IgdHJ1ZSkuDQoJCQkJCSROZXZlclJlc3RhcnRpbmdMb2dpblZhbHVlID0gaWYgKCRVSS5OZXZlclJlc3RhcnRpbmdDb2xsZWN0b3JMb2dpbi5DaGVja2VkKSB7ICcxJyB9IGVsc2UgeyAnMCcgfQ0KCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ0xvZ2luJ11bJ05ldmVyUmVzdGFydGluZ0NvbGxlY3RvckxvZ2luJ10gPSAkTmV2ZXJSZXN0YXJ0aW5nTG9naW5WYWx1ZQ0KCQkJCSNlbmRyZWdpb24gU3RlcDogU3luYyBOZXZlclJlc3RhcnRpbmcgY29sbGVjdG9yIGxvZ2luIGNoZWNrYm94IHRvIGNvbmZpZw0KDQoJCQkJI3JlZ2lvbiBTdGVwOiBMb2cgU3luYyBTdWNjZXNzDQoJCQkJCVdyaXRlLVZlcmJvc2UgJyAgVUk6IFVJIHN5bmNlZCB0byBjb25maWcnIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCgkJCQkJcmV0dXJuICR0cnVlDQoJCQkJI2VuZHJlZ2lvbiBTdGVwOiBMb2cgU3luYyBTdWNjZXNzDQoJCQl9DQoJCQljYXRjaA0KCQkJew0KCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIGVycm9ycyBkdXJpbmcgc3luYw0KCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBGYWlsZWQgdG8gc3luYyBVSSB0byBjb25maWc6ICRfIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJCQlyZXR1cm4gJGZhbHNlDQoJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgZXJyb3JzIGR1cmluZyBzeW5jDQoJCQl9DQoJCSNlbmRyZWdpb24gU3RlcDogQXR0ZW1wdCB0byBzeW5jIFVJIHN0YXRlIHRvIGdsb2JhbCBjb25maWcNCgl9DQojZW5kcmVnaW9uIEZ1bmN0aW9uOiBTeW5jLVVJVG9Db25maWcNCg0KI3JlZ2lvbiBGdW5jdGlvbjogU3luYy1Db25maWdUb1VJDQoJZnVuY3Rpb24gU3luYy1Db25maWdUb1VJDQoJew0KCQk8Iw0KCQkuU1lOT1BTSVMNCgkJCVN5bmNocm9uaXplcyB0aGUgZ2xvYmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHZhbHVlcyB0byB0aGUgVUkgZWxlbWVudHMuDQoJCS5PVVRQVVRTDQoJCQlbYm9vbF0gUmV0dXJucyAkdHJ1ZSBpZiBzeW5jaHJvbml6YXRpb24gd2FzIHN1Y2Nlc3NmdWwsICRmYWxzZSBvdGhlcndpc2UuDQoJCS5OT1RFUw0KCQkJUmVhZHMgdmFsdWVzIGZyb20gdGhlICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZyBoYXNodGFibGUgYW5kIHVwZGF0ZXMgdGhlDQoJCQljb3JyZXNwb25kaW5nIFVJIGNvbnRyb2xzIChUZXh0Qm94ZXMsIENvbWJvQm94ZXMpLiBIYW5kbGVzIGNhc2VzIHdoZXJlIGNvbmZpZyB2YWx1ZXMgbWlnaHQgYmUgbWlzc2luZy4NCgkJIz4NCgkJW0NtZGxldEJpbmRpbmcoKV0NCgkJW091dHB1dFR5cGUoW2Jvb2xdKV0NCgkJcGFyYW0oKQ0KDQoJCSNyZWdpb24gU3RlcDogQXR0ZW1wdCB0byBzeW5jIGdsb2JhbCBjb25maWcgdG8gVUkgc3RhdGUNCgkJCXRyeQ0KCQkJew0KCQkJCSNyZWdpb24gU3RlcDogTG9nIFN5bmMgU3RhcnQNCgkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogU3luY2luZyBjb25maWcgdG8gVUknIC1Gb3JlZ3JvdW5kQ29sb3IgQ3lhbg0KCQkJCSNlbmRyZWdpb24gU3RlcDogTG9nIFN5bmMgU3RhcnQNCg0KCQkJCSNyZWdpb24gU3RlcDogVmFsaWRhdGUgVUkgYW5kIENvbmZpZyBvYmplY3RzDQoJCQkJCSRVSSA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJDQoJCQkJCWlmICgtbm90ICgkVUkgLWFuZCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcpKQ0KCQkJCQl7DQoJCQkJCQlXcml0ZS1WZXJib3NlICcgIFVJOiBVSSBvciBDb25maWcgb2JqZWN0IG5vdCBmb3VuZCwgY2Fubm90IHN5bmMuJyAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KCQkJCQkJcmV0dXJuICRmYWxzZQ0KCQkJCQl9DQoJCQkJI2VuZHJlZ2lvbiBTdGVwOiBWYWxpZGF0ZSBVSSBhbmQgQ29uZmlnIG9iamVjdHMNCg0KCQkJCSNyZWdpb24gU3RlcDogU3luYyBMYXVuY2hlclBhdGggZnJvbSBjb25maWcgdG8gVUkNCgkJCQkJIyBVcGRhdGUgTGF1bmNoZXIgUGF0aCBUZXh0Qm94IGlmIHRoZSBjb25maWcgdmFsdWUgZXhpc3RzLg0KCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMYXVuY2hlclBhdGgnXVsnTGF1bmNoZXJQYXRoJ10pDQoJCQkJCXsNCgkJCQkJCSRVSS5JbnB1dExhdW5jaGVyLlRleHQgPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ0xhdW5jaGVyUGF0aCddWydMYXVuY2hlclBhdGgnXQ0KCQkJCQl9DQoJCQkJI2VuZHJlZ2lvbiBTdGVwOiBTeW5jIExhdW5jaGVyUGF0aCBmcm9tIGNvbmZpZyB0byBVSQ0KDQoJCQkJI3JlZ2lvbiBTdGVwOiBTeW5jIFByb2Nlc3NOYW1lIGZyb20gY29uZmlnIHRvIFVJDQoJCQkJCSMgVXBkYXRlIFByb2Nlc3MgTmFtZSBUZXh0Qm94IGlmIHRoZSBjb25maWcgdmFsdWUgZXhpc3RzLg0KCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydQcm9jZXNzTmFtZSddWydQcm9jZXNzTmFtZSddKQ0KCQkJCQl7DQoJCQkJCQkkVUkuSW5wdXRQcm9jZXNzLlRleHQgPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ1Byb2Nlc3NOYW1lJ11bJ1Byb2Nlc3NOYW1lJ10NCgkJCQkJfQ0KCQkJCSNlbmRyZWdpb24gU3RlcDogU3luYyBQcm9jZXNzTmFtZSBmcm9tIGNvbmZpZyB0byBVSQ0KDQoJCQkJI3JlZ2lvbiBTdGVwOiBTeW5jIE1heENsaWVudHMgZnJvbSBjb25maWcgdG8gVUkNCgkJCQkJIyBVcGRhdGUgTWF4IENsaWVudHMgVGV4dEJveCBpZiB0aGUgY29uZmlnIHZhbHVlIGV4aXN0cy4NCgkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snTWF4Q2xpZW50cyddWydNYXhDbGllbnRzJ10pDQoJCQkJCXsNCgkJCQkJCSRVSS5JbnB1dE1heC5UZXh0ID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydNYXhDbGllbnRzJ11bJ01heENsaWVudHMnXQ0KCQkJCQl9DQoJCQkJI2VuZHJlZ2lvbiBTdGVwOiBTeW5jIE1heENsaWVudHMgZnJvbSBjb25maWcgdG8gVUkNCg0KCQkJCSNyZWdpb24gU3RlcDogU3luYyBsb2dpbiBwb3NpdGlvbiBjb25maWcgdG8gQ29tYm9Cb3ggc2VsZWN0aW9ucw0KCQkJCQkjIFVwZGF0ZSBMb2dpbiBQb3NpdGlvbiBDb21ib0JveGVzIGJhc2VkIG9uIHRoZSBjb21tYS1zZXBhcmF0ZWQgY29uZmlnIHN0cmluZy4NCgkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snTG9naW4nXVsnTG9naW4nXSkNCgkJCQkJew0KCQkJCQkJJHBvc2l0aW9ucyA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snTG9naW4nXVsnTG9naW4nXSAtc3BsaXQgJywnDQoNCgkJCQkJCSMgSXRlcmF0ZSB0aHJvdWdoIENvbWJvQm94ZXMgYW5kIHNldCBzZWxlY3RlZCBpdGVtIGJhc2VkIG9uIGNvbmZpZy4NCgkJCQkJCWZvciAoJGkgPSAwOyAkaSAtbHQgW01hdGhdOjpNaW4oJFVJLkxvZ2luLkNvdW50LCAkcG9zaXRpb25zLkNvdW50KTsgJGkrKykNCgkJCQkJCXsNCgkJCQkJCQkka2V5ID0gIkxvZ2luJCgkaSsxKSINCgkJCQkJCQkkdmFsdWUgPSAkcG9zaXRpb25zWyRpXQ0KCQkJCQkJCSRjb21ibyA9ICRVSS5Mb2dpblska2V5XQ0KDQoJCQkJCQkJIyBTZXQgc2VsZWN0ZWQgaXRlbSBvbmx5IGlmIHRoZSBDb21ib0JveCBleGlzdHMgYW5kIHRoZSB2YWx1ZSBpcyB2YWxpZC4NCgkJCQkJCQlpZiAoJGNvbWJvIC1hbmQgJGNvbWJvLkl0ZW1zLkNvbnRhaW5zKCR2YWx1ZSkpDQoJCQkJCQkJew0KCQkJCQkJCQkkY29tYm8uU2VsZWN0ZWRJdGVtID0gJHZhbHVlDQoJCQkJCQkJfQ0KCQkJCQkJfQ0KCQkJCQl9DQoJCQkJI2VuZHJlZ2lvbiBTdGVwOiBTeW5jIGxvZ2luIHBvc2l0aW9uIGNvbmZpZyB0byBDb21ib0JveCBzZWxlY3Rpb25zDQoNCgkJCQkjcmVnaW9uIFN0ZXA6IFN5bmMgZmluYWxpemUgY29sbGVjdG9yIGxvZ2luIGNvbmZpZyB0byBjaGVja2JveA0KCQkJCQkjIFVwZGF0ZSBGaW5hbGl6ZUNvbGxlY3RvckxvZ2luIENoZWNrQm94IGlmIHRoZSBjb25maWcgdmFsdWUgZXhpc3RzLg0KCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMb2dpbiddWydGaW5hbGl6ZUNvbGxlY3RvckxvZ2luJ10pDQoJCQkJCXsNCgkJCQkJCSRVSS5GaW5hbGl6ZUNvbGxlY3RvckxvZ2luLkNoZWNrZWQgPSAoW2ludF0kZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJ0xvZ2luJ11bJ0ZpbmFsaXplQ29sbGVjdG9yTG9naW4nXSkgLWVxIDENCgkJCQkJfQ0KCQkJCQllbHNlDQoJCQkJCXsNCgkJCQkJCSMgRGVmYXVsdCB0byB1bmNoZWNrZWQgaWYgc2V0dGluZyBkb2Vzbid0IGV4aXN0DQoJCQkJCQkkVUkuRmluYWxpemVDb2xsZWN0b3JMb2dpbi5DaGVja2VkID0gJGZhbHNlDQoJCQkJCX0NCgkJCQkjZW5kcmVnaW9uIFN0ZXA6IFN5bmMgZmluYWxpemUgY29sbGVjdG9yIGxvZ2luIGNvbmZpZyB0byBjaGVja2JveA0KDQoJCQkJI3JlZ2lvbiBTdGVwOiBTeW5jIE5ldmVyUmVzdGFydGluZyBjb2xsZWN0b3IgbG9naW4gY29uZmlnIHRvIGNoZWNrYm94DQoJCQkJCSMgVXBkYXRlIE5ldmVyUmVzdGFydGluZ0NvbGxlY3RvckxvZ2luIENoZWNrQm94IGlmIHRoZSBjb25maWcgdmFsdWUgZXhpc3RzLg0KCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWydMb2dpbiddWydOZXZlclJlc3RhcnRpbmdDb2xsZWN0b3JMb2dpbiddKQ0KCQkJCQl7DQoJCQkJCQkkVUkuTmV2ZXJSZXN0YXJ0aW5nQ29sbGVjdG9yTG9naW4uQ2hlY2tlZCA9IChbaW50XSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snTG9naW4nXVsnTmV2ZXJSZXN0YXJ0aW5nQ29sbGVjdG9yTG9naW4nXSkgLWVxIDENCgkJCQkJfQ0KCQkJCQllbHNlDQoJCQkJCXsNCgkJCQkJCSMgRGVmYXVsdCB0byB1bmNoZWNrZWQgaWYgc2V0dGluZyBkb2Vzbid0IGV4aXN0DQoJCQkJCQkkVUkuTmV2ZXJSZXN0YXJ0aW5nQ29sbGVjdG9yTG9naW4uQ2hlY2tlZCA9ICRmYWxzZQ0KCQkJCQl9DQoJCQkJI2VuZHJlZ2lvbiBTdGVwOiBTeW5jIE5ldmVyUmVzdGFydGluZyBjb2xsZWN0b3IgbG9naW4gY29uZmlnIHRvIGNoZWNrYm94DQoNCgkJCQkjcmVnaW9uIFN0ZXA6IExvZyBTeW5jIFN1Y2Nlc3MNCgkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogQ29uZmlnIHN5bmNlZCB0byBVSScgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KCQkJCQlyZXR1cm4gJHRydWUNCgkJCQkjZW5kcmVnaW9uIFN0ZXA6IExvZyBTeW5jIFN1Y2Nlc3MNCgkJCX0NCgkJCWNhdGNoDQoJCQl7DQoJCQkJI3JlZ2lvbiBTdGVwOiBIYW5kbGUgZXJyb3JzIGR1cmluZyBzeW5jDQoJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IEZhaWxlZCB0byBzeW5jIGNvbmZpZyB0byBVSTogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCXJldHVybiAkZmFsc2UNCgkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBlcnJvcnMgZHVyaW5nIHN5bmMNCgkJCX0NCgkJI2VuZHJlZ2lvbiBTdGVwOiBBdHRlbXB0IHRvIHN5bmMgZ2xvYmFsIGNvbmZpZyB0byBVSSBzdGF0ZQ0KCX0NCiNlbmRyZWdpb24gRnVuY3Rpb246IFN5bmMtQ29uZmlnVG9VSQ0KI2VuZHJlZ2lvbiBIZWxwZXIgRnVuY3Rpb25zDQoNCiNyZWdpb24gQ29yZSBVSSBGdW5jdGlvbnMNCg0KI3JlZ2lvbiBGdW5jdGlvbjogSW5pdGlhbGl6ZS1VSQ0KCWZ1bmN0aW9uIEluaXRpYWxpemUtVUkNCgl7DQoJCTwjDQoJCS5TWU5PUFNJUw0KCQkJSW5pdGlhbGl6ZXMgYWxsIFVJIGNvbXBvbmVudHMgZm9yIHRoZSBkYXNoYm9hcmQgYXBwbGljYXRpb24uDQoJCS5PVVRQVVRTDQoJCQlbYm9vbF0gUmV0dXJucyAkdHJ1ZSBpZiBVSSBpbml0aWFsaXphdGlvbiB3YXMgc3VjY2Vzc2Z1bCwgJGZhbHNlIG90aGVyd2lzZSAodGhvdWdoIGN1cnJlbnRseSBhbHdheXMgcmV0dXJucyAkdHJ1ZSBvciB0aHJvd3MpLg0KCQkuTk9URVMNCgkJCUNyZWF0ZXMgdGhlIG1haW4gZm9ybSwgc2V0dGluZ3MgZm9ybSwgYWxsIGJ1dHRvbnMsIGxhYmVscywgdGV4dCBib3hlcywgZGF0YSBncmlkcywNCgkJCWFuZCBjb250ZXh0IG1lbnVzLiBQb3B1bGF0ZXMgdGhlIGdsb2JhbCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSSBvYmplY3Qgd2l0aCByZWZlcmVuY2VzDQoJCQl0byB0aGVzZSBlbGVtZW50cy4gQ2FsbHMgUmVnaXN0ZXItVUlFdmVudEhhbmRsZXJzIGF0IHRoZSBlbmQuDQoJCSM+DQoJCVtDbWRsZXRCaW5kaW5nKCldDQoJCXBhcmFtKCkNCg0KCQkjcmVnaW9uIFN0ZXA6IExvZyBVSSBpbml0aWFsaXphdGlvbiBzdGFydA0KCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogSW5pdGlhbGl6aW5nIFVJLi4uJyAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCgkJI2VuZHJlZ2lvbiBTdGVwOiBMb2cgVUkgaW5pdGlhbGl6YXRpb24gc3RhcnQNCg0KCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYWluIFVJIEVsZW1lbnRzDQoJCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYWluIEFwcGxpY2F0aW9uIEZvcm0NCgkJCQkjICRtYWluRm9ybVByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIG1haW4gYXBwbGljYXRpb24gd2luZG93Lg0KCQkJCSRtYWluRm9ybVByb3BzID0gQHsNCgkJCQkJdHlwZSAgICAgICAgICAgID0gJ0Zvcm0nDQoJCQkJCXZpc2libGUgICAgICAgICA9ICRmYWxzZSAjIFN0YXJ0IGhpZGRlbiwgc2hvd24gbGF0ZXINCgkJCQkJd2lkdGggICAgICAgICAgID0gNDcwDQoJCQkJCWhlaWdodCAgICAgICAgICA9IDQ0MA0KCQkJCQliZyAgICAgICAgICAgICAgPSBAKDMwLCAzMCwgMzApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBEYXJrIGJhY2tncm91bmQNCgkJCQkJaWQgICAgICAgICAgICAgID0gJ01haW5Gb3JtJw0KCQkJCQl0ZXh0ICAgICAgICAgICAgPSAnRW50cm9waWEgRGFzaGJvYXJkJw0KCQkJCQlzdGFydFBvc2l0aW9uICAgPSAnQ2VudGVyU2NyZWVuJyAjIFBvc2l0aW9uIGNvbnRyb2xsZWQgbWFudWFsbHkgb3IgYnkgc2F2ZWQgc3RhdGUNCgkJCQkJZm9ybUJvcmRlclN0eWxlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm1Cb3JkZXJTdHlsZV06Ok5vbmUgICMgQm9yZGVybGVzcyB3aW5kb3cNCgkJCQl9DQoJCQkJJG1haW5Gb3JtID0gU2V0LVVJRWxlbWVudCBAbWFpbkZvcm1Qcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgTWFpbiBBcHBsaWNhdGlvbiBGb3JtDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIFNldHRpbmdzIEZvcm0NCgkJCQkjICRzZXR0aW5nc0Zvcm1Qcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBzZXR0aW5ncyBkaWFsb2cgd2luZG93Lg0KCQkJCSRzZXR0aW5nc0Zvcm1Qcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgICAgICAgICA9ICdGb3JtJw0KCQkJCQl2aXNpYmxlICAgICAgICAgPSAkZmFsc2UgIyBTdGFydCBoaWRkZW4NCgkJCQkJd2lkdGggICAgICAgICAgID0gNDcwDQoJCQkJCWhlaWdodCAgICAgICAgICA9IDQ0MA0KCQkJCQliZyAgICAgICAgICAgICAgPSBAKDMwLCAzMCwgMzApDQoJCQkJCWlkICAgICAgICAgICAgICA9ICdTZXR0aW5nc0Zvcm0nDQoJCQkJCXRleHQgICAgICAgICAgICA9ICdTZXR0aW5ncycNCgkJCQkJc3RhcnRQb3NpdGlvbiAgID0gJ01hbnVhbCcNCgkJCQkJZm9ybUJvcmRlclN0eWxlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm1Cb3JkZXJTdHlsZV06Ok5vbmUNCgkJCQkJb3BhY2l0eSAgICAgICAgID0gMCAjIFN0YXJ0IGludmlzaWJsZSBmb3IgZmFkZS1pbiBlZmZlY3QNCgkJCQkJdG9wTW9zdCAgICAgICAgID0gJHRydWUgIyBBbHdheXMgb24gdG9wIG9mIG1haW4gZm9ybSB3aGVuIHZpc2libGUNCgkJCQl9DQoJCQkJJHNldHRpbmdzRm9ybSA9IFNldC1VSUVsZW1lbnQgQHNldHRpbmdzRm9ybVByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBTZXR0aW5ncyBGb3JtDQoNCgkJCSNyZWdpb24gU3RlcDogTG9hZCBjdXN0b20gaWNvbiBpZiBzcGVjaWZpZWQgYW5kIGV4aXN0cw0KCQkJCSMgQXR0ZW1wdCB0byBsb2FkIGEgY3VzdG9tIGljb24gZnJvbSB0aGUgcGF0aCBkZWZpbmVkIGluIGdsb2JhbCBjb25maWcuDQoJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkljb24gLWFuZCAoVGVzdC1QYXRoICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkljb24pKQ0KCQkJCXsNCgkJCQkJdHJ5DQoJCQkJCXsNCgkJCQkJCSRpY29uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5JY29uKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkljb24pDQoJCQkJCQkkbWFpbkZvcm0uSWNvbiA9ICRpY29uDQoJCQkJCQkkc2V0dGluZ3NGb3JtLkljb24gPSAkaWNvbg0KCQkJCQl9DQoJCQkJCWNhdGNoDQoJCQkJCXsNCgkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IEZhaWxlZCB0byBsb2FkIGljb24gZnJvbSAkKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkljb24pOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJfQ0KCQkJCX0NCgkJCSNlbmRyZWdpb24gU3RlcDogTG9hZCBjdXN0b20gaWNvbiBpZiBzcGVjaWZpZWQgYW5kIGV4aXN0cw0KDQoJCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBUb3AgQmFyIFBhbmVsDQoJCQkJIyAkdG9wQmFyUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgcGFuZWwgdXNlZCBhcyBhIGN1c3RvbSB0aXRsZS9kcmFnIGJhci4NCgkJCQkkdG9wQmFyUHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ1BhbmVsJw0KCQkJCQl3aWR0aCAgID0gNDcwDQoJCQkJCWhlaWdodCAgPSAzMA0KCQkJCQliZyAgICAgID0gQCgyMCwgMjAsIDIwKSAjIERhcmsgYmFja2dyb3VuZA0KCQkJCQlpZCAgICAgID0gJ1RvcEJhcicNCgkJCQl9DQoJCQkJJHRvcEJhciA9IFNldC1VSUVsZW1lbnQgQHRvcEJhclByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBUb3AgQmFyIFBhbmVsDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIFRpdGxlIExhYmVsDQoJCQkJIyAkdGl0bGVMYWJlbFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIGFwcGxpY2F0aW9uIHRpdGxlIGxhYmVsIG9uIHRoZSB0b3AgYmFyLg0KCQkJCSR0aXRsZUxhYmVsUHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ0xhYmVsJw0KCQkJCQl3aWR0aCAgID0gMTQwDQoJCQkJCWhlaWdodCAgPSAxMg0KCQkJCQl0b3AgICAgID0gNQ0KCQkJCQlsZWZ0ICAgID0gMTANCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdUaXRsZUxhYmVsJw0KCQkJCQl0ZXh0ICAgID0gJ0VudHJvcGlhIERhc2hib2FyZCcNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA4LCBbU3lzdGVtLkRyYXdpbmcuRm9udFN0eWxlXTo6Qm9sZCkNCgkJCQl9DQoJCQkJJHRpdGxlTGFiZWxGb3JtID0gU2V0LVVJRWxlbWVudCBAdGl0bGVMYWJlbFByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBUaXRsZSBMYWJlbA0KDQoJCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBDb3B5cmlnaHQgTGFiZWwNCgkJCQkjICRjb3B5cmlnaHRMYWJlbFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIGFwcGxpY2F0aW9uIGNvcHlyaWdodCBsYWJlbCBvbiB0aGUgdG9wIGJhci4NCgkJCQkkY29weXJpZ2h0TGFiZWxQcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnTGFiZWwnDQoJCQkJCXdpZHRoICAgPSAxNDANCgkJCQkJaGVpZ2h0ICA9IDEwDQoJCQkJCXRvcCAgICAgPSAxNg0KCQkJCQlsZWZ0ICAgID0gMTANCgkJCQkJZmcgICAgICA9IEAoMjMwLCAyMzAsIDIzMCkNCgkJCQkJaWQgICAgICA9ICdDb3B5cmlnaHRMYWJlbCcNCgkJCQkJdGV4dCAgICA9IFtjaGFyXTB4MDBBOSArICcgSW1tb3J0YWwgLyBEaXZpbmUgMjAyNSAtIHYxLjAnDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgNiwgW1N5c3RlbS5EcmF3aW5nLkZvbnRTdHlsZV06Okl0YWxpYykNCgkJCQl9DQoJCQkJJGNvcHlyaWdodExhYmVsRm9ybSA9IFNldC1VSUVsZW1lbnQgQGNvcHlyaWdodExhYmVsUHJvcHMNCgkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIENvcHlyaWdodCBMYWJlbA0KDQoJCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBNaW5pbWl6ZSBCdXR0b24NCgkJCQkjICRtaW5Gb3JtUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgbWluaW1pemUgd2luZG93IGJ1dHRvbi4NCgkJCQkkbWluRm9ybVByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdCdXR0b24nDQoJCQkJCXdpZHRoICAgPSAzMA0KCQkJCQloZWlnaHQgID0gMzANCgkJCQkJbGVmdCAgICA9IDQxMA0KCQkJCQliZyAgICAgID0gQCg0MCwgNDAsIDQwKQ0KCQkJCQlmZyAgICAgID0gQCgyNDAsIDI0MCwgMjQwKQ0KCQkJCQlpZCAgICAgID0gJ01pbkZvcm0nDQoJCQkJCXRleHQgICAgPSAnXycNCgkJCQkJZnMgICAgICA9ICdGbGF0JyAjIEZsYXQgYXBwZWFyYW5jZQ0KCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDExLCBbU3lzdGVtLkRyYXdpbmcuRm9udFN0eWxlXTo6Qm9sZCkNCgkJCQl9DQoJCQkJJGJ0bk1pbmltaXplRm9ybSA9IFNldC1VSUVsZW1lbnQgQG1pbkZvcm1Qcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgTWluaW1pemUgQnV0dG9uDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIENsb3NlIEJ1dHRvbg0KCQkJCSMgJGNsb3NlRm9ybVByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIGNsb3NlIHdpbmRvdyBidXR0b24uDQoJCQkJJGNsb3NlRm9ybVByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdCdXR0b24nDQoJCQkJCXdpZHRoICAgPSAzMA0KCQkJCQloZWlnaHQgID0gMzANCgkJCQkJbGVmdCAgICA9IDQ0MA0KCQkJCQliZyAgICAgID0gQCgyMTAsIDQ1LCA0NSkgIyBSZWQgY29sb3IgZm9yIG1vdXNlIG92ZXIgKGluIDEuMSkNCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdDbG9zZUZvcm0nDQoJCQkJCXRleHQgICAgPSBbY2hhcl0weDE2NkQgIyAnWCcgc3ltYm9sDQoJCQkJCWZzICAgICAgPSAnRmxhdCcNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCAxMSwgW1N5c3RlbS5EcmF3aW5nLkZvbnRTdHlsZV06OkJvbGQpDQoJCQkJfQ0KCQkJCSRidG5DbG9zZUZvcm0gPSBTZXQtVUlFbGVtZW50IEBjbG9zZUZvcm1Qcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgQ2xvc2UgQnV0dG9uDQoJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIE1haW4gVUkgRWxlbWVudHMNCg0KCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYWluIEZvcm0gQWN0aW9uIEJ1dHRvbnMNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIExhdW5jaCBCdXR0b24NCgkJCQkjICRsYXVuY2hQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBMYXVuY2ggYnV0dG9uLg0KCQkJCSRsYXVuY2hQcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnQnV0dG9uJw0KCQkJCQl3aWR0aCAgID0gMTI1DQoJCQkJCWhlaWdodCAgPSAzMA0KCQkJCQl0b3AgICAgID0gNDANCgkJCQkJbGVmdCAgICA9IDE1DQoJCQkJCWJnICAgICAgPSBAKDM1LCAxNzUsIDc1KSAjIEdyZWVuIGNvbG9yIGZvciBhY3RpdmUgc3RhdHVzDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnTGF1bmNoJw0KCQkJCQl0ZXh0ICAgID0gJ0xhdW5jaCcNCgkJCQkJZnMgICAgICA9ICdGbGF0Jw0KCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQoJCQkJfQ0KCQkJCSRidG5MYXVuY2ggPSBTZXQtVUlFbGVtZW50IEBsYXVuY2hQcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgTGF1bmNoIEJ1dHRvbg0KDQoJCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBMb2dpbiBCdXR0b24NCgkJCQkjICRsb2dpblByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIExvZ2luIGJ1dHRvbi4NCgkJCQkkbG9naW5Qcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnQnV0dG9uJw0KCQkJCQl3aWR0aCAgID0gMTI1DQoJCQkJCWhlaWdodCAgPSAzMA0KCQkJCQl0b3AgICAgID0gNDANCgkJCQkJbGVmdCAgICA9IDE1MA0KCQkJCQliZyAgICAgID0gQCgzNSwgMTc1LCA3NSkgIyBHcmVlbiBjb2xvciBmb3IgYWN0aXZlIHN0YXR1cw0KCQkJCQlmZyAgICAgID0gQCgyNDAsIDI0MCwgMjQwKQ0KCQkJCQlpZCAgICAgID0gJ0xvZ2luJw0KCQkJCQl0ZXh0ICAgID0gJ0xvZ2luJw0KCQkJCQlmcyAgICAgID0gJ0ZsYXQnDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQl9DQoJCQkJJGJ0bkxvZ2luID0gU2V0LVVJRWxlbWVudCBAbG9naW5Qcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgTG9naW4gQnV0dG9uDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIFNldHRpbmdzIEJ1dHRvbg0KCQkJCSMgJHNldHRpbmdzUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgU2V0dGluZ3MgYnV0dG9uLg0KCQkJCSRzZXR0aW5nc1Byb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdCdXR0b24nDQoJCQkJCXdpZHRoICAgPSA4MA0KCQkJCQloZWlnaHQgID0gMzANCgkJCQkJdG9wICAgICA9IDQwDQoJCQkJCWxlZnQgICAgPSAyODUNCgkJCQkJYmcgICAgICA9IEAoMjU1LCAxNjUsIDApICMgT3JhbmdlIGNvbG9yIGZvciBpbnZhbGlkIHNldHRpbmdzIChpbiAxLjEpDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnU2V0dGluZ3MnDQoJCQkJCXRleHQgICAgPSAnU2V0dGluZ3MnDQoJCQkJCWZzICAgICAgPSAnRmxhdCcNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KCQkJCX0NCgkJCQkkYnRuU2V0dGluZ3MgPSBTZXQtVUlFbGVtZW50IEBzZXR0aW5nc1Byb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBTZXR0aW5ncyBCdXR0b24NCg0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgVGVybWluYXRlIEJ1dHRvbiAoVGVybWluYXRlIFNlbGVjdGVkKQ0KCQkJCSMgJGV4aXRQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBidXR0b24gdG8gdGVybWluYXRlIHNlbGVjdGVkIHByb2Nlc3Nlcy4NCgkJCQkkZXhpdFByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdCdXR0b24nDQoJCQkJCXdpZHRoICAgPSA4MA0KCQkJCQloZWlnaHQgID0gMzANCgkJCQkJdG9wICAgICA9IDQwDQoJCQkJCWxlZnQgICAgPSAzNzUNCgkJCQkJYmcgICAgICA9IEAoMjEwLCA0NSwgNDUpICMgUmVkIGNvbG9yIGZvciBtb3VzZSBvdmVyIChpbiAxLjEpDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnVGVybWluYXRlJw0KCQkJCQl0ZXh0ICAgID0gJ1Rlcm1pbmF0ZScNCgkJCQkJZnMgICAgICA9ICdGbGF0Jw0KCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQoJCQkJfQ0KCQkJCSRidG5TdG9wID0gU2V0LVVJRWxlbWVudCBAZXhpdFByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBUZXJtaW5hdGUgQnV0dG9uIChUZXJtaW5hdGUgU2VsZWN0ZWQpDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIEZ0b29sIEJ1dHRvbg0KCQkJCSMgJGZ0b29sUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgbWFpbiBGdG9vbCBidXR0b24uDQoJCQkJJGZ0b29sUHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ0J1dHRvbicNCgkJCQkJd2lkdGggICA9IDQ0MA0KCQkJCQloZWlnaHQgID0gMzANCgkJCQkJdG9wICAgICA9IDc1DQoJCQkJCWxlZnQgICAgPSAxNQ0KCQkJCQliZyAgICAgID0gQCg0MCwgNDAsIDQwKQ0KCQkJCQlmZyAgICAgID0gQCgyNDAsIDI0MCwgMjQwKQ0KCQkJCQlpZCAgICAgID0gJ0Z0b29sJw0KCQkJCQl0ZXh0ICAgID0gJ0Z0b29sJw0KCQkJCQlmcyAgICAgID0gJ0ZsYXQnDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQl9DQoJCQkJJGJ0bkZ0b29sID0gU2V0LVVJRWxlbWVudCBAZnRvb2xQcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgRnRvb2wgQnV0dG9uDQoJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIE1haW4gRm9ybSBBY3Rpb24gQnV0dG9ucw0KDQoJCSNyZWdpb24gU3RlcDogQ3JlYXRlIFNldHRpbmdzIEZvcm0gQ29udHJvbHMNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIFNhdmUgU2V0dGluZ3MgQnV0dG9uDQoJCQkJIyAkc2F2ZVByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIFNhdmUgYnV0dG9uIG9uIHRoZSBzZXR0aW5ncyBmb3JtLg0KCQkJCSRzYXZlUHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ0J1dHRvbicNCgkJCQkJd2lkdGggICA9IDEyMA0KCQkJCQloZWlnaHQgID0gNDANCgkJCQkJdG9wICAgICA9IDM0MA0KCQkJCQlsZWZ0ICAgID0gMjANCgkJCQkJYmcgICAgICA9IEAoMzUsIDE3NSwgNzUpICMgR3JlZW4gY29sb3IgZm9yIHZhbGlkIHNldHRpbmdzIChpbiAxLjEpDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnU2F2ZScNCgkJCQkJdGV4dCAgICA9ICdTYXZlJw0KCQkJCQlmcyAgICAgID0gJ0ZsYXQnDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQl9DQoJCQkJJGJ0blNhdmUgPSBTZXQtVUlFbGVtZW50IEBzYXZlUHJvcHMNCgkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFNhdmUgU2V0dGluZ3MgQnV0dG9uDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIENhbmNlbCBTZXR0aW5ncyBCdXR0b24NCgkJCQkjICRjYW5jZWxQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBDYW5jZWwgYnV0dG9uIG9uIHRoZSBzZXR0aW5ncyBmb3JtLg0KCQkJCSRjYW5jZWxQcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnQnV0dG9uJw0KCQkJCQl3aWR0aCAgID0gMTIwDQoJCQkJCWhlaWdodCAgPSA0MA0KCQkJCQl0b3AgICAgID0gMzQwDQoJCQkJCWxlZnQgICAgPSAxNTANCgkJCQkJYmcgICAgICA9IEAoMjEwLCA0NSwgNDUpICMgUmVkIGNvbG9yIGZvciBtb3VzZSBvdmVyIChpbiAxLjEpDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnQ2FuY2VsJw0KCQkJCQl0ZXh0ICAgID0gJ0NhbmNlbCcNCgkJCQkJZnMgICAgICA9ICdGbGF0Jw0KCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQoJCQkJfQ0KCQkJCSRidG5DYW5jZWwgPSBTZXQtVUlFbGVtZW50IEBjYW5jZWxQcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgQ2FuY2VsIFNldHRpbmdzIEJ1dHRvbg0KDQoJCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBCcm93c2UgTGF1bmNoZXIgUGF0aCBCdXR0b24NCgkJCQkjICRicm93c2VMYXVuY2hlclByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIEJyb3dzZSBidXR0b24gbmV4dCB0byB0aGUgbGF1bmNoZXIgcGF0aCBpbnB1dC4NCgkJCQkkYnJvd3NlTGF1bmNoZXJQcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnQnV0dG9uJw0KCQkJCQl3aWR0aCAgID0gNTUNCgkJCQkJaGVpZ2h0ICA9IDI1DQoJCQkJCXRvcCAgICAgPSAyMA0KCQkJCQlsZWZ0ICAgID0gMTEwDQoJCQkJCWJnICAgICAgPSBAKDQwLCA0MCwgNDApIA0KCQkJCQlmZyAgICAgID0gQCgyNDAsIDI0MCwgMjQwKQ0KCQkJCQlpZCAgICAgID0gJ0Jyb3dzZScNCgkJCQkJdGV4dCAgICA9ICdCcm93c2UnDQoJCQkJCWZzICAgICAgPSAnRmxhdCcNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KCQkJCX0NCgkJCQkkYnRuQnJvd3NlTGF1bmNoZXIgPSBTZXQtVUlFbGVtZW50IEBicm93c2VMYXVuY2hlclByb3BzDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBCcm93c2UgTGF1bmNoZXIgUGF0aCBCdXR0b24NCg0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgTGF1bmNoZXIgUGF0aCBMYWJlbA0KCQkJCSMgJGxhdW5jaGVyTGFiZWxQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBsYWJlbCBhc3NvY2lhdGVkIHdpdGggdGhlIGxhdW5jaGVyIHBhdGggaW5wdXQuDQoJCQkJJGxhdW5jaGVyTGFiZWxQcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnTGFiZWwnDQoJCQkJCXdpZHRoICAgPSA4NQ0KCQkJCQloZWlnaHQgID0gMjANCgkJCQkJdG9wICAgICA9IDI1DQoJCQkJCWxlZnQgICAgPSAyMA0KCQkJCQliZyAgICAgID0gQCg0MCwgNDAsIDQwLCAwKSAjIFRyYW5zcGFyZW50IGJhY2tncm91bmQNCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdMYWJlbExhdW5jaGVyJw0KCQkJCQl0ZXh0ICAgID0gJ0xhdW5jaGVyIFBhdGg6Jw0KCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQoJCQkJfQ0KCQkJCSRsYmxMYXVuY2hlciA9IFNldC1VSUVsZW1lbnQgQGxhdW5jaGVyTGFiZWxQcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgTGF1bmNoZXIgUGF0aCBMYWJlbA0KDQoJCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBQcm9jZXNzIE5hbWUgTGFiZWwNCgkJCQkjICRwcm9jZXNzTmFtZUxhYmVsUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgbGFiZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm9jZXNzIG5hbWUgaW5wdXQuDQoJCQkJJHByb2Nlc3NOYW1lTGFiZWxQcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnTGFiZWwnDQoJCQkJCXdpZHRoICAgPSA4NQ0KCQkJCQloZWlnaHQgID0gMjANCgkJCQkJdG9wICAgICA9IDk1DQoJCQkJCWxlZnQgICAgPSAyMA0KCQkJCQliZyAgICAgID0gQCg0MCwgNDAsIDQwLCAwKSAjIFRyYW5zcGFyZW50IGJhY2tncm91bmQNCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdMYWJlbFByb2Nlc3MnDQoJCQkJCXRleHQgICAgPSAnUHJvY2VzcyBOYW1lOicNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KCQkJCX0NCgkJCQkkbGJsUHJvY2Vzc05hbWUgPSBTZXQtVUlFbGVtZW50IEBwcm9jZXNzTmFtZUxhYmVsUHJvcHMNCgkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFByb2Nlc3MgTmFtZSBMYWJlbA0KDQoJCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYXggQ2xpZW50cyBMYWJlbA0KCQkJCSMgJG1heENsaWVudHNMYWJlbFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIGxhYmVsIGFzc29jaWF0ZWQgd2l0aCB0aGUgbWF4IGNsaWVudHMgaW5wdXQuDQoJCQkJJG1heENsaWVudHNMYWJlbFByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdMYWJlbCcNCgkJCQkJd2lkdGggICA9IDg1DQoJCQkJCWhlaWdodCAgPSAyMA0KCQkJCQl0b3AgICAgID0gMTY1DQoJCQkJCWxlZnQgICAgPSAyMA0KCQkJCQliZyAgICAgID0gQCg0MCwgNDAsIDQwLCAwKSAjIFRyYW5zcGFyZW50IGJhY2tncm91bmQNCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdMYWJlbE1heCcNCgkJCQkJdGV4dCAgICA9ICdNYXggQ2xpZW50czonDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQl9DQoJCQkJJGxibE1heENsaWVudHMgPSBTZXQtVUlFbGVtZW50IEBtYXhDbGllbnRzTGFiZWxQcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgTWF4IENsaWVudHMgTGFiZWwNCgkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgU2V0dGluZ3MgRm9ybSBDb250cm9scw0KDQoJCSNyZWdpb24gU3RlcDogQ3JlYXRlIFNldHRpbmdzIEZvcm0gSW5wdXQgQ29udHJvbHMNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIExhdW5jaGVyIFBhdGggVGV4dEJveA0KCQkJCSMgJGxhdW5jaGVyVGV4dEJveFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIFRleHRCb3ggdG8gaW5wdXQgdGhlIGxhdW5jaGVyIHBhdGguDQoJCQkJJGxhdW5jaGVyVGV4dEJveFByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdUZXh0Qm94Jw0KCQkJCQl3aWR0aCAgID0gMTUwDQoJCQkJCWhlaWdodCAgPSAzMA0KCQkJCQl0b3AgICAgID0gNTANCgkJCQkJbGVmdCAgICA9IDIwDQoJCQkJCWJnICAgICAgPSBAKDQwLCA0MCwgNDApDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnSW5wdXRMYXVuY2hlcicNCgkJCQkJdGV4dCAgICA9ICcnDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQl9DQoJCQkJJHR4dExhdW5jaGVyID0gU2V0LVVJRWxlbWVudCBAbGF1bmNoZXJUZXh0Qm94UHJvcHMNCgkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIExhdW5jaGVyIFBhdGggVGV4dEJveA0KDQoJCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBQcm9jZXNzIE5hbWUgVGV4dEJveA0KCQkJCSMgJHByb2Nlc3NOYW1lVGV4dEJveFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIFRleHRCb3ggdG8gaW5wdXQgdGhlIHRhcmdldCBwcm9jZXNzIG5hbWUuDQoJCQkJJHByb2Nlc3NOYW1lVGV4dEJveFByb3BzID0gQHsNCgkJCQkJdHlwZSAgICA9ICdUZXh0Qm94Jw0KCQkJCQl3aWR0aCAgID0gMTUwDQoJCQkJCWhlaWdodCAgPSAzMA0KCQkJCQl0b3AgICAgID0gMTIwDQoJCQkJCWxlZnQgICAgPSAyMA0KCQkJCQliZyAgICAgID0gQCg0MCwgNDAsIDQwKQ0KCQkJCQlmZyAgICAgID0gQCgyNDAsIDI0MCwgMjQwKQ0KCQkJCQlpZCAgICAgID0gJ0lucHV0UHJvY2VzcycNCgkJCQkJdGV4dCAgICA9ICcnDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQl9DQoJCQkJJHR4dFByb2Nlc3NOYW1lID0gU2V0LVVJRWxlbWVudCBAcHJvY2Vzc05hbWVUZXh0Qm94UHJvcHMNCgkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFByb2Nlc3MgTmFtZSBUZXh0Qm94DQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIE1heCBDbGllbnRzIFRleHRCb3gNCgkJCQkjICRtYXhDbGllbnRzVGV4dEJveFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIFRleHRCb3ggdG8gaW5wdXQgdGhlIG1heGltdW0gbnVtYmVyIG9mIGNsaWVudHMuDQoJCQkJJG1heENsaWVudHNUZXh0Qm94UHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ1RleHRCb3gnDQoJCQkJCXdpZHRoICAgPSAxNTANCgkJCQkJaGVpZ2h0ICA9IDMwDQoJCQkJCXRvcCAgICAgPSAxOTANCgkJCQkJbGVmdCAgICA9IDIwDQoJCQkJCWJnICAgICAgPSBAKDQwLCA0MCwgNDApDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnSW5wdXRNYXgnDQoJCQkJCXRleHQgICAgPSAnJw0KCQkJCQlmb250ICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQoJCQkJfQ0KCQkJCSR0eHRNYXhDbGllbnRzID0gU2V0LVVJRWxlbWVudCBAbWF4Q2xpZW50c1RleHRCb3hQcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgTWF4IENsaWVudHMgVGV4dEJveA0KDQoJCQkjcmVnaW9uIFN0ZXA6IERlZmluZSBTbG90IE9wdGlvbnMgZm9yIExvZ2luIFBvc2l0aW9ucw0KCQkJCSMgJHNsb3RPcHRpb25zOiBBcnJheSBkZWZpbmluZyB0aGUgYXZhaWxhYmxlIGNob2ljZXMgZm9yIGxvZ2luIHBvc2l0aW9uIENvbWJvQm94ZXMuDQoJCQkJJHNsb3RPcHRpb25zID0gQCgnMScsICcyJywgJzMnKQ0KCQkJCSMgJExvZ2luQ29tYm9zOiBPcmRlcmVkIGRpY3Rpb25hcnkgdG8gc3RvcmUgcmVmZXJlbmNlcyB0byB0aGUgY3JlYXRlZCBsb2dpbiBDb21ib0JveGVzLg0KCQkJCSRMb2dpbkNvbWJvcyA9IFtvcmRlcmVkXUB7fQ0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBEZWZpbmUgU2xvdCBPcHRpb25zIGZvciBMb2dpbiBQb3NpdGlvbnMNCg0KCQkJI3JlZ2lvbiBTdGVwOiBEeW5hbWljYWxseSBDcmVhdGUgTG9naW4gUG9zaXRpb24gTGFiZWxzIGFuZCBDb21ib0JveGVzDQoJCQkJIyBMb29wIHRvIGNyZWF0ZSBhIGxhYmVsIGFuZCBDb21ib0JveCBmb3IgZWFjaCBwb3RlbnRpYWwgbG9naW4gcG9zaXRpb24gKDEgdG8gMTApLg0KCQkJCTEuLjEwIHwgRm9yRWFjaC1PYmplY3Qgew0KCQkJCQkkaSA9ICRfDQoJCQkJCSRwb3NpdGlvbktleSA9ICJMb2dpbiRpIg0KDQoJCQkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIExhYmVsIGZvciBQb3NpdGlvbiAkaQ0KCQkJCQkJIyAkbGJsUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgbGFiZWwgZm9yIHRoZSBjdXJyZW50IGxvZ2luIHBvc2l0aW9uLg0KCQkJCQkJJGxibFByb3BzID0gQHsNCgkJCQkJCQl0eXBlICAgID0gJ0xhYmVsJw0KCQkJCQkJCXZpc2libGUgPSAkdHJ1ZQ0KCQkJCQkJCXdpZHRoICAgPSAxMTANCgkJCQkJCQloZWlnaHQgID0gMjANCgkJCQkJCQl0b3AgICAgID0gKDI1ICsgKCgkaSAtIDEpICogMzApKSAjIENhbGN1bGF0ZSB2ZXJ0aWNhbCBwb3NpdGlvbg0KCQkJCQkJCWxlZnQgICAgPSAxODANCgkJCQkJCQliZyAgICAgID0gQCgzMCwgMzAsIDMwLCAwKSAjIFRyYW5zcGFyZW50IGJhY2tncm91bmQNCgkJCQkJCQlmZyAgICAgID0gQCgyNDAsIDI0MCwgMjQwKQ0KCQkJCQkJCWlkICAgICAgPSAiTGFiZWxQb3MkaSINCgkJCQkJCQl0ZXh0ICAgID0gIkxvZ2luIFBvc2l0aW9uICRpYDoiDQoJCQkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KCQkJCQkJfQ0KCQkJCQkJJGxibCA9IFNldC1VSUVsZW1lbnQgQGxibFByb3BzDQoJCQkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIExhYmVsIGZvciBQb3NpdGlvbiAkaQ0KDQoJCQkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIENvbWJvQm94IGZvciBQb3NpdGlvbiAkaQ0KCQkJCQkJIyAkY21iUHJvcHM6IEhhc2h0YWJsZSBkZWZpbmluZyBwcm9wZXJ0aWVzIGZvciB0aGUgQ29tYm9Cb3ggZm9yIHRoZSBjdXJyZW50IGxvZ2luIHBvc2l0aW9uLg0KCQkJCQkJJGNtYlByb3BzID0gQHsNCgkJCQkJCQl0eXBlICAgICAgICAgID0gJ0NvbWJvQm94Jw0KCQkJCQkJCXZpc2libGUgICAgICAgPSAkdHJ1ZQ0KCQkJCQkJCXdpZHRoICAgICAgICAgPSAxNTANCgkJCQkJCQloZWlnaHQgICAgICAgID0gMjUNCgkJCQkJCQl0b3AgICAgICAgICAgID0gKDI1ICsgKCgkaSAtIDEpICogMzApKSAjIENhbGN1bGF0ZSB2ZXJ0aWNhbCBwb3NpdGlvbg0KCQkJCQkJCWxlZnQgICAgICAgICAgPSAyOTANCgkJCQkJCQliZyAgICAgICAgICAgID0gQCg0MCwgNDAsIDQwKQ0KCQkJCQkJCWZnICAgICAgICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCQkJZnMgICAgICAgICAgICA9ICdGbGF0Jw0KCQkJCQkJCWlkICAgICAgICAgICAgPSAiTG9naW4kaSINCgkJCQkJCQlmb250ICAgICAgICAgID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Gb250KCdTZWdvZSBVSScsIDkpDQoJCQkJCQkJZHJvcGRvd25zdHlsZSA9ICdEcm9wRG93bkxpc3QnICMgVXNlciBjYW5ub3QgdHlwZSBjdXN0b20gdmFsdWVzDQoJCQkJCQl9DQoJCQkJCQkkY21iID0gU2V0LVVJRWxlbWVudCBAY21iUHJvcHMNCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgQ29tYm9Cb3ggZm9yIFBvc2l0aW9uICRpDQoNCgkJCQkJI3JlZ2lvbiBTdGVwOiBBZGQgU2xvdCBPcHRpb25zIHRvIENvbWJvQm94DQoJCQkJCQkjIFBvcHVsYXRlIHRoZSBjcmVhdGVkIENvbWJvQm94IHdpdGggdGhlIGRlZmluZWQgc2xvdCBvcHRpb25zLg0KCQkJCQkJJHNsb3RPcHRpb25zIHwgRm9yRWFjaC1PYmplY3Qgew0KCQkJCQkJCSRjbWIuSXRlbXMuQWRkKCRfKQ0KCQkJCQkJfQ0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEFkZCBTbG90IE9wdGlvbnMgdG8gQ29tYm9Cb3gNCg0KCQkJCQkjcmVnaW9uIFN0ZXA6IEFkZCBDb250cm9scyB0byBTZXR0aW5ncyBGb3JtIGFuZCBTdG9yZSBDb21ib0JveA0KCQkJCQkJIyBBZGQgdGhlIG5ld2x5IGNyZWF0ZWQgbGFiZWwgYW5kIENvbWJvQm94IHRvIHRoZSBzZXR0aW5ncyBmb3JtJ3MgY29udHJvbHMgY29sbGVjdGlvbi4NCgkJCQkJCSRzZXR0aW5nc0Zvcm0uQ29udHJvbHMuQWRkKCRsYmwpDQoJCQkJCQkkc2V0dGluZ3NGb3JtLkNvbnRyb2xzLkFkZCgkY21iKQ0KCQkJCQkJIyBTdG9yZSBhIHJlZmVyZW5jZSB0byB0aGUgQ29tYm9Cb3ggaW4gdGhlICRMb2dpbkNvbWJvcyBkaWN0aW9uYXJ5Lg0KCQkJCQkJJExvZ2luQ29tYm9zWyRwb3NpdGlvbktleV0gPSAkY21iDQoJCQkJCSNlbmRyZWdpb24gU3RlcDogQWRkIENvbnRyb2xzIHRvIFNldHRpbmdzIEZvcm0gYW5kIFN0b3JlIENvbWJvQm94DQoJCQkJfQ0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBEeW5hbWljYWxseSBDcmVhdGUgTG9naW4gUG9zaXRpb24gTGFiZWxzIGFuZCBDb21ib0JveGVzDQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIEZpbmFsaXplIENvbGxlY3RvciBMb2dpbiBDaGVja0JveA0KCQkJCSMgJGZpbmFsaXplQ2hlY2tCb3hQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBDaGVja0JveCB0byBlbmFibGUvZGlzYWJsZSBmaW5hbGl6ZSBjb2xsZWN0b3IgbG9naW4uDQoJCQkJJGZpbmFsaXplQ2hlY2tCb3hQcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnQ2hlY2tCb3gnDQoJCQkJCXdpZHRoICAgPSAyMDANCgkJCQkJaGVpZ2h0ICA9IDIwDQoJCQkJCXRvcCAgICAgPSAzMTANCgkJCQkJbGVmdCAgICA9IDANCgkJCQkJYmcgICAgICA9IEAoMzAsIDMwLCAzMCkNCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdGaW5hbGl6ZUNvbGxlY3RvckxvZ2luJw0KCQkJCQl0ZXh0ICAgID0gJ1N0YXJ0IENvbGxlY3RvciBhZnRlciBMb2dpbicNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KCQkJCX0NCgkJCQkkY2hrRmluYWxpemVMb2dpbiA9IFNldC1VSUVsZW1lbnQgQGZpbmFsaXplQ2hlY2tCb3hQcm9wcw0KCQkJCSRzZXR0aW5nc0Zvcm0uQ29udHJvbHMuQWRkKCRjaGtGaW5hbGl6ZUxvZ2luKQ0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgRmluYWxpemUgQ29sbGVjdG9yIExvZ2luIENoZWNrQm94DQoNCgkJCSNyZWdpb24gU3RlcDogQ3JlYXRlIE5ldmVyUmVzdGFydGluZyBDb2xsZWN0b3IgTG9naW4gQ2hlY2tCb3gNCgkJCQkjICROZXZlclJlc3RhcnRpbmdDaGVja0JveFByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIENoZWNrQm94IHRvIGVuYWJsZS9kaXNhYmxlIE5ldmVyUmVzdGFydGluZyBjb2xsZWN0b3IgbG9naW4uDQoJCQkJJE5ldmVyUmVzdGFydGluZ0NoZWNrQm94UHJvcHMgPSBAew0KCQkJCQl0eXBlICAgID0gJ0NoZWNrQm94Jw0KCQkJCQl3aWR0aCAgID0gMjAwDQoJCQkJCWhlaWdodCAgPSAyMA0KCQkJCQl0b3AgICAgID0gMjkwDQoJCQkJCWxlZnQgICAgPSAwDQoJCQkJCWJnICAgICAgPSBAKDMwLCAzMCwgMzApDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnTmV2ZXJSZXN0YXJ0aW5nQ29sbGVjdG9yTG9naW4nDQoJCQkJCXRleHQgICAgPSAnRml4IHRvIHN0YXJ0IGRpc2MuIGNvbGxlY3RvcicNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KCQkJCX0NCgkJCQkkY2hrTmV2ZXJSZXN0YXJ0aW5nTG9naW4gPSBTZXQtVUlFbGVtZW50IEBOZXZlclJlc3RhcnRpbmdDaGVja0JveFByb3BzDQoJCQkJJHNldHRpbmdzRm9ybS5Db250cm9scy5BZGQoJGNoa05ldmVyUmVzdGFydGluZ0xvZ2luKQ0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgTmV2ZXJSZXN0YXJ0aW5nIENvbGxlY3RvciBMb2dpbiBDaGVja0JveA0KDQoJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFNldHRpbmdzIEZvcm0gSW5wdXQgQ29udHJvbHMNCg0KCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBNYWluIEZvcm0gRGF0YUdyaWQgRGlzcGxheSBDb250cm9scw0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgTWFpbiBEYXRhR3JpZCAoUHJvY2VzcyBMaXN0KSAoaW4gMS4xKQ0KCQkJCSMgJGRhdGFHcmlkTWFpblByb3BzOiBIYXNodGFibGUgZGVmaW5pbmcgcHJvcGVydGllcyBmb3IgdGhlIHByaW1hcnkgRGF0YUdyaWRWaWV3IGRpc3BsYXlpbmcgcHJvY2VzcyBpbmZvLg0KCQkJCSRkYXRhR3JpZE1haW5Qcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnRGF0YUdyaWRWaWV3Jw0KCQkJCQl2aXNpYmxlID0gJGZhbHNlDQoJCQkJCXdpZHRoICAgPSAxNTUNCgkJCQkJaGVpZ2h0ICA9IDMyMA0KCQkJCQl0b3AgICAgID0gMTE1DQoJCQkJCWxlZnQgICAgPSA1DQoJCQkJCWJnICAgICAgPSBAKDQwLCA0MCwgNDApDQoJCQkJCWZnICAgICAgPSBAKDI0MCwgMjQwLCAyNDApDQoJCQkJCWlkICAgICAgPSAnRGF0YUdyaWRNYWluJw0KCQkJCQl0ZXh0ICAgID0gJycNCgkJCQkJZm9udCAgICA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuRm9udCgnU2Vnb2UgVUknLCA5KQ0KCQkJCX0NCgkJCQkkRGF0YUdyaWRNYWluID0gU2V0LVVJRWxlbWVudCBAZGF0YUdyaWRNYWluUHJvcHMNCgkJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIE1haW4gRGF0YUdyaWQgKFByb2Nlc3MgTGlzdCkgKGluIDEuMSkNCg0KCQkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgRmlsbGVyIERhdGFHcmlkDQoJCQkJIyAkZGF0YUdyaWRGaWxsZXJQcm9wczogSGFzaHRhYmxlIGRlZmluaW5nIHByb3BlcnRpZXMgZm9yIHRoZSBzZWNvbmRhcnkgRGF0YUdyaWRWaWV3IChwdXJwb3NlIG1pZ2h0IGJlIHNwZWNpZmljKS4NCgkJCQkkZGF0YUdyaWRGaWxsZXJQcm9wcyA9IEB7DQoJCQkJCXR5cGUgICAgPSAnRGF0YUdyaWRWaWV3Jw0KCQkJCQl3aWR0aCAgID0gNDUwDQoJCQkJCWhlaWdodCAgPSAzMjANCgkJCQkJdG9wICAgICA9IDExNQ0KCQkJCQlsZWZ0ICAgID0gMTANCgkJCQkJYmcgICAgICA9IEAoNDAsIDQwLCA0MCkNCgkJCQkJZmcgICAgICA9IEAoMjQwLCAyNDAsIDI0MCkNCgkJCQkJaWQgICAgICA9ICdEYXRhR3JpZEZpbGxlcicNCgkJCQkJdGV4dCAgICA9ICcnDQoJCQkJCWZvbnQgICAgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLkZvbnQoJ1NlZ29lIFVJJywgOSkNCgkJCQl9DQoJCQkJJERhdGFHcmlkRmlsbGVyID0gU2V0LVVJRWxlbWVudCBAZGF0YUdyaWRGaWxsZXJQcm9wcw0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgRmlsbGVyIERhdGFHcmlkDQoJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIE1haW4gRm9ybSBEYXRhR3JpZCBEaXNwbGF5IENvbnRyb2xzDQoNCgkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgQ29udGV4dCBNZW51IGFuZCBMb2dpbiBQb3NpdGlvbiBDb250cm9scw0KDQoJCQkjcmVnaW9uIFN0ZXA6IENyZWF0ZSBDb250ZXh0IE1lbnUgZm9yIERhdGFHcmlkcw0KCQkJCSMgQ3JlYXRlIHRoZSBjb250ZXh0IG1lbnUgc3RyaXAgYW5kIGl0cyBpdGVtcyBmb3IgRGF0YUdyaWQgaW50ZXJhY3Rpb25zLg0KCQkJCSRjdHhNZW51ID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Db250ZXh0TWVudVN0cmlwDQoJCQkJJGl0bUZyb250ID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Ub29sU3RyaXBNZW51SXRlbSgnU2hvdycpDQoJCQkJJGl0bUJhY2sgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlRvb2xTdHJpcE1lbnVJdGVtKCdNaW5pbWl6ZScpDQoJCQkJJGl0bVJlc2l6ZUNlbnRlciA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuVG9vbFN0cmlwTWVudUl0ZW0oJ1Jlc2l6ZScpDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBDb250ZXh0IE1lbnUgZm9yIERhdGFHcmlkcw0KDQoJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIENvbnRleHQgTWVudSBhbmQgTG9naW4gUG9zaXRpb24gQ29udHJvbHMNCg0KCQkjcmVnaW9uIFN0ZXA6IFNldCBVcCBDb250cm9sIEhpZXJhcmNoeSBhbmQgQ29udGV4dCBNZW51cw0KCQkJI3JlZ2lvbiBTdGVwOiBBZGQgQ29udHJvbHMgdG8gTWFpbiBGb3JtDQoJCQkJIyBBZGQgdGhlIHByaW1hcnkgY29udHJvbHMgdG8gdGhlIG1haW4gYXBwbGljYXRpb24gZm9ybS4NCgkJCQkkbWFpbkZvcm0uQ29udHJvbHMuQWRkUmFuZ2UoQCgkdG9wQmFyLCAkYnRuTG9naW4sICRidG5GdG9vbCwgJGJ0bkxhdW5jaCwgJGJ0blNldHRpbmdzLCAkYnRuU3RvcCwgJERhdGFHcmlkTWFpbiwgJERhdGFHcmlkRmlsbGVyKSkNCgkJCSNlbmRyZWdpb24gU3RlcDogQWRkIENvbnRyb2xzIHRvIE1haW4gRm9ybQ0KDQoJCQkjcmVnaW9uIFN0ZXA6IEFkZCBDb250cm9scyB0byBUb3AgQmFyDQoJCQkJIyBBZGQgdGhlIHRpdGxlIGxhYmVsIGFuZCB3aW5kb3cgY29udHJvbCBidXR0b25zIHRvIHRoZSB0b3AgYmFyIHBhbmVsLg0KCQkJCSR0b3BCYXIuQ29udHJvbHMuQWRkUmFuZ2UoQCgkdGl0bGVMYWJlbEZvcm0sICRjb3B5cmlnaHRMYWJlbEZvcm0sICRidG5NaW5pbWl6ZUZvcm0sICRidG5DbG9zZUZvcm0pKQ0KCQkJI2VuZHJlZ2lvbiBTdGVwOiBBZGQgQ29udHJvbHMgdG8gVG9wIEJhcg0KDQoJCQkjcmVnaW9uIFN0ZXA6IFNldCBVcCBDb250ZXh0IE1lbnUgZm9yIERhdGFHcmlkcw0KCQkJCSMgQWRkIHRoZSBwcmV2aW91c2x5IGNyZWF0ZWQgaXRlbXMgdG8gdGhlIGNvbnRleHQgbWVudSBzdHJpcC4NCgkJCQkkY3R4TWVudS5JdGVtcy5BZGRSYW5nZShAKCRpdG1Gcm9udCwgJGl0bUJhY2ssICRpdG1SZXNpemVDZW50ZXIpKQ0KCQkJCSMgQXNzaWduIHRoZSBjb250ZXh0IG1lbnUgdG8gYm90aCBEYXRhR3JpZFZpZXcgY29udHJvbHMuDQoJCQkJJERhdGFHcmlkTWFpbi5Db250ZXh0TWVudVN0cmlwID0gJGN0eE1lbnUNCgkJCQkkRGF0YUdyaWRGaWxsZXIuQ29udGV4dE1lbnVTdHJpcCA9ICRjdHhNZW51DQoJCQkjZW5kcmVnaW9uIFN0ZXA6IFNldCBVcCBDb250ZXh0IE1lbnUgZm9yIERhdGFHcmlkcw0KDQoJCQkjcmVnaW9uIFN0ZXA6IEFkZCBDb250cm9scyB0byBTZXR0aW5ncyBGb3JtDQoJCQkJIyBBZGQgdGhlIHByaW1hcnkgY29udHJvbHMgdG8gdGhlIHNldHRpbmdzIGZvcm0uIChMb2dpbiBwb3NpdGlvbiBjb250cm9scyB3ZXJlIGFkZGVkIGR5bmFtaWNhbGx5IGVhcmxpZXIpLg0KCQkJCSRzZXR0aW5nc0Zvcm0uQ29udHJvbHMuQWRkUmFuZ2UoQCgkYnRuU2F2ZSwgJGJ0bkNhbmNlbCwgJGxibExhdW5jaGVyLCAkdHh0TGF1bmNoZXIsICRidG5Ccm93c2VMYXVuY2hlciwgJGxibFByb2Nlc3NOYW1lLCAkdHh0UHJvY2Vzc05hbWUsICRsYmxNYXhDbGllbnRzLCAkdHh0TWF4Q2xpZW50cykpDQoJCQkjZW5kcmVnaW9uIFN0ZXA6IEFkZCBDb250cm9scyB0byBTZXR0aW5ncyBGb3JtDQoJCSNlbmRyZWdpb24gU3RlcDogU2V0IFVwIENvbnRyb2wgSGllcmFyY2h5IGFuZCBDb250ZXh0IE1lbnVzDQoNCgkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgR2xvYmFsIFVJIE9iamVjdCBmb3IgRWxlbWVudCBBY2Nlc3MNCgkJCSMgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUk6IEEgY2VudHJhbCBQU0N1c3RvbU9iamVjdCBob2xkaW5nIHJlZmVyZW5jZXMgdG8gYWxsIGNyZWF0ZWQgVUkgZWxlbWVudHMgZm9yIGVhc3kgYWNjZXNzIHRocm91Z2hvdXQgdGhlIGFwcGxpY2F0aW9uLg0KCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkgPSBbUFNDdXN0b21PYmplY3RdQHsNCgkJCQkjIE1haW4gZm9ybSBhbmQgY29udGFpbmVycw0KCQkJCU1haW5Gb3JtICAgICAgICAgICAgICAgICAgID0gJG1haW5Gb3JtDQoJCQkJU2V0dGluZ3NGb3JtICAgICAgICAgICAgICAgPSAkc2V0dGluZ3NGb3JtDQoJCQkJVG9wQmFyICAgICAgICAgICAgICAgICAgICAgPSAkdG9wQmFyDQoNCgkJCQkjIFdpbmRvdyBjb250cm9sIGJ1dHRvbnMNCgkJCQlDbG9zZUZvcm0gICAgICAgICAgICAgICAgICA9ICRidG5DbG9zZUZvcm0NCgkJCQlNaW5Gb3JtICAgICAgICAgICAgICAgICAgICA9ICRidG5NaW5pbWl6ZUZvcm0NCg0KCQkJCSMgTWFpbiBkaXNwbGF5IGVsZW1lbnRzDQoJCQkJRGF0YUdyaWRNYWluICAgICAgICAgICAgICAgPSAkRGF0YUdyaWRNYWluDQoJCQkJRGF0YUdyaWRGaWxsZXIgICAgICAgICAgICAgPSAkRGF0YUdyaWRGaWxsZXINCg0KCQkJCSMgTWFpbiBhY3Rpb24gYnV0dG9ucw0KCQkJCUxvZ2luQnV0dG9uICAgICAgICAgICAgICAgID0gJGJ0bkxvZ2luDQoJCQkJRnRvb2wgICAgICAgICAgICAgICAgICAgICAgPSAkYnRuRnRvb2wNCgkJCQlTZXR0aW5ncyAgICAgICAgICAgICAgICAgICA9ICRidG5TZXR0aW5ncw0KCQkJCUV4aXQgICAgICAgICAgICAgICAgICAgICAgID0gJGJ0blN0b3ANCgkJCQlMYXVuY2ggICAgICAgICAgICAgICAgICAgICA9ICRidG5MYXVuY2gNCg0KCQkJCSMgU2V0dGluZ3MgZm9ybSBsYWJlbHMNCgkJCQlMYWJlbExhdW5jaGVyICAgICAgICAgICAgICA9ICRsYmxMYXVuY2hlcg0KCQkJCUxhYmVsUHJvY2VzcyAgICAgICAgICAgICAgID0gJGxibFByb2Nlc3NOYW1lDQoJCQkJTGFiZWxNYXggICAgICAgICAgICAgICAgICAgPSAkbGJsTWF4Q2xpZW50cw0KDQoJCQkJIyBTZXR0aW5ncyBmb3JtIGlucHV0cw0KCQkJCUlucHV0TGF1bmNoZXIgICAgICAgICAgICAgID0gJHR4dExhdW5jaGVyDQoJCQkJSW5wdXRQcm9jZXNzICAgICAgICAgICAgICAgPSAkdHh0UHJvY2Vzc05hbWUNCgkJCQlJbnB1dE1heCAgICAgICAgICAgICAgICAgICA9ICR0eHRNYXhDbGllbnRzDQoJCQkJQnJvd3NlICAgICAgICAgICAgICAgICAgICAgPSAkYnRuQnJvd3NlTGF1bmNoZXINCgkJCQlTYXZlICAgICAgICAgICAgICAgICAgICAgICA9ICRidG5TYXZlDQoJCQkJQ2FuY2VsICAgICAgICAgICAgICAgICAgICAgPSAkYnRuQ2FuY2VsDQoNCgkJCQkjIExvZ2luIHBvc2l0aW9uIGNvbnRyb2xzDQoJCQkJUG9zUmFuZ2UgICAgICAgICAgICAgICAgICAgPSAkc2xvdE9wdGlvbnMgIyBBdmFpbGFibGUgcG9zaXRpb24gbnVtYmVycw0KCQkJCUxvZ2luICAgICAgICAgICAgICAgICAgICAgID0gJExvZ2luQ29tYm9zICMgRGljdGlvbmFyeSBvZiBMb2dpbiBDb21ib0JveGVzDQoJCQkJRmluYWxpemVDb2xsZWN0b3JMb2dpbiAgICAgPSAkY2hrRmluYWxpemVMb2dpbiAjIENoZWNrYm94IGZvciBmaW5hbGl6ZSBjb2xsZWN0b3IgbG9naW4NCgkJCQlOZXZlclJlc3RhcnRpbmdDb2xsZWN0b3JMb2dpbiA9ICRjaGtOZXZlclJlc3RhcnRpbmdMb2dpbiAjIENoZWNrYm94IGZvciBOZXZlclJlc3RhcnRpbmcgY29sbGVjdG9yIGxvZ2luDQoNCgkJCQkjIENvbnRleHQgbWVudSBpdGVtcw0KCQkJCUNvbnRleHRNZW51ICAgICAgICAgICAgICAgID0gJGN0eE1lbnUNCgkJCQlDb250ZXh0TWVudUZyb250ICAgICAgICAgICA9ICRpdG1Gcm9udA0KCQkJCUNvbnRleHRNZW51QmFjayAgICAgICAgICAgID0gJGl0bUJhY2sNCgkJCQlDb250ZXh0TWVudVJlc2l6ZUFuZENlbnRlciA9ICRpdG1SZXNpemVDZW50ZXINCgkJCX0NCgkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgR2xvYmFsIFVJIE9iamVjdCBmb3IgRWxlbWVudCBBY2Nlc3MNCg0KCQkjcmVnaW9uIFN0ZXA6IFJlZ2lzdGVyIEFsbCBVSSBFdmVudCBIYW5kbGVycw0KCQkJIyBDYWxsIHRoZSBmdW5jdGlvbiB0byBhdHRhY2ggZXZlbnQgaGFuZGxlcnMgdG8gdGhlIGNyZWF0ZWQgVUkgZWxlbWVudHMuDQoJCQlSZWdpc3Rlci1VSUV2ZW50SGFuZGxlcnMNCgkJI2VuZHJlZ2lvbiBTdGVwOiBSZWdpc3RlciBBbGwgVUkgRXZlbnQgSGFuZGxlcnMNCg0KCQkjcmVnaW9uIFN0ZXA6IFJldHVybiBTdWNjZXNzIFN0YXR1cw0KCQkJcmV0dXJuICR0cnVlDQoJCSNlbmRyZWdpb24gU3RlcDogUmV0dXJuIFN1Y2Nlc3MgU3RhdHVzDQoJfQ0KI2VuZHJlZ2lvbiBGdW5jdGlvbjogSW5pdGlhbGl6ZS1VSQ0KDQojcmVnaW9uIEZ1bmN0aW9uOiBSZWdpc3Rlci1VSUV2ZW50SGFuZGxlcnMNCglmdW5jdGlvbiBSZWdpc3Rlci1VSUV2ZW50SGFuZGxlcnMNCgl7DQoJCTwjDQoJCS5TWU5PUFNJUw0KCQkJUmVnaXN0ZXJzIGFsbCBuZWNlc3NhcnkgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBVSSBlbGVtZW50cy4NCgkJLk5PVEVTDQoJCQlEZWZpbmVzIGEgbWFwcGluZyBvZiBVSSBlbGVtZW50IG5hbWVzIHRvIHRoZWlyIGV2ZW50cyBhbmQgY29ycmVzcG9uZGluZyBzY3JpcHQgYmxvY2tzIChhY3Rpb25zKS4NCgkJCVVzZXMgUmVnaXN0ZXItT2JqZWN0RXZlbnQgdG8gYXR0YWNoIHRoZXNlIGhhbmRsZXJzLiBJbmNsdWRlcyBsb2dpYyBmb3IgZm9ybSBsb2FkaW5nLCBjbG9zaW5nLA0KCQkJcmVzaXppbmcsIGJ1dHRvbiBjbGlja3MsIGNvbnRleHQgbWVudSBhY3Rpb25zLCBldGMuIEVuc3VyZXMgcHJldmlvdXMgaGFuZGxlcnMgd2l0aCB0aGUgc2FtZQ0KCQkJc291cmNlIGlkZW50aWZpZXIgYXJlIHVucmVnaXN0ZXJlZCBmaXJzdC4NCgkJIz4NCgkJW0NtZGxldEJpbmRpbmcoKV0NCgkJcGFyYW0oKQ0KDQoJCSNyZWdpb24gU3RlcDogVmFsaWRhdGUgR2xvYmFsIFVJIE9iamVjdCBFeGlzdGVuY2UNCgkJCSMgRW5zdXJlIHRoZSBVSSBvYmplY3QgaGFzIGJlZW4gaW5pdGlhbGl6ZWQgYmVmb3JlIGF0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgZXZlbnRzLg0KCQkJaWYgKCRudWxsIC1lcSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSSkNCgkJCXsNCgkJCQlXcml0ZS1WZXJib3NlICcgIFVJOiBHbG9iYWwgVUkgaXMgbnVsbCwgZXhpdGluZyBldmVudCByZWdpc3RyYXRpb24nIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJcmV0dXJuDQoJCQl9DQoJCSNlbmRyZWdpb24gU3RlcDogVmFsaWRhdGUgR2xvYmFsIFVJIE9iamVjdCBFeGlzdGVuY2UNCg0KCQkjcmVnaW9uIFN0ZXA6IERlZmluZSBFdmVudCBIYW5kbGVyIE1hcHBpbmdzDQoJCQkjICRldmVudE1hcHBpbmdzOiBIYXNodGFibGUgZGVmaW5pbmcgd2hpY2ggc2NyaXB0IGJsb2NrIHRvIGV4ZWN1dGUgZm9yIHNwZWNpZmljIGV2ZW50cyBvbiBzcGVjaWZpYyBVSSBlbGVtZW50cy4NCgkJCSRldmVudE1hcHBpbmdzID0gQHsNCgkJCQkjIE1haW4gZm9ybSBldmVudHMNCgkJCQlNYWluRm9ybSAgICAgICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIE1haW5Gb3JtIExvYWQgRXZlbnQNCgkJCQkJCSMgSW5pdGlhbGl6ZSBmb3JtIG9uIGxvYWQNCgkJCQkJCUxvYWQgICAgICAgID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogTG9hZCBDb25maWd1cmF0aW9uIGZyb20gSU5JIEZpbGUgb24gRm9ybSBMb2FkDQoJCQkJCQkJCSMgTG9hZCBzZXR0aW5ncyBmcm9tIHRoZSBJTkkgZmlsZSBpZiB0aGUgcGF0aCBpcyBjb25maWd1cmVkLg0KCQkJCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUGF0aHMuSW5pKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQkjIENoZWNrIGlmIElOSSBmaWxlIGV4aXN0cw0KCQkJCQkJCQkJJGluaUV4aXN0cyA9IFRlc3QtUGF0aCAtUGF0aCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5QYXRocy5JbmkNCgkJCQkJCQkJCWlmICgkaW5pRXhpc3RzKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IElOSSBmaWxlIGV4aXN0cyBhdDogJCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5QYXRocy5JbmkpIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoNCgkJCQkJCQkJCQkjIENoZWNrIGZpbGUgc2l6ZSAoZm9yIGRlYnVnZ2luZykNCgkJCQkJCQkJCQkkZmlsZUluZm8gPSBHZXQtSXRlbSAtUGF0aCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5QYXRocy5JbmkNCgkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBJTkkgZmlsZSBzaXplOiAkKCRmaWxlSW5mby5MZW5ndGgpIGJ5dGVzIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoNCgkJCQkJCQkJCQkjIFRyeSB0byByZWFkIHJhdyBjb250ZW50IGZvciBkZWJ1Z2dpbmcNCgkJCQkJCQkJCQl0cnkNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCSRyYXdDb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUGF0aHMuSW5pIC1SYXcNCgkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogSU5JIGNvbnRlbnQ6IGByYG4kKCRyYXdDb250ZW50LlN1YnN0cmluZygwLCBbTWF0aF06Ok1pbigxMDAwLCAkcmF3Q29udGVudC5MZW5ndGgpKSkgYHJgbi4uLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQljYXRjaA0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogQ291bGQgbm90IHJlYWQgcmF3IElOSSBjb250ZW50OiAkXyIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJCQkJCQkJCQl9DQoNCgkJCQkJCQkJCQkjIFVzZSBHZXQtSW5pRmlsZUNvbnRlbnQgdG8gcmVhZCBhbGwgc2V0dGluZ3MgYXQgb25jZQ0KCQkJCQkJCQkJCSRpbmlTZXR0aW5ncyA9IEdldC1JbmlGaWxlQ29udGVudCAtSW5pICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkluaQ0KDQoJCQkJCQkJCQkJIyBDaGVjayBpZiB3ZSBnb3QgYW55IHNldHRpbmdzDQoJCQkJCQkJCQkJaWYgKCRpbmlTZXR0aW5ncy5Db3VudCAtZ3QgMCkNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgJyAgVUk6IFN1Y2Nlc3NmdWxseSByZWFkIHNldHRpbmdzIGZyb20gSU5JIGZpbGUnIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCg0KCQkJCQkJCQkJCQkjIFN0b3JlIHNldHRpbmdzIGluIGdsb2JhbCB2YXJpYWJsZQ0KCQkJCQkJCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcgPSAkaW5pU2V0dGluZ3MNCg0KCQkJCQkJCQkJCQkjIExvZyBsb2FkZWQgc2V0dGluZ3MgKGZvciBkZWJ1Z2dpbmcpDQoJCQkJCQkJCQkJCWZvcmVhY2ggKCRzZWN0aW9uIGluICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZy5LZXlzKQ0KCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWyRzZWN0aW9uXSAtYW5kICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skc2VjdGlvbl0uS2V5cy5Db3VudCAtZ3QgMCkNCgkJCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJCQlmb3JlYWNoICgka2V5IGluICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skc2VjdGlvbl0uS2V5cykNCgkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IExvYWRlZCBzZXR0aW5nICRzZWN0aW9uLiRrZXkgPSAkKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skc2VjdGlvbl1bJGtleV0pIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmV5DQoJCQkJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCQkJZWxzZQ0KCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IFNlY3Rpb24gJHNlY3Rpb24gaGFzIG5vIGtleXMiIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJZWxzZQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogTm8gc2V0dGluZ3MgZm91bmQgaW4gSU5JIGZpbGUnIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkJZWxzZQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IElOSSBmaWxlIGRvZXMgbm90IGV4aXN0IGF0OiAkKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlBhdGhzLkluaSkiIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQkJCQl9DQoNCgkJCQkJCQkJCSMgVXBkYXRlIFVJIHdpdGggbG9hZGVkIHNldHRpbmdzDQoJCQkJCQkJCQlTeW5jLUNvbmZpZ1RvVUkNCgkJCQkJCQkJfQ0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogTG9hZCBDb25maWd1cmF0aW9uIGZyb20gSU5JIEZpbGUgb24gRm9ybSBMb2FkDQoNCgkJCQkJCQkjcmVnaW9uIFN0ZXA6IFN0b3JlIEluaXRpYWwgQ29udHJvbCBQcm9wZXJ0aWVzIGZvciBSZXNpemluZw0KCQkJCQkJCQkjIFN0b3JlIGluaXRpYWwgZGltZW5zaW9ucyBhbmQgcG9zaXRpb25zIGZvciBkeW5hbWljIHJlc2l6aW5nLg0KCQkJCQkJCQkkc2NyaXB0OmluaXRpYWxDb250cm9sUHJvcHMgPSBAe30NCgkJCQkJCQkJJHNjcmlwdDppbml0aWFsRm9ybVdpZHRoID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTWFpbkZvcm0uV2lkdGgNCgkJCQkJCQkJJHNjcmlwdDppbml0aWFsRm9ybUhlaWdodCA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtLkhlaWdodA0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogU3RvcmUgSW5pdGlhbCBDb250cm9sIFByb3BlcnRpZXMgZm9yIFJlc2l6aW5nDQoNCgkJCQkJCQkjcmVnaW9uIFN0ZXA6IERlZmluZSBDb250cm9scyB0byBTY2FsZSBhbmQgU3RvcmUgSW5pdGlhbCBQcm9wZXJ0aWVzDQoJCQkJCQkJCSMgRGVmaW5lIHdoaWNoIGNvbnRyb2xzIHNob3VsZCBiZSBzY2FsZWQgZHVyaW5nIGZvcm0gcmVzaXplLg0KCQkJCQkJCQkkY29udHJvbHNUb1NjYWxlID0gQCgnVG9wQmFyJywgJ0xvZ2luJywgJ0Z0b29sJywgJ1NldHRpbmdzJywgJ0V4aXQnLCAnTGF1bmNoJywgJ0RhdGFHcmlkTWFpbicsICdEYXRhR3JpZEZpbGxlcicsICdNaW5Gb3JtJywgJ0Nsb3NlRm9ybScpDQoNCgkJCQkJCQkJIyBTdG9yZSBpbml0aWFsIHByb3BlcnRpZXMgZm9yIGVhY2ggc2NhbGFibGUgY29udHJvbC4NCgkJCQkJCQkJZm9yZWFjaCAoJGNvbnRyb2xOYW1lIGluICRjb250cm9sc1RvU2NhbGUpDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSRjb250cm9sID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuJGNvbnRyb2xOYW1lDQoJCQkJCQkJCQlpZiAoJGNvbnRyb2wpDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJJHNjcmlwdDppbml0aWFsQ29udHJvbFByb3BzWyRjb250cm9sTmFtZV0gPSBAew0KCQkJCQkJCQkJCQlMZWZ0ICAgICAgICAgICAgID0gJGNvbnRyb2wuTGVmdA0KCQkJCQkJCQkJCQlUb3AgICAgICAgICAgICAgID0gJGNvbnRyb2wuVG9wDQoJCQkJCQkJCQkJCVdpZHRoICAgICAgICAgICAgPSAkY29udHJvbC5XaWR0aA0KCQkJCQkJCQkJCQlIZWlnaHQgICAgICAgICAgID0gJGNvbnRyb2wuSGVpZ2h0DQoJCQkJCQkJCQkJCUlzU2NhbGFibGVCb3R0b20gPSAoJGNvbnRyb2xOYW1lIC1lcSAnRGF0YUdyaWRGaWxsZXInIC1vciAkY29udHJvbE5hbWUgLWVxICdEYXRhR3JpZE1haW4nKSAjIE1hcmsgZ3JpZHMgZm9yIHZlcnRpY2FsIHNjYWxpbmcNCgkJCQkJCQkJCQl9DQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IERlZmluZSBDb250cm9scyB0byBTY2FsZSBhbmQgU3RvcmUgSW5pdGlhbCBQcm9wZXJ0aWVzDQoJCQkJCQl9DQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIE1haW5Gb3JtIExvYWQgRXZlbnQNCg0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBNYWluRm9ybSBTaG93biBFdmVudA0KCQkJCQkJIyBTdGFydCB1cGRhdGUgdGltZXIgd2hlbiBmb3JtIGlzIGFjdHVhbGx5IHNob3duDQoJCQkJCQlTaG93biAgICAgICA9IHsNCgkJCQkJCQkjcmVnaW9uIFN0ZXA6IFN0YXJ0IERhdGFHcmlkIFVwZGF0ZSBUaW1lciBXaGVuIEZvcm0gaXMgU2hvd24NCgkJCQkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQl0cnkNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQlTdGFydC1EYXRhR3JpZFVwZGF0ZVRpbWVyDQoJCQkJCQkJCQl9DQoJCQkJCQkJCQljYXRjaA0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCSMgU2lsZW50IGVycm9yIGhhbmRsaW5nIGlmIHRpbWVyIHN0YXJ0IGZhaWxzDQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRmFpbGVkIHRvIHN0YXJ0IERhdGFHcmlkIHVwZGF0ZSB0aW1lcjogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IFN0YXJ0IERhdGFHcmlkIFVwZGF0ZSBUaW1lciBXaGVuIEZvcm0gaXMgU2hvd24NCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgTWFpbkZvcm0gU2hvd24gRXZlbnQNCg0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBNYWluRm9ybSBGb3JtQ2xvc2luZyBFdmVudA0KCQkJCQkJIyBDbGVhbiB1cCByZXNvdXJjZXMgd2hlbiBmb3JtIGlzIGNsb3NpbmcNCgkJCQkJCUZvcm1DbG9zaW5nID0gew0KCQkJCQkJCXBhcmFtKCRzcmMsICRlKQ0KDQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBDbGVhbiBVcCBSZXNvdXJjZXMgb24gRm9ybSBDbG9zaW5nDQoJCQkJCQkJCVdyaXRlLVZlcmJvc2UgJyAgVUk6IEZvcm0gY2xvc2luZyAtIGNsZWFuaW5nIHVwIHJlc291cmNlcycgLUZvcmVncm91bmRDb2xvciBDeWFuDQoNCgkJCQkJCQkJI3JlZ2lvbiBTdGVwOiBDbGVhbiBVcCBGdG9vbCBJbnN0YW5jZXMNCgkJCQkJCQkJCSMgQ2xlYW4gdXAgYW55IHJ1bm5pbmcgZnRvb2wgZm9ybXMgYW5kIHRoZWlyIGFzc29jaWF0ZWQgcmVzb3VyY2VzLg0KCQkJCQkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5GdG9vbEZvcm1zIC1hbmQgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLkZ0b29sRm9ybXMuQ291bnQgLWd0IDApDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogQ2xlYW5pbmcgdXAgZnRvb2wgaW5zdGFuY2VzOiAkKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5GdG9vbEZvcm1zLkNvdW50KSBmb3JtcyIgLUZvcmVncm91bmRDb2xvciBDeWFuDQoNCgkJCQkJCQkJCQkjIEdldCBhIGNvcHkgb2YgdGhlIGtleXMgdG8gYXZvaWQgY29sbGVjdGlvbiBtb2RpZmljYXRpb24gaXNzdWVzIGR1cmluZyBpdGVyYXRpb24uDQoJCQkJCQkJCQkJJGluc3RhbmNlSWRzID0gQCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuRnRvb2xGb3Jtcy5LZXlzKQ0KDQoJCQkJCQkJCQkJZm9yZWFjaCAoJGluc3RhbmNlSWQgaW4gJGluc3RhbmNlSWRzKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogQ2xlYW5pbmcgdXAgZnRvb2wgaW5zdGFuY2U6ICRpbnN0YW5jZUlkIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJCQkJCQkJCSRmb3JtID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLkZ0b29sRm9ybXNbJGluc3RhbmNlSWRdDQoNCgkJCQkJCQkJCQkJaWYgKCRmb3JtIC1hbmQgLW5vdCAkZm9ybS5Jc0Rpc3Bvc2VkKQ0KCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkjIFVzZSBTdG9wLUZ0b29sRm9ybSBpZiBhdmFpbGFibGUgZm9yIHByb3BlciBjbGVhbnVwLg0KCQkJCQkJCQkJCQkJaWYgKEdldC1Db21tYW5kIC1OYW1lIFN0b3AtRnRvb2xGb3JtIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKQ0KCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCVN0b3AtRnRvb2xGb3JtIC1Gb3JtICRmb3JtDQoJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCQllbHNlDQoJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJIyBGYWxsYmFjayBjbGVhbnVwIGlmIFN0b3AtRnRvb2xGb3JtIGlzIG5vdCBmb3VuZC4NCgkJCQkJCQkJCQkJCQkkZGF0YSA9ICRmb3JtLlRhZw0KCQkJCQkJCQkJCQkJCWlmICgkZGF0YSkNCgkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCSMgQ2xlYW4gdXAgcnVubmluZyBzcGFtbWVyIHRpbWVyIGlmIGV4aXN0cy4NCgkJCQkJCQkJCQkJCQkJaWYgKCRkYXRhLlJ1bm5pbmdTcGFtbWVyKQ0KCQkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCQkkZGF0YS5SdW5uaW5nU3BhbW1lci5TdG9wKCkNCgkJCQkJCQkJCQkJCQkJCSRkYXRhLlJ1bm5pbmdTcGFtbWVyLkRpc3Bvc2UoKQ0KCQkJCQkJCQkJCQkJCQl9DQoNCgkJCQkJCQkJCQkJCQkJIyBDbGVhbiB1cCBmb3JtLXNwZWNpZmljIHRpbWVycy4NCgkJCQkJCQkJCQkJCQkJaWYgKCRkYXRhLlRpbWVycyAtYW5kICRkYXRhLlRpbWVycy5Db3VudCAtZ3QgMCkNCgkJCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCQkJZm9yZWFjaCAoJHRpbWVyS2V5IGluIEAoJGRhdGEuVGltZXJzLktleXMpKQ0KCQkJCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCQkJCSR0aW1lciA9ICRkYXRhLlRpbWVyc1skdGltZXJLZXldDQoJCQkJCQkJCQkJCQkJCQkJaWYgKCR0aW1lcikNCgkJCQkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCQkJCSR0aW1lci5TdG9wKCkNCgkJCQkJCQkJCQkJCQkJCQkJJHRpbWVyLkRpc3Bvc2UoKQ0KCQkJCQkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCQkJCX0NCg0KCQkJCQkJCQkJCQkJCSMgQ2xvc2UgYW5kIGRpc3Bvc2UgZm9ybS4NCgkJCQkJCQkJCQkJCQkkZm9ybS5DbG9zZSgpDQoJCQkJCQkJCQkJCQkJJGZvcm0uRGlzcG9zZSgpDQoJCQkJCQkJCQkJCQkJIyBUaGlzIG1pZ2h0IGJlIHRvbyBhZ2dyZXNzaXZlIGhlcmUsIGNvbnNpZGVyIGlmIG5lZWRlZC4NCgkJCQkJCQkJCQkJCQkjIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5BcHBsaWNhdGlvbl06OkV4aXQoKQ0KCQkJCQkJCQkJCQkJfQ0KDQoJCQkJCQkJCQkJCQkjIFJlbW92ZSB0aGUgZm9ybSByZWZlcmVuY2UgZnJvbSB0aGUgZ2xvYmFsIGNvbGxlY3Rpb24uDQoJCQkJCQkJCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuRnRvb2xGb3Jtcy5SZW1vdmUoJGluc3RhbmNlSWQpDQoJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQl9DQoJCQkJCQkJCQl9DQoJCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogQ2xlYW4gVXAgRnRvb2wgSW5zdGFuY2VzDQoNCgkJCQkJCQkJI3JlZ2lvbiBTdGVwOiBDbGVhbiBVcCBHbG9iYWwgVGltZXJzDQoJCQkJCQkJCQkjIENsZWFuIHVwIGFsbCByZWdpc3RlcmVkIHRpbWVycyBzdG9yZWQgaW4gdGhlIGdsb2JhbCByZXNvdXJjZXMuDQoJCQkJCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLlRpbWVycyAtYW5kICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5UaW1lcnMuQ291bnQgLWd0IDApDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogQ2xlYW5pbmcgdXAgJCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuVGltZXJzLkNvdW50KSB0aW1lcnMiIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCg0KCQkJCQkJCQkJCSMgSGFuZGxlIG5lc3RlZCB0aW1lciBjb2xsZWN0aW9ucyBmaXJzdCAoZS5nLiwgdGltZXJzIHdpdGhpbiBmdG9vbCBkYXRhKS4NCgkJCQkJCQkJCQlmb3JlYWNoICgkY29sbGVjdGlvbktleSBpbiBAKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5UaW1lcnMuS2V5cykpDQoJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkkY29sbGVjdGlvbiA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5UaW1lcnNbJGNvbGxlY3Rpb25LZXldDQoNCgkJCQkJCQkJCQkJaWYgKCRjb2xsZWN0aW9uIC1pcyBbU3lzdGVtLkNvbGxlY3Rpb25zLkhhc2h0YWJsZV0gLW9yICRjb2xsZWN0aW9uIC1pcyBbU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5XSkNCgkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJJG5lc3RlZEtleXMgPSBAKCRjb2xsZWN0aW9uLktleXMpDQoJCQkJCQkJCQkJCQlmb3JlYWNoICgkbmVzdGVkS2V5IGluICRuZXN0ZWRLZXlzKQ0KCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCSR0aW1lciA9ICRjb2xsZWN0aW9uWyRuZXN0ZWRLZXldDQoJCQkJCQkJCQkJCQkJaWYgKCR0aW1lciAtaXMgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLlRpbWVyXSkNCgkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCWlmICgkdGltZXIuRW5hYmxlZCkgeyAkdGltZXIuU3RvcCgpIH0NCgkJCQkJCQkJCQkJCQkJJHRpbWVyLkRpc3Bvc2UoKQ0KCQkJCQkJCQkJCQkJCQkkY29sbGVjdGlvbi5SZW1vdmUoJG5lc3RlZEtleSkNCgkJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQl9DQoNCgkJCQkJCQkJCQkjIEhhbmRsZSBkaXJlY3QgdGltZXJzIHN0b3JlZCBpbiB0aGUgbWFpbiBUaW1lcnMgY29sbGVjdGlvbi4NCgkJCQkJCQkJCQkkdGltZXJLZXlzID0gQCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuVGltZXJzLktleXMpDQoJCQkJCQkJCQkJZm9yZWFjaCAoJGtleSBpbiAkdGltZXJLZXlzKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJJHRpbWVyID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLlRpbWVyc1ska2V5XQ0KCQkJCQkJCQkJCQlpZiAoJHRpbWVyIC1pcyBbU3lzdGVtLldpbmRvd3MuRm9ybXMuVGltZXJdKQ0KCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQlpZiAoJHRpbWVyLkVuYWJsZWQpIHsgJHRpbWVyLlN0b3AoKSB9DQoJCQkJCQkJCQkJCQkkdGltZXIuRGlzcG9zZSgpDQoJCQkJCQkJCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuVGltZXJzLlJlbW92ZSgka2V5KQ0KCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IENsZWFuIFVwIEdsb2JhbCBUaW1lcnMNCg0KCQkJCQkJCQkjcmVnaW9uIFN0ZXA6IENsZWFuIFVwIEJhY2tncm91bmQgSm9icw0KCQkJCQkJCQkJIyBTdG9wIGFuZCByZW1vdmUgYW55IHJ1bm5pbmcgUG93ZXJTaGVsbCBiYWNrZ3JvdW5kIGpvYnMuDQoJCQkJCQkJCQl0cnkNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQkkcnVubmluZ0pvYnMgPSBHZXQtSm9iIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgV2hlcmUtT2JqZWN0IHsgJF8uU3RhdGUgLW5lICdDb21wbGV0ZWQnIH0NCgkJCQkJCQkJCQlpZiAoJHJ1bm5pbmdKb2JzIC1hbmQgJHJ1bm5pbmdKb2JzLkNvdW50IC1ndCAwKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogU3RvcHBpbmcgJCgkcnVubmluZ0pvYnMuQ291bnQpIGJhY2tncm91bmQgam9icy4iIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkJCQkJCQkJJHJ1bm5pbmdKb2JzIHwgU3RvcC1Kb2IgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCgkJCQkJCQkJCQkJR2V0LUpvYiAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFJlbW92ZS1Kb2IgLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkJY2F0Y2gNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBFcnJvciBjbGVhbmluZyB1cCBiYWNrZ3JvdW5kIGpvYnM6ICRfIi1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQkJCQl9DQoJCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogQ2xlYW4gVXAgQmFja2dyb3VuZCBKb2JzDQoNCgkJCQkJCQkJI3JlZ2lvbiBTdGVwOiBDbGVhbiBVcCBSdW5zcGFjZXMNCgkJCQkJCQkJCSMgRGlzcG9zZSBvZiBhbnkgYWN0aXZlIHJ1bnNwYWNlcy4NCgkJCQkJCQkJCWlmICgkZ2xvYmFsOnJ1bnNwYWNlcyAtYW5kICRnbG9iYWw6cnVuc3BhY2VzLkNvdW50IC1ndCAwKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IERpc3Bvc2luZyAkKCRnbG9iYWw6cnVuc3BhY2VzLkNvdW50KSBydW5zcGFjZXMuIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJCQkJCQkJZm9yZWFjaCAoJHJzIGluICRnbG9iYWw6cnVuc3BhY2VzKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJdHJ5DQoJCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJCWlmICgkcnMuUnVuc3BhY2UuUnVuc3BhY2VTdGF0ZUluZm8uU3RhdGUgLW5lICdDbG9zZWQnKQ0KCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCSRycy5Qb3dlclNoZWxsLkRpc3Bvc2UoKQ0KCQkJCQkJCQkJCQkJCSRycy5SdW5zcGFjZS5EaXNwb3NlKCkNCgkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCQljYXRjaA0KCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBFcnJvciBkaXNwb3NpbmcgcnVuc3BhY2U6ICRfIi1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJJGdsb2JhbDpydW5zcGFjZXMuQ2xlYXIoKQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IENsZWFuIFVwIFJ1bnNwYWNlcw0KDQoJCQkJCQkJCSNyZWdpb24gU3RlcDogQ2xlYW4gVXAgTGF1bmNoIFJlc291cmNlcw0KCQkJCQkJCQkJIyBTdG9wIGFueSBvbmdvaW5nIGNsaWVudCBsYXVuY2ggcHJvY2Vzc2VzLg0KCQkJCQkJCQkJU3RvcC1DbGllbnRMYXVuY2gNCgkJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBDbGVhbiBVcCBMYXVuY2ggUmVzb3VyY2VzDQoNCgkJCQkJCQkJI3JlZ2lvbiBTdGVwOiBGb3JjZSBHYXJiYWdlIENvbGxlY3Rpb24NCgkJCQkJCQkJCSMgRXhwbGljaXRseSBydW4gZ2FyYmFnZSBjb2xsZWN0aW9uIHRvIHJlbGVhc2UgbWVtb3J5Lg0KCQkJCQkJCQkJW1N5c3RlbS5HQ106OkNvbGxlY3QoKQ0KCQkJCQkJCQkJW1N5c3RlbS5HQ106OldhaXRGb3JQZW5kaW5nRmluYWxpemVycygpDQoJCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogRm9yY2UgR2FyYmFnZSBDb2xsZWN0aW9uDQoJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBDbGVhbiBVcCBSZXNvdXJjZXMgb24gRm9ybSBDbG9zaW5nDQoJCQkJCQl9DQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIE1haW5Gb3JtIEZvcm1DbG9zaW5nIEV2ZW50DQoNCgkJCQkJI3JlZ2lvbiBTdGVwOiBIYW5kbGUgTWFpbkZvcm0gUmVzaXplIEV2ZW50DQoJCQkJCQkjIEhhbmRsZSBmb3JtIHJlc2l6aW5nIHRvIGR5bmFtaWNhbGx5IGFkanVzdCBjb250cm9sIHBvc2l0aW9ucyBhbmQgc2l6ZXMNCgkJCQkJCVJlc2l6ZSAgICAgID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIEZvcm0gUmVzaXppbmcgYW5kIFNjYWxlIENvbnRyb2xzDQoJCQkJCQkJCSMgU2tpcCBpZiBpbml0aWFsaXphdGlvbiBkYXRhIGlzIG1pc3NpbmcNCgkJCQkJCQkJaWYgKC1ub3QgJHNjcmlwdDppbml0aWFsQ29udHJvbFByb3BzIC1vciAtbm90ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQlyZXR1cm4NCgkJCQkJCQkJfQ0KDQoJCQkJCQkJCSMgQ2FsY3VsYXRlIHNjYWxpbmcgZmFjdG9ycyBiYXNlZCBvbiBjdXJyZW50IHZzIGluaXRpYWwgc2l6ZQ0KCQkJCQkJCQkkY3VycmVudEZvcm1XaWR0aCA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtLkNsaWVudFNpemUuV2lkdGgNCgkJCQkJCQkJJGN1cnJlbnRGb3JtSGVpZ2h0ID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTWFpbkZvcm0uQ2xpZW50U2l6ZS5IZWlnaHQNCgkJCQkJCQkJJHNjYWxlVyA9ICRjdXJyZW50Rm9ybVdpZHRoIC8gJHNjcmlwdDppbml0aWFsRm9ybVdpZHRoDQoNCgkJCQkJCQkJIyBEZWZpbmUgZml4ZWQgYXJlYXMgKGUuZy4sIGhlaWdodCBvZiB0aGUgdG9wIGJ1dHRvbiBiYXIgYXJlYSkNCgkJCQkJCQkJJGZpeGVkVG9wSGVpZ2h0ID0gMTI1DQoJCQkJCQkJCSRib3R0b21NYXJnaW4gPSAxMA0KDQoJCQkJCQkJCSMgUmVzaXplIGFuZCByZXBvc2l0aW9uIGVhY2ggc2NhbGFibGUgY29udHJvbA0KCQkJCQkJCQlmb3JlYWNoICgkY29udHJvbE5hbWUgaW4gJHNjcmlwdDppbml0aWFsQ29udHJvbFByb3BzLktleXMpDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSRjb250cm9sID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuJGNvbnRyb2xOYW1lDQoJCQkJCQkJCQlpZiAoJGNvbnRyb2wpDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJJGluaXRpYWxQcm9wcyA9ICRzY3JpcHQ6aW5pdGlhbENvbnRyb2xQcm9wc1skY29udHJvbE5hbWVdDQoNCgkJCQkJCQkJCQkjIENhbGN1bGF0ZSBuZXcgcG9zaXRpb24gYW5kIHdpZHRoIGJhc2VkIG9uIGhvcml6b250YWwgc2NhbGUNCgkJCQkJCQkJCQkkbmV3TGVmdCA9IFtpbnRdKCRpbml0aWFsUHJvcHMuTGVmdCAqICRzY2FsZVcpDQoJCQkJCQkJCQkJJG5ld1dpZHRoID0gW2ludF0oJGluaXRpYWxQcm9wcy5XaWR0aCAqICRzY2FsZVcpDQoNCgkJCQkJCQkJCQkjIEhhbmRsZSBzcGVjaWFsIGNhc2UgZm9yIGJvdHRvbS1hbmNob3JlZCBjb250cm9scyAoRGF0YUdyaWRzKQ0KCQkJCQkJCQkJCWlmICgkaW5pdGlhbFByb3BzLklzU2NhbGFibGVCb3R0b20pDQoJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkkY29udHJvbC5Ub3AgPSAkZml4ZWRUb3BIZWlnaHQNCgkJCQkJCQkJCQkJIyBBZGp1c3QgaGVpZ2h0IGJhc2VkIG9uIHJlbWFpbmluZyBmb3JtIGhlaWdodA0KCQkJCQkJCQkJCQkkY29udHJvbC5IZWlnaHQgPSBbTWF0aF06Ok1heCgxMDAsICRjdXJyZW50Rm9ybUhlaWdodCAtICRmaXhlZFRvcEhlaWdodCAtICRib3R0b21NYXJnaW4pDQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCWVsc2UNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCSMgS2VlcCBvcmlnaW5hbCB0b3AgYW5kIGhlaWdodCBmb3Igbm9uLXZlcnRpY2FsbHktc2NhbGluZyBjb250cm9scw0KCQkJCQkJCQkJCQkkY29udHJvbC5Ub3AgPSAkaW5pdGlhbFByb3BzLlRvcA0KCQkJCQkJCQkJCQkkY29udHJvbC5IZWlnaHQgPSAkaW5pdGlhbFByb3BzLkhlaWdodA0KCQkJCQkJCQkJCX0NCg0KCQkJCQkJCQkJCSMgQXBwbHkgbmV3IHBvc2l0aW9uIGFuZCB3aWR0aA0KCQkJCQkJCQkJCSRjb250cm9sLkxlZnQgPSAkbmV3TGVmdA0KCQkJCQkJCQkJCSRjb250cm9sLldpZHRoID0gJG5ld1dpZHRoDQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBGb3JtIFJlc2l6aW5nIGFuZCBTY2FsZSBDb250cm9scw0KCQkJCQkJfQ0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBNYWluRm9ybSBSZXNpemUgRXZlbnQNCg0KCQkJCX0NCg0KCQkJCSMgU2V0dGluZ3MgZm9ybSBldmVudHMNCgkJCQlTZXR0aW5nc0Zvcm0gICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIFNldHRpbmdzRm9ybSBMb2FkIEV2ZW50DQoJCQkJCQkjIEluaXRpYWxpemUgZm9ybSBvbiBsb2FkDQoJCQkJCQlMb2FkID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogU3luYyBDb25maWcgdG8gVUkgV2hlbiBTZXR0aW5ncyBGb3JtIExvYWRzDQoJCQkJCQkJCXRyeQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQkjIFBvcHVsYXRlIFVJIGNvbnRyb2xzIHdpdGggY3VycmVudCBjb25maWcgdmFsdWVzIHdoZW4gdGhlIGZvcm0gbG9hZHMuDQoJCQkJCQkJCQlTeW5jLUNvbmZpZ1RvVUkNCgkJCQkJCQkJfQ0KCQkJCQkJCQljYXRjaA0KCQkJCQkJCQl7DQoJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBFcnJvciBsb2FkaW5nIHNldHRpbmdzIGZvcm06ICRfIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJCQkJCQkJW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJGYWlsZWQgdG8gbG9hZCBzZXR0aW5nczogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiLCAnRXJyb3InLA0KCQkJCQkJCQkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikNCgkJCQkJCQkJfQ0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogU3luYyBDb25maWcgdG8gVUkgV2hlbiBTZXR0aW5ncyBGb3JtIExvYWRzDQoJCQkJCQl9DQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIFNldHRpbmdzRm9ybSBMb2FkIEV2ZW50DQoJCQkJfQ0KDQoJCQkJIyBNaW5pbWl6ZSBidXR0b24gZXZlbnQNCgkJCQlNaW5Gb3JtICAgICAgICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIE1pbkZvcm0gQ2xpY2sgRXZlbnQNCgkJCQkJCUNsaWNrID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogTWluaW1pemUgTWFpbiBGb3JtDQoJCQkJCQkJCSMgTWluaW1pemUgdGhlIG1haW4gYXBwbGljYXRpb24gd2luZG93Lg0KCQkJCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5NYWluRm9ybS5XaW5kb3dTdGF0ZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtV2luZG93U3RhdGVdOjpNaW5pbWl6ZWQNCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IE1pbmltaXplIE1haW4gRm9ybQ0KCQkJCQkJfQ0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBNaW5Gb3JtIENsaWNrIEV2ZW50DQoJCQkJfQ0KDQoJCQkJIyBDbG9zZSBidXR0b24gZXZlbnQNCgkJCQlDbG9zZUZvcm0gICAgICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIENsb3NlRm9ybSBDbGljayBFdmVudA0KCQkJCQkJQ2xpY2sgPSB7DQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBDbG9zZSBNYWluIEZvcm0gYW5kIEV4aXQgQXBwbGljYXRpb24NCgkJCQkJCQkJdHJ5DQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgQ2xvc2UgdGhlIG1haW4gZm9ybSwgd2hpY2ggdHJpZ2dlcnMgdGhlIEZvcm1DbG9zaW5nIGV2ZW50IGZvciBjbGVhbnVwLg0KCQkJCQkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTWFpbkZvcm0uQ2xvc2UoKQ0KCQkJCQkJCQkJIyBBdHRlbXB0IHRvIGV4aXQgdGhlIGFwcGxpY2F0aW9uIG1lc3NhZ2UgbG9vcC4NCgkJCQkJCQkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5BcHBsaWNhdGlvbl06OkV4aXQoKQ0KCQkJCQkJCQkJIyBGb3JjZWZ1bGx5IHN0b3AgdGhlIGN1cnJlbnQgUG93ZXJTaGVsbCBwcm9jZXNzIGFzIGEgZmluYWwgbWVhc3VyZS4NCgkJCQkJCQkJCVN0b3AtUHJvY2VzcyAtSWQgJFBJRCAtRm9yY2UNCgkJCQkJCQkJfQ0KCQkJCQkJCQljYXRjaA0KCQkJCQkJCQl7DQoJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkZhaWxlZCB0byBjbG9zZSB0aGUgYXBwbGljYXRpb246ICQoJF8uRXhjZXB0aW9uLk1lc3NhZ2UpIiwgJ0Vycm9yJywNCgkJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6RXJyb3IpDQoJCQkJCQkJCX0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IENsb3NlIE1haW4gRm9ybSBhbmQgRXhpdCBBcHBsaWNhdGlvbg0KCQkJCQkJfQ0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBDbG9zZUZvcm0gQ2xpY2sgRXZlbnQNCgkJCQl9DQoNCgkJCQkjIFRvcCBiYXIgZHJhZyBldmVudA0KCQkJCVRvcEJhciAgICAgICAgICAgICAgICAgICAgID0gQHsNCgkJCQkJI3JlZ2lvbiBTdGVwOiBIYW5kbGUgVG9wQmFyIE1vdXNlRG93biBFdmVudA0KCQkJCQkJTW91c2VEb3duID0gew0KCQkJCQkJCXBhcmFtKCRzcmMsICRlKQ0KCQkJCQkJCSNyZWdpb24gU3RlcDogRW5hYmxlIEZvcm0gRHJhZ2dpbmcgdmlhIFRvcCBCYXINCgkJCQkJCQkJIyBVc2UgbmF0aXZlIFdpbmRvd3MgbWVzc2FnZXMgdG8gYWxsb3cgZHJhZ2dpbmcgdGhlIGJvcmRlcmxlc3MgZm9ybSBieSBpdHMgdG9wIGJhci4NCgkJCQkJCQkJW05hdGl2ZV06OlJlbGVhc2VDYXB0dXJlKCkNCgkJCQkJCQkJW05hdGl2ZV06OlNlbmRNZXNzYWdlKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtLkhhbmRsZSwgMHhBMSwgMHgyLCAwKSAjIFdNX05DTEJVVFRPTkRPV04sIEhUQ0FQVElPTg0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogRW5hYmxlIEZvcm0gRHJhZ2dpbmcgdmlhIFRvcCBCYXINCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgVG9wQmFyIE1vdXNlRG93biBFdmVudA0KCQkJCX0NCg0KCQkJCSMgU2V0dGluZ3MgYnV0dG9uIGV2ZW50DQoJCQkJU2V0dGluZ3MgICAgICAgICAgICAgICAgICAgPSBAew0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBTZXR0aW5ncyBCdXR0b24gQ2xpY2sgRXZlbnQNCgkJCQkJCUNsaWNrID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogU2hvdyBTZXR0aW5ncyBGb3JtDQoJCQkJCQkJCSMgQ2FsbCB0aGUgZnVuY3Rpb24gdG8gZGlzcGxheSB0aGUgc2V0dGluZ3MgZm9ybSB3aXRoIGEgZmFkZS1pbiBlZmZlY3QuDQoJCQkJCQkJCVNob3ctU2V0dGluZ3NGb3JtDQoJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBTaG93IFNldHRpbmdzIEZvcm0NCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgU2V0dGluZ3MgQnV0dG9uIENsaWNrIEV2ZW50DQoJCQkJfQ0KDQoJCQkJIyBTYXZlIGJ1dHRvbiBldmVudCAoaW4gU2V0dGluZ3MgRm9ybSkNCgkJCQlTYXZlICAgICAgICAgICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIFNhdmUgQnV0dG9uIENsaWNrIEV2ZW50DQoJCQkJCQlDbGljayA9IHsNCgkJCQkJCQkjcmVnaW9uIFN0ZXA6IFNhdmUgU2V0dGluZ3MgZnJvbSBVSSB0byBDb25maWcgRmlsZQ0KCQkJCQkJCQl0cnkNCgkJCQkJCQkJew0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogVXBkYXRpbmcgc2V0dGluZ3MgZnJvbSBVSScgLUZvcmVncm91bmRDb2xvciBDeWFuDQoNCgkJCQkJCQkJCSMgU3luYyBVSSB2YWx1ZXMgYmFjayB0byB0aGUgZ2xvYmFsIGNvbmZpZyBvYmplY3QuDQoJCQkJCQkJCQlTeW5jLVVJVG9Db25maWcNCgkJCQkJCQkJCSMgV3JpdGUgdGhlIHVwZGF0ZWQgY29uZmlnIG9iamVjdCB0byB0aGUgSU5JIGZpbGUuDQoJCQkJCQkJCQkkcmVzdWx0ID0gV3JpdGUtQ29uZmlnDQoNCgkJCQkJCQkJCSMgTG9nIHRoZSBzZXR0aW5ncyBiZWluZyBzYXZlZCAoZm9yIGRlYnVnZ2luZykuDQoJCQkJCQkJCQlXcml0ZS1WZXJib3NlICcgIFVJOiBTZXR0aW5ncyB0byBzYXZlOicgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJZm9yZWFjaCAoJHNlY3Rpb24gaW4gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnLktleXMpDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJZm9yZWFjaCAoJGtleSBpbiAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJHNlY3Rpb25dLktleXMpDQoJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiAkc2VjdGlvbi4ka2V5ID0gJCgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWdbJHNlY3Rpb25dWyRrZXldKSIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJCX0NCgkJCQkJCQkJCX0NCg0KCQkJCQkJCQkJIyBDaGVjayBpZiB3cml0aW5nIHRoZSBjb25maWcgd2FzIHN1Y2Nlc3NmdWwuDQoJCQkJCQkJCQlpZiAoISgkcmVzdWx0KSkNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICcgIFVJOiBGYWlsZWQgdG8gc2F2ZSBzZXR0aW5ncyB0byBJTkkgZmlsZScgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkZhaWxlZCB0byBzYXZlIHNldHRpbmdzLiIsICdFcnJvcicsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikNCgkJCQkJCQkJCQlyZXR1cm4NCgkJCQkJCQkJCX0NCg0KCQkJCQkJCQkJIyBIaWRlIHNldHRpbmdzIGZvcm0gd2l0aCBmYWRlLW91dCBlZmZlY3QgdXBvbiBzdWNjZXNzZnVsIHNhdmUuDQoJCQkJCQkJCQlIaWRlLVNldHRpbmdzRm9ybQ0KCQkJCQkJCQl9DQoJCQkJCQkJCWNhdGNoDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgU2hvdyBlcnJvciBtZXNzYWdlIGlmIHNhdmluZyBmYWlscy4NCgkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IEZhaWxlZCB0byBzYXZlIHNldHRpbmdzIHRvIElOSSBmaWxlOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygiRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3M6ICQoJF8uRXhjZXB0aW9uLk1lc3NhZ2UpIiwgJ0Vycm9yJywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkVycm9yKQ0KCQkJCQkJCQl9DQoJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBTYXZlIFNldHRpbmdzIGZyb20gVUkgdG8gQ29uZmlnIEZpbGUNCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgU2F2ZSBCdXR0b24gQ2xpY2sgRXZlbnQNCgkJCQl9DQoNCgkJCQkjIENhbmNlbCBidXR0b24gZXZlbnQgKGluIFNldHRpbmdzIEZvcm0pDQoJCQkJQ2FuY2VsICAgICAgICAgICAgICAgICAgICAgPSBAew0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBDYW5jZWwgQnV0dG9uIENsaWNrIEV2ZW50DQoJCQkJCQlDbGljayA9IHsNCgkJCQkJCQkjcmVnaW9uIFN0ZXA6IEhpZGUgU2V0dGluZ3MgRm9ybQ0KCQkJCQkJCQkjIENhbGwgdGhlIGZ1bmN0aW9uIHRvIGhpZGUgdGhlIHNldHRpbmdzIGZvcm0gd2l0aG91dCBzYXZpbmcgY2hhbmdlcy4NCgkJCQkJCQkJSGlkZS1TZXR0aW5nc0Zvcm0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhpZGUgU2V0dGluZ3MgRm9ybQ0KCQkJCQkJfQ0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBDYW5jZWwgQnV0dG9uIENsaWNrIEV2ZW50DQoJCQkJfQ0KDQoJCQkJIyBCcm93c2UgYnV0dG9uIGV2ZW50IChpbiBTZXR0aW5ncyBGb3JtKQ0KCQkJCUJyb3dzZSAgICAgICAgICAgICAgICAgICAgID0gQHsNCgkJCQkJI3JlZ2lvbiBTdGVwOiBIYW5kbGUgQnJvd3NlIEJ1dHRvbiBDbGljayBFdmVudA0KCQkJCQkJQ2xpY2sgPSB7DQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBTaG93IE9wZW5GaWxlRGlhbG9nIGZvciBMYXVuY2hlciBQYXRoDQoJCQkJCQkJCSMgT3BlbiBhIHN0YW5kYXJkIGZpbGUgZGlhbG9nIHRvIHNlbGVjdCB0aGUgZ2FtZSBsYXVuY2hlciBleGVjdXRhYmxlLg0KCQkJCQkJCQkkZCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuT3BlbkZpbGVEaWFsb2cNCgkJCQkJCQkJJGQuRmlsdGVyID0gJ0V4ZWN1dGFibGUgRmlsZXMgKCouZXhlKXwqLmV4ZXxBbGwgRmlsZXMgKCouKil8Ki4qJw0KCQkJCQkJCQlpZiAoJGQuU2hvd0RpYWxvZygpIC1lcSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuRGlhbG9nUmVzdWx0XTo6T0spDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgVXBkYXRlIHRoZSBsYXVuY2hlciBwYXRoIFRleHRCb3ggd2l0aCB0aGUgc2VsZWN0ZWQgZmlsZS4NCgkJCQkJCQkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLklucHV0TGF1bmNoZXIuVGV4dCA9ICRkLkZpbGVOYW1lDQoJCQkJCQkJCX0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IFNob3cgT3BlbkZpbGVEaWFsb2cgZm9yIExhdW5jaGVyIFBhdGgNCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgQnJvd3NlIEJ1dHRvbiBDbGljayBFdmVudA0KCQkJCX0NCg0KCQkJCSMgRGF0YUdyaWQgZXZlbnRzDQoJCQkJRGF0YUdyaWRGaWxsZXIgPSBAew0KDQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIERhdGFHcmlkIERvdWJsZUNsaWNrIEV2ZW50DQoJCQkJCQkjIEhhbmRsZSBkb3VibGUtY2xpY2sgdG8gYnJpbmcgdGhlIGNvcnJlc3BvbmRpbmcgcHJvY2VzcyB3aW5kb3cgdG8gdGhlIGZyb250DQoJCQkJCQlEb3VibGVDbGljayA9IHsNCgkJCQkJCQlwYXJhbSgkc3JjLCAkZSkNCgkJCQkJCQl0cnkgew0KCQkJCQkJCQkkZ3JpZCA9ICRzcmMNCgkJCQkJCQkJaWYgKC1ub3QgJGdyaWQpIHsgcmV0dXJuIH0NCgkJCQkJCQkJIyBEZXRlcm1pbmUgd2hpY2ggcm93IHdhcyBkb3VibGUtY2xpY2tlZC4NCgkJCQkJCQkJJGhpdFRlc3RJbmZvID0gJGdyaWQuSGl0VGVzdCgkZS5YLCAkZS5ZKQ0KCQkJCQkJCQlpZiAoJGhpdFRlc3RJbmZvLlJvd0luZGV4IC1nZSAwKSB7DQoJCQkJCQkJCQkkcm93ID0gJGdyaWQuUm93c1skaGl0VGVzdEluZm8uUm93SW5kZXhdDQoJCQkJCQkJCQkjIENoZWNrIGlmIHRoZSByb3cgaGFzIGFzc29jaWF0ZWQgcHJvY2VzcyBpbmZvIGFuZCBhIHZhbGlkIHdpbmRvdyBoYW5kbGUuDQoJCQkJCQkJCQkjIEFzc3VtaW5nICRyb3cuVGFnIGhvbGRzIGEgcHJvY2VzcyBvYmplY3Qgb3Igc2ltaWxhciB3aXRoIE1haW5XaW5kb3dIYW5kbGUNCgkJCQkJCQkJCWlmICgkcm93LlRhZyAtYW5kICRyb3cuVGFnLkdldFR5cGUoKS5HZXRQcm9wZXJ0eSgnTWFpbldpbmRvd0hhbmRsZScpIC1hbmQgJHJvdy5UYWcuTWFpbldpbmRvd0hhbmRsZSAtbmUgW0ludFB0cl06Olplcm8pIHsNCgkJCQkJCQkJCQkjIFVzZSBoZWxwZXIgZnVuY3Rpb24vbmF0aXZlIG1ldGhvZHMgaWYgYXZhaWxhYmxlDQoJCQkJCQkJCQkJW05hdGl2ZV06OkJyaW5nVG9Gcm9udCgkcm93LlRhZy5NYWluV2luZG93SGFuZGxlKQ0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IERvdWJsZUNsaWNrIC0gQnJpbmdpbmcgd2luZG93IGhhbmRsZSAkKCRyb3cuVGFnLk1haW5XaW5kb3dIYW5kbGUpIHRvIGZyb250LiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJfSBlbHNlaWYgKCRyb3cuVGFnIC1hbmQgJHJvdy5UYWcuR2V0VHlwZSgpLkdldFByb3BlcnR5KCdNYWluV2luZG93SGFuZGxlJykpIHsNCgkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBEb3VibGVDbGljayAtIFJvdyAkKCRoaXRUZXN0SW5mby5Sb3dJbmRleCkgaGFzIHRhZywgYnV0IE1haW5XaW5kb3dIYW5kbGUgaXMgWmVyby4iIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkJCQkJCX0gZWxzZSB7DQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRG91YmxlQ2xpY2sgLSBSb3cgJCgkaGl0VGVzdEluZm8uUm93SW5kZXgpIGRvZXMgbm90IGhhdmUgYSB2YWxpZCBUYWcgd2l0aCBNYWluV2luZG93SGFuZGxlLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQl9DQoJCQkJCQkJfSBjYXRjaCB7DQoJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IEVycm9yIGluIERhdGFHcmlkRmlsbGVyIERvdWJsZUNsaWNrOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQl9DQoJCQkJCQl9DQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIERhdGFHcmlkIERvdWJsZUNsaWNrIEV2ZW50DQoNCgkJCQkJI3JlZ2lvbiBTdGVwOiBIYW5kbGUgRGF0YUdyaWQgTW91c2VEb3duIEV2ZW50DQoJCQkJCQkjIEhhbmRsZSByaWdodC1jbGljayBmb3IgY29udGV4dCBtZW51LCBsZWZ0LWNsaWNrIGZvciBzZWxlY3Rpb24sIEFsdCtMZWZ0LWNsaWNrIGZvciBkcmFnIGluaXRpYXRpb24NCgkJCQkJCU1vdXNlRG93biA9IHsNCgkJCQkJCQlwYXJhbSgkc3JjLCAkZSkgIyAkc3JjIGlzIHRoZSBEYXRhR3JpZFZpZXcgY29udHJvbCBpdHNlbGYNCg0KCQkJCQkJCXRyeSB7DQoJCQkJCQkJCSRncmlkID0gJHNyYyAjIFVzZSB0aGUgc291cmNlIGNvbnRyb2wgcGFzc2VkIHRvIHRoZSBldmVudA0KCQkJCQkJCQlpZiAoLW5vdCAkZ3JpZCkgew0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogTW91c2VEb3duIC0gU291cmNlIGdyaWQgb2JqZWN0IGlzIG51bGwuIiAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KCQkJCQkJCQkJcmV0dXJuDQoJCQkJCQkJCX0NCg0KCQkJCQkJCQkkaGl0VGVzdEluZm8gPSAkZ3JpZC5IaXRUZXN0KCRlLlgsICRlLlkpDQoNCgkJCQkJCQkJIyAtLS0gUmlnaHQtQ2xpY2sgSGFuZGxpbmcgLS0tDQoJCQkJCQkJCWlmICgkZS5CdXR0b24gLWVxIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Nb3VzZUJ1dHRvbnNdOjpSaWdodCkgew0KCQkJCQkJCQkJaWYgKCRoaXRUZXN0SW5mby5Sb3dJbmRleCAtZ2UgMCkgew0KCQkJCQkJCQkJCSMgRW5zdXJlIHRoZSBjbGlja2VkIHJvdyBpcyBzZWxlY3RlZCBiZWZvcmUgc2hvd2luZyB0aGUgY29udGV4dCBtZW51Lg0KCQkJCQkJCQkJCWlmICgtbm90IChbU3lzdGVtLldpbmRvd3MuRm9ybXMuQ29udHJvbF06Ok1vZGlmaWVyS2V5cyAtYmFuZCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuS2V5c106OkNvbnRyb2wpKSB7DQoJCQkJCQkJCQkJCWlmICgtbm90ICRncmlkLlJvd3NbJGhpdFRlc3RJbmZvLlJvd0luZGV4XS5TZWxlY3RlZCkgew0KCQkJCQkJCQkJCQkJJGdyaWQuQ2xlYXJTZWxlY3Rpb24oKQ0KCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCSRncmlkLlJvd3NbJGhpdFRlc3RJbmZvLlJvd0luZGV4XS5TZWxlY3RlZCA9ICR0cnVlDQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogUmlnaHQtY2xpY2tlZCByb3cgJCgkaGl0VGVzdEluZm8uUm93SW5kZXgpLCBlbnN1cmluZyBzZWxlY3Rpb24uIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0NCgkJCQkJCQkJIyAtLS0gTGVmdC1DbGljayBIYW5kbGluZyAtLS0NCgkJCQkJCQkJZWxzZWlmICgkZS5CdXR0b24gLWVxIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Nb3VzZUJ1dHRvbnNdOjpMZWZ0KSB7DQoJCQkJCQkJCQlpZiAoJGhpdFRlc3RJbmZvLlJvd0luZGV4IC1nZSAwKSB7ICMgQ2xpY2tlZCBvbiBhIHJvdw0KCQkJCQkJCQkJCSRjbGlja2VkUm93ID0gJGdyaWQuUm93c1skaGl0VGVzdEluZm8uUm93SW5kZXhdDQoNCgkJCQkJCQkJCQkjIC0tLSBOb3JtYWwgTGVmdCBDbGljayBmb3IgU2VsZWN0aW9uIC0tLQ0KCQkJDQoJCQkJCQkJCQkJCSMgU3RhbmRhcmQgYmVoYXZpb3I6IENsZWFyIHByZXZpb3VzIHNlbGVjdGlvbiBpZiBDdHJsIGlzIE5PVCBoZWxkLg0KCQkJCQkJCQkJCQlpZiAoLW5vdCAoW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkNvbnRyb2xdOjpNb2RpZmllcktleXMgLWJhbmQgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLktleXNdOjpDb250cm9sKSkgew0KCQkJCQkJCQkJCQkJIyBPbmx5IGNsZWFyIGlmIHRoZSBjbGlja2VkIHJvdyBpc24ndCB0aGUgKm9ubHkqIHNlbGVjdGVkIHJvdw0KCQkJCQkJCQkJCQkJaWYgKCRncmlkLlNlbGVjdGVkUm93cy5Db3VudCAtbmUgMSAtb3IgLW5vdCAkY2xpY2tlZFJvdy5TZWxlY3RlZCkgew0KCQkJCQkJCQkJCQkJCSRncmlkLkNsZWFyU2VsZWN0aW9uKCkNCgkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJCQkjIFRvZ2dsZSBzZWxlY3Rpb24gaWYgQ3RybCBpcyBwcmVzc2VkLCBvdGhlcndpc2UganVzdCBzZWxlY3QuDQoJCQkJCQkJCQkJCWlmICgoW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkNvbnRyb2xdOjpNb2RpZmllcktleXMgLWJhbmQgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLktleXNdOjpDb250cm9sKSkgew0KCQkJCQkJCQkJCQkJIyBJZiBDdHJsIGlzIGhlbGQsIHRvZ2dsZSBzZWxlY3Rpb24NCg0KCQkJCQkJCQkJCQl9DQoNCg0KCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBMZWZ0LWNsaWNrZWQgcm93ICQoJGhpdFRlc3RJbmZvLlJvd0luZGV4KS4gU2VsZWN0ZWQ6ICQoJGNsaWNrZWRSb3cuU2VsZWN0ZWQpIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkNCgkJCQkJCQkJCX0NCgkJCQkJCQkJCWVsc2VpZiAoJGhpdFRlc3RJbmZvLlR5cGUgLWVxIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EYXRhR3JpZFZpZXdIaXRUZXN0VHlwZV06Ok5vbmUpIHsgIyBDbGlja2VkIG9uIGVtcHR5IHNwYWNlDQoJCQkJCQkJCQkJJGdyaWQuQ2xlYXJTZWxlY3Rpb24oKQ0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IENsaWNrZWQgb24gZW1wdHkgRGF0YUdyaWQgYXJlYSwgY2xlYXJlZCBzZWxlY3Rpb24uIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0NCgkJCQkJCQl9IGNhdGNoIHsNCgkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRXJyb3IgaW4gRGF0YUdyaWRGaWxsZXIgTW91c2VEb3duOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQl9DQoJCQkJCQl9DQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIERhdGFHcmlkIE1vdXNlRG93biBFdmVudCAoSW5pdGlhdGVzIERyYWcpDQoNCgkJCQl9DQoNCgkJCQkjIENvbnRleHQgbWVudSBpdGVtIGV2ZW50cw0KCQkJCUNvbnRleHRNZW51RnJvbnQgICAgICAgICAgID0gQHsNCgkJCQkJI3JlZ2lvbiBTdGVwOiBIYW5kbGUgQ29udGV4dE1lbnVGcm9udCBDbGljayBFdmVudA0KCQkJCQkJQ2xpY2sgPSB7DQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBCcmluZyBTZWxlY3RlZCBQcm9jZXNzIFdpbmRvd3MgdG8gRnJvbnQNCgkJCQkJCQkJIyBJdGVyYXRlIHRocm91Z2ggc2VsZWN0ZWQgcm93cyBpbiB0aGUgRGF0YUdyaWQuDQoJCQkJCQkJCWlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5EYXRhR3JpZEZpbGxlci5TZWxlY3RlZFJvd3MuQ291bnQgLWd0IDApDQoJCQkJCQkJCXsNCgkJCQkJCQkJCWZvcmVhY2ggKCRyb3cgaW4gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCSMgQ2hlY2sgZm9yIHZhbGlkIHByb2Nlc3MgaW5mbyBhbmQgd2luZG93IGhhbmRsZS4NCgkJCQkJCQkJCQlpZiAoJHJvdy5UYWcgLWFuZCAkcm93LlRhZy5NYWluV2luZG93SGFuZGxlIC1uZSBbSW50UHRyXTo6WmVybykNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCSMgQnJpbmcgdGhlIHdpbmRvdyB0byB0aGUgZm9yZWdyb3VuZC4NCgkJCQkJCQkJCQkJW05hdGl2ZV06OkJyaW5nVG9Gcm9udCgkcm93LlRhZy5NYWluV2luZG93SGFuZGxlKQ0KCQkJCQkJCQkJCX0NCgkJCQkJCQkJCX0NCgkJCQkJCQkJfQ0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogQnJpbmcgU2VsZWN0ZWQgUHJvY2VzcyBXaW5kb3dzIHRvIEZyb250DQoJCQkJCQl9DQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIENvbnRleHRNZW51RnJvbnQgQ2xpY2sgRXZlbnQNCgkJCQl9DQoJCQkJDQoJCQkJQ29udGV4dE1lbnVCYWNrICAgICAgICAgICAgPSBAew0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBDb250ZXh0TWVudUJhY2sgQ2xpY2sgRXZlbnQNCgkJCQkJCUNsaWNrID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogU2VuZCBTZWxlY3RlZCBQcm9jZXNzIFdpbmRvd3MgdG8gQmFjayAoTWluaW1pemUpDQoJCQkJCQkJCSMgSXRlcmF0ZSB0aHJvdWdoIHNlbGVjdGVkIHJvd3MgaW4gdGhlIERhdGFHcmlkLg0KCQkJCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzLkNvdW50IC1ndCAwKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQlmb3JlYWNoICgkcm93IGluICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyLlNlbGVjdGVkUm93cykNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQkjIENoZWNrIGZvciB2YWxpZCBwcm9jZXNzIGluZm8gYW5kIHdpbmRvdyBoYW5kbGUuDQoJCQkJCQkJCQkJaWYgKCRyb3cuVGFnIC1hbmQgJHJvdy5UYWcuTWFpbldpbmRvd0hhbmRsZSAtbmUgW0ludFB0cl06Olplcm8pDQoJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICdVSTogTWluaW1pemluZy4uLicgLUZvcmVncm91bmRDb2xvciBDeWFuDQoJCQkJCQkJCQkJCVtOYXRpdmVdOjpTZW5kVG9CYWNrKCRyb3cuVGFnLk1haW5XaW5kb3dIYW5kbGUpDQoJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgJ1VJOiBPcHRpbWl6aW5nLi4uJyAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCgkJCQkJCQkJCQkJW05hdGl2ZV06OkVtcHR5V29ya2luZ1NldCgkcm93LlRhZy5IYW5kbGUpDQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQl9DQoJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBTZW5kIFNlbGVjdGVkIFByb2Nlc3MgV2luZG93cyB0byBCYWNrIChNaW5pbWl6ZSkNCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgQ29udGV4dE1lbnVCYWNrIENsaWNrIEV2ZW50DQoJCQkJfQ0KDQoJCQkJQ29udGV4dE1lbnVSZXNpemVBbmRDZW50ZXIgPSBAew0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBDb250ZXh0TWVudVJlc2l6ZUFuZENlbnRlciBDbGljayBFdmVudA0KCQkJCQkJQ2xpY2sgPSB7DQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBSZXNpemUgU2VsZWN0ZWQgUHJvY2VzcyBXaW5kb3dzIHRvIFN0YW5kYXJkIFNpemUNCgkJCQkJCQkJIyBJdGVyYXRlIHRocm91Z2ggc2VsZWN0ZWQgcm93cyBpbiB0aGUgRGF0YUdyaWQuDQoJCQkJCQkJCWlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5EYXRhR3JpZEZpbGxlci5TZWxlY3RlZFJvd3MuQ291bnQgLWd0IDApDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgR2V0IHNjcmVlbiBkaW1lbnNpb25zIGFuZCBkZWZpbmUgc3RhbmRhcmQgd2luZG93IHNpemUuDQoJCQkJCQkJCQkkc2NyID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLlNjcmVlbl06OlByaW1hcnlTY3JlZW4uV29ya2luZ0FyZWENCgkJCQkJCQkJCSR3aWR0aCA9IDEwNDANCgkJCQkJCQkJCSRoZWlnaHQgPSA4MDcNCg0KCQkJCQkJCQkJZm9yZWFjaCAoJHJvdyBpbiAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5EYXRhR3JpZEZpbGxlci5TZWxlY3RlZFJvd3MpDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJIyBDaGVjayBmb3IgdmFsaWQgcHJvY2VzcyBpbmZvIGFuZCB3aW5kb3cgaGFuZGxlLg0KCQkJCQkJCQkJCWlmICgkcm93LlRhZyAtYW5kICRyb3cuVGFnLk1haW5XaW5kb3dIYW5kbGUgLW5lIFtJbnRQdHJdOjpaZXJvKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJIyBVc2UgbmF0aXZlIGZ1bmN0aW9uIHRvIHJlc2l6ZSBhbmQgY2VudGVyIHRoZSB3aW5kb3cuDQoJCQkJCQkJCQkJCVtOYXRpdmVdOjpQb3NpdGlvbldpbmRvdygNCgkJCQkJCQkJCQkJCSRyb3cuVGFnLk1haW5XaW5kb3dIYW5kbGUsDQoJCQkJCQkJCQkJCQlbTmF0aXZlXTo6VG9wV2luZG93SGFuZGxlLA0KCQkJCQkJCQkJCQkJW2ludF0oKCRzY3IuV2lkdGggLSAkd2lkdGgpIC8gMiksICAjIENlbnRlciBYDQoJCQkJCQkJCQkJCQlbaW50XSgoJHNjci5IZWlnaHQgLSAkaGVpZ2h0KSAvIDIpLCAjIENlbnRlciBZDQoJCQkJCQkJCQkJCQkkd2lkdGgsDQoJCQkJCQkJCQkJCQkkaGVpZ2h0LA0KCQkJCQkJCQkJCQkJIyBGbGFnczogRG9uJ3QgYWN0aXZhdGUNCgkJCQkJCQkJCQkJCVtOYXRpdmUrV2luZG93UG9zaXRpb25PcHRpb25zXTo6RG9Ob3RBY3RpdmF0ZQ0KCQkJCQkJCQkJCQkpDQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQl9DQoJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBSZXNpemUgU2VsZWN0ZWQgUHJvY2VzcyBXaW5kb3dzIHRvIFN0YW5kYXJkIFNpemUNCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgQ29udGV4dE1lbnVSZXNpemVBbmRDZW50ZXIgQ2xpY2sgRXZlbnQNCgkJCQl9DQoNCgkJCQkjIExhdW5jaCBidXR0b24gZXZlbnQNCgkJCQlMYXVuY2ggICAgICAgICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIExhdW5jaCBCdXR0b24gQ2xpY2sgRXZlbnQNCgkJCQkJCUNsaWNrID0gew0KCQkJCQkJCSNyZWdpb24gU3RlcDogSW5pdGlhbGl6ZSBDbGllbnQgTGF1bmNoIFByb2Nlc3MNCgkJCQkJCQkJdHJ5DQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgQ2FsbCB0aGUgZnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIHN0YXJ0aW5nIHRoZSBjbGllbnQgbGF1bmNoIHNlcXVlbmNlLg0KCQkJCQkJCQkJU3RhcnQtQ2xpZW50TGF1bmNoDQoNCgkJCQkJCQkJfQ0KCQkJCQkJCQljYXRjaA0KCQkJCQkJCQl7DQoJCQkJCQkJCQkjIEhhbmRsZSBlcnJvcnMgZHVyaW5nIGxhdW5jaCBpbml0aWFsaXphdGlvbi4NCgkJCQkJCQkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlN0YXRlLkxhdW5jaEFjdGl2ZSA9ICRmYWxzZQ0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogTGF1bmNoIGluaXRpYWxpemF0aW9uIGZhaWxlZDogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkFuIGVycm9yIG9jY3VycmVkIGR1cmluZyBsYXVuY2g6ICQoJF8uRXhjZXB0aW9uLk1lc3NhZ2UpIiwgJ0Vycm9yJywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkVycm9yKQ0KCQkJCQkJCQl9DQoJCQkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBJbml0aWFsaXplIENsaWVudCBMYXVuY2ggUHJvY2Vzcw0KCQkJCQkJfQ0KCQkJCQkJDQoJCQkJCSNlbmRyZWdpb24gU3RlcDogSGFuZGxlIExhdW5jaCBCdXR0b24gQ2xpY2sgRXZlbnQNCgkJCQl9DQoNCgkJCQkjIExvZ2luIGJ1dHRvbiBldmVudA0KCQkJCUxvZ2luQnV0dG9uICAgICAgICAgICAgICAgID0gQHsNCgkJCQkJI3JlZ2lvbiBTdGVwOiBIYW5kbGUgTG9naW4gQnV0dG9uIENsaWNrIEV2ZW50DQoJCQkJCQlDbGljayA9IHsNCgkJCQkJCQkjcmVnaW9uIFN0ZXA6IEluaXRpYXRlIExvZ2luIFByb2Nlc3MgZm9yIFNlbGVjdGVkIENsaWVudHMNCgkJCQkJCQkJdHJ5DQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgQ2hlY2sgaWYgdGhlIExvZ2luU2VsZWN0ZWRSb3cgZnVuY3Rpb24gKGxpa2VseSBmcm9tIGxvZ2luLnBzbTEpIGlzIGF2YWlsYWJsZS4NCgkJCQkJCQkJCWlmIChHZXQtQ29tbWFuZCAtTmFtZSBMb2dpblNlbGVjdGVkUm93IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCSMgRW5zdXJlIGF0IGxlYXN0IG9uZSBjbGllbnQgcm93IGlzIHNlbGVjdGVkIGluIHRoZSBEYXRhR3JpZC4NCgkJCQkJCQkJCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuRGF0YUdyaWRGaWxsZXIuU2VsZWN0ZWRSb3dzLkNvdW50IC1lcSAwKQ0KCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogTm8gY2xpZW50cyBzZWxlY3RlZCBmb3IgbG9naW4nIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQkJCQkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygnUGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgY2xpZW50IHRvIGxvZyBpbi4nLCAnTG9naW4nLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6SW5mb3JtYXRpb24pDQoJCQkJCQkJCQkJCXJldHVybg0KCQkJCQkJCQkJCX0NCg0KCQkJCQkJCQkJCSMgRGV0ZXJtaW5lIGxvZyBmaWxlIHBhdGggYmFzZWQgb24gbGF1bmNoZXIgcGF0aC4NCgkJCQkJCQkJCQkkTG9nRm9sZGVyID0gKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1snTGF1bmNoZXJQYXRoJ11bJ0xhdW5jaGVyUGF0aCddIC1yZXBsYWNlICdcXExhdW5jaGVyXC5leGUkJywgJycpDQoJCQkJCQkJCQkJJExvZ0ZpbGVQYXRoID0gSm9pbi1QYXRoIC1QYXRoICRMb2dGb2xkZXIgLUNoaWxkUGF0aCAiTG9nXG5ldHdvcmtfJChHZXQtRGF0ZSAtRm9ybWF0ICd5eXl5TU1kZCcpLmxvZyINCg0KCQkJCQkJCQkJCSMgQ2FsbCB0aGUgbG9naW4gZnVuY3Rpb24sIHBhc3NpbmcgdGhlIGxvZyBmaWxlIHBhdGguDQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogU3RhcnRpbmcgbG9naW4gcHJvY2VzcyBmb3Igc2VsZWN0ZWQgY2xpZW50cy4uLicgLUZvcmVncm91bmRDb2xvciBDeWFuDQoJCQkJCQkJCQkJTG9naW5TZWxlY3RlZFJvdyAtTG9nRmlsZVBhdGggJExvZ0ZpbGVQYXRoDQoNCgkJCQkJCQkJCX0NCgkJCQkJCQkJCWVsc2UNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICcgIFVJOiBMb2dpbiBtb2R1bGUgKExvZ2luU2VsZWN0ZWRSb3cgY29tbWFuZCkgbm90IGF2YWlsYWJsZScgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coJ0xvZ2luIGZ1bmN0aW9uYWxpdHkgaXMgbm90IGF2YWlsYWJsZS4nLCAnRXJyb3InLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6RXJyb3IpDQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0NCgkJCQkJCQkJY2F0Y2gNCgkJCQkJCQkJew0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRXJyb3IgaW4gbG9naW4gcHJvY2VzczogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkFuIGVycm9yIG9jY3VycmVkIGR1cmluZyBsb2dpbjogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiLCAnRXJyb3InLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6RXJyb3IpDQoJCQkJCQkJCX0NCgkJCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEluaXRpYXRlIExvZ2luIFByb2Nlc3MgZm9yIFNlbGVjdGVkIENsaWVudHMNCgkJCQkJCX0NCgkJCQkJI2VuZHJlZ2lvbiBTdGVwOiBIYW5kbGUgTG9naW4gQnV0dG9uIENsaWNrIEV2ZW50DQoJCQkJfQ0KDQoJCQkJIyBGdG9vbCBidXR0b24gZXZlbnQNCgkJCQlGdG9vbCAgICAgICAgICAgICAgICAgICAgICA9IEB7DQoJCQkJCSNyZWdpb24gU3RlcDogSGFuZGxlIEZ0b29sIEJ1dHRvbiBDbGljayBFdmVudA0KCQkJCQkJQ2xpY2sgPSB7DQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBJbml0aWF0ZSBGdG9vbCBQcm9jZXNzIGZvciBTZWxlY3RlZCBDbGllbnRzDQoJCQkJCQkJDQoJCQkJCQkJCXRyeQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQkjIFZhbGlkYXRlIERhdGFHcmlkIGV4aXN0cy4NCgkJCQkJCQkJCWlmICgtbm90ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgJyAgVUk6IERhdGFHcmlkIG5vdCBmb3VuZCBmb3IgRnRvb2wgYWN0aW9uJyAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJCQkJCQkJCXJldHVybg0KCQkJCQkJCQkJfQ0KDQoJCQkJCQkJCQkjIEVuc3VyZSBhdCBsZWFzdCBvbmUgcm93IGlzIHNlbGVjdGVkLg0KCQkJCQkJCQkJJHNlbGVjdGVkUm93cyA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyLlNlbGVjdGVkUm93cw0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRnRvb2wgYnV0dG9uIGNsaWNrZWQsIHNlbGVjdGVkIHJvd3MgY291bnQ6ICQoJHNlbGVjdGVkUm93cy5Db3VudCkiIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCg0KCQkJCQkJCQkJaWYgKCRzZWxlY3RlZFJvd3MuQ291bnQgLWVxIDApDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCdQbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBjbGllbnQgcm93IHRvIHVzZSBGdG9vbC4nLCAnRnRvb2wnLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6SW5mb3JtYXRpb24pDQoJCQkJCQkJCQkJcmV0dXJuDQoJCQkJCQkJCQl9DQoNCgkJCQkJCQkJCSMgQ2hlY2sgaWYgRnRvb2xTZWxlY3RlZFJvdyBmdW5jdGlvbiAobGlrZWx5IGZyb20gZnRvb2wucHNtMSkgaXMgYXZhaWxhYmxlLg0KCQkJCQkJCQkJaWYgKC1ub3QgKEdldC1Db21tYW5kIC1OYW1lIEZ0b29sU2VsZWN0ZWRSb3cgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpKSB7DQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogRnRvb2wgbW9kdWxlIChGdG9vbFNlbGVjdGVkUm93IGNvbW1hbmQpIG5vdCBhdmFpbGFibGUnIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQkJCQkJW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCdGdG9vbCBmdW5jdGlvbmFsaXR5IGlzIG5vdCBhdmFpbGFibGUuJywgJ0Vycm9yJywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkVycm9yKQ0KCQkJCQkJCQkJCXJldHVybg0KCQkJCQkJCQkJfQ0KDQoJCQkJCQkJCQkjIFByb2Nlc3MgZWFjaCBzZWxlY3RlZCByb3cgdXNpbmcgdGhlIEZ0b29sIGZ1bmN0aW9uLg0KCQkJCQkJCQkJZm9yZWFjaCAoJHJvdyBpbiAkc2VsZWN0ZWRSb3dzKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCUZ0b29sU2VsZWN0ZWRSb3cgJHJvdw0KCQkJCQkJCQkJfQ0KCQkJCQkJCQl9DQoJCQkJCQkJCWNhdGNoDQoJCQkJCQkJCXsNCgkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IEVycm9yIGluIEZ0b29sIGNsaWNrIGhhbmRsZXI6ICQoJF8uRXhjZXB0aW9uLk1lc3NhZ2UpIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJCQkJCQkJW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJBbiBlcnJvciBvY2N1cnJlZCBpbml0aWF0aW5nIEZ0b29sOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIsICdFcnJvcicsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikNCgkJCQkJCQkJfQ0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogSW5pdGlhdGUgRnRvb2wgUHJvY2VzcyBmb3IgU2VsZWN0ZWQgQ2xpZW50cw0KCQkJCQkJfQ0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBGdG9vbCBCdXR0b24gQ2xpY2sgRXZlbnQNCgkJCQl9DQoNCgkJCQkjIEV4aXQgYnV0dG9uIGV2ZW50IChUZXJtaW5hdGUgU2VsZWN0ZWQpDQoJCQkJRXhpdCAgICAgICAgICAgICAgICAgICAgICAgPSBAew0KCQkJCQkjcmVnaW9uIFN0ZXA6IEhhbmRsZSBFeGl0IEJ1dHRvbiBDbGljayBFdmVudA0KCQkJCQkJQ2xpY2sgPSB7DQoJCQkJCQkJI3JlZ2lvbiBTdGVwOiBUZXJtaW5hdGUgU2VsZWN0ZWQgUHJvY2Vzc2VzDQoJCQkJCQkJCSMgRW5zdXJlIGF0IGxlYXN0IG9uZSByb3cgaXMgc2VsZWN0ZWQuDQoJCQkJCQkJCWlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5EYXRhR3JpZEZpbGxlci5TZWxlY3RlZFJvd3MuQ291bnQgLWd0IDApDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSMgQ29uZmlybSB0ZXJtaW5hdGlvbiB3aXRoIHRoZSB1c2VyLg0KCQkJCQkJCQkJJHJlc3VsdCA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygNCgkJCQkJCQkJCQknQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHRlcm1pbmF0ZSB0aGUgc2VsZWN0ZWQgcHJvY2Vzc2VzPycsDQoJCQkJCQkJCQkJJ0NvbmZpcm0gVGVybWluYXRpb24nLA0KCQkJCQkJCQkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Olllc05vLA0KCQkJCQkJCQkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06Oldhcm5pbmcNCgkJCQkJCQkJCSkNCg0KCQkJCQkJCQkJaWYgKCRyZXN1bHQgLWVxIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EaWFsb2dSZXN1bHRdOjpZZXMpDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJIyBJdGVyYXRlIHRocm91Z2ggc2VsZWN0ZWQgcm93cyBhbmQgYXR0ZW1wdCB0ZXJtaW5hdGlvbi4NCgkJCQkJCQkJCQlmb3JlYWNoICgkcm93IGluICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyLlNlbGVjdGVkUm93cykNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCWlmICgkcm93LlRhZyAtYW5kICRyb3cuVGFnLklkKQ0KCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkkcHJvY2Vzc0lkID0gJHJvdy5UYWcuSWQNCgkJCQkJCQkJCQkJCXRyeQ0KCQkJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQkJCSMgR2V0IHRoZSBwcm9jZXNzIG9iamVjdC4NCgkJCQkJCQkJCQkJCQkkcHJvY2VzcyA9IEdldC1Qcm9jZXNzIC1JZCAkcHJvY2Vzc0lkIC1FcnJvckFjdGlvbiBTdG9wDQoNCgkJCQkJCQkJCQkJCQkjIFRyeSB0byBjbG9zZSBncmFjZWZ1bGx5IGZpcnN0Lg0KCQkJCQkJCQkJCQkJCWlmICgtbm90ICRwcm9jZXNzLkhhc0V4aXRlZCkNCgkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCSMgUmVzdG9yZSBpZiBtaW5pbWl6ZWQgYmVmb3JlIGNsb3NpbmcgbWFpbiB3aW5kb3cuDQoJCQkJCQkJCQkJCQkJCWlmIChbTmF0aXZlXTo6SXNXaW5kb3dNaW5pbWl6ZWQoJHByb2Nlc3MuTWFpbldpbmRvd0hhbmRsZSkpDQoJCQkJCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJCQkJCVtOYXRpdmVdOjpTaG93V2luZG93KCRwcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUsIFtOYXRpdmVdOjpTV19SRVNUT1JFKQ0KCQkJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCQkJCVN0YXJ0LVNsZWVwIC1NaWxsaVNlY29uZHMgMTAwDQoNCgkJCQkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogQXR0ZW1wdGluZyBncmFjZWZ1bCBzaHV0ZG93biBmb3IgUElEICRwcm9jZXNzSWQuLi4iIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkJCQkJCQkJCQkJJHByb2Nlc3MuQ2xvc2VNYWluV2luZG93KCkgfCBPdXQtTnVsbA0KDQoJCQkJCQkJCQkJCQkJCSMgV2FpdCBicmllZmx5IGZvciBncmFjZWZ1bCBleGl0Lg0KCQkJCQkJCQkJCQkJCQlpZiAoLW5vdCAkcHJvY2Vzcy5XYWl0Rm9yRXhpdCgxMDAwKSkgew0KCQkJCQkJCQkJCQkJCQkJIyBJZiBzdGlsbCBydW5uaW5nLCBmb3JjZSBraWxsLg0KCQkJCQkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogR3JhY2VmdWwgc2h1dGRvd24gZmFpbGVkIGZvciBQSUQgJHByb2Nlc3NJZC4gRm9yY2luZyB0ZXJtaW5hdGlvbi4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQkJCQkJCQkJCQkkcHJvY2Vzcy5LaWxsKCkNCgkJCQkJCQkJCQkJCQkJfSBlbHNlIHsNCgkJCQkJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IFByb2Nlc3MgUElEICRwcm9jZXNzSWQgZXhpdGVkIGdyYWNlZnVsbHkuIiAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQoJCQkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogU3VjY2Vzc2Z1bGx5IHRlcm1pbmF0ZWQgcHJvY2VzcyBJRCAkcHJvY2Vzc0lkIiAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQoJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCQljYXRjaCBbU3lzdGVtLkFyZ3VtZW50RXhjZXB0aW9uXSB7DQoJCQkJCQkJCQkJCQkJIyBQcm9jZXNzIGFscmVhZHkgZXhpdGVkIG9yIElEIGludmFsaWQNCgkJCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBQcm9jZXNzIElEICRwcm9jZXNzSWQgbm90IGZvdW5kIG9yIGFscmVhZHkgZXhpdGVkLiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJCWNhdGNoIHsNCgkJCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBGYWlsZWQgdG8gdGVybWluYXRlIHByb2Nlc3MgSUQgJCgkcHJvY2Vzc0lkKTogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoNCgkJCQkJCQkJCQkJCQkjIFRyeSBhbHRlcm5hdGl2ZSB0ZXJtaW5hdGlvbiBhcyBmYWxsYmFjay4NCgkJCQkJCQkJCQkJCQl0cnkNCgkJCQkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IEF0dGVtcHRpbmcgU3RvcC1Qcm9jZXNzIGZhbGxiYWNrIGZvciBQSUQgJHByb2Nlc3NJZC4uLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJCQkJCQlTdG9wLVByb2Nlc3MgLUlkICRwcm9jZXNzSWQgLUZvcmNlIC1FcnJvckFjdGlvbiBTdG9wDQoJCQkJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIiAgVUk6IFRlcm1pbmF0ZWQgcHJvY2VzcyBJRCAkcHJvY2Vzc0lkIHVzaW5nIFN0b3AtUHJvY2VzcyIgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KCQkJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQkJCQljYXRjaA0KCQkJCQkJCQkJCQkJCXsNCgkJCQkJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiICBVSTogRmFpbGVkIHRvIHRlcm1pbmF0ZSBwcm9jZXNzIElEICRwcm9jZXNzSWQgdXNpbmcgU3RvcC1Qcm9jZXNzOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJCX0NCgkJCQkJCQkJCQl9DQoNCgkJCQkJCQkJCQkjIFJlZnJlc2ggdGhlIGdyaWQgYWZ0ZXIgdGVybWluYXRpb24gYXR0ZW1wdHMuDQoJCQkJCQkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyLlJlZnJlc2hNZXRob2QpDQoJCQkJCQkJCQkJew0KCQkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBSZWZyZXNoaW5nIERhdGFHcmlkIGFmdGVyIHRlcm1pbmF0aW9uIGF0dGVtcHRzLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJCQkmICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLkRhdGFHcmlkRmlsbGVyLlJlZnJlc2hNZXRob2QNCgkJCQkJCQkJCQl9DQoJCQkJCQkJCQl9DQoJCQkJCQkJCX0gZWxzZSB7DQoJCQkJCQkJCQlbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coJ1BsZWFzZSBzZWxlY3QgYXQgbGVhc3Qgb25lIHByb2Nlc3MgdG8gdGVybWluYXRlLicsICdUZXJtaW5hdGUgUHJvY2VzcycsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpJbmZvcm1hdGlvbikNCgkJCQkJCQkJfQ0KCQkJCQkJCSNlbmRyZWdpb24gU3RlcDogVGVybWluYXRlIFNlbGVjdGVkIFByb2Nlc3Nlcw0KCQkJCQkJfQ0KCQkJCQkjZW5kcmVnaW9uIFN0ZXA6IEhhbmRsZSBFeGl0IEJ1dHRvbiBDbGljayBFdmVudA0KCQkJCX0NCgkJCX0NCgkJI2VuZHJlZ2lvbiBTdGVwOiBEZWZpbmUgRXZlbnQgSGFuZGxlciBNYXBwaW5ncw0KDQoJCSNyZWdpb24gU3RlcDogUmVnaXN0ZXIgRGVmaW5lZCBFdmVudCBIYW5kbGVycyBmb3IgRWFjaCBVSSBFbGVtZW50DQoJCQkjIEl0ZXJhdGUgdGhyb3VnaCB0aGUgZXZlbnQgbWFwcGluZ3MgYW5kIHJlZ2lzdGVyIGVhY2ggaGFuZGxlci4NCgkJCWZvcmVhY2ggKCRlbGVtZW50TmFtZSBpbiAkZXZlbnRNYXBwaW5ncy5LZXlzKQ0KCQkJew0KCQkJCSRlbGVtZW50ID0gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuJGVsZW1lbnROYW1lDQoJCQkJaWYgKCRlbGVtZW50KQ0KCQkJCXsNCgkJCQkJZm9yZWFjaCAoJGUgaW4gJGV2ZW50TWFwcGluZ3NbJGVsZW1lbnROYW1lXS5LZXlzKQ0KCQkJCQl7DQoJCQkJCQkjIENyZWF0ZSBhIHVuaXF1ZSBzb3VyY2UgaWRlbnRpZmllciBmb3IgZWFjaCBldmVudCBzdWJzY3JpcHRpb24uDQoJCQkJCQkkc291cmNlSWRlbnRpZmllciA9ICJFbnRyb3BpYURhc2hib2FyZC4kZWxlbWVudE5hbWUuJGUiDQoNCgkJCQkJCSMgVW5yZWdpc3RlciBhbnkgZXhpc3RpbmcgZXZlbnQgaGFuZGxlciB3aXRoIHRoZSBzYW1lIGlkZW50aWZpZXIgdG8gcHJldmVudCBkdXBsaWNhdGVzLg0KCQkJCQkJR2V0LUV2ZW50U3Vic2NyaWJlciAtU291cmNlSWRlbnRpZmllciAkc291cmNlSWRlbnRpZmllciAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFVucmVnaXN0ZXItRXZlbnQNCg0KCQkJCQkJIyBSZWdpc3RlciB0aGUgbmV3IGV2ZW50IGhhbmRsZXIuDQoJCQkJCQlSZWdpc3Rlci1PYmplY3RFdmVudCAtSW5wdXRPYmplY3QgJGVsZW1lbnQgYA0KCQkJCQkJCS1FdmVudE5hbWUgJGUgYA0KCQkJCQkJCS1BY3Rpb24gJGV2ZW50TWFwcGluZ3NbJGVsZW1lbnROYW1lXVskZV0gYA0KCQkJCQkJCS1Tb3VyY2VJZGVudGlmaWVyICRzb3VyY2VJZGVudGlmaWVyIGANCgkJCQkJCQktRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSAjIENvbnRpbnVlIGlmIHJlZ2lzdHJhdGlvbiBmYWlscyBmb3Igc29tZSByZWFzb24NCgkJCQkJfQ0KCQkJCX0NCgkJCQllbHNlIHsNCgkJCQkJIFdyaXRlLVZlcmJvc2UgIiAgVUk6IEVsZW1lbnQgJyRlbGVtZW50TmFtZScgbm90IGZvdW5kIGluIGdsb2JhbCBVSSBvYmplY3QgZHVyaW5nIGV2ZW50IHJlZ2lzdHJhdGlvbi4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJfQ0KCQkJfQ0KCQkjZW5kcmVnaW9uIFN0ZXA6IFJlZ2lzdGVyIERlZmluZWQgRXZlbnQgSGFuZGxlcnMgZm9yIEVhY2ggVUkgRWxlbWVudA0KDQoJCSNyZWdpb24gU3RlcDogTWFyayBVSSBhcyBJbml0aWFsaXplZA0KCQkJIyBTZXQgYSBmbGFnIGluZGljYXRpbmcgdGhhdCBVSSBpbml0aWFsaXphdGlvbiBhbmQgZXZlbnQgcmVnaXN0cmF0aW9uIGFyZSBjb21wbGV0ZS4NCgkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlN0YXRlLlVJSW5pdGlhbGl6ZWQgPSAkdHJ1ZQ0KCQkJV3JpdGUtVmVyYm9zZSAnICBVSTogRXZlbnQgaGFuZGxlcnMgcmVnaXN0ZXJlZC4nIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCgkJI2VuZHJlZ2lvbiBTdGVwOiBNYXJrIFVJIGFzIEluaXRpYWxpemVkDQoJfQ0KI2VuZHJlZ2lvbiBGdW5jdGlvbjogUmVnaXN0ZXItVUlFdmVudEhhbmRsZXJzDQoNCiNyZWdpb24gRnVuY3Rpb246IFNob3ctU2V0dGluZ3NGb3JtDQoJZnVuY3Rpb24gU2hvdy1TZXR0aW5nc0Zvcm0NCgl7DQoJCTwjDQoJCS5TWU5PUFNJUw0KCQkJU2hvd3MgdGhlIHNldHRpbmdzIGZvcm0gd2l0aCBhIGZhZGUtaW4gYW5pbWF0aW9uIGVmZmVjdC4NCgkJLk5PVEVTDQoJCQlNYWtlcyB0aGUgc2V0dGluZ3MgZm9ybSB2aXNpYmxlLCBwb3NpdGlvbnMgaXQgcmVsYXRpdmUgdG8gdGhlIG1haW4gZm9ybSwNCgkJCWFuZCBpbml0aWF0ZXMgYSB0aW1lci1iYXNlZCBmYWRlLWluIGJ5IGdyYWR1YWxseSBpbmNyZWFzaW5nIG9wYWNpdHkuDQoJCQlQcmV2ZW50cyBjb25jdXJyZW50IGZhZGUgYW5pbWF0aW9ucy4NCgkJIz4NCgkJW0NtZGxldEJpbmRpbmcoKV0NCgkJcGFyYW0oKQ0KDQoJCSNyZWdpb24gU3RlcDogUHJldmVudCBDb25jdXJyZW50IEFuaW1hdGlvbnMNCgkJCSMgQ2hlY2sgaWYgYSBmYWRlLWluIG9yIGZhZGUtb3V0IGFuaW1hdGlvbiBpcyBhbHJlYWR5IGluIHByb2dyZXNzLg0KCQkJaWYgKCgkc2NyaXB0OmZhZGVJblRpbWVyIC1hbmQgJHNjcmlwdDpmYWRlSW5UaW1lci5FbmFibGVkKSAtb3INCgkJCQkoJGdsb2JhbDpmYWRlT3V0VGltZXIgLWFuZCAkZ2xvYmFsOmZhZGVPdXRUaW1lci5FbmFibGVkKSkNCgkJCXsNCgkJCQlyZXR1cm4gIyBFeGl0IGlmIGFuIGFuaW1hdGlvbiBpcyBhY3RpdmUNCgkJCX0NCgkJI2VuZHJlZ2lvbiBTdGVwOiBQcmV2ZW50IENvbmN1cnJlbnQgQW5pbWF0aW9ucw0KDQoJCSNyZWdpb24gU3RlcDogVmFsaWRhdGUgVUkgT2JqZWN0cw0KCQkJIyBFbnN1cmUgdGhlIG5lY2Vzc2FyeSBVSSBlbGVtZW50cyAobWFpbiBmb3JtLCBzZXR0aW5ncyBmb3JtKSBleGlzdC4NCgkJCWlmICgtbm90ICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSSAtYW5kICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybSAtYW5kICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtKSkNCgkJCXsNCgkJCQlXcml0ZS1WZXJib3NlICIgIFVJOiBDYW5ub3Qgc2hvdyBzZXR0aW5ncyBmb3JtIC0gVUkgb2JqZWN0cyBtaXNzaW5nLiIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQlyZXR1cm4NCgkJCX0NCgkJI2VuZHJlZ2lvbiBTdGVwOiBWYWxpZGF0ZSBVSSBPYmplY3RzDQoNCgkJJHNldHRpbmdzRm9ybSA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybQ0KDQoJCSNyZWdpb24gU3RlcDogUG9zaXRpb24gYW5kIFNob3cgU2V0dGluZ3MgRm9ybQ0KCQkJIyBPbmx5IHByb2NlZWQgaWYgdGhlIGZvcm0gaXMgbm90IGFscmVhZHkgZnVsbHkgb3BhcXVlIChvciBuZWFybHkgc28pLg0KCQkJaWYgKCRzZXR0aW5nc0Zvcm0uT3BhY2l0eSAtbHQgMC45NSkNCgkJCXsNCgkJCQkjIE1ha2UgdGhlIGZvcm0gdmlzaWJsZSBiZWZvcmUgc3RhcnRpbmcgdGhlIGZhZGUuDQoJCQkJJHNldHRpbmdzRm9ybS5WaXNpYmxlID0gJHRydWUNCg0KCQkJCSMgQ2FsY3VsYXRlIG9wdGltYWwgcG9zaXRpb24gZm9yIHNldHRpbmdzIGZvcm0gcmVsYXRpdmUgdG8gdGhlIG1haW4gZm9ybSwga2VlcGluZyBpdCBvbiBzY3JlZW4uDQoJCQkJJG1haW5Gb3JtTG9jYXRpb24gPSAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5NYWluRm9ybS5Mb2NhdGlvbg0KCQkJCSRzZXR0aW5nc0Zvcm1XaWR0aCA9ICRzZXR0aW5nc0Zvcm0uV2lkdGgNCgkJCQkkc2V0dGluZ3NGb3JtSGVpZ2h0ID0gJHNldHRpbmdzRm9ybS5IZWlnaHQNCgkJCQkkc2NyZWVuV2lkdGggPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuU2NyZWVuXTo6UHJpbWFyeVNjcmVlbi5Xb3JraW5nQXJlYS5XaWR0aA0KCQkJCSRzY3JlZW5IZWlnaHQgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuU2NyZWVuXTo6UHJpbWFyeVNjcmVlbi5Xb3JraW5nQXJlYS5IZWlnaHQNCg0KCQkJCSMgQXR0ZW1wdCB0byBjZW50ZXIgdGhlIHNldHRpbmdzIGZvcm0gb3ZlciB0aGUgbWFpbiBmb3JtLg0KCQkJCSR4ID0gJG1haW5Gb3JtTG9jYXRpb24uWCArICgoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTWFpbkZvcm0uV2lkdGggLSAkc2V0dGluZ3NGb3JtV2lkdGgpIC8gMikNCgkJCQkkeSA9ICRtYWluRm9ybUxvY2F0aW9uLlkgKyAoKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLk1haW5Gb3JtLkhlaWdodCAtICRzZXR0aW5nc0Zvcm1IZWlnaHQpIC8gMikNCg0KCQkJCSMgRW5zdXJlIGZvcm0gc3RheXMgd2l0aGluIHNjcmVlbiBib3VuZHMsIGFkZGluZyBhIHNtYWxsIG1hcmdpbi4NCgkJCQkkbWFyZ2luID0gMA0KCQkJCSR4ID0gW01hdGhdOjpNYXgoJG1hcmdpbiwgW01hdGhdOjpNaW4oJHgsICRzY3JlZW5XaWR0aCAtICRzZXR0aW5nc0Zvcm1XaWR0aCAtICRtYXJnaW4pKQ0KCQkJCSR5ID0gW01hdGhdOjpNYXgoJG1hcmdpbiwgW01hdGhdOjpNaW4oJHksICRzY3JlZW5IZWlnaHQgLSAkc2V0dGluZ3NGb3JtSGVpZ2h0IC0gJG1hcmdpbikpDQoNCgkJCQkjIEFwcGx5IHBvc2l0aW9uIGFuZCBicmluZyB0aGUgc2V0dGluZ3MgZm9ybSB0byB0aGUgZnJvbnQuDQoJCQkJJHNldHRpbmdzRm9ybS5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuUG9pbnQoJHgsICR5KQ0KCQkJCSRzZXR0aW5nc0Zvcm0uQnJpbmdUb0Zyb250KCkNCgkJCQkkc2V0dGluZ3NGb3JtLkFjdGl2YXRlKCkgIyBHaXZlIGZvY3VzIHRvIHRoZSBzZXR0aW5ncyBmb3JtDQoJCQl9DQoJCSNlbmRyZWdpb24gU3RlcDogUG9zaXRpb24gYW5kIFNob3cgU2V0dGluZ3MgRm9ybQ0KDQoJCSNyZWdpb24gU3RlcDogQ3JlYXRlIGFuZCBTdGFydCBGYWRlLUluIEFuaW1hdGlvbiBUaW1lcg0KCQkJIyBEaXNwb3NlIHByZXZpb3VzIHRpbWVyIGlmIGl0IGV4aXN0cw0KCQkJaWYgKCRzY3JpcHQ6ZmFkZUluVGltZXIpIHsgJHNjcmlwdDpmYWRlSW5UaW1lci5EaXNwb3NlKCkgfQ0KDQoJCQkjIENyZWF0ZSBhIHRpbWVyIHRvIGhhbmRsZSB0aGUgZmFkZS1pbiBlZmZlY3QuDQoJCQkkc2NyaXB0OmZhZGVJblRpbWVyID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5UaW1lcg0KCQkJJHNjcmlwdDpmYWRlSW5UaW1lci5JbnRlcnZhbCA9IDE1ICMgSW50ZXJ2YWwgZm9yIG9wYWNpdHkgc3RlcHMgKG1pbGxpc2Vjb25kcykNCgkJCSRzY3JpcHQ6ZmFkZUluVGltZXIuQWRkX1RpY2soew0KCQkJCQkjIENoZWNrIGlmIGZvcm0gc3RpbGwgZXhpc3RzIGFuZCBoYXNuJ3QgYmVlbiBkaXNwb3NlZC4NCgkJCQkJaWYgKC1ub3QgJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuU2V0dGluZ3NGb3JtIC1vciAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5TZXR0aW5nc0Zvcm0uSXNEaXNwb3NlZCkNCgkJCQkJew0KCQkJCQkJJHNjcmlwdDpmYWRlSW5UaW1lci5TdG9wKCkNCgkJCQkJCSRzY3JpcHQ6ZmFkZUluVGltZXIuRGlzcG9zZSgpDQoJCQkJCQkkc2NyaXB0OmZhZGVJblRpbWVyID0gJG51bGwNCgkJCQkJCXJldHVybg0KCQkJCQl9DQoNCgkJCQkJIyBJbmNyZWFzZSBvcGFjaXR5IGdyYWR1YWxseSB1bnRpbCBpdCByZWFjaGVzIDEuDQoJCQkJCWlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5TZXR0aW5nc0Zvcm0uT3BhY2l0eSAtbHQgMSkNCgkJCQkJew0KCQkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuU2V0dGluZ3NGb3JtLk9wYWNpdHkgKz0gMC4xDQoJCQkJCX0NCgkJCQkJZWxzZQ0KCQkJCQl7DQoJCQkJCQkjIFN0b3AgYW5kIGRpc3Bvc2UgdGhlIHRpbWVyIG9uY2UgZnVsbHkgb3BhcXVlLg0KCQkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuU2V0dGluZ3NGb3JtLk9wYWNpdHkgPSAxICMgRW5zdXJlIGV4YWN0bHkgMQ0KCQkJCQkJJHNjcmlwdDpmYWRlSW5UaW1lci5TdG9wKCkNCgkJCQkJCSRzY3JpcHQ6ZmFkZUluVGltZXIuRGlzcG9zZSgpDQoJCQkJCQkkc2NyaXB0OmZhZGVJblRpbWVyID0gJG51bGwNCgkJCQkJfQ0KCQkJCX0pDQoJCQkjIFN0YXJ0IHRoZSBmYWRlLWluIHRpbWVyLg0KCQkJJHNjcmlwdDpmYWRlSW5UaW1lci5TdGFydCgpDQoJCQkjIFN0b3JlIHRpbWVyIHJlZmVyZW5jZSBmb3IgcG90ZW50aWFsIGNsZWFudXAgbGF0ZXIuDQoJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuVGltZXJzWydmYWRlSW5UaW1lciddID0gJHNjcmlwdDpmYWRlSW5UaW1lcg0KCQkjZW5kcmVnaW9uIFN0ZXA6IENyZWF0ZSBhbmQgU3RhcnQgRmFkZS1JbiBBbmltYXRpb24gVGltZXINCgl9DQojZW5kcmVnaW9uIEZ1bmN0aW9uOiBTaG93LVNldHRpbmdzRm9ybQ0KDQojcmVnaW9uIEZ1bmN0aW9uOiBIaWRlLVNldHRpbmdzRm9ybQ0KCWZ1bmN0aW9uIEhpZGUtU2V0dGluZ3NGb3JtDQoJew0KCQk8Iw0KCQkuU1lOT1BTSVMNCgkJCUhpZGVzIHRoZSBzZXR0aW5ncyBmb3JtIHdpdGggYSBmYWRlLW91dCBhbmltYXRpb24gZWZmZWN0Lg0KCQkuTk9URVMNCgkJCUluaXRpYXRlcyBhIHRpbWVyLWJhc2VkIGZhZGUtb3V0IGJ5IGdyYWR1YWxseSBkZWNyZWFzaW5nIG9wYWNpdHkuDQoJCQlIaWRlcyB0aGUgZm9ybSBjb21wbGV0ZWx5IG9uY2Ugb3BhY2l0eSByZWFjaGVzIHplcm8uDQoJCQlQcmV2ZW50cyBjb25jdXJyZW50IGZhZGUgYW5pbWF0aW9ucy4NCgkJIz4NCgkJW0NtZGxldEJpbmRpbmcoKV0NCgkJcGFyYW0oKQ0KDQoJCSNyZWdpb24gU3RlcDogUHJldmVudCBDb25jdXJyZW50IEFuaW1hdGlvbnMNCgkJCSMgQ2hlY2sgaWYgYSBmYWRlLWluIG9yIGZhZGUtb3V0IGFuaW1hdGlvbiBpcyBhbHJlYWR5IGluIHByb2dyZXNzLg0KCQkJaWYgKCgkc2NyaXB0OmZhZGVJblRpbWVyIC1hbmQgJHNjcmlwdDpmYWRlSW5UaW1lci5FbmFibGVkKSAtb3INCgkJCQkoJGdsb2JhbDpmYWRlT3V0VGltZXIgLWFuZCAkZ2xvYmFsOmZhZGVPdXRUaW1lci5FbmFibGVkKSkNCgkJCXsNCgkJCQlyZXR1cm4gIyBFeGl0IGlmIGFuIGFuaW1hdGlvbiBpcyBhY3RpdmUNCgkJCX0NCgkJI2VuZHJlZ2lvbiBTdGVwOiBQcmV2ZW50IENvbmN1cnJlbnQgQW5pbWF0aW9ucw0KDQoJCSNyZWdpb24gU3RlcDogVmFsaWRhdGUgVUkgT2JqZWN0cw0KCQkJIyBFbnN1cmUgdGhlIHNldHRpbmdzIGZvcm0gb2JqZWN0IGV4aXN0cy4NCgkJCWlmICgtbm90ICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSSAtYW5kICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybSkpDQoJCQl7DQoJCQkJIFdyaXRlLVZlcmJvc2UgIiAgVUk6IENhbm5vdCBoaWRlIHNldHRpbmdzIGZvcm0gLSBVSSBvYmplY3QgbWlzc2luZy4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJcmV0dXJuDQoJCQl9DQoJCSNlbmRyZWdpb24gU3RlcDogVmFsaWRhdGUgVUkgT2JqZWN0cw0KDQoJCSNyZWdpb24gU3RlcDogQ3JlYXRlIGFuZCBTdGFydCBGYWRlLU91dCBBbmltYXRpb24gVGltZXINCgkJCSAjIERpc3Bvc2UgcHJldmlvdXMgdGltZXIgaWYgaXQgZXhpc3RzDQoJCQlpZiAoJGdsb2JhbDpmYWRlT3V0VGltZXIpIHsgJGdsb2JhbDpmYWRlT3V0VGltZXIuRGlzcG9zZSgpIH0NCg0KCQkJIyBDcmVhdGUgYSB0aW1lciB0byBoYW5kbGUgdGhlIGZhZGUtb3V0IGVmZmVjdC4NCgkJCSRnbG9iYWw6ZmFkZU91dFRpbWVyID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5UaW1lcg0KCQkJJGdsb2JhbDpmYWRlT3V0VGltZXIuSW50ZXJ2YWwgPSAxNSAjIEludGVydmFsIGZvciBvcGFjaXR5IHN0ZXBzIChtaWxsaXNlY29uZHMpDQoJCQkkZ2xvYmFsOmZhZGVPdXRUaW1lci5BZGRfVGljayh7DQoJCQkJCSMgQ2hlY2sgaWYgZm9ybSBzdGlsbCBleGlzdHMgYW5kIGhhc24ndCBiZWVuIGRpc3Bvc2VkLg0KCQkJCQlpZiAoLW5vdCAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5TZXR0aW5nc0Zvcm0gLW9yICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybS5Jc0Rpc3Bvc2VkKQ0KCQkJCQl7DQoJCQkJCQkkZ2xvYmFsOmZhZGVPdXRUaW1lci5TdG9wKCkNCgkJCQkJCSRnbG9iYWw6ZmFkZU91dFRpbWVyLkRpc3Bvc2UoKQ0KCQkJCQkJJGdsb2JhbDpmYWRlT3V0VGltZXIgPSAkbnVsbA0KCQkJCQkJcmV0dXJuDQoJCQkJCX0NCg0KCQkJCQkjIERlY3JlYXNlIG9wYWNpdHkgZ3JhZHVhbGx5IHVudGlsIGl0IHJlYWNoZXMgMC4NCgkJCQkJaWYgKCRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybS5PcGFjaXR5IC1ndCAwKQ0KCQkJCQl7DQoJCQkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5TZXR0aW5nc0Zvcm0uT3BhY2l0eSAtPSAwLjENCgkJCQkJfQ0KCQkJCQllbHNlDQoJCQkJCXsNCgkJCQkJCSMgU3RvcCB0aGUgdGltZXIsIGVuc3VyZSBvcGFjaXR5IGlzIDAsIGFuZCBoaWRlIHRoZSBmb3JtLg0KCQkJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuU2V0dGluZ3NGb3JtLk9wYWNpdHkgPSAwICMgRW5zdXJlIGV4YWN0bHkgMA0KCQkJCQkJJGdsb2JhbDpmYWRlT3V0VGltZXIuU3RvcCgpDQoJCQkJCQkkZ2xvYmFsOmZhZGVPdXRUaW1lci5EaXNwb3NlKCkNCgkJCQkJCSRnbG9iYWw6ZmFkZU91dFRpbWVyID0gJG51bGwNCgkJCQkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJLlNldHRpbmdzRm9ybS5IaWRlKCkNCgkJCQkJfQ0KCQkJCX0pDQoJCQkjIFN0YXJ0IHRoZSBmYWRlLW91dCB0aW1lci4NCgkJCSRnbG9iYWw6ZmFkZU91dFRpbWVyLlN0YXJ0KCkNCgkJCSMgU3RvcmUgdGltZXIgcmVmZXJlbmNlIGZvciBwb3RlbnRpYWwgY2xlYW51cCBsYXRlci4NCgkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5UaW1lcnNbJ2ZhZGVPdXRUaW1lciddID0gJGdsb2JhbDpmYWRlT3V0VGltZXINCgkJI2VuZHJlZ2lvbiBTdGVwOiBDcmVhdGUgYW5kIFN0YXJ0IEZhZGUtT3V0IEFuaW1hdGlvbiBUaW1lcg0KCX0NCiNlbmRyZWdpb24gRnVuY3Rpb246IEhpZGUtU2V0dGluZ3NGb3JtDQoNCiNyZWdpb24gRnVuY3Rpb246IFNldC1VSUVsZW1lbnQNCglmdW5jdGlvbiBTZXQtVUlFbGVtZW50DQoJew0KCQk8Iw0KCQkuU1lOT1BTSVMNCgkJCUNyZWF0ZXMgYW5kIGNvbmZpZ3VyZXMgdmFyaW91cyBTeXN0ZW0uV2luZG93cy5Gb3JtcyBVSSBlbGVtZW50cyBiYXNlZCBvbiBwcm92aWRlZCBwYXJhbWV0ZXJzLg0KCQkuUEFSQU1FVEVSIHR5cGUNCgkJCVtzdHJpbmddIFRoZSB0eXBlIG9mIFVJIGVsZW1lbnQgdG8gY3JlYXRlLiBWYWxpZCB2YWx1ZXM6ICdGb3JtJywgJ1BhbmVsJywgJ0J1dHRvbicsICdMYWJlbCcsICdEYXRhR3JpZFZpZXcnLCAnVGV4dEJveCcsICdDb21ib0JveCcsICdDaGVja0JveCcuIChNYW5kYXRvcnkpDQoJCS5QQVJBTUVURVIgdmlzaWJsZQ0KCQkJW2Jvb2xdIFNldHMgdGhlIGluaXRpYWwgdmlzaWJpbGl0eSBvZiB0aGUgZWxlbWVudC4NCgkJLlBBUkFNRVRFUiB3aWR0aA0KCQkJW2ludF0gU2V0cyB0aGUgd2lkdGggb2YgdGhlIGVsZW1lbnQgaW4gcGl4ZWxzLg0KCQkuUEFSQU1FVEVSIGhlaWdodA0KCQkJW2ludF0gU2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBlbGVtZW50IGluIHBpeGVscy4NCgkJLlBBUkFNRVRFUiB0b3ANCgkJCVtpbnRdIFNldHMgdGhlIHRvcCBwb3NpdGlvbiAoWS1jb29yZGluYXRlKSBvZiB0aGUgZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgY29udGFpbmVyLg0KCQkuUEFSQU1FVEVSIGxlZnQNCgkJCVtpbnRdIFNldHMgdGhlIGxlZnQgcG9zaXRpb24gKFgtY29vcmRpbmF0ZSkgb2YgdGhlIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIGNvbnRhaW5lci4NCgkJLlBBUkFNRVRFUiBiZw0KCQkJW2FycmF5XSBTZXRzIHRoZSBiYWNrZ3JvdW5kIGNvbG9yIHVzaW5nIGFuIFJHQiBvciBBUkdCIGFycmF5IChlLmcuLCBAKDMwLDMwLDMwKSBvciBAKDI1NSwwLDAsMTI4KSkuDQoJCS5QQVJBTUVURVIgZmcNCgkJCVthcnJheV0gU2V0cyB0aGUgZm9yZWdyb3VuZCAodGV4dCkgY29sb3IgdXNpbmcgYW4gUkdCIGFycmF5IChlLmcuLCBAKDI1NSwyNTUsMjU1KSkuDQoJCS5QQVJBTUVURVIgaWQNCgkJCVtzdHJpbmddIEFuIGlkZW50aWZpZXIgc3RyaW5nIChub3QgZGlyZWN0bHkgdXNlZCBieSBXaW5Gb3JtcywgYnV0IHVzZWZ1bCBmb3IgcmVmZXJlbmNpbmcgaW4gdGhlICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlVJIG9iamVjdCkuDQoJCS5QQVJBTUVURVIgdGV4dA0KCQkJW3N0cmluZ10gU2V0cyB0aGUgdGV4dCBjb250ZW50IG9yIGNhcHRpb24gb2YgdGhlIGVsZW1lbnQgKGUuZy4sIGJ1dHRvbiB0ZXh0LCBsYWJlbCB0ZXh0LCBmb3JtIHRpdGxlKS4NCgkJLlBBUkFNRVRFUiBmcw0KCQkJW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZsYXRTdHlsZV0gU2V0cyB0aGUgRmxhdFN0eWxlIGZvciBlbGVtZW50cyBsaWtlIEJ1dHRvbnMgYW5kIENvbWJvQm94ZXMgKGUuZy4sICdGbGF0JywgJ1N0YW5kYXJkJykuDQoJCS5QQVJBTUVURVIgZm9udA0KCQkJW1N5c3RlbS5EcmF3aW5nLkZvbnRdIFNldHMgdGhlIGZvbnQgZm9yIHRoZSBlbGVtZW50J3MgdGV4dC4NCgkJLlBBUkFNRVRFUiBzdGFydFBvc2l0aW9uDQoJCQlbc3RyaW5nXSBGb3IgRm9ybXMsIHNldHMgdGhlIGluaXRpYWwgc3RhcnRpbmcgcG9zaXRpb24gKGUuZy4sICdNYW51YWwnLCAnQ2VudGVyU2NyZWVuJykuDQoJCS5QQVJBTUVURVIgZm9ybUJvcmRlclN0eWxlDQoJCQlbaW50XSBGb3IgRm9ybXMsIHNldHMgdGhlIGJvcmRlciBzdHlsZSB1c2luZyB0aGUgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybUJvcmRlclN0eWxlIGVudW1lcmF0aW9uIHZhbHVlLiBEZWZhdWx0cyB0byAnTm9uZScuDQoJCS5QQVJBTUVURVIgb3BhY2l0eQ0KCQkJW2RvdWJsZV0gRm9yIEZvcm1zLCBzZXRzIHRoZSBvcGFjaXR5IGxldmVsICgwLjAgdG8gMS4wKS4gRGVmYXVsdHMgdG8gMS4wLg0KCQkuUEFSQU1FVEVSIHRvcE1vc3QNCgkJCVtib29sXSBGb3IgRm9ybXMsIHNldHMgd2hldGhlciB0aGUgZm9ybSBzaG91bGQgc3RheSBvbiB0b3Agb2Ygb3RoZXIgd2luZG93cy4NCgkJLlBBUkFNRVRFUiBtdWx0aWxpbmUNCgkJCVtzd2l0Y2hdIEZvciBUZXh0Qm94ZXMsIGVuYWJsZXMgbXVsdGktbGluZSBpbnB1dC4NCgkJLlBBUkFNRVRFUiByZWFkT25seQ0KCQkJW3N3aXRjaF0gRm9yIFRleHRCb3hlcyBvciBEYXRhR3JpZFZpZXdzLCBtYWtlcyB0aGUgY29udGVudCByZWFkLW9ubHkuDQoJCS5QQVJBTUVURVIgc2Nyb2xsQmFycw0KCQkJW3N3aXRjaF0gRm9yIFRleHRCb3hlcywgZW5hYmxlcyB2ZXJ0aWNhbCBzY3JvbGxiYXJzIChpZiAkbXVsdGlsaW5lIGlzIGFsc28gdHJ1ZSkuDQoJCS5QQVJBTUVURVIgZHJvcERvd25TdHlsZQ0KCQkJW3N0cmluZ10gRm9yIENvbWJvQm94ZXMsIHNldHMgdGhlIHN0eWxlIChlLmcuLCAnU2ltcGxlJywgJ0Ryb3BEb3duJywgJ0Ryb3BEb3duTGlzdCcpLiBEZWZhdWx0cyB0byAnRHJvcERvd25MaXN0Jy4NCgkJLk9VVFBVVFMNCgkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Db250cm9sXSBSZXR1cm5zIHRoZSBjcmVhdGVkIGFuZCBjb25maWd1cmVkIFVJIGVsZW1lbnQgb2JqZWN0Lg0KCQkuTk9URVMNCgkJCVByb3ZpZGVzIGEgc3RhbmRhcmRpemVkIHdheSB0byBjcmVhdGUgY29tbW9uIFVJIGVsZW1lbnRzIHdpdGggY29uc2lzdGVudCBzdHlsaW5nIGZvciB0aGUgZGFyayB0aGVtZS4NCgkJCUluY2x1ZGVzIHNwZWNpZmljIGNvbmZpZ3VyYXRpb25zIGZvciBEYXRhR3JpZFZpZXdzIGFuZCBjdXN0b20gZHJhd2luZyBsb2dpYyBmb3IgQnV0dG9ucywgVGV4dEJveGVzLCBhbmQgQ29tYm9Cb3hlcw0KCQkJdG8gZW5zdXJlIHZpc3VhbCBjb25zaXN0ZW5jeS4gVXNlcyBhIERhcmtDb21ib0JveCBjdXN0b20gY2xhc3MgZm9yIGJldHRlciBDb21ib0JveCBzdHlsaW5nLg0KCQkjPg0KCQlbQ21kbGV0QmluZGluZygpXQ0KCQlwYXJhbSgNCgkJCVtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0NCgkJCVtWYWxpZGF0ZVNldCgnRm9ybScsICdQYW5lbCcsICdCdXR0b24nLCAnTGFiZWwnLCAnRGF0YUdyaWRWaWV3JywgJ1RleHRCb3gnLCAnQ29tYm9Cb3gnLCAnQ2hlY2tCb3gnKV0NCgkJCVtzdHJpbmddJHR5cGUsDQoJCQlbYm9vbF0kdmlzaWJsZSwNCgkJCVtpbnRdJHdpZHRoLA0KCQkJW2ludF0kaGVpZ2h0LA0KCQkJW2ludF0kdG9wLA0KCQkJW2ludF0kbGVmdCwNCgkJCVthcnJheV0kYmcsDQoJCQlbYXJyYXldJGZnLA0KCQkJW3N0cmluZ10kaWQsICMgVXNlZCBmb3IgcmVmZXJlbmNpbmcsIG5vdCBhIGRpcmVjdCBXaW5Gb3JtcyBwcm9wZXJ0eQ0KCQkJW3N0cmluZ10kdGV4dCwNCgkJCVtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5GbGF0U3R5bGVdJGZzLA0KCQkJW1N5c3RlbS5EcmF3aW5nLkZvbnRdJGZvbnQsDQoJCQlbc3RyaW5nXSRzdGFydFBvc2l0aW9uLA0KCQkJW2ludF0kZm9ybUJvcmRlclN0eWxlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm1Cb3JkZXJTdHlsZV06Ok5vbmUsDQoJCQlbZG91YmxlXSRvcGFjaXR5ID0gMS4wLA0KCQkJW2Jvb2xdJHRvcE1vc3QsDQoJCQlbc3dpdGNoXSRtdWx0aWxpbmUsDQoJCQlbc3dpdGNoXSRyZWFkT25seSwNCgkJCVtzd2l0Y2hdJHNjcm9sbEJhcnMsDQoJCQlbVmFsaWRhdGVTZXQoJ1NpbXBsZScsICdEcm9wRG93bicsICdEcm9wRG93bkxpc3QnKV0NCgkJCVtzdHJpbmddJGRyb3BEb3duU3R5bGUgPSAnRHJvcERvd25MaXN0Jw0KCQkpDQoNCgkJI3JlZ2lvbiBTdGVwOiBDcmVhdGUgVUkgRWxlbWVudCBCYXNlZCBvbiBUeXBlDQoJCQkjIENyZWF0ZSB0aGUgYXBwcm9wcmlhdGUgLk5FVCBXaW5kb3dzIEZvcm1zIGNvbnRyb2wgb2JqZWN0IGJhc2VkIG9uIHRoZSAkdHlwZSBwYXJhbWV0ZXIuDQoJCQkkZWwgPSBzd2l0Y2ggKCR0eXBlKQ0KCQkJew0KCQkJCSdGb3JtJyAgICAgICAgIHsgTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtIH0NCgkJCQknUGFuZWwnICAgICAgICB7IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuUGFuZWwgfQ0KCQkJCSdCdXR0b24nICAgICAgIHsgTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5CdXR0b24gfQ0KCQkJCSdMYWJlbCcgICAgICAgIHsgTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbCB9DQoJCQkJJ0RhdGFHcmlkVmlldycgeyBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkRhdGFHcmlkVmlldyB9DQoJCQkJJ1RleHRCb3gnICAgICAgeyBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlRleHRCb3ggfQ0KCQkJCSdDb21ib0JveCcgICAgIHsgTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Db21ib0JveCB9DQoJCQkJJ0NoZWNrQm94JyAgICAgeyBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkNoZWNrQm94IH0NCgkJCQlkZWZhdWx0ICAgICAgICB7IHRocm93ICJJbnZhbGlkIGVsZW1lbnQgdHlwZSBzcGVjaWZpZWQ6ICR0eXBlIiB9DQoJCQl9DQoJCSNlbmRyZWdpb24gU3RlcDogQ3JlYXRlIFVJIEVsZW1lbnQgQmFzZWQgb24gVHlwZQ0KDQoJCSNyZWdpb24gU3RlcDogQ29uZmlndXJlIERhdGFHcmlkVmlldyBTcGVjaWZpYyBQcm9wZXJ0aWVzDQoJCQkjIEFwcGx5IHNldHRpbmdzIHNwZWNpZmljIHRvIERhdGFHcmlkVmlldyBjb250cm9scyBmb3IgYXBwZWFyYW5jZSBhbmQgYmVoYXZpb3IuDQoJCQlpZiAoJHR5cGUgLWVxICdEYXRhR3JpZFZpZXcnKQ0KCQkJew0KCQkJCSRlbC5BbGxvd1VzZXJUb0FkZFJvd3MgPSAkZmFsc2UgICAgICAgICAgIyBEb24ndCBhbGxvdyB1c2VycyB0byBhZGQgbmV3IHJvd3MgZGlyZWN0bHkNCgkJCQkkZWwuUmVhZE9ubHkgPSAkZmFsc2UgICAgICAgICAgICAgICAgICAgICMgTWFrZSB0aGUgZ3JpZCByZWFkLW9ubHkNCgkJCQkkZWwuQWxsb3dVc2VyVG9PcmRlckNvbHVtbnMgPSAkdHJ1ZSAgICAgICMgTWFrZSB0aGUgZ3JpZCBjb2x1bW5zIGRyYWdhYmxlDQoJCQkJJGVsLkFsbG93VXNlclRvUmVzaXplQ29sdW1ucyAgPSAkZmFsc2UgCSAjIE1ha2UgdGhlIGdyaWQgY29sdW1ucyBzaXplIGZpeGVkDQoJCQkJJGVsLkFsbG93VXNlclRvUmVzaXplUm93cyA9ICRmYWxzZSAJCSAjIE1ha2UgdGhlIGdyaWQgcm93cyBzaXplIGZpeGVkDQoJCQkJJGVsLlJvd0hlYWRlcnNWaXNpYmxlID0gJGZhbHNlICAgICAgICAgICAjIEhpZGUgdGhlIHJvdyBoZWFkZXIgY29sdW1uDQoJCQkJJGVsLk11bHRpU2VsZWN0ID0gJHRydWUgICAgICAgICAgICAgICAgICAjIEFsbG93IHNlbGVjdGluZyBtdWx0aXBsZSByb3dzDQoJCQkJJGVsLlNlbGVjdGlvbk1vZGUgPSAnRnVsbFJvd1NlbGVjdCcgICAgICAjIFNlbGVjdCBlbnRpcmUgcm93cyBpbnN0ZWFkIG9mIGluZGl2aWR1YWwgY2VsbHMNCgkJCQkkZWwuQXV0b1NpemVDb2x1bW5zTW9kZSA9ICdGaWxsJyAgICAgICAgICMgTWFrZSBjb2x1bW5zIGZpbGwgdGhlIGF2YWlsYWJsZSB3aWR0aA0KCQkJCSRlbC5Cb3JkZXJTdHlsZSA9ICdGaXhlZFNpbmdsZScgICAgICAgICAgIyBBZGRzIHRoZSBvdXRlciBib3JkZXINCgkJCQkkZWwuRW5hYmxlSGVhZGVyc1Zpc3VhbFN0eWxlcyA9ICRmYWxzZSAgICMgQWxsb3cgY3VzdG9tIGhlYWRlciBzdHlsaW5nDQoJCQkJJGVsLkNlbGxCb3JkZXJTdHlsZSA9ICdTaW5nbGVIb3Jpem9udGFsJyAjIEhvcml6b250YWwgbGluZXMgYmV0d2VlbiByb3dzDQoJCQkJJGVsLkNvbHVtbkhlYWRlcnNCb3JkZXJTdHlsZSA9ICdTaW5nbGUnICAjIE5vIGJvcmRlciBhcm91bmQgY29sdW1uIGhlYWRlcnMNCgkJCQkkZWwuRWRpdE1vZGUgPSAnRWRpdFByb2dyYW1tYXRpY2FsbHknCSAjIEFsbG93cyBlZGl0aW5nIHZhbHVlcyBvbiBzcGVjaWZpYyBvY2Nhc2lvbnMNCgkJCQkkZWwuQ29sdW1uSGVhZGVyc0hlaWdodFNpemVNb2RlID0gJ0Rpc2FibGVSZXNpemluZycNCgkJCQkkZWwuUm93SGVhZGVyc1dpZHRoU2l6ZU1vZGUgPSAnRGlzYWJsZVJlc2l6aW5nJw0KCQkJCSRlbC5EZWZhdWx0Q2VsbFN0eWxlLkFsaWdubWVudCA9ICdNaWRkbGVDZW50ZXInDQoJCQkJJGVsLkNvbHVtbkhlYWRlcnNEZWZhdWx0Q2VsbFN0eWxlLkFsaWdubWVudCA9ICdNaWRkbGVDZW50ZXInDQoNCgkJCQkjIFNldCBjb2xvcnMgZm9yIGJldHRlciB2aXNpYmlsaXR5IGluIGRhcmsgdGhlbWUNCgkJCQkkZWwuRGVmYXVsdENlbGxTdHlsZS5CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig0MCwgNDAsIDQwKSAgICAjIERhcmsgY2VsbCBiYWNrZ3JvdW5kDQoJCQkJJGVsLkFsdGVybmF0aW5nUm93c0RlZmF1bHRDZWxsU3R5bGUuQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoMzcsIDM3LCAzNykgICAgIyBEYXJrIGNlbGwgYmFja2dyb3VuZA0KCQkJCSRlbC5EZWZhdWx0Q2VsbFN0eWxlLkZvcmVDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDIzMCwgMjMwLCAyMzApICMgTGlnaHQgdGV4dA0KCQkJCSRlbC5Db2x1bW5IZWFkZXJzRGVmYXVsdENlbGxTdHlsZS5CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig1MCwgNTAsIDUwKSAjIFNsaWdodGx5IGRhcmtlciBoZWFkZXIgYmFja2dyb3VuZA0KCQkJCSRlbC5Db2x1bW5IZWFkZXJzRGVmYXVsdENlbGxTdHlsZS5Gb3JlQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYigyNDAsIDI0MCwgMjQwKSAjIFdoaXRlIGhlYWRlciB0ZXh0DQoJCQkJJGVsLkdyaWRDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDcwLCA3MCwgNzApICAgICAgICAgICAgICAgICAgICAgIyBDb2xvciBmb3IgZ3JpZCBsaW5lcw0KCQkJCSRlbC5CYWNrZ3JvdW5kQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig0MCwgNDAsIDQwKSAgICAgICAgICAgICAgICMgQmFja2dyb3VuZCBpZiBncmlkIGlzIGVtcHR5DQoJCQkJJGVsLkRlZmF1bHRDZWxsU3R5bGUuU2VsZWN0aW9uQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNjAsIDgwLCAxODApICMgU2VsZWN0aW9uIGJhY2tncm91bmQgY29sb3IgKGJsdWVpc2gpDQoJCQkJJGVsLkRlZmF1bHRDZWxsU3R5bGUuU2VsZWN0aW9uRm9yZUNvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoMjQwLCAyNDAsIDI0MCkgIyBXaGl0ZSBzZWxlY3RlZCB0ZXh0DQoNCgkJCQkjIEFkZCBkZWZhdWx0IGNvbHVtbnMgZXhwZWN0ZWQgYnkgdGhlIGFwcGxpY2F0aW9uDQoJCQkJJGVsLkNvbHVtbnMuQWRkUmFuZ2UoDQoJCQkJCShOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkRhdGFHcmlkVmlld1RleHRCb3hDb2x1bW4gLVByb3BlcnR5IEB7IE5hbWUgPSAnSW5kZXgnOyBIZWFkZXJUZXh0ID0gJyMnOyBGaWxsV2VpZ2h0ID0gODsgU29ydE1vZGUgPSAnTm90U29ydGFibGUnO30pLA0KCQkJCQkoTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EYXRhR3JpZFZpZXdUZXh0Qm94Q29sdW1uIC1Qcm9wZXJ0eSBAeyBOYW1lID0gJ1RpdGVsJzsgSGVhZGVyVGV4dCA9ICdUaXRlbCc7IFNvcnRNb2RlID0gJ05vdFNvcnRhYmxlJzt9KSwNCgkJCQkJKE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRGF0YUdyaWRWaWV3VGV4dEJveENvbHVtbiAtUHJvcGVydHkgQHsgTmFtZSA9ICdJRCc7IEhlYWRlclRleHQgPSAnSUQnOyBGaWxsV2VpZ2h0ID0gMjA7IFNvcnRNb2RlID0gJ05vdFNvcnRhYmxlJzt9KSwNCgkJCQkJKE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRGF0YUdyaWRWaWV3VGV4dEJveENvbHVtbiAtUHJvcGVydHkgQHsgTmFtZSA9ICdTdGF0ZSc7IEhlYWRlclRleHQgPSAnU3RhdGUnOyBGaWxsV2VpZ2h0ID0gNDA7IFNvcnRNb2RlID0gJ05vdFNvcnRhYmxlJzt9KQ0KCQkJCSkNCgkJCX0NCgkJI2VuZHJlZ2lvbiBTdGVwOiBDb25maWd1cmUgRGF0YUdyaWRWaWV3IFNwZWNpZmljIFByb3BlcnRpZXMNCg0KCQkjcmVnaW9uIFN0ZXA6IEFwcGx5IENvbW1vbiBDb250cm9sIFByb3BlcnRpZXMNCgkJCSMgQXBwbHkgcHJvcGVydGllcyBjb21tb24gdG8gbW9zdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Db250cm9sIHR5cGVzLg0KCQkJaWYgKCRlbCAtaXMgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkNvbnRyb2xdKQ0KCQkJew0KCQkJCWlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ3Zpc2libGUnKSkgeyAkZWwuVmlzaWJsZSA9ICR2aXNpYmxlIH0NCgkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCd3aWR0aCcpKSAgIHsgJGVsLldpZHRoID0gJHdpZHRoIH0NCgkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdoZWlnaHQnKSkgIHsgJGVsLkhlaWdodCA9ICRoZWlnaHQgfQ0KCQkJCWlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ3RvcCcpKSAgICAgeyAkZWwuVG9wID0gJHRvcCB9DQoJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnbGVmdCcpKSAgICB7ICRlbC5MZWZ0ID0gJGxlZnQgfQ0KDQoJCQkJIyBTZXQgYmFja2dyb3VuZCBjb2xvciBmcm9tIFJHQiBvciBBUkdCIGFycmF5DQoJCQkJaWYgKCRiZyAtaXMgW2FycmF5XSAtYW5kICRiZy5Db3VudCAtZ2UgMykNCgkJCQl7DQoJCQkJCSRlbC5CYWNrQ29sb3IgPSBpZiAoJGJnLkNvdW50IC1lcSA0KSB7IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKCRiZ1swXSwgJGJnWzFdLCAkYmdbMl0sICRiZ1szXSkgfQ0KCQkJCQkJCQkJZWxzZSAgICAgICAgICAgICAgICAgeyBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYigkYmdbMF0sICRiZ1sxXSwgJGJnWzJdKSB9DQoJCQkJfQ0KDQoJCQkJIyBTZXQgZm9yZWdyb3VuZCBjb2xvciBmcm9tIFJHQiBhcnJheQ0KCQkJCWlmICgkZmcgLWlzIFthcnJheV0gLWFuZCAkZmcuQ291bnQgLWdlIDMpDQoJCQkJew0KCQkJCQkkZWwuRm9yZUNvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoJGZnWzBdLCAkZmdbMV0sICRmZ1syXSkNCgkJCQl9DQoNCgkJCQkjIFNldCBmb250IGlmIHByb3ZpZGVkDQoJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnZm9udCcpKSB7ICRlbC5Gb250ID0gJGZvbnQgfQ0KCQkJfQ0KCQkjZW5kcmVnaW9uIFN0ZXA6IEFwcGx5IENvbW1vbiBDb250cm9sIFByb3BlcnRpZXMNCg0KCQkjcmVnaW9uIFN0ZXA6IEFwcGx5IFR5cGUtU3BlY2lmaWMgUHJvcGVydGllcw0KCQkJIyBBcHBseSBwcm9wZXJ0aWVzIHNwZWNpZmljIHRvIHRoZSBjcmVhdGVkIGVsZW1lbnQgdHlwZS4NCgkJCXN3aXRjaCAoJHR5cGUpDQoJCQl7DQoJCQkJJ0Zvcm0nIHsNCgkJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgndGV4dCcpKSB7ICRlbC5UZXh0ID0gJHRleHQgfQ0KCQkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdzdGFydFBvc2l0aW9uJykpIHsNCgkJCQkJCXRyeSB7ICRlbC5TdGFydFBvc2l0aW9uID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm1TdGFydFBvc2l0aW9uXTo6JHN0YXJ0UG9zaXRpb24gfQ0KCQkJCQkJY2F0Y2ggeyBXcml0ZS1WZXJib3NlICIgIFVJOiBJbnZhbGlkIFN0YXJ0UG9zaXRpb24gdmFsdWU6ICRzdGFydFBvc2l0aW9uLiBVc2luZyBkZWZhdWx0LiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cgfQ0KCQkJCQl9DQoJCQkJCWlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ2Zvcm1Cb3JkZXJTdHlsZScpKSB7DQoJCQkJCQkgdHJ5IHsgJGVsLkZvcm1Cb3JkZXJTdHlsZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtQm9yZGVyU3R5bGVdJGZvcm1Cb3JkZXJTdHlsZSB9DQoJCQkJCQkgY2F0Y2ggeyBXcml0ZS1WZXJib3NlICIgIFVJOiBJbnZhbGlkIEZvcm1Cb3JkZXJTdHlsZSB2YWx1ZTogJGZvcm1Cb3JkZXJTdHlsZS4gVXNpbmcgZGVmYXVsdC4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93IH0NCgkJCQkJfQ0KCQkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdvcGFjaXR5JykpIHsgJGVsLk9wYWNpdHkgPSBbZG91YmxlXSRvcGFjaXR5IH0NCgkJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgndG9wTW9zdCcpKSB7ICRlbC5Ub3BNb3N0ID0gJHRvcE1vc3QgfQ0KCQkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdpY29uJykpIHsgJGVsLkljb24gPSBbU3lzdGVtLkRyYXdpbmcuSWNvbl06OkV4dHJhY3RBc3NvY2lhdGVkSWNvbigkUFNDb21tYW5kUGF0aCkgfQ0KCQkJCX0NCgkJCQknQnV0dG9uJyB7DQoJCQkJCWlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ3RleHQnKSkgeyAkZWwuVGV4dCA9ICR0ZXh0IH0NCgkJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnZnMnKSkgew0KCQkJCQkJJGVsLkZsYXRTdHlsZSA9ICRmcw0KCQkJCQkJIyBBcHBseSBjdXN0b20gYXBwZWFyYW5jZSBmb3IgZmxhdCBidXR0b25zIHRvIG1hdGNoIGRhcmsgdGhlbWUNCgkJCQkJCSRlbC5GbGF0QXBwZWFyYW5jZS5Cb3JkZXJDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDYwLCA2MCwgNjApICMgU3VidGxlIGJvcmRlcg0KCQkJCQkJJGVsLkZsYXRBcHBlYXJhbmNlLkJvcmRlclNpemUgPSAxDQoJCQkJCQkkZWwuRmxhdEFwcGVhcmFuY2UuTW91c2VPdmVyQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNzAsIDcwLCA3MCkgIyBTbGlnaHRseSBsaWdodGVyIG9uIGhvdmVyDQoJCQkJCQkkZWwuRmxhdEFwcGVhcmFuY2UuTW91c2VEb3duQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoOTAsIDkwLCA5MCkgIyBFdmVuIGxpZ2h0ZXIgd2hlbiBjbGlja2VkDQoNCgkJCQkJCSMgQ3VzdG9tIFBhaW50IGhhbmRsZXIgZm9yIG1vcmUgY29tcGxleCBkcmF3aW5nLg0KCQkJCQkJJGVsLkFkZF9QYWludCh7DQoJCQkJCQkJcGFyYW0oJHNyYywgJGUpDQoJCQkJCQkNCgkJCQkJCQkjIE9ubHkgY3VzdG9tIHBhaW50IGlmIHdlJ3JlIHVzaW5nIGZsYXQgc3R5bGUNCgkJCQkJCQlpZiAoJHNyYy5GbGF0U3R5bGUgLWVxIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5GbGF0U3R5bGVdOjpGbGF0KQ0KCQkJCQkJCXsNCgkJCQkJCQkJIyBEcmF3IHRoZSBidXR0b24gYmFja2dyb3VuZA0KCQkJCQkJCQkkYmdCcnVzaCA9IFtTeXN0ZW0uRHJhd2luZy5Tb2xpZEJydXNoXTo6bmV3KFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDQwLCA0MCwgNDApKQ0KCQkJCQkJCQkkZS5HcmFwaGljcy5GaWxsUmVjdGFuZ2xlKCRiZ0JydXNoLCAwLCAwLCAkc3JjLldpZHRoLCAkc3JjLkhlaWdodCkNCgkJCQkJCQkNCgkJCQkJCQkJIyBEcmF3IHRleHQNCgkJCQkJCQkJJHRleHRCcnVzaCA9IFtTeXN0ZW0uRHJhd2luZy5Tb2xpZEJydXNoXTo6bmV3KFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDI0MCwgMjQwLCAyNDApKQ0KCQkJCQkJCQkkdGV4dEZvcm1hdCA9IFtTeXN0ZW0uRHJhd2luZy5TdHJpbmdGb3JtYXRdOjpuZXcoKQ0KCQkJCQkJCQkkdGV4dEZvcm1hdC5BbGlnbm1lbnQgPSBbU3lzdGVtLkRyYXdpbmcuU3RyaW5nQWxpZ25tZW50XTo6Q2VudGVyDQoJCQkJCQkJCSR0ZXh0Rm9ybWF0LkxpbmVBbGlnbm1lbnQgPSBbU3lzdGVtLkRyYXdpbmcuU3RyaW5nQWxpZ25tZW50XTo6Q2VudGVyDQoJCQkJCQkJCSRlLkdyYXBoaWNzLkRyYXdTdHJpbmcoJHNyYy5UZXh0LCAkc3JjLkZvbnQsICR0ZXh0QnJ1c2gsIA0KCQkJCQkJCQkJW1N5c3RlbS5EcmF3aW5nLlJlY3RhbmdsZUZdOjpuZXcoMCwgMCwgJHNyYy5XaWR0aCwgJHNyYy5IZWlnaHQpLCAkdGV4dEZvcm1hdCkNCgkJCQkJCQkNCgkJCQkJCQkJIyBEcmF3IGJvcmRlcg0KCQkJCQkJCQkkYm9yZGVyUGVuID0gW1N5c3RlbS5EcmF3aW5nLlBlbl06Om5ldyhbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig2MCwgNjAsIDYwKSkNCgkJCQkJCQkJJGUuR3JhcGhpY3MuRHJhd1JlY3RhbmdsZSgkYm9yZGVyUGVuLCAwLCAwLCAkc3JjLldpZHRoLCAkc3JjLkhlaWdodCkNCgkJCQkJCQkNCgkJCQkJCQkJIyBEaXNwb3NlIHJlc291cmNlcw0KCQkJCQkJCQkkYmdCcnVzaC5EaXNwb3NlKCkNCgkJCQkJCQkJJHRleHRCcnVzaC5EaXNwb3NlKCkNCgkJCQkJCQkJJGJvcmRlclBlbi5EaXNwb3NlKCkNCgkJCQkJCQkJJHRleHRGb3JtYXQuRGlzcG9zZSgpDQoJCQkJCQkJfQ0KCQkJCQkJfSkNCgkJCQkJfQ0KCQkJCX0NCgkJCQknTGFiZWwnIHsNCgkJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgndGV4dCcpKSB7ICRlbC5UZXh0ID0gJHRleHQgfQ0KCQkJCQkjIEVuc3VyZSBsYWJlbHMgd2l0aCB0cmFuc3BhcmVudCBiYWNrZ3JvdW5kcyBhcmUgaGFuZGxlZCBjb3JyZWN0bHkNCgkJCQkJaWYgKCRlbC5CYWNrQ29sb3IgLWVxIFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OlRyYW5zcGFyZW50KSB7DQoJCQkJCSAgICMgTWF5IG5lZWQgYWRkaXRpb25hbCBoYW5kbGluZyBkZXBlbmRpbmcgb24gY29udGFpbmVyIGlmIHRyYW5zcGFyZW5jeSBpc3N1ZXMgYXJpc2UNCgkJCQkJfQ0KCQkJCX0NCgkJCQknVGV4dEJveCcgew0KCQkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCd0ZXh0JykpIHsgJGVsLlRleHQgPSAkdGV4dCB9DQoJCQkJCWlmICgkUFNCb3VuZFBhcmFtZXRlcnMuQ29udGFpbnNLZXkoJ211bHRpbGluZScpKSB7ICRlbC5NdWx0aWxpbmUgPSAkbXVsdGlsaW5lIH0NCgkJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgncmVhZE9ubHknKSkgeyAkZWwuUmVhZE9ubHkgPSAkcmVhZE9ubHkgfQ0KCQkJCQlpZiAoJFBTQm91bmRQYXJhbWV0ZXJzLkNvbnRhaW5zS2V5KCdzY3JvbGxCYXJzJykpIHsNCgkJCQkJCSRlbC5TY3JvbGxCYXJzID0gaWYgKCRzY3JvbGxCYXJzIC1hbmQgJG11bHRpbGluZSkgeyBbU3lzdGVtLldpbmRvd3MuRm9ybXMuU2Nyb2xsQmFyc106OlZlcnRpY2FsIH0NCgkJCQkJCQkJCQkgZWxzZSB7IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5TY3JvbGxCYXJzXTo6Tm9uZSB9DQoJCQkJCX0NCg0KCQkJCQkjIEFwcGx5IGRhcmsgdGhlbWUgc3R5bGluZyB0byBUZXh0Qm94DQoJCQkJCSRlbC5Cb3JkZXJTdHlsZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Cb3JkZXJTdHlsZV06OkZpeGVkU2luZ2xlDQoJCQkJCSRlbC5UZXh0QWxpZ24gPSAiQ2VudGVyIg0KCQkJCQkkZWwuQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNTAsIDUwLCA1MCkgIyBTbGlnaHRseSBsaWdodGVyIHRoYW4gYmFja2dyb3VuZA0KCQkJCQkkZWwuRm9yZUNvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoMjMwLCAyMzAsIDIzMCkNCg0KCQkJCX0NCgkJCQknQ29tYm9Cb3gnDQoJCQkJew0KCQkJCQlpZiAoJG51bGwgLW5lICRkcm9wRG93blN0eWxlKQ0KCQkJCQl7DQoJCQkJCQl0cnkNCgkJCQkJCXsNCgkJCQkJCQkkZWwuRHJvcERvd25TdHlsZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Db21ib0JveFN0eWxlXTo6JGRyb3BEb3duU3R5bGUgDQoJCQkJCQl9DQoJCQkJCQljYXRjaA0KCQkJCQkJew0KCQkJCQkJCVdyaXRlLVZlcmJvc2UgIlVJOiBJbnZhbGlkIERyb3BEb3duU3R5bGUgdmFsdWU6ICRkcm9wRG93blN0eWxlLiBVc2luZyBkZWZhdWx0LiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJCQkJCX0NCgkJCQkJfQ0KCQkJCQlpZiAoJG51bGwgLW5lICRmcykNCgkJCQkJew0KCQkJCQkJJGVsLkZsYXRTdHlsZSA9ICRmcw0KCQkJCQkJJGVsLkRyYXdNb2RlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkRyYXdNb2RlXTo6T3duZXJEcmF3Rml4ZWQNCgkJCQkJCQ0KCQkJCQkJIyBTZXQgcHJvcGVydGllcyB0byBzaG93IGFsbCBpdGVtcyB3aXRob3V0IHNjcm9sbGJhcg0KCQkJCQkJJGVsLkludGVncmFsSGVpZ2h0ID0gJGZhbHNlDQoJCQkJCQkNCgkJCQkJCSMgU3RvcmUgdGhlIG9yaWdpbmFsIGV2ZW50IGhhbmRsZXJzIGJlZm9yZSBjcmVhdGluZyB0aGUgY3VzdG9tIGNvbnRyb2wNCgkJCQkJCSRvcmlnaW5hbERyYXdJdGVtU2NyaXB0ID0gew0KCQkJCQkJCXBhcmFtKCRzcmMsICRlKQ0KCQkJCQkJCQ0KCQkJCQkJCSRlLkRyYXdCYWNrZ3JvdW5kKCkNCgkJCQkJCQkNCgkJCQkJCQlpZiAoJGUuSW5kZXggLWdlIDApDQoJCQkJCQkJew0KCQkJCQkJCQkkYnJ1c2hCYWNrZ3JvdW5kID0gaWYgKCRlLlN0YXRlIC1iYW5kIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EcmF3SXRlbVN0YXRlXTo6U2VsZWN0ZWQpDQoJCQkJCQkJCXsNCgkJCQkJCQkJCVtTeXN0ZW0uRHJhd2luZy5Tb2xpZEJydXNoXTo6bmV3KFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDQwLCA0MCwgNDApKQ0KCQkJCQkJCQl9DQoJCQkJCQkJCWVsc2UNCgkJCQkJCQkJew0KCQkJCQkJCQkJW1N5c3RlbS5EcmF3aW5nLlNvbGlkQnJ1c2hdOjpuZXcoW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNDAsIDQwLCA0MCkpDQoJCQkJCQkJCX0NCgkJCQkJCQkJDQoJCQkJCQkJCSRlLkdyYXBoaWNzLkZpbGxSZWN0YW5nbGUoJGJydXNoQmFja2dyb3VuZCwgJGUuYm91bmRzLkxlZnQsICRlLmJvdW5kcy5Ub3AsICRlLmJvdW5kcy5XaWR0aCwgJGUuYm91bmRzLkhlaWdodCkNCgkJCQkJCQkJJGUuR3JhcGhpY3MuRHJhd1N0cmluZygkc3JjLkl0ZW1zWyRlLkluZGV4XS5Ub1N0cmluZygpLCAkc3JjLkZvbnQsIFtTeXN0ZW0uRHJhd2luZy5CcnVzaGVzXTo6RnJvbUFyZ2IoMjQwLCAyNDAsIDI0MCksICRlLkJvdW5kcy5MZWZ0LCAkZS5Cb3VuZHMuVG9wLCAkZS5ib3VuZHMuV2lkdGgsICRlLmJvdW5kcy5IZWlnaHQpDQoJCQkJCQkJfQ0KCQkJCQkJCQ0KCQkJCQkJCSRlLkRyYXdGb2N1c1JlY3RhbmdsZSgpDQoJCQkJCQl9DQoJCQkJCQkNCgkJCQkJCSRvcmlnaW5hbERyb3BEb3duU2NyaXB0ID0gew0KCQkJCQkJCXBhcmFtKCRzcmMsICRlKQ0KCQkJCQkJCQ0KCQkJCQkJCSMgQ2FsY3VsYXRlIGhlaWdodCBuZWVkZWQgZm9yIGFsbCBpdGVtcw0KCQkJCQkJCSRpdGVtSGVpZ2h0ID0gJHNyYy5JdGVtSGVpZ2h0DQoJCQkJCQkJJHRvdGFsSXRlbXMgPSAkc3JjLkl0ZW1zLkNvdW50DQoJCQkJCQkJJHJlcXVpcmVkSGVpZ2h0ID0gJGl0ZW1IZWlnaHQgKiAkdG90YWxJdGVtcw0KCQkJCQkJCQ0KCQkJCQkJCSMgU2V0IGRyb3Bkb3duIGhlaWdodCB0byBzaG93IGFsbCBpdGVtcyAobWF4IDMwMHB4IHRvIHByZXZlbnQgZXh0cmVtZWx5IGxhcmdlIGRyb3Bkb3ducykNCgkJCQkJCQkkc3JjLkRyb3BEb3duSGVpZ2h0ID0gW01hdGhdOjpNaW4oJHJlcXVpcmVkSGVpZ2h0ICsgMiwgMzAwKQ0KCQkJCQkJfQ0KCQkJCQkJDQoJCQkJCQkjIEFkZCB0aGUgZXZlbnQgaGFuZGxlcnMgdG8gdGhlIG9yaWdpbmFsIGNvbnRyb2wNCgkJCQkJCSRlbC5BZGRfRHJhd0l0ZW0oJG9yaWdpbmFsRHJhd0l0ZW1TY3JpcHQpDQoJCQkJCQkkZWwuQWRkX0Ryb3BEb3duKCRvcmlnaW5hbERyb3BEb3duU2NyaXB0KQ0KCQkJCQkJCQkJCQkJCQ0KCQkJCQkJIyBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2Ygb3VyIGN1c3RvbSBDb21ib0JveA0KCQkJCQkJJGN1c3RvbUNvbWJvQm94ID0gTmV3LU9iamVjdCBEYXJrQ29tYm9Cb3gNCgkJCQkJCQ0KCQkJCQkJIyBDb3B5IHByb3BlcnRpZXMgZnJvbSB0aGUgb3JpZ2luYWwgQ29tYm9Cb3gNCgkJCQkJCSRjdXN0b21Db21ib0JveC5Mb2NhdGlvbiA9ICRlbC5Mb2NhdGlvbg0KCQkJCQkJJGN1c3RvbUNvbWJvQm94LlNpemUgPSAkZWwuU2l6ZQ0KCQkJCQkJJGN1c3RvbUNvbWJvQm94LldpZHRoID0gJGVsLldpZHRoIC0gMjANCgkJCQkJCSRjdXN0b21Db21ib0JveC5Ecm9wRG93blN0eWxlID0gJGVsLkRyb3BEb3duU3R5bGUNCgkJCQkJCSRjdXN0b21Db21ib0JveC5GbGF0U3R5bGUgPSAkZWwuRmxhdFN0eWxlDQoJCQkJCQkkY3VzdG9tQ29tYm9Cb3guRHJhd01vZGUgPSAkZWwuRHJhd01vZGUNCgkJCQkJCSRjdXN0b21Db21ib0JveC5CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig0MCwgNDAsIDQwKQ0KCQkJCQkJJGN1c3RvbUNvbWJvQm94LkZvcmVDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkZyb21BcmdiKDI0MCwgMjQwLCAyNDApDQoJCQkJCQkkY3VzdG9tQ29tYm9Cb3guRm9udCA9ICRlbC5Gb250DQoJCQkJCQkkY3VzdG9tQ29tYm9Cb3guSW50ZWdyYWxIZWlnaHQgPSAkZmFsc2UNCgkJCQkJCSRjdXN0b21Db21ib0JveC5UYWJJbmRleCA9ICRlbC5UYWJJbmRleA0KCQkJCQkJJGN1c3RvbUNvbWJvQm94Lk5hbWUgPSAkZWwuTmFtZQ0KCQkJCQkJDQoJCQkJCQkjIENvcHkgYW55IGl0ZW1zIGZyb20gdGhlIG9yaWdpbmFsIENvbWJvQm94DQoJCQkJCQlmb3JlYWNoICgkaXRlbSBpbiAkZWwuSXRlbXMpDQoJCQkJCQl7DQoJCQkJCQkJJGN1c3RvbUNvbWJvQm94Lkl0ZW1zLkFkZCgkaXRlbSkNCgkJCQkJCX0NCgkJCQkJCQ0KCQkJCQkJIyBBZGQgdGhlIHNhbWUgZXZlbnQgaGFuZGxlcnMgdG8gdGhlIG5ldyBjb250cm9sDQoJCQkJCQkkY3VzdG9tQ29tYm9Cb3guQWRkX0Ryb3BEb3duKCRvcmlnaW5hbERyb3BEb3duU2NyaXB0KQ0KCQkJCQkJDQoJCQkJCQkjIFJldHVybiB0aGUgY3VzdG9tIENvbWJvQm94DQoJCQkJCQkkZWwgPSAkY3VzdG9tQ29tYm9Cb3gNCgkJCQkJfQ0KCQkJCX0NCgkJCQkJJ0NoZWNrQm94JyB7DQoJCQkJCQkJaWYgKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgndGV4dCcpKSB7ICRlbC5UZXh0ID0gJHRleHQgfQ0KCQkJCQkjIFNldCBtb2Rlcm4gZmxhdCBzdHlsZSBmb3IgZGFyayB0aGVtZQ0KCQkJCQkkZWwuRmxhdFN0eWxlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkZsYXRTdHlsZV06OkZsYXQNCgkJCQkJJGVsLkZsYXRBcHBlYXJhbmNlLkJvcmRlckNvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoNjAsIDYwLCA2MCkNCgkJCQkJJGVsLkZsYXRBcHBlYXJhbmNlLkJvcmRlclNpemUgPSAxDQoJCQkJCSRlbC5GbGF0QXBwZWFyYW5jZS5DaGVja2VkQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6RnJvbUFyZ2IoMCwgMTIwLCAyMTUpICMgV2luZG93cyBibHVlDQoJCQkJCSRlbC5GbGF0QXBwZWFyYW5jZS5Nb3VzZU92ZXJCYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpGcm9tQXJnYig1MCwgNTAsIDUwKQ0KCQkJCQkkZWwuVXNlVmlzdWFsU3R5bGVCYWNrQ29sb3IgPSAkZmFsc2UNCgkJCQkJJGVsLkNoZWNrQWxpZ24gPSBbU3lzdGVtLkRyYXdpbmcuQ29udGVudEFsaWdubWVudF06Ok1pZGRsZUxlZnQNCgkJCQkJJGVsLlRleHRBbGlnbiA9IFtTeXN0ZW0uRHJhd2luZy5Db250ZW50QWxpZ25tZW50XTo6TWlkZGxlTGVmdA0KCQkJCQkkZWwuUGFkZGluZyA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5QYWRkaW5nXTo6bmV3KDIwLCAwLCAwLCAwKSAjIFNwYWNlIGJldHdlZW4gY2hlY2tib3ggYW5kIHRleHQNCgkJCQl9DQoJCQl9DQoJCSNlbmRyZWdpb24gU3RlcDogQXBwbHkgVHlwZS1TcGVjaWZpYyBQcm9wZXJ0aWVzDQoNCgkJI3JlZ2lvbiBTdGVwOiBSZXR1cm4gQ3JlYXRlZCBVSSBFbGVtZW50DQoJCQlyZXR1cm4gJGVsDQoJCSNlbmRyZWdpb24gU3RlcDogUmV0dXJuIENyZWF0ZWQgVUkgRWxlbWVudA0KCX0NCiNlbmRyZWdpb24gRnVuY3Rpb246IFNldC1VSUVsZW1lbnQNCg0KI2VuZHJlZ2lvbiBDb3JlIFVJIEZ1bmN0aW9ucw0KDQojcmVnaW9uIE1vZHVsZSBFeHBvcnRzDQojcmVnaW9uIFN0ZXA6IEV4cG9ydCBQdWJsaWMgRnVuY3Rpb25zDQoJIyBFeHBvcnQgdGhlIGZ1bmN0aW9ucyBpbnRlbmRlZCBmb3IgdXNlIGJ5IG90aGVyIG1vZHVsZXMgb3IgdGhlIG1haW4gc2NyaXB0Lg0KCUV4cG9ydC1Nb2R1bGVNZW1iZXIgLUZ1bmN0aW9uIEluaXRpYWxpemUtVUksIFNldC1VSUVsZW1lbnQsIFNob3ctU2V0dGluZ3NGb3JtLCBIaWRlLVNldHRpbmdzRm9ybSwgU3luYy1Db25maWdUb1VJLCBTeW5jLVVJVG9Db25maWcsIFJlZ2lzdGVyLVVJRXZlbnRIYW5kbGVycw0KI2VuZHJlZ2lvbiBTdGVwOiBFeHBvcnQgUHVibGljIEZ1bmN0aW9ucw0KI2VuZHJlZ2lvbiBNb2R1bGUgRXhwb3J0cw==
			'
		}
		
		# Important modules: Add major features. Failure might limit things, but the app can still start.
		'datagrid.psm1' = @{ 
			Priority = 'Important'; 
			Order = 6; 
			Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1');
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'datagrid.psm1');
			Base64Content = '
				
			'
		}
		
		# Optional modules: Add extra, non-essential features. Failure is logged, but the app still starts.
		'launch.psm1'   = @{ 
			Priority = 'Optional';  
			Order = 7; 
			Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'launch.psm1');
			Base64Content = '
				PCMgbGF1bmNoLnBzbTEgDQoJLlNZTk9QU0lTDQoJCUNsaWVudCBMYXVuY2hlciBNb2R1bGUgZm9yIEVudHJvcGlhIERhc2hib2FyZC4NCg0KCS5ERVNDUklQVElPTg0KCQlUaGlzIG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbmFsaXR5IHRvIGxhdW5jaCBhbmQgbWFuYWdlIEVudHJvcGlhIFVuaXZlcnNlIGdhbWUgY2xpZW50czoNCgkJLSBMYXVuY2hlcyBtdWx0aXBsZSBnYW1lIGNsaWVudHMgYmFzZWQgb24gY29uZmlndXJhdGlvbg0KCQktIE1vbml0b3JzIGNsaWVudCBwcm9jZXNzZXMgYW5kIHdpbmRvdyBzdGF0ZXMNCgkJLSBQcm92aWRlcyB0aHJlYWQtc2FmZSBsb2dnaW5nIG9mIGxhdW5jaCBvcGVyYXRpb25zDQoJCS0gSGFuZGxlcyBjbGVhbnVwIG9mIHJlc291cmNlcyB3aGVuIG9wZXJhdGlvbnMgY29tcGxldGUNCg0KCS5OT1RFUw0KCQlBdXRob3I6IEltbW9ydGFsIC8gRGl2aW5lDQoJCVZlcnNpb246IDEuMS4zDQoJCVJlcXVpcmVzOiBQb3dlclNoZWxsIDUuMSwgLk5FVCBGcmFtZXdvcmsgNC41KywgY2xhc3Nlcy5wc20xDQojPg0KDQojcmVnaW9uIENvbmZpZ3VyYXRpb24gYW5kIENvbnN0YW50cw0KDQojIERlZmF1bHQgbGF1bmNoZXIgdGltZW91dCBpbiBzZWNvbmRzDQokc2NyaXB0OkxhdW5jaGVyVGltZW91dCA9IDMwDQoNCiMgRGVmYXVsdCBkZWxheSBiZXR3ZWVuIGNsaWVudCBsYXVuY2hlcyBpbiBzZWNvbmRzDQokc2NyaXB0OkxhdW5jaERlbGF5ID0gNQ0KDQojIE1heGltdW0gcmV0cnkgYXR0ZW1wdHMNCiRzY3JpcHQ6TWF4UmV0cnlBdHRlbXB0cyA9IDMNCg0KJHNjcmlwdDpQcm9jZXNzQ29uZmlnID0gQHsNCglNYXhSZXRyaWVzID0gMw0KCVJldHJ5RGVsYXkgPSA1MDAgIyBtaWxsaXNlY29uZHMNCglUaW1lb3V0ICAgID0gMzAwMDAgIyBtaWxsaXNlY29uZHMNCn0NCg0KI2VuZHJlZ2lvbiBDb25maWd1cmF0aW9uIGFuZCBDb25zdGFudHMNCg0KI3JlZ2lvbiBMYXVuY2ggTWFuYWdlbWVudCBGdW5jdGlvbnMNCg0KZnVuY3Rpb24gU3RhcnQtQ2xpZW50TGF1bmNoDQp7DQoJPCMNCgkuU1lOT1BTSVMNCglJbml0aWFsaXplcyBhbmQgc3RhcnRzIHRoZSBjbGllbnQgbGF1bmNoIHByb2Nlc3MuDQoJDQoJLkRFU0NSSVBUSU9ODQoJUHJlcGFyZXMgYW5kIHN0YXJ0cyB0aGUgYXN5bmNocm9ub3VzIGxhdW5jaCBvcGVyYXRpb24gZm9yIEVudHJvcGlhIGNsaWVudHMuDQoJIz4NCglbQ21kbGV0QmluZGluZygpXQ0KCXBhcmFtKCkNCgkNCgkjIFByZXZlbnQgbXVsdGlwbGUgbGF1bmNoZXMNCglpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuU3RhdGUuTGF1bmNoQWN0aXZlKQ0KCXsNCgkJW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCdMYXVuY2ggb3BlcmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MnLCAnSW5mb3JtYXRpb24nLA0KCQkJW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkluZm9ybWF0aW9uKQ0KCQlyZXR1cm4NCgl9DQoJDQoJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuU3RhdGUuTGF1bmNoQWN0aXZlID0gJHRydWUNCgkNCgkjIENyZWF0ZSBhIG5ldyBvcmRlcmVkIGRpY3Rpb25hcnkgZm9yIHNldHRpbmdzDQoJJHNldHRpbmdzRGljdCA9IFtvcmRlcmVkXUB7fQ0KCQ0KCSMgQ29weSBzZXR0aW5ncyBmcm9tIGdsb2JhbCBjb25maWcNCglmb3JlYWNoICgkc2VjdGlvbiBpbiAkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5Db25maWcuS2V5cykNCgl7DQoJCSRzZXR0aW5nc0RpY3RbJHNlY3Rpb25dID0gW29yZGVyZWRdQHt9DQoJCWZvcmVhY2ggKCRrZXkgaW4gJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuQ29uZmlnWyRzZWN0aW9uXS5LZXlzKQ0KCQl7DQoJCQkkc2V0dGluZ3NEaWN0WyRzZWN0aW9uXVska2V5XSA9ICRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLkNvbmZpZ1skc2VjdGlvbl1bJGtleV0NCgkJfQ0KCX0NCgkNCgkjIEVuc3VyZSBsYXRlc3QgY29uZmlnIGlzIGxvYWRlZA0KCVJlYWQtQ29uZmlnDQoJDQoJIyBHZXQgcmVxdWlyZWQgc2V0dGluZ3MNCgkkbmV1ek5hbWUgPSAkc2V0dGluZ3NEaWN0WydQcm9jZXNzTmFtZSddWydQcm9jZXNzTmFtZSddDQoJJGxhdW5jaGVyUGF0aCA9ICRzZXR0aW5nc0RpY3RbJ0xhdW5jaGVyUGF0aCddWydMYXVuY2hlclBhdGgnXQ0KCQ0KCVdyaXRlLVZlcmJvc2UgIkxBVU5DSDogVXNpbmcgUHJvY2Vzc05hbWU6ICRuZXV6TmFtZSIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCVdyaXRlLVZlcmJvc2UgIkxBVU5DSDogVXNpbmcgTGF1bmNoZXJQYXRoOiAkbGF1bmNoZXJQYXRoIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJDQoJIyBWYWxpZGF0ZSBzZXR0aW5ncw0KCWlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkbmV1ek5hbWUpIC1vciBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkbGF1bmNoZXJQYXRoKSAtb3IgLW5vdCAoVGVzdC1QYXRoICRsYXVuY2hlclBhdGgpKQ0KCXsNCgkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBJbnZhbGlkIGxhdW5jaCBzZXR0aW5ncycgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuU3RhdGUuTGF1bmNoQWN0aXZlID0gJGZhbHNlDQoJCXJldHVybg0KCX0NCgkNCgkjIEdldCBtYXggY2xpZW50cyBzZXR0aW5nDQoJJG1heENsaWVudHMgPSAxDQoJaWYgKCRzZXR0aW5nc0RpY3RbJ01heENsaWVudHMnXS5Db250YWlucygnTWF4Q2xpZW50cycpIC1hbmQgLW5vdCBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkc2V0dGluZ3NEaWN0WydNYXhDbGllbnRzJ11bJ01heENsaWVudHMnXSkpDQoJew0KCQkkbWF4Q2xpZW50cyA9IFtpbnRdKCRzZXR0aW5nc0RpY3RbJ01heENsaWVudHMnXVsnTWF4Q2xpZW50cyddKQ0KCX0NCgkNCgkjIFByZXBhcmUgcnVuc3BhY2UgZm9yIGJhY2tncm91bmQgcHJvY2Vzc2luZw0KCSRsb2NhbFJ1bnNwYWNlID0gJG51bGwNCgl0cnkNCgl7DQoJCSMgQ3JlYXRlIGEgcnVuc3BhY2Ugd2l0aCBBcGFydG1lbnRTdGF0ZS5TVEEgdG8gZW5zdXJlIHByb3BlciBVSSBpbnRlcmFjdGlvbg0KCQkkbG9jYWxSdW5zcGFjZSA9IFtTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlcy5SdW5zcGFjZUZhY3RvcnldOjpDcmVhdGVSdW5zcGFjZVBvb2woMSwgMSkNCgkJJGxvY2FsUnVuc3BhY2UuQXBhcnRtZW50U3RhdGUgPSBbU3lzdGVtLlRocmVhZGluZy5BcGFydG1lbnRTdGF0ZV06OlNUQQ0KCQkkbG9jYWxSdW5zcGFjZS5UaHJlYWRPcHRpb25zID0gW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUnVuc3BhY2VzLlBTVGhyZWFkT3B0aW9uc106OlJldXNlVGhyZWFkDQoJCSRsb2NhbFJ1bnNwYWNlLk9wZW4oKQ0KCX0NCgljYXRjaA0KCXsNCgkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiBFcnJvciBjcmVhdGluZyBydW5zcGFjZTogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlN0YXRlLkxhdW5jaEFjdGl2ZSA9ICRmYWxzZQ0KCQlyZXR1cm4NCgl9DQoJDQoJJGxhdW5jaFBTID0gW1Bvd2VyU2hlbGxdOjpDcmVhdGUoKQ0KCSRsYXVuY2hQUy5SdW5zcGFjZVBvb2wgPSAkbG9jYWxSdW5zcGFjZQ0KCQ0KCSMgU3RvcmUgcmVmZXJlbmNlcyBnbG9iYWxseSBmb3IgY2xlYW51cA0KCSRnbG9iYWw6TGF1bmNoUmVzb3VyY2VzID0gQHsNCgkJUG93ZXJTaGVsbEluc3RhbmNlICA9ICRsYXVuY2hQUw0KCQlSdW5zcGFjZSAgICAgICAgICAgID0gJGxvY2FsUnVuc3BhY2UNCgkJRXZlbnRTdWJzY3JpcHRpb25JZCA9ICRudWxsDQoJCUV2ZW50U3Vic2NyaWJlciAgICAgPSAkbnVsbA0KCQlBc3luY1Jlc3VsdCAgICAgICAgID0gJG51bGwNCgkJU3RhcnRUaW1lICAgICAgICAgICA9IFtEYXRlVGltZV06Ok5vdw0KCX0NCgkNCgkkbGF1bmNoUFMuQWRkU2NyaXB0KHsNCgkJCXBhcmFtKA0KCQkJCSRTZXR0aW5ncywNCgkJCQkkTGF1bmNoZXJQYXRoLA0KCQkJCSROZXV6TmFtZSwNCgkJCQkkTWF4Q2xpZW50cywNCgkJCQkkSW5pUGF0aA0KCQkJKQ0KCQkNCgkJCXRyeQ0KCQkJew0KCQkJCVNldC1FeGVjdXRpb25Qb2xpY3kgLUV4ZWN1dGlvblBvbGljeSBCeXBhc3MgLVNjb3BlIFByb2Nlc3MgLUZvcmNlDQoJCQkNCgkJCQkkY2xhc3NlcyA9IEAnDQoJCQkJdXNpbmcgU3lzdGVtOw0KCQkJDQoJCQkJcHVibGljIGNsYXNzIENvbG9yV3JpdGVyDQoJCQkJew0KCQkJCQlwdWJsaWMgc3RhdGljIHZvaWQgV3JpdGVDb2xvcmVkKHN0cmluZyBtZXNzYWdlLCBzdHJpbmcgY29sb3IpDQoJCQkJCXsNCgkJCQkJCUNvbnNvbGVDb2xvciBvcmlnaW5hbENvbG9yID0gQ29uc29sZS5Gb3JlZ3JvdW5kQ29sb3I7DQoJCQkJCQkNCgkJCQkJCXN3aXRjaChjb2xvci5Ub0xvd2VyKCkpDQoJCQkJCQl7DQoJCQkJCQkJY2FzZSAiZGFya2dyYXkiOg0KCQkJCQkJCQlDb25zb2xlLkZvcmVncm91bmRDb2xvciA9IENvbnNvbGVDb2xvci5EYXJrR3JheTsNCgkJCQkJCQkJYnJlYWs7DQoJCQkJCQkJY2FzZSAieWVsbG93IjoNCgkJCQkJCQkJQ29uc29sZS5Gb3JlZ3JvdW5kQ29sb3IgPSBDb25zb2xlQ29sb3IuWWVsbG93Ow0KCQkJCQkJCQlicmVhazsNCgkJCQkJCQljYXNlICJyZWQiOg0KCQkJCQkJCQlDb25zb2xlLkZvcmVncm91bmRDb2xvciA9IENvbnNvbGVDb2xvci5SZWQ7DQoJCQkJCQkJCWJyZWFrOw0KCQkJCQkJCWNhc2UgImN5YW4iOg0KCQkJCQkJCQlDb25zb2xlLkZvcmVncm91bmRDb2xvciA9IENvbnNvbGVDb2xvci5DeWFuOw0KCQkJCQkJCQlicmVhazsNCgkJCQkJCQljYXNlICJncmVlbiI6DQoJCQkJCQkJCUNvbnNvbGUuRm9yZWdyb3VuZENvbG9yID0gQ29uc29sZUNvbG9yLkdyZWVuOw0KCQkJCQkJCQlicmVhazsNCgkJCQkJCQlkZWZhdWx0Og0KCQkJCQkJCQlDb25zb2xlLkZvcmVncm91bmRDb2xvciA9IENvbnNvbGVDb2xvci5EYXJrR3JheTsNCgkJCQkJCQkJYnJlYWs7DQoJCQkJCQl9DQoJCQkJCQkNCgkJCQkJCUNvbnNvbGUuV3JpdGVMaW5lKG1lc3NhZ2UpOw0KCQkJCQkJQ29uc29sZS5Gb3JlZ3JvdW5kQ29sb3IgPSBvcmlnaW5hbENvbG9yOw0KCQkJCQl9DQoJCQkJfQ0KJ0ANCgkJCQ0KCQkJCUFkZC1UeXBlIC1UeXBlRGVmaW5pdGlvbiAkY2xhc3NlcyAtTGFuZ3VhZ2UgJ0NTaGFycCcNCgkJCQ0KCQkJCSMgQ3JlYXRlIGEgZnVuY3Rpb24gdGhhdCBvdmVycmlkZXMgdGhlIGJ1aWx0LWluIFdyaXRlLVZlcmJvc2UNCgkJCQlmdW5jdGlvbiBXcml0ZS1WZXJib3NlDQoJCQkJew0KCQkJCQlbQ21kbGV0QmluZGluZygpXQ0KCQkJCQlwYXJhbSgNCgkJCQkJCVtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUsIFBvc2l0aW9uID0gMCldDQoJCQkJCQlbc3RyaW5nXSRPYmplY3QsDQoJCQkJDQoJCQkJCQlbUGFyYW1ldGVyKCldDQoJCQkJCQlbVmFsaWRhdGVTZXQoJ2RhcmtncmF5JywgJ3llbGxvdycsICdyZWQnLCAnY3lhbicsICdncmVlbicpXQ0KCQkJCQkJW3N0cmluZ10kRm9yZWdyb3VuZENvbG9yID0gJ2RhcmtncmF5Jw0KCQkJCQkpDQoJCQkJDQoJCQkJCVtDb2xvcldyaXRlcl06OldyaXRlQ29sb3JlZCgkT2JqZWN0LCAkRm9yZWdyb3VuZENvbG9yKQ0KCQkJCX0NCgkJCQ0KCQkJCSRsYXVuY2hlckRpciA9IFtTeXN0ZW0uSU8uUGF0aF06OkdldERpcmVjdG9yeU5hbWUoJExhdW5jaGVyUGF0aCkNCgkJCQkkbGF1bmNoZXJOYW1lID0gW1N5c3RlbS5JTy5QYXRoXTo6R2V0RmlsZU5hbWVXaXRob3V0RXh0ZW5zaW9uKCRMYXVuY2hlclBhdGgpDQoJCQkNCgkJCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IENoZWNraW5nIGNsaWVudHMuLi4nIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkkY3VycmVudENsaWVudHMgPSBAKEdldC1Qcm9jZXNzIC1OYW1lICROZXV6TmFtZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkNCgkJCQkkcENvdW50ID0gJGN1cnJlbnRDbGllbnRzLkNvdW50DQoJCQkNCgkJCQlpZiAoJHBDb3VudCAtZ3QgMCkNCgkJCQl7DQoJCQkJCVdyaXRlLVZlcmJvc2UgIkxBVU5DSDogRm91bmQgJHBDb3VudCBjbGllbnQocykiIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQl9DQoJCQkJZWxzZQ0KCQkJCXsNCgkJCQkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBObyBjbGllbnRzIGZvdW5kJyAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJfQ0KCQkJDQoJCQkJaWYgKCRwQ291bnQgLWdlICRNYXhDbGllbnRzKQ0KCQkJCXsNCgkJCQkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiBNYXggcmVhY2hlZDogJE1heENsaWVudHMiIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkJcmV0dXJuDQoJCQkJfQ0KCQkJDQoJCQkJJGNsaWVudHNUb0xhdW5jaCA9ICRNYXhDbGllbnRzIC0gJHBDb3VudA0KCQkJCVdyaXRlLVZlcmJvc2UgIkxBVU5DSDogTGF1bmNoaW5nICRjbGllbnRzVG9MYXVuY2ggbW9yZSIgLUZvcmVncm91bmRDb2xvciBDeWFuDQoJCQkNCgkJCQkjIFN0b3JlIG9ubHkgdGhlIElEcywgbm90IHRoZSBwcm9jZXNzIG9iamVjdHMNCgkJCQkkZXhpc3RpbmdQSURzID0gJGN1cnJlbnRDbGllbnRzIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgSWQNCgkJCQlpZiAoJGV4aXN0aW5nUElEcy5Db3VudCAtZ3QgMCkNCgkJCQl7DQoJCQkJCVdyaXRlLVZlcmJvc2UgIkxBVU5DSDogVHJhY2tpbmcgUElEczogJCgkZXhpc3RpbmdQSURzIC1qb2luICcsJykiIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQl9DQoJCQkNCgkJCQkjIENsZWFyIHByb2Nlc3Mgb2JqZWN0cyB0byBhdm9pZCBrZWVwaW5nIHJlZmVyZW5jZXMNCgkJCQkkY3VycmVudENsaWVudHMgPSAkbnVsbA0KCQkJDQoJCQkJZm9yICgkYXR0ZW1wdCA9IDE7ICRhdHRlbXB0IC1sZSAkY2xpZW50c1RvTGF1bmNoOyAkYXR0ZW1wdCsrKQ0KCQkJCXsNCgkJCQkNCgkJCQkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiBDbGllbnQgJGF0dGVtcHQvJGNsaWVudHNUb0xhdW5jaCIgLUZvcmVncm91bmRDb2xvciBDeWFuDQoJCQkJDQoJCQkJCSMgQ2hlY2sgaWYgbGF1bmNoZXIgaXMgYWxyZWFkeSBydW5uaW5nDQoJCQkJCSRsYXVuY2hlclJ1bm5pbmcgPSAkbnVsbCAtbmUgKEdldC1Qcm9jZXNzIC1OYW1lICRsYXVuY2hlck5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpDQoJCQkJCWlmICgkbGF1bmNoZXJSdW5uaW5nKQ0KCQkJCQl7DQoJCQkJCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IExhdW5jaGVyIHJ1bm5pbmcnIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkJCVdyaXRlLVZlcmJvc2UgJ0xBVU5DSDogV2FpdGluZyAoMzBzIHRpbWVvdXQpJyAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJCQkkbGF1bmNoZXJUaW1lb3V0ID0gTmV3LVRpbWVTcGFuIC1TZWNvbmRzIDMwDQoJCQkJCQkkbGF1bmNoZXJTdG9wd2F0Y2ggPSBbU3lzdGVtLkRpYWdub3N0aWNzLlN0b3B3YXRjaF06OlN0YXJ0TmV3KCkNCgkJCQkJCSRwcm9ncmVzc1JlcG9ydGVkID0gQCg1LCAxMCwgMTUsIDIwLCAyNSkNCgkJCQkJDQoJCQkJCQl3aGlsZSAoJG51bGwgLW5lIChHZXQtUHJvY2VzcyAtTmFtZSAkbGF1bmNoZXJOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSkNCgkJCQkJCXsNCgkJCQkJCQkkZWxhcHNlZFNlY29uZHMgPSBbaW50XSRsYXVuY2hlclN0b3B3YXRjaC5FbGFwc2VkLlRvdGFsU2Vjb25kcw0KCQkJCQkJDQoJCQkJCQkJaWYgKCRlbGFwc2VkU2Vjb25kcyAtaW4gJHByb2dyZXNzUmVwb3J0ZWQpDQoJCQkJCQkJew0KCQkJCQkJCQkkcHJvZ3Jlc3NSZXBvcnRlZCA9ICRwcm9ncmVzc1JlcG9ydGVkIHwgV2hlcmUtT2JqZWN0IHsgJF8gLW5lICRlbGFwc2VkU2Vjb25kcyB9DQoJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIkxBVU5DSDogV2FpdGluZy4gKCRlbGFwc2VkU2Vjb25kcyBzIC8gMzApIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJCQkJfQ0KCQkJCQkJDQoJCQkJCQkJaWYgKCRsYXVuY2hlclN0b3B3YXRjaC5FbGFwc2VkIC1ndCAkbGF1bmNoZXJUaW1lb3V0KQ0KCQkJCQkJCXsNCgkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBUaW1lb3V0IC0ga2lsbGluZycgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCgkJCQkJCQkJdHJ5DQoJCQkJCQkJCXsNCgkJCQkJCQkJCVN0b3AtUHJvY2VzcyAtTmFtZSAkbGF1bmNoZXJOYW1lIC1Gb3JjZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBUZXJtaW5hdGVkJyAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJCQkJCX0NCgkJCQkJCQkJY2F0Y2gNCgkJCQkJCQkJew0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQkJfQ0KCQkJCQkJCQlTdGFydC1TbGVlcCAtU2Vjb25kcyAxDQoJCQkJCQkJCWJyZWFrDQoJCQkJCQkJfQ0KCQkJCQkJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNTAwDQoJCQkJCQl9DQoJCQkJCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IExhdW5jaGVyIGNsb3NlZCcgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQl9DQoJCQkJDQoJCQkJCSMgU3RhcnQgbGF1bmNoZXINCgkJCQkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBTdGFydGluZyBsYXVuY2hlcicgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkkbGF1bmNoZXJQcm9jZXNzID0gU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggJExhdW5jaGVyUGF0aCAtV29ya2luZ0RpcmVjdG9yeSAkbGF1bmNoZXJEaXIgLVBhc3NUaHJ1DQoJCQkJCSRsYXVuY2hlclBJRCA9ICRsYXVuY2hlclByb2Nlc3MuSWQNCgkJCQkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiBQSUQ6ICRsYXVuY2hlclBJRCIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQ0KCQkJCQkjIFJlbGVhc2UgdGhlIHByb2Nlc3Mgb2JqZWN0IGltbWVkaWF0ZWx5DQoJCQkJCSRsYXVuY2hlclByb2Nlc3MgPSAkbnVsbA0KCQkJCQ0KCQkJCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IEluaXRpYWxpemluZy4uLicgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQlTdGFydC1TbGVlcCAtU2Vjb25kcyAxDQoJCQkJDQoJCQkJCSMgTW9uaXRvciBsYXVuY2hlciBwcm9jZXNzDQoJCQkJCSR0aW1lb3V0ID0gTmV3LVRpbWVTcGFuIC1NaW51dGVzIDINCgkJCQkJJHN0b3B3YXRjaCA9IFtTeXN0ZW0uRGlhZ25vc3RpY3MuU3RvcHdhdGNoXTo6U3RhcnROZXcoKQ0KCQkJCQkkbGF1bmNoZXJDbG9zZWQgPSAkZmFsc2UNCgkJCQkJJGxhdW5jaGVyQ2xvc2VkTm9ybWFsbHkgPSAkZmFsc2UNCgkJCQkJJHByb2dyZXNzUmVwb3J0ZWQgPSBAKDEsIDUsIDE1LCAzMCwgNjAsIDkwLCAxMjApDQoJCQkJDQoJCQkJCVdyaXRlLVZlcmJvc2UgJ0xBVU5DSDogTW9uaXRvcmluZyAoMm1pbiknIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkJd2hpbGUgKC1ub3QgJGxhdW5jaGVyQ2xvc2VkIC1hbmQgJHN0b3B3YXRjaC5FbGFwc2VkIC1sdCAkdGltZW91dCkNCgkJCQkJew0KCQkJCQkJJGVsYXBzZWRTZWNvbmRzID0gW2ludF0kc3RvcHdhdGNoLkVsYXBzZWQuVG90YWxTZWNvbmRzDQoJCQkJCQlpZiAoJGVsYXBzZWRTZWNvbmRzIC1pbiAkcHJvZ3Jlc3NSZXBvcnRlZCkNCgkJCQkJCXsNCgkJCQkJCQkkcHJvZ3Jlc3NSZXBvcnRlZCA9ICRwcm9ncmVzc1JlcG9ydGVkIHwgV2hlcmUtT2JqZWN0IHsgJF8gLW5lICRlbGFwc2VkU2Vjb25kcyB9DQoJCQkJCQkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiBDbG9zZSBkYXNoYm9hcmQgaWYgcGF0Y2hpbmchIExvbmcgUGF0Y2hpbmcgb3BlcmF0aW9ucyBtYXkgYmUgY2FuY2VsZWQgYnkgdGhlIGRhc2hib2FyZCAoJGVsYXBzZWRTZWNvbmRzIHMgLyAxMjApIiAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KCQkJCQkJfQ0KCQkJCQkNCgkJCQkJCSMgR2V0IHByb2Nlc3MgaW5mbyB3aXRob3V0IHN0b3JpbmcgdGhlIG9iamVjdA0KCQkJCQkJJGxhdW5jaGVyRXhpc3RzID0gJGZhbHNlDQoJCQkJCQkkbGF1bmNoZXJSZXNwb25kaW5nID0gJHRydWUNCgkJCQkJDQoJCQkJCQl0cnkNCgkJCQkJCXsNCgkJCQkJCQkkdGVtcFByb2Nlc3MgPSBHZXQtUHJvY2VzcyAtSWQgJGxhdW5jaGVyUElEIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQoJCQkJCQkJaWYgKCR0ZW1wUHJvY2VzcykNCgkJCQkJCQl7DQoJCQkJCQkJCSRsYXVuY2hlckV4aXN0cyA9ICR0cnVlDQoJCQkJCQkJCSRsYXVuY2hlclJlc3BvbmRpbmcgPSAkdGVtcFByb2Nlc3MuUmVzcG9uZGluZw0KCQkJCQkJCQkjIFJlbGVhc2UgdGhlIHJlZmVyZW5jZSBpbW1lZGlhdGVseQ0KCQkJCQkJCQkkdGVtcFByb2Nlc3MgPSAkbnVsbA0KCQkJCQkJCX0NCgkJCQkJCX0NCgkJCQkJCWNhdGNoDQoJCQkJCQl7DQoJCQkJCQkJJGxhdW5jaGVyRXhpc3RzID0gJGZhbHNlDQoJCQkJCQl9DQoJCQkJCQ0KCQkJCQkJaWYgKC1ub3QgJGxhdW5jaGVyRXhpc3RzKQ0KCQkJCQkJew0KCQkJCQkJCSRsYXVuY2hlckNsb3NlZCA9ICR0cnVlDQoJCQkJCQkJJGxhdW5jaGVyQ2xvc2VkTm9ybWFsbHkgPSAkdHJ1ZQ0KCQkJCQkJfQ0KCQkJCQkJZWxzZQ0KCQkJCQkJew0KCQkJCQkJCWlmICgtbm90ICRsYXVuY2hlclJlc3BvbmRpbmcpDQoJCQkJCQkJew0KCQkJCQkJCQkkZWxhcHNlZFRpbWUgPSBbbWF0aF06OlJvdW5kKCRzdG9wd2F0Y2guRWxhcHNlZC5Ub3RhbFNlY29uZHMsIDEpDQoJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIkxBVU5DSDogTm90IHJlc3BvbmRpbmcgJGVsYXBzZWRUaW1lIiAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KCQkJCQkJCQl0cnkNCgkJCQkJCQkJew0KCQkJCQkJCQkJU3RvcC1Qcm9jZXNzIC1JZCAkbGF1bmNoZXJQSUQgLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQoJCQkJCQkJCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IFRlcm1pbmF0ZWQnIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQkJCX0NCgkJCQkJCQkJY2F0Y2gNCgkJCQkJCQkJew0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQkJfQ0KCQkJCQkJCQkkbGF1bmNoZXJDbG9zZWQgPSAkdHJ1ZQ0KCQkJCQkJCQkkbGF1bmNoZXJDbG9zZWROb3JtYWxseSA9ICRmYWxzZQ0KCQkJCQkJCX0NCgkJCQkJCX0NCgkJCQkJDQoJCQkJCQlpZiAoLW5vdCAkbGF1bmNoZXJDbG9zZWQpDQoJCQkJCQl7DQoJCQkJCQkJU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyA1MDANCgkJCQkJCX0NCgkJCQkJfQ0KCQkJCQ0KCQkJCQlpZiAoLW5vdCAkbGF1bmNoZXJDbG9zZWQpDQoJCQkJCXsNCgkJCQkJCVdyaXRlLVZlcmJvc2UgJ0xBVU5DSDogVGltZW91dCAtIGtpbGxpbmcnIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQl0cnkNCgkJCQkJCXsNCgkJCQkJCQlTdG9wLVByb2Nlc3MgLUlkICRsYXVuY2hlclBJRCAtRm9yY2UgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCgkJCQkJCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IFRlcm1pbmF0ZWQnIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQl9DQoJCQkJCQljYXRjaA0KCQkJCQkJew0KCQkJCQkJCVdyaXRlLVZlcmJvc2UgIkxBVU5DSDogJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkiIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJCQl9DQoJCQkJCQkkbGF1bmNoZXJDbG9zZWROb3JtYWxseSA9ICRmYWxzZQ0KCQkJCQl9DQoJCQkJDQoJCQkJCSMgV2FpdCBmb3IgY2xpZW50IHRvIHN0YXJ0DQoJCQkJCSRjbGllbnRTdGFydGVkID0gJGZhbHNlDQoJCQkJCSRuZXdDbGllbnRQSUQgPSAwDQoJCQkJCSRzdG9wd2F0Y2guUmVzdGFydCgpDQoJCQkJCSRjbGllbnREZXRlY3Rpb25UaW1lb3V0ID0gTmV3LVRpbWVTcGFuIC1TZWNvbmRzIDMwDQoJCQkJCSRwcm9ncmVzc1JlcG9ydGVkID0gQCg1LCAxMCwgMTUsIDIwLCAyNSkNCgkJCQkNCgkJCQkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBXYWl0aW5nIGZvciBjbGllbnQnIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkJd2hpbGUgKC1ub3QgJGNsaWVudFN0YXJ0ZWQgLWFuZCAkc3RvcHdhdGNoLkVsYXBzZWQgLWx0ICRjbGllbnREZXRlY3Rpb25UaW1lb3V0KQ0KCQkJCQl7DQoJCQkJCQkkZWxhcHNlZFNlY29uZHMgPSBbaW50XSRzdG9wd2F0Y2guRWxhcHNlZC5Ub3RhbFNlY29uZHMNCgkJCQkJCWlmICgkZWxhcHNlZFNlY29uZHMgLWluICRwcm9ncmVzc1JlcG9ydGVkKQ0KCQkJCQkJew0KCQkJCQkJCSRwcm9ncmVzc1JlcG9ydGVkID0gJHByb2dyZXNzUmVwb3J0ZWQgfCBXaGVyZS1PYmplY3QgeyAkXyAtbmUgJGVsYXBzZWRTZWNvbmRzIH0NCgkJCQkJCQlXcml0ZS1WZXJib3NlICJMQVVOQ0g6IFdhaXRpbmcuICgkZWxhcHNlZFNlY29uZHMgcyAvIDMwKSIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJfQ0KCQkJCQkNCgkJCQkJCSMgR2V0IGN1cnJlbnQgY2xpZW50IFBJRHMgd2l0aG91dCBrZWVwaW5nIHByb2Nlc3Mgb2JqZWN0cw0KCQkJCQkJJGN1cnJlbnRQSURzID0gQChHZXQtUHJvY2VzcyAtTmFtZSAkTmV1ek5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBJZCkNCgkJCQkJCSRuZXdQSURzID0gJGN1cnJlbnRQSURzIHwgV2hlcmUtT2JqZWN0IHsgJF8gLW5vdGluICRleGlzdGluZ1BJRHMgfQ0KCQkJCQkNCgkJCQkJCWlmICgkbmV3UElEcy5Db3VudCAtZ3QgMCkNCgkJCQkJCXsNCgkJCQkJCQl0cnkNCgkJCQkJCQl7DQoJCQkJCQkJCSMgR2V0IHRoZSBuZXdlc3QgY2xpZW50IGJ5IGdldHRpbmcgcHJvY2VzcyBpbmZvIGFuZCBzb3J0aW5nLCBidXQgZG9uInQga2VlcCByZWZlcmVuY2VzDQoJCQkJCQkJCSR0ZW1wTmV3Q2xpZW50cyA9IEAoR2V0LVByb2Nlc3MgLUlkICRuZXdQSURzIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKQ0KCQkJCQkJCQkkdGVtcE5ld0NsaWVudCA9ICR0ZW1wTmV3Q2xpZW50cyB8IFNvcnQtT2JqZWN0IFN0YXJ0VGltZSAtRGVzY2VuZGluZyB8IFNlbGVjdC1PYmplY3QgLUZpcnN0IDENCgkJCQkJCQkNCgkJCQkJCQkJaWYgKCR0ZW1wTmV3Q2xpZW50KQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQkkbmV3Q2xpZW50UElEID0gJHRlbXBOZXdDbGllbnQuSWQNCgkJCQkJCQkJCSRjbGllbnRTdGFydGVkID0gJHRydWUNCgkJCQkJCQkJCSRleGlzdGluZ1BJRHMgKz0gJG5ld0NsaWVudFBJRA0KCQkJCQkJCQkJJGVsYXBzZWRUaW1lID0gW21hdGhdOjpSb3VuZCgkc3RvcHdhdGNoLkVsYXBzZWQuVG90YWxTZWNvbmRzLCAxKQ0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiBDbGllbnQgc3RhcnRlZCBQSUQ6ICRuZXdDbGllbnRQSUQiIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkJCQkJDQoJCQkJCQkJCQkjIFJlbGVhc2UgcmVmZXJlbmNlcw0KCQkJCQkJCQkJJHRlbXBOZXdDbGllbnQgPSAkbnVsbA0KCQkJCQkJCQkJJHRlbXBOZXdDbGllbnRzID0gJG51bGwNCgkJCQkJCQkJfQ0KCQkJCQkJCX0NCgkJCQkJCQljYXRjaA0KCQkJCQkJCXsNCgkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiBFcnJvciBzb3J0aW5nIGNsaWVudHM6ICQoJF8uRXhjZXB0aW9uLk1lc3NhZ2UpIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJCQkJCQkjIFRyeSB3aXRob3V0IHNvcnRpbmcNCgkJCQkJCQkJaWYgKCRuZXdQSURzLkNvdW50IC1ndCAwKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQkkbmV3Q2xpZW50UElEID0gJG5ld1BJRHNbMF0NCgkJCQkJCQkJCSRjbGllbnRTdGFydGVkID0gJHRydWUNCgkJCQkJCQkJCSRleGlzdGluZ1BJRHMgKz0gJG5ld0NsaWVudFBJRA0KCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiBVc2luZyBjbGllbnQgUElEOiAkbmV3Q2xpZW50UElEIChmYWxsYmFjaykiIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQkJCX0NCgkJCQkJCQl9DQoJCQkJCQkNCgkJCQkJCQlpZiAoJGNsaWVudFN0YXJ0ZWQpDQoJCQkJCQkJew0KCQkJCQkJCQkjIFdhaXQgZm9yIHdpbmRvdyB0byBiZSByZWFkeQ0KCQkJCQkJCQkkd2luZG93UmVhZHkgPSAkZmFsc2UNCgkJCQkJCQkJJGlubmVyVGltZW91dCA9IE5ldy1UaW1lU3BhbiAtU2Vjb25kcyAzMA0KCQkJCQkJCQkkaW5uZXJTdG9wd2F0Y2ggPSBbU3lzdGVtLkRpYWdub3N0aWNzLlN0b3B3YXRjaF06OlN0YXJ0TmV3KCkNCgkJCQkJCQkJJGlubmVyUHJvZ3Jlc3NSZXBvcnRlZCA9IEAoNSwgMTAsIDE1LCAyMCwgMjUpDQoJCQkJCQkJDQoJCQkJCQkJCVdyaXRlLVZlcmJvc2UgJ0xBVU5DSDogV2FpdGluZyBmb3Igd2luZG93JyAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJCQkJCXdoaWxlICgtbm90ICR3aW5kb3dSZWFkeSAtYW5kICRpbm5lclN0b3B3YXRjaC5FbGFwc2VkIC1sdCAkaW5uZXJUaW1lb3V0KQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQkkaW5uZXJFbGFwc2VkU2Vjb25kcyA9IFtpbnRdJGlubmVyU3RvcHdhdGNoLkVsYXBzZWQuVG90YWxTZWNvbmRzDQoJCQkJCQkJCQlpZiAoJGlubmVyRWxhcHNlZFNlY29uZHMgLWluICRpbm5lclByb2dyZXNzUmVwb3J0ZWQpDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJJGlubmVyUHJvZ3Jlc3NSZXBvcnRlZCA9ICRpbm5lclByb2dyZXNzUmVwb3J0ZWQgfCBXaGVyZS1PYmplY3QgeyAkXyAtbmUgJGlubmVyRWxhcHNlZFNlY29uZHMgfQ0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgIkxBVU5DSDogV2FpdGluZy4gKCRpbm5lckVsYXBzZWRTZWNvbmRzIHMgLyAzMCkiIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkJCQkJCX0NCgkJCQkJCQkJDQoJCQkJCQkJCQkjIENoZWNrIGNsaWVudCB3aXRob3V0IGtlZXBpbmcgcmVmZXJlbmNlcw0KCQkJCQkJCQkJJGNsaWVudEV4aXN0cyA9ICRmYWxzZQ0KCQkJCQkJCQkJJGNsaWVudFJlc3BvbmRpbmcgPSAkZmFsc2UNCgkJCQkJCQkJCSRjbGllbnRXaW5kb3dIYW5kbGUgPSBbSW50UHRyXTo6WmVybw0KCQkJCQkJCQkJJGNsaWVudEhhbmRsZSA9IFtJbnRQdHJdOjpaZXJvDQoJCQkJCQkJCQ0KCQkJCQkJCQkJdHJ5DQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJJHRlbXBDbGllbnQgPSBHZXQtUHJvY2VzcyAtSWQgJG5ld0NsaWVudFBJRCAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KCQkJCQkJCQkJCWlmICgkdGVtcENsaWVudCkNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCSRjbGllbnRFeGlzdHMgPSAkdHJ1ZQ0KCQkJCQkJCQkJCQkkY2xpZW50UmVzcG9uZGluZyA9ICR0ZW1wQ2xpZW50LlJlc3BvbmRpbmcNCgkJCQkJCQkJCQkJJGNsaWVudFdpbmRvd0hhbmRsZSA9ICR0ZW1wQ2xpZW50Lk1haW5XaW5kb3dIYW5kbGUNCgkJCQkJCQkJCQkJJGNsaWVudEhhbmRsZSA9ICR0ZW1wQ2xpZW50LkhhbmRsZQ0KCQkJCQkJCQkJCQ0KCQkJCQkJCQkJCQkjIFN0b3JlIHdpbmRvdyBoYW5kbGUgaW4gYSBzZXBhcmF0ZSB2YXJpYWJsZSBhbmQgcmVsZWFzZSBwcm9jZXNzIG9iamVjdA0KCQkJCQkJCQkJCQkkdGVtcENsaWVudCA9ICRudWxsDQoJCQkJCQkJCQkJfQ0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkJY2F0Y2gNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQkkY2xpZW50RXhpc3RzID0gJGZhbHNlDQoJCQkJCQkJCQl9DQoJCQkJCQkJCQ0KCQkJCQkJCQkJaWYgKC1ub3QgJGNsaWVudEV4aXN0cykNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQkkZWxhcHNlZFRpbWUgPSBbbWF0aF06OlJvdW5kKCRpbm5lclN0b3B3YXRjaC5FbGFwc2VkLlRvdGFsU2Vjb25kcywgMSkNCgkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IENsaWVudCB0ZXJtaW5hdGVkJyAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJCQkJCQkJCSRjbGllbnRTdGFydGVkID0gJGZhbHNlDQoJCQkJCQkJCQkJJGNsaWVudFJlc3BvbmRpbmcgPSAkZmFsc2UNCgkJCQkJCQkJCQkkd2luZG93UmVhZHkgPSAkZmFsc2UNCgkJCQkJCQkJCQlicmVhaw0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkNCgkJCQkJCQkJCWlmICgkY2xpZW50UmVzcG9uZGluZyAtYW5kICRjbGllbnRXaW5kb3dIYW5kbGUgLW5lIFtJbnRQdHJdOjpaZXJvKQ0KCQkJCQkJCQkJew0KCQkJCQkJCQkJCSR3aW5kb3dSZWFkeSA9ICR0cnVlDQoJCQkJCQkJCQkJJGVsYXBzZWRUaW1lID0gW21hdGhdOjpSb3VuZCgkaW5uZXJTdG9wd2F0Y2guRWxhcHNlZC5Ub3RhbFNlY29uZHMsIDEpDQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBXaW5kb3cgcmVhZHknIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkJCQkJCQ0KCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgJ0xBVU5DSDogTWluaW1pemluZy4uLicgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQkJCQkJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNTAwDQoJCQkJCQkJCQkJW05hdGl2ZV06OlNob3dXaW5kb3coJGNsaWVudFdpbmRvd0hhbmRsZSwgW05hdGl2ZV06OlNXX01JTklNSVpFKQ0KCQkJCQkJCQkJDQoJCQkJCQkJCQkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBPcHRpbWl6aW5nLi4uJyAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCgkJCQkJCQkJCQl0cnkNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCVtOYXRpdmVdOjpFbXB0eVdvcmtpbmdTZXQoJGNsaWVudEhhbmRsZSkNCgkJCQkJCQkJCQl9DQoJCQkJCQkJCQkJY2F0Y2gNCgkJCQkJCQkJCQl7DQoJCQkJCQkJCQkJCVdyaXRlLVZlcmJvc2UgJ0xBVU5DSDogT3B0IGZhaWxlZCcgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQkJCQl9DQoJCQkJCQkJCQkNCgkJCQkJCQkJCQlXcml0ZS1WZXJib3NlICJMQVVOQ0g6IENsaWVudCByZWFkeTogJG5ld0NsaWVudFBJRCIgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KCQkJCQkJCQkJfQ0KCQkJCQkJCQkNCgkJCQkJCQkJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNTAwDQoJCQkJCQkJCX0NCgkJCQkJCQkNCgkJCQkJCQkJaWYgKC1ub3QgJHdpbmRvd1JlYWR5KQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IFdpbmRvdyBub3QgcmVzcG9uc2l2ZScgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQkJCQkJCSRjbGllbnRTdGFydGVkID0gJGZhbHNlDQoJCQkJCQkJCQlicmVhaw0KCQkJCQkJCQl9DQoJCQkJCQkJfQ0KCQkJCQkJfQ0KCQkJCQkNCgkJCQkJCVN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNTAwDQoJCQkJCX0NCgkJCQkNCgkJCQkJaWYgKC1ub3QgJGNsaWVudFN0YXJ0ZWQpDQoJCQkJCXsNCgkJCQkJCWlmICgtbm90ICRsYXVuY2hlckNsb3NlZE5vcm1hbGx5KQ0KCQkJCQkJew0KCQkJCQkJCVdyaXRlLVZlcmJvc2UgJ0xBVU5DSDogTGF1bmNoZXIgZmFpbGVkJyAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJCQkJfQ0KCQkJCQkJZWxzZQ0KCQkJCQkJew0KCQkJCQkJCVdyaXRlLVZlcmJvc2UgJ0xBVU5DSDogTm8gY2xpZW50IGRldGVjdGVkJyAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KCQkJCQkJfQ0KCQkJCQl9DQoJCQkJDQoJCQkJCSMgQ2hlY2sgY2xpZW50IGNvdW50IHdpdGhvdXQga2VlcGluZyByZWZlcmVuY2VzDQoJCQkJCSRwQ291bnQgPSAoR2V0LVByb2Nlc3MgLU5hbWUgJE5ldXpOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgTWVhc3VyZS1PYmplY3QpLkNvdW50DQoJCQkJCWlmICgkcENvdW50IC1nZSAkTWF4Q2xpZW50cykNCgkJCQkJew0KCQkJCQkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiBNYXggcmVhY2hlZDogJE1heENsaWVudHMiIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQoJCQkJCQlicmVhaw0KCQkJCQl9DQoJCQkJDQoJCQkJCVN0YXJ0LVNsZWVwIC1TZWNvbmRzIDINCgkJCQl9DQoJCQkNCgkJCX0NCgkJCWNhdGNoDQoJCQl7DQoJCQkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiAkKCRfLkV4Y2VwdGlvbi5NZXNzYWdlKSIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCX0NCgkJCWZpbmFsbHkNCgkJCXsNCgkJCQ0KCQkJCSMgQ2xlYXIgYW55IHJlbWFpbmluZyByZWZlcmVuY2VzIHRvIHByb2Nlc3Nlcw0KCQkJCSRleGlzdGluZ1BJRHMgPSAkbnVsbA0KCQkJCVtTeXN0ZW0uR0NdOjpDb2xsZWN0KCkNCgkJCX0NCgkJfSkuQWRkQXJndW1lbnQoJHNldHRpbmdzRGljdCkuQWRkQXJndW1lbnQoJGxhdW5jaGVyUGF0aCkuQWRkQXJndW1lbnQoJG5ldXpOYW1lKS5BZGRBcmd1bWVudCgkbWF4Q2xpZW50cykuQWRkQXJndW1lbnQoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUGF0aHMuSW5pKQ0KCQ0KCSMgRXZlbnQgcmVnaXN0cmF0aW9uIGFuZCBjbGVhbnVwIHNlY3Rpb24NCgl0cnkNCgl7DQoJCSMgRmlyc3QsIGRlZmluZSB0aGUgY29tcGxldGlvbiBhY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBvcGVyYXRpb24gY29tcGxldGVzDQoJCSRjb21wbGV0aW9uU2NyaXB0QmxvY2sgPSB7DQoJCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IExhdW5jaCBvcGVyYXRpb24gY29tcGxldGVkLCBwcm9jZXNzaW5nIG1lc3NhZ2VzJyAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQoJCQkNCgkJCSMgQ2FsbCBjbGVhbnVwIGZ1bmN0aW9uDQoJCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IENhbGxpbmcgU3RvcC1DbGllbnRMYXVuY2gnIC1Gb3JlZ3JvdW5kQ29sb3IgQ3lhbg0KCQkJU3RvcC1DbGllbnRMYXVuY2gNCgkJfQ0KCQkNCgkJIyBTdG9yZSB0aGUgY29tcGxldGlvbiBhY3Rpb24gaW4gYSBzY3JpcHQtbGV2ZWwgdmFyaWFibGUNCgkJJHNjcmlwdDpMYXVuY2hDb21wbGV0aW9uQWN0aW9uID0gJGNvbXBsZXRpb25TY3JpcHRCbG9jaw0KCQkNCgkJIyBDcmVhdGUgYSB1bmlxdWUgZXZlbnQgbmFtZQ0KCQkkZXZlbnROYW1lID0gJ0xhdW5jaE9wZXJhdGlvbl8nICsgW0d1aWRdOjpOZXdHdWlkKCkuVG9TdHJpbmcoJ04nKQ0KCQlXcml0ZS1WZXJib3NlICJMQVVOQ0g6IENyZWF0aW5nIGV2ZW50IHdpdGggbmFtZTogJGV2ZW50TmFtZSIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkNCgkJIyBDcmVhdGUgYSBzaW1wbGUgc2NyaXB0YmxvY2sgZm9yIHRoZSBldmVudCB0aGF0IGRvZXNuInQgcmVmZXJlbmNlIGFueSB2YXJpYWJsZXMNCgkJJHNpbXBsZUV2ZW50QWN0aW9uID0gew0KCQkJcGFyYW0oJHNyYywgJGUpDQoJCQkNCgkJCSMgT25seSBwcm9jZXNzIGNvbXBsZXRlZCwgZmFpbGVkLCBvciBzdG9wcGVkIHN0YXRlcw0KCQkJJHN0YXRlID0gJGUuSW52b2NhdGlvblN0YXRlSW5mby5TdGF0ZQ0KCQkJaWYgKCRzdGF0ZSAtZXEgJ0NvbXBsZXRlZCcgLW9yICRzdGF0ZSAtZXEgJ0ZhaWxlZCcgLW9yICRzdGF0ZSAtZXEgJ1N0b3BwZWQnKQ0KCQkJew0KCQkJCVdyaXRlLVZlcmJvc2UgIkxBVU5DSDogUG93ZXJTaGVsbCBvcGVyYXRpb24gc3RhdGUgY2hhbmdlZCB0bzogJHN0YXRlIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJDQoJCQkJIyBDYWxsIGNsZWFudXAgZGlyZWN0bHkgLSBkb24idCByZWZlcmVuY2UgYW55IGdsb2JhbCB2YXJpYWJsZXMNCgkJCQlpZiAoR2V0LUNvbW1hbmQgLU5hbWUgU3RvcC1DbGllbnRMYXVuY2ggLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpDQoJCQkJew0KCQkJCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IENhbGxpbmcgU3RvcC1DbGllbnRMYXVuY2ggZnJvbSBldmVudCBoYW5kbGVyJyAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCgkJCQkJU3RvcC1DbGllbnRMYXVuY2gNCgkJCQl9DQoJCQkJZWxzZQ0KCQkJCXsNCgkJCQkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBTdG9wLUNsaWVudExhdW5jaCBmdW5jdGlvbiBub3QgZm91bmQnIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQkJfQ0KCQkJfQ0KCQl9DQoJCQ0KCQkjIFJlZ2lzdGVyIHRoZSBldmVudCB3aXRoIG1pbmltYWwgZGVwZW5kZW5jaWVzDQoJCVdyaXRlLVZlcmJvc2UgJ0xBVU5DSDogUmVnaXN0ZXJpbmcgZXZlbnQgaGFuZGxlcicgLUZvcmVncm91bmRDb2xvciBDeWFuDQoJCSRldmVudFN1YiA9IFJlZ2lzdGVyLU9iamVjdEV2ZW50IC1JbnB1dE9iamVjdCAkbGF1bmNoUFMgLUV2ZW50TmFtZSBJbnZvY2F0aW9uU3RhdGVDaGFuZ2VkIC1Tb3VyY2VJZGVudGlmaWVyICRldmVudE5hbWUgLUFjdGlvbiAkc2ltcGxlRXZlbnRBY3Rpb24NCgkJDQoJCSMgVmVyaWZ5IGV2ZW50IHJlZ2lzdHJhdGlvbg0KCQlpZiAoJG51bGwgLWVxICRldmVudFN1YikNCgkJew0KCQkJdGhyb3cgJ0ZhaWxlZCB0byByZWdpc3RlciBldmVudCBzdWJzY3JpYmVyJw0KCQl9DQoJCQ0KCQkjIFN0b3JlIGV2ZW50IGluZm9ybWF0aW9uDQoJCSRnbG9iYWw6TGF1bmNoUmVzb3VyY2VzLkV2ZW50U3Vic2NyaXB0aW9uSWQgPSAkZXZlbnROYW1lDQoJCSRnbG9iYWw6TGF1bmNoUmVzb3VyY2VzLkV2ZW50U3Vic2NyaWJlciA9ICRldmVudFN1Yg0KCQkNCgkJIyBTZXQgdXAgYSBzYWZldHkgdGltZXINCgkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBTZXR0aW5nIHVwIHNhZmV0eSB0aW1lcicgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkkc2FmZXR5VGltZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5UaW1lcnMuVGltZXINCgkJJHNhZmV0eVRpbWVyLkludGVydmFsID0gMzAwMDAwICAjIDUgbWludXRlcw0KCQkkc2FmZXR5VGltZXIuQXV0b1Jlc2V0ID0gJGZhbHNlDQoJCQ0KCQkjIENyZWF0ZSBhIHNpbXBsZSB0aW1lciBlbGFwc2VkIGhhbmRsZXINCgkJJHNhZmV0eVRpbWVyLkFkZF9FbGFwc2VkKHsNCgkJCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IFNhZmV0eSB0aW1lciBlbGFwc2VkJyAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkNCgkJCQkjIENhbGwgY2xlYW51cCBkaXJlY3RseSAtIGRvbiJ0IHJlZmVyZW5jZSBhbnkgZ2xvYmFsIHZhcmlhYmxlcw0KCQkJCWlmIChHZXQtQ29tbWFuZCAtTmFtZSBTdG9wLUNsaWVudExhdW5jaCAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkNCgkJCQl7DQoJCQkJCVdyaXRlLVZlcmJvc2UgJ0xBVU5DSDogQ2FsbGluZyBTdG9wLUNsaWVudExhdW5jaCBmcm9tIHNhZmV0eSB0aW1lcicgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KCQkJCQlTdG9wLUNsaWVudExhdW5jaA0KCQkJCX0NCgkJCQllbHNlDQoJCQkJew0KCQkJCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IFN0b3AtQ2xpZW50TGF1bmNoIGZ1bmN0aW9uIG5vdCBmb3VuZCcgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCQl9DQoJCQl9KQ0KCQkNCgkJIyBTdGFydCB0aGUgdGltZXINCgkJJHNhZmV0eVRpbWVyLlN0YXJ0KCkNCgkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLlRpbWVyc1snbGF1bmNoU2FmZXR5VGltZXInXSA9ICRzYWZldHlUaW1lcg0KCQkNCgkJIyBTdGFydCB0aGUgYXN5bmMgb3BlcmF0aW9uDQoJCVdyaXRlLVZlcmJvc2UgJ0xBVU5DSDogU3RhcnRpbmcgYXN5bmMgb3BlcmF0aW9uJyAtRm9yZWdyb3VuZENvbG9yIEN5YW4NCgkJJGFzeW5jUmVzdWx0ID0gJGxhdW5jaFBTLkJlZ2luSW52b2tlKCkNCgkJDQoJCSMgVmVyaWZ5IGFzeW5jIG9wZXJhdGlvbg0KCQlpZiAoJG51bGwgLWVxICRhc3luY1Jlc3VsdCkNCgkJew0KCQkJdGhyb3cgJ0ZhaWxlZCB0byBzdGFydCBhc3luYyBvcGVyYXRpb24nDQoJCX0NCgkJDQoJCSMgU3RvcmUgdGhlIGFzeW5jIHJlc3VsdA0KCQkkZ2xvYmFsOkxhdW5jaFJlc291cmNlcy5Bc3luY1Jlc3VsdCA9ICRhc3luY1Jlc3VsdA0KDQoJCSMgU2ltcGxlIHByb3BlcnR5IGNoYW5nZSBoYW5kbGVyIHRoYXQgdXBkYXRlcyBidXR0b24gYXBwZWFyYW5jZQ0KCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuU3RhdGUuTGF1bmNoQWN0aXZlKSB7DQoJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5MYXVuY2guRmxhdFN0eWxlID0gJ1BvcHVwJw0KCQl9IGVsc2Ugew0KCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTGF1bmNoLkZsYXRTdHlsZSA9ICdGbGF0Jw0KCQl9DQoJCQ0KCQlXcml0ZS1WZXJib3NlICdMQVVOQ0g6IExhdW5jaCBvcGVyYXRpb24gc3RhcnRlZCBzdWNjZXNzZnVsbHknIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCgl9DQoJY2F0Y2gNCgl7DQoJCVdyaXRlLVZlcmJvc2UgIkxBVU5DSDogRXJyb3IgaW4gbGF1bmNoIHNldHVwOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJDQoJCSMgQ2FsbCBjbGVhbnVwDQoJCVN0b3AtQ2xpZW50TGF1bmNoDQoJfQ0KfQ0KDQpmdW5jdGlvbiBTdG9wLUNsaWVudExhdW5jaA0Kew0KCTwjDQoJLlNZTk9QU0lTDQoJQ2xlYW5zIHVwIHJlc291cmNlcyB1c2VkIGJ5IHRoZSBsYXVuY2ggb3BlcmF0aW9uLg0KCQ0KCS5ERVNDUklQVElPTg0KCUVuc3VyZXMgcHJvcGVyIGNsZWFudXAgb2YgYWxsIHJlc291cmNlcyB1c2VkIGR1cmluZyB0aGUgbGF1bmNoIG9wZXJhdGlvbi4NCgkjPg0KCVtDbWRsZXRCaW5kaW5nKCldDQoJcGFyYW0oKQ0KCQ0KCVdyaXRlLVZlcmJvc2UgJ0xBVU5DSDogQ2xlYW5pbmcgdXAgbGF1bmNoIHJlc291cmNlcycgLUZvcmVncm91bmRDb2xvciBDeWFuDQoJDQoJdHJ5DQoJew0KCQkjIFNldCBsYXVuY2ggaW4gcHJvZ3Jlc3MgZmxhZyB0byBmYWxzZQ0KCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5TdGF0ZS5MYXVuY2hBY3RpdmUgPSAkZmFsc2UNCgkJDQoJCSMgQ2hlY2sgaWYgd2UgaGF2ZSByZXNvdXJjZXMgdG8gY2xlYW4gdXANCgkJaWYgKCRudWxsIC1lcSAkZ2xvYmFsOkxhdW5jaFJlc291cmNlcykNCgkJew0KCQkJV3JpdGUtVmVyYm9zZSAnICBMQVVOQ0g6IE5vIGxhdW5jaCByZXNvdXJjZXMgdG8gY2xlYW4gdXAnIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCXJldHVybg0KCQl9DQoJCQ0KCQkjIFVucmVnaXN0ZXIgZXZlbnQgc3Vic2NyaXB0aW9uIGlmIGl0IGV4aXN0cw0KCQlpZiAoJG51bGwgLW5lICRnbG9iYWw6TGF1bmNoUmVzb3VyY2VzLkV2ZW50U3Vic2NyaXB0aW9uSWQpDQoJCXsNCgkJCXRyeQ0KCQkJew0KCQkJCVdyaXRlLVZlcmJvc2UgIkxBVU5DSDogVW5yZWdpc3RlcmluZyBldmVudCBzdWJzY3JpcHRpb246ICQoJGdsb2JhbDpMYXVuY2hSZXNvdXJjZXMuRXZlbnRTdWJzY3JpcHRpb25JZCkiIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQlVbnJlZ2lzdGVyLUV2ZW50IC1Tb3VyY2VJZGVudGlmaWVyICRnbG9iYWw6TGF1bmNoUmVzb3VyY2VzLkV2ZW50U3Vic2NyaXB0aW9uSWQgLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQoJCQl9DQoJCQljYXRjaA0KCQkJew0KCQkJCVdyaXRlLVZlcmJvc2UgIkxBVU5DSDogRmFpbGVkIHRvIHVucmVnaXN0ZXIgZXZlbnQ6ICRfIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJfQ0KCQl9DQoJCQ0KCQkjIFJlbW92ZSBldmVudCBzdWJzY3JpYmVyIGlmIGl0IGV4aXN0cw0KCQlpZiAoJG51bGwgLW5lICRnbG9iYWw6TGF1bmNoUmVzb3VyY2VzLkV2ZW50U3Vic2NyaWJlcikNCgkJew0KCQkJdHJ5DQoJCQl7DQoJCQkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBSZW1vdmluZyBldmVudCBzdWJzY3JpYmVyJyAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJIyBBbHRlcm5hdGl2ZSBhcHByb2FjaDogVXNlIFVucmVnaXN0ZXItRXZlbnQgd2l0aCB0aGUgc3Vic2NyaXB0aW9uIElEDQoJCQkJaWYgKCRudWxsIC1uZSAkZ2xvYmFsOkxhdW5jaFJlc291cmNlcy5FdmVudFN1YnNjcmlwdGlvbklkKQ0KCQkJCXsNCgkJCQkJVW5yZWdpc3Rlci1FdmVudCAtU291cmNlSWRlbnRpZmllciAkZ2xvYmFsOkxhdW5jaFJlc291cmNlcy5FdmVudFN1YnNjcmlwdGlvbklkIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQoJCQkJfQ0KCQkJfQ0KCQkJY2F0Y2gNCgkJCXsNCgkJCQlXcml0ZS1WZXJib3NlICJMQVVOQ0g6IEZhaWxlZCB0byByZW1vdmUgZXZlbnQgc3Vic2NyaWJlcjogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQl9DQoJCX0NCgkJDQoJCSMgU3RvcCBhbmQgZGlzcG9zZSBQb3dlclNoZWxsIGluc3RhbmNlIGlmIGl0IGV4aXN0cw0KCQlpZiAoJG51bGwgLW5lICRnbG9iYWw6TGF1bmNoUmVzb3VyY2VzLlBvd2VyU2hlbGxJbnN0YW5jZSkNCgkJew0KCQkJdHJ5DQoJCQl7DQoJCQkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBTdG9wcGluZyBQb3dlclNoZWxsIGluc3RhbmNlJyAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJaWYgKCRnbG9iYWw6TGF1bmNoUmVzb3VyY2VzLlBvd2VyU2hlbGxJbnN0YW5jZS5JbnZvY2F0aW9uU3RhdGVJbmZvLlN0YXRlIC1lcSAnUnVubmluZycpDQoJCQkJew0KCQkJCQkkZ2xvYmFsOkxhdW5jaFJlc291cmNlcy5Qb3dlclNoZWxsSW5zdGFuY2UuU3RvcCgpDQoJCQkJfQ0KCQkJCSRnbG9iYWw6TGF1bmNoUmVzb3VyY2VzLlBvd2VyU2hlbGxJbnN0YW5jZS5EaXNwb3NlKCkNCgkJCX0NCgkJCWNhdGNoDQoJCQl7DQoJCQkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiBGYWlsZWQgdG8gc3RvcCBQb3dlclNoZWxsIGluc3RhbmNlOiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCgkJCX0NCgkJfQ0KCQkNCgkJIyBDbG9zZSBydW5zcGFjZSBpZiBpdCBleGlzdHMNCgkJaWYgKCRudWxsIC1uZSAkZ2xvYmFsOkxhdW5jaFJlc291cmNlcy5SdW5zcGFjZSkNCgkJew0KCQkJdHJ5DQoJCQl7DQoJCQkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBDbG9zaW5nIHJ1bnNwYWNlJyAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQoJCQkJJGdsb2JhbDpMYXVuY2hSZXNvdXJjZXMuUnVuc3BhY2UuQ2xvc2UoKQ0KCQkJCSRnbG9iYWw6TGF1bmNoUmVzb3VyY2VzLlJ1bnNwYWNlLkRpc3Bvc2UoKQ0KCQkJfQ0KCQkJY2F0Y2gNCgkJCXsNCgkJCQlXcml0ZS1WZXJib3NlICJMQVVOQ0g6IEZhaWxlZCB0byBjbG9zZSBydW5zcGFjZTogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQl9DQoJCX0NCgkJDQoJCSMgU3RvcCB0aGUgbGF1bmNoIHRpbWVyIGlmIGl0IGV4aXN0cw0KCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLlRpbWVycy5Db250YWlucygnbGF1bmNoVGltZXInKSkNCgkJew0KCQkJdHJ5DQoJCQl7DQoJCQkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBTdG9wcGluZyBsYXVuY2ggdGltZXInIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuVGltZXJzWydsYXVuY2hUaW1lciddLlN0b3AoKQ0KCQkJfQ0KCQkJY2F0Y2gNCgkJCXsNCgkJCQlXcml0ZS1WZXJib3NlICJMQVVOQ0g6IEZhaWxlZCB0byBzdG9wIGxhdW5jaCB0aW1lcjogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCQl9DQoJCX0NCgkJDQoJCSMgU3RvcCB0aGUgc2FmZXR5IHRpbWVyIGlmIGl0IGV4aXN0cw0KCQlpZiAoJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLlRpbWVycy5Db250YWlucygnbGF1bmNoU2FmZXR5VGltZXInKSkNCgkJew0KCQkJdHJ5DQoJCQl7DQoJCQkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBTdG9wcGluZyBzYWZldHkgdGltZXInIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkNCgkJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5SZXNvdXJjZXMuVGltZXJzWydsYXVuY2hTYWZldHlUaW1lciddLlN0b3AoKQ0KCQkJCSRnbG9iYWw6RGFzaGJvYXJkQ29uZmlnLlJlc291cmNlcy5UaW1lcnNbJ2xhdW5jaFNhZmV0eVRpbWVyJ10uRGlzcG9zZSgpDQoJCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuUmVzb3VyY2VzLlRpbWVycy5SZW1vdmUoJ2xhdW5jaFNhZmV0eVRpbWVyJykNCgkJCX0NCgkJCWNhdGNoDQoJCQl7DQoJCQkJV3JpdGUtVmVyYm9zZSAiTEFVTkNIOiBGYWlsZWQgdG8gc3RvcCBzYWZldHkgdGltZXI6ICRfIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KCQkJfQ0KCQl9DQoJCQ0KCQkjIENsZWFyIHRoZSByZXNvdXJjZXMNCgkJJGdsb2JhbDpMYXVuY2hSZXNvdXJjZXMgPSAkbnVsbA0KCQkNCgkJIyBGb3JjZSBnYXJiYWdlIGNvbGxlY3Rpb24NCgkJW1N5c3RlbS5HQ106OkNvbGxlY3QoKQ0KCQkNCgkJV3JpdGUtVmVyYm9zZSAnTEFVTkNIOiBMYXVuY2ggY2xlYW51cCBjb21wbGV0ZWQnIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NCgkJIyBTaW1wbGUgcHJvcGVydHkgY2hhbmdlIGhhbmRsZXIgdGhhdCB1cGRhdGVzIGJ1dHRvbiBhcHBlYXJhbmNlDQoJCWlmICgkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5TdGF0ZS5MYXVuY2hBY3RpdmUgLWVxICR0cnVlKSB7DQoJCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5VSS5MYXVuY2guRmxhdFN0eWxlID0gJ1BvcHVwJw0KCQl9IGVsc2Ugew0KCQkJJGdsb2JhbDpEYXNoYm9hcmRDb25maWcuVUkuTGF1bmNoLkZsYXRTdHlsZSA9ICdGbGF0Jw0KCQl9DQoJfQ0KCWNhdGNoDQoJew0KCQlXcml0ZS1WZXJib3NlICJMQVVOQ0g6IEVycm9yIGR1cmluZyBsYXVuY2ggY2xlYW51cDogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQoJCSMgRW5zdXJlIHRoZSBmbGFnIGlzIHJlc2V0IGV2ZW4gaWYgY2xlYW51cCBmYWlscw0KCQkkZ2xvYmFsOkRhc2hib2FyZENvbmZpZy5TdGF0ZS5MYXVuY2hBY3RpdmUgPSAkZmFsc2UNCgl9DQp9DQoNCg0KI2VuZHJlZ2lvbiBMYXVuY2ggTWFuYWdlbWVudCBGdW5jdGlvbnMNCg0KI3JlZ2lvbiBNb2R1bGUgRXhwb3J0cw0KDQojIEV4cG9ydCBtb2R1bGUgZnVuY3Rpb25zDQpFeHBvcnQtTW9kdWxlTWVtYmVyIC1GdW5jdGlvbiBTdGFydC1DbGllbnRMYXVuY2gsIFN0b3AtQ2xpZW50TGF1bmNoDQoNCiNlbmRyZWdpb24gTW9kdWxlIEV4cG9ydHM=
			'
		}
		'login.psm1'    = @{ 
			Priority = 'Optional';  
			Order = 8; 
			Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'login.psm1');
			Base64Content = '
				
			'
		}
		'ftool.psm1'    = @{ 
			Priority = 'Optional';  
			Order = 9; 
			Dependencies = @('classes.psm1', 'ui.psm1', 'ini.psm1', 'datagrid.psm1');
			#FilePath = (Join-Path $global:DashboardConfig.Paths.Source 'ftool.psm1');
			Base64Content = '
				
			'
		}
	}
#endregion Step: Define Module Metadata

#endregion Global Configuration

#region Environment Initialization and Checks

#region Function: Show-ErrorDialog
	function Show-ErrorDialog
	{
		<#
		.SYNOPSIS
			Displays a standardized error message box using Windows Forms for critical errors.
		
		.PARAMETER Message
			[string] The error message text to display in the dialog box. This message should clearly state the problem encountered. (Mandatory)
		
		.OUTPUTS
			[void] This function does not return any value. Its purpose is to display a modal error dialog to the user.
		
		.NOTES
			This function requires the System.Windows.Forms .NET assembly to be loaded. It attempts to load the assembly if not already present.
			If displaying the Windows Forms MessageBox fails (e.g., in a non-interactive session or if assembly loading fails), it falls back to writing
			the error message to the PowerShell error stream using Write-Verbose for logging purposes. This function is intended for critical errors
			that need immediate user attention, often before exiting the script.
		#>
		param(
			[Parameter(Mandatory = $true)]
			[string]$Message
		)
		try
		{
			#region Step: Ensure WinForms Assembly is Loaded
				# Try loading the .NET part needed for MessageBox. Use -ErrorAction Stop to catch errors.
				# See if it's already loaded to avoid trying again/warnings.
				if (-not ([System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')))
				{
					Add-Type -AssemblyName System.Windows.Forms -ErrorAction Stop
				}
				#endregion Step: Ensure WinForms Assembly is Loaded
				
				#region Step: Display WinForms MessageBox
				# Show the error pop-up box to the user.
				# Title shows the app name clearly. MessageBoxIcon.Error gives a visual hint.
				[System.Windows.Forms.MessageBox]::Show($Message, 'Entropia Dashboard Error',
					[System.Windows.Forms.MessageBoxButtons]::OK,
					[System.Windows.Forms.MessageBoxIcon]::Error) | Out-Null # Send to Out-Null to hide the 'OK' button result.
			#endregion Step: Display WinForms MessageBox
		}
		catch
		{
			# Backup plan if the WinForms MessageBox doesn't work.
			# Write the original message and why the pop-up failed to the error output.
			Write-Verbose "Failed to display error dialog: `"$Message`". Dialog Display Error: $($_.Exception.Message)" -ForegroundColor Red
		}
	}
#endregion Function: Show-ErrorDialog

#region Function: Request-Elevation
	function Request-Elevation
	{
		<#
		.SYNOPSIS
			Checks for required execution context (Admin rights, 32-bit, Bypass Policy) and attempts to restart the script if necessary.
		
		.DESCRIPTION
			This function assesses the current script execution environment. It verifies:
			1. Administrator Privileges: Checks if the current user is a member of the Administrators group.
			2. 32-bit Execution: Confirms if the current PowerShell process is running in 32-bit mode (required for potential interaction with 32-bit game clients or libraries).
			3. Execution Policy: Ensures the effective execution policy for the current process is 'Bypass' to allow dynamic script and module loading.
			
			If any of these conditions are not met, the function attempts to relaunch the script using the 32-bit PowerShell executable located in SysWOW64.
			The relaunch uses the 'RunAs' verb, triggering a UAC prompt for elevation if needed, and explicitly sets the execution policy to 'Bypass' for the new process.
			Upon successfully starting the new process, the *current* script instance exits immediately.
		
		.OUTPUTS
			[void] This function does not return a value. It either determines no restart is needed and returns silently, or it attempts to start a new process and then exits the current one using 'exit'.
		
		.NOTES
			- Relies on the existence of the 32-bit PowerShell executable at '$env:SystemRoot\SysWOW64\WindowsPowerShell\v1.0\powershell.exe'. If not found, the script will exit with an error.
			- Uses the '$myinvocation' automatic variable to get the path of the currently running script for the relaunch command.
			- If the relaunch attempt fails (e.g., user cancels UAC, file not found), an error dialog is shown, and the script exits.
			- The use of '-ExecutionPolicy Bypass' in the relaunch arguments is a security consideration; see the main script notes.
		#>
		param() # No inputs needed for this function.
		
		#region Step: Check Current Environment State
			Write-Verbose "Checking current execution environment (Admin, 32-bit, Execution Policy)..." -ForegroundColor Cyan
			# $needsRestart - Flag ($true/$false), set to $true if something isn't right.
			[bool]$needsRestart = $false
			# $reason - A list to gather easy-to-read reasons why we need a restart.
			[System.Collections.ArrayList]$reason = @()
			
			# Check if we're running as Admin.
			# $isAdmin - Flag ($true/$false), $true if the current user is an Admin.
			[bool]$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
			if (-not $isAdmin)
			{
				$needsRestart = $true; $null = $reason.Add('Administrator privileges required.') # Add reason if not admin.
			}
			
			# Check if this process is 32-bit. [IntPtr]::Size is 4 for 32-bit, 8 for 64-bit.
			# $is32Bit - Flag ($true/$false), $true if the process is 32-bit.
			[bool]$is32Bit = [IntPtr]::Size -eq 4
			if (-not $is32Bit)
			{
				$needsRestart = $true; $null = $reason.Add('32-bit execution required.') # Add reason if not 32-bit.
			}
			
			# Check the Execution Policy just for this running process.
			# $currentPolicy - Text showing the execution policy (like 'Restricted', 'Bypass').
			[string]$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue # SilentlyContinue handles if it's not set for the process.
			# Needs 'Bypass' for loading/running things the way we planned.
			if ($currentPolicy -ne 'Bypass')
			{
				$needsRestart = $true
				if ($currentPolicy -ne '') {
					$effectivePolicy = $currentPolicy
				} else {
					$effectivePolicy = Get-ExecutionPolicy
				}
				$null = $reason.Add("Execution Policy 'Bypass' required for Process scope (Current effective: '$effectivePolicy').") # Show the actual policy being used.
			}
		#endregion Step: Check Current Environment State
		
		#region Step: Perform Restart if Necessary
			if ($needsRestart)
			{
				# Write down the reasons we're trying to restart.
				Write-Verbose "  Restarting script needed: $($reason -join ' ')" -ForegroundColor Yellow
				
				# Set the path to the 32-bit PowerShell program.
				# $psExe - Text, full path to the 32-bit powershell.exe.
				[string]$psExe = Join-Path $env:SystemRoot 'SysWOW64\WindowsPowerShell\v1.0\powershell.exe'
				if (-not (Test-Path $psExe -PathType Leaf)) # Check if the program file exists.
				{
					# Show error and quit if the needed program is missing.
					Show-ErrorDialog "FATAL: Required 32-bit PowerShell executable not found at '$psExe'. Cannot continue."
					exit 1 # Exit code 1 means there was an error.
				}
				
				# Get everything inside the current script file.
				$encodedCommand = @"
					
"@

				# Decode the command
				try {
					$decodedBytes = [System.Convert]::FromBase64String($encodedCommand)
					# IMPORTANT: Use the right encoding the script was saved with! UTF8 is typical, but PowerShell might use UTF8 with BOM or UTF16LE. Assume UTF8 here.
					$decodedCommand = [System.Text.Encoding]::UTF8.GetString($decodedBytes)
				} catch {
					Show-ErrorDialog "FATAL: Failed to decode the embedded command. Error: $($_.Exception.Message)"
					exit 1
				}

				# Make a temporary file path
				$tempScriptPath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), ([System.Guid]::NewGuid().ToString() + ".ps1"))

				try
				{
					# Save the decoded command to the temp file (using the right encoding)
					[System.IO.File]::WriteAllText($tempScriptPath, $decodedCommand, [System.Text.Encoding]::UTF8) # Match encoding from GetString

					# Build the NEW arguments using -File
					# Added -ExecutionPolicy Bypass, often needed when running scripts like this.
					# $psArgs - Text holding the command-line arguments.
					[string]$psArgs = "-noexit -ExecutionPolicy Bypass -File `"$tempScriptPath`"" # Note the quotes around the path

					# Set up the ProcessStartInfo object
					$psi = New-Object System.Diagnostics.ProcessStartInfo
					$psi.FileName = $psExe         # The program to run. Make sure $psExe is set!
					$psi.Arguments = $psArgs       # The arguments for the program.
					$psi.UseShellExecute = $true   # MUST be $true to use the 'Verb' property.
					$psi.Verb = 'RunAs'            # Ask for Admin rights (UAC).

					Write-Verbose "  Attempting to start new elevated/32-bit process via temp file: `"$psExe`" $psArgs" -ForegroundColor Cyan
					Write-Verbose "  Temporary script file: $tempScriptPath" -ForegroundColor DarkGray

					# Start the new process
					[System.Diagnostics.Process]::Start($psi) | Out-Null

					# Success (request sent)
					Write-Verbose "  Successfully requested elevated/32-bit process start. Exiting current process." -ForegroundColor Green
					exit 0
				}
				catch
				{
					# Error handling
					Show-ErrorDialog "FATAL: Failed to restart script with required settings (Admin/32-bit/Bypass). Error: $($_.Exception.Message)"
					# Delete the temp file if it failed (might not work if permissions are odd)
					if (Test-Path $tempScriptPath) {
						try { Remove-Item $tempScriptPath -ErrorAction Stop } catch {}
					}
					exit 1
				}
			}
			else
			{
				# Log that the script is already running with the right settings.
				Write-Verbose "  Script already running with required environment settings (Admin, 32-bit, Bypass Policy)." -ForegroundColor Green
			}
		#endregion Step: Perform Restart if Necessary
	}
#endregion Function: Request-Elevation

#region Function: Initialize-ScriptEnvironment
	function Initialize-ScriptEnvironment
	{
		<#
		.SYNOPSIS
			Verifies that the script environment meets all requirements *after* any potential restart attempt by Request-Elevation.
		
		.DESCRIPTION
			This function performs final checks to ensure the script is operating in the correct environment before proceeding with core logic.
			It re-validates:
			1. Administrator Privileges: Confirms the script is now running elevated.
			2. 32-bit Mode: Confirms the script is now running in a 32-bit PowerShell process.
			3. Execution Policy: Confirms the process scope execution policy is 'Bypass'. If not (which shouldn't happen if Request-Elevation worked),
			it makes a final attempt to set it using Set-ExecutionPolicy.
			
			If any check fails, it displays a specific error message using Show-ErrorDialog and returns $false.
		
		.OUTPUTS
			[bool] Returns $true if all environment checks pass successfully, otherwise returns $false.
		
		.NOTES
			- This function should be called *after* Request-Elevation. It acts as a final safeguard.
			- Failure here is typically fatal for the application, as indicated by the error messages and the return value.
			- The attempt to set ExecutionPolicy within this function is a fallback; ideally, Request-Elevation should have ensured this.
		#>
		[CmdletBinding()]
		[OutputType([bool])] 
		param()
		
		Write-Verbose "Verifying final script environment settings..." -ForegroundColor Cyan
		try
		{
			#region Step: Verify Administrator Privileges
				# $isAdmin - Flag ($true/$false), $true if the current user is an Admin.
				[bool]$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
				if (-not $isAdmin)
				{
					# Show error and return $false if not running as Admin.
					Show-ErrorDialog 'FATAL: Application requires administrator privileges to run.'
					return $false
				}
				Write-Verbose "[OK] Running with administrator privileges." -ForegroundColor Green
			#endregion Step: Verify Administrator Privileges
			
			#region Step: Verify 32-bit Execution Mode
				# $is32Bit - Flag ($true/$false), $true if the process is 32-bit.
				[bool]$is32Bit = [IntPtr]::Size -eq 4
				if (-not $is32Bit)
				{
					# Show error and return $false if not running in 32-bit mode.
					Show-ErrorDialog 'FATAL: Application must run in 32-bit PowerShell mode.'
					return $false
				}
				Write-Verbose "[OK] Running in 32-bit mode." -ForegroundColor Green
			#endregion Step: Verify 32-bit Execution Mode
			
			#region Step: Verify Process Execution Policy
				# $currentPolicy - Text, the execution policy for this process.
				[string]$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue
				if ($currentPolicy -ne 'Bypass')
				{
					# This is a backup. Ideally, Request-Elevation already set 'Bypass'.
					Write-Verbose "  Process Execution Policy is not 'Bypass' (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })'). Attempting final Set..." -ForegroundColor Yellow
					try
					{
						# Try to force the policy to Bypass for this process.
						Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force -ErrorAction Stop
						# Check again after trying.
						$currentPolicy = Get-ExecutionPolicy -Scope Process -ErrorAction SilentlyContinue
						if ($currentPolicy -ne 'Bypass')
						{
							# If it still didn't work, report a major error.
							Show-ErrorDialog "FATAL: Failed to set required PowerShell Execution Policy to 'Bypass'.  (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })')."
							return $false
						}
						Write-Verbose "[OK] Execution policy successfully forced to Bypass for this process." -ForegroundColor Green
					}
					catch
					{
						# Catch errors during the last Set-ExecutionPolicy try.
						Show-ErrorDialog "FATAL: Error setting PowerShell Execution Policy to 'Bypass'.  (Current: '$(if (-not [string]::IsNullOrEmpty($currentPolicy)) { $currentPolicy } else { Get-ExecutionPolicy })'). Error: $($_.Exception.Message)"
						return $false
					}
				}
				else
				{
					Write-Verbose "[OK] Execution policy is '$currentPolicy'." -ForegroundColor Green
				}
			#endregion Step: Verify Process Execution Policy
			
			# If all checks passed:
			Write-Verbose "  Environment verification successful." -ForegroundColor Green
			return $true
		}
		catch
		{
			# Catch any surprise errors during the check itself.
			Show-ErrorDialog "FATAL: An unexpected error occurred during environment verification: $($_.Exception.Message)"
			return $false
		}
	}
#endregion Function: Initialize-ScriptEnvironment

#region Function: Initialize-BaseConfig
	function Initialize-BaseConfig
	{
		<#
		.SYNOPSIS
			Ensures necessary application data directories exist in %APPDATA% and are writable.
		
		.DESCRIPTION
			This function is responsible for setting up the fundamental directory structure required by the application
			within the user's roaming application data folder (%APPDATA%). It specifically checks for and, if necessary, creates:
			1. The main application directory: %APPDATA%\Entropia_Dashboard
			2. The modules subdirectory: %APPDATA%\Entropia_Dashboard\modules
			
			After ensuring the directories exist, it performs a quick write test in each directory by creating and immediately
			deleting a temporary file ('write_test.tmp'). This verifies that the script has the necessary permissions to write
			files (like modules and configuration) to these locations.
		
		.OUTPUTS
			[bool] Returns $true if both directories exist (or were created successfully) AND are verified as writable. Returns $false if
			directory creation fails or if either directory is found to be non-writable.
		
		.NOTES
			- Upon successful completion (returning $true), it sets the global state flag '$global:DashboardConfig.State.ConfigInitialized' to $true.
			- Errors during directory creation or the write test are logged to the error stream and presented to the user via Show-ErrorDialog,
			as these are typically fatal issues preventing the application from functioning correctly.
			- Uses -Force with New-Item to create parent directories if they don't exist.
		#>
		[CmdletBinding()]
		[OutputType([bool])]
		param()

		Write-Verbose "Initializing base configuration directories in %APPDATA%..." -ForegroundColor Cyan
		try
		{
			# List of essential folders that must exist and be writable.
			# $directories - List of text paths for the required folders.
			[string[]]$directories = @(
				$global:DashboardConfig.Paths.App,     # e.g., C:\Users\User\AppData\Roaming\Entropia_Dashboard\
				$global:DashboardConfig.Paths.Modules  # e.g., C:\Users\User\AppData\Roaming\Entropia_Dashboard\modules\
			)
			
			# Go through each needed folder path.
			foreach ($dir in $directories)
			{
				#region Step: Ensure Directory Exists
					# Check if the path exists and is actually a folder (Container).
					if (-not (Test-Path -Path $dir -PathType Container))
					{
						Write-Verbose "  Directory not found. Creating: '$dir'" -ForegroundColor DarkGray
						try
						{
							# Create the folder. -Force makes parent folders too. -ErrorAction Stop stops if it fails.
							$null = New-Item -Path $dir -ItemType Directory -Force -ErrorAction Stop
						}
						catch
						{
							# Handle errors when creating the folder (like permissions, bad path).
							$errorMsg = "  Failed to create required directory '$dir'. Please check permissions or path validity. Error: $($_.Exception.Message)"
							Write-Verbose $errorMsg -ForegroundColor Red
							Show-ErrorDialog $errorMsg
							return $false # Can't continue if creating the folder fails.
						}
					}
					else
					{
						Write-Verbose "  Directory exists: '$dir'" -ForegroundColor DarkGray
					}
				#endregion Step: Ensure Directory Exists
				
				#region Step: Test Directory Writability
					# Make a temporary file path in the current folder for a write test.
					# $testFile - Text, path for the temporary test file.
					[string]$testFile = Join-Path -Path $dir -ChildPath 'write_test.tmp'
					try
					{
						# Try writing a small bit of text to the test file.
						[System.IO.File]::WriteAllText($testFile, 'TestWriteAccess')
						# If writing works, delete the test file right away. -Force skips asking.
						Remove-Item -Path $testFile -Force -ErrorAction Stop
						Write-Verbose "  Directory is writable: '$dir'" -ForegroundColor DarkGray
					}
					catch
					{
						# Handle errors during writing or deleting (probably bad permissions).
						$errorMsg = "  Cannot write to directory '$dir'. Please check permissions. Error: $($_.Exception.Message)"
						Write-Verbose $errorMsg -ForegroundColor Red
						Show-ErrorDialog $errorMsg
						# Try cleaning up the test file just in case it was made but couldn't be deleted.
						if (Test-Path -Path $testFile -PathType Leaf)
						{
							Remove-Item -Path $testFile -Force -ErrorAction SilentlyContinue
						}
						return $false # Can't continue if the folder isn't writable.
					}
				#endregion Step: Test Directory Writability
			} # End of the loop for each directory.
			
			# If the loop finishes without returning false, all folders are ready.
			Write-Verbose "  Base configuration directories initialized and verified successfully." -ForegroundColor Green
			# Set the main state flag.
			$global:DashboardConfig.State.ConfigInitialized = $true
			return $true
		}
		catch
		{
			# Catch any surprise errors during the whole setup process.
			$errorMsg = "  An unexpected error occurred during base configuration directory initialization: $($_.Exception.Message)"
			Write-Verbose $errorMsg -ForegroundColor Red
			Show-ErrorDialog $errorMsg
			return $false
		}
	}
#endregion Function: Initialize-BaseConfig

#endregion Environment Initialization and Checks

#region Module Handling Functions

#region Function: Write-Module
	function Write-Module
	{
		<#
		.SYNOPSIS
			Writes module content (from a source file or Base64 string) to the designated modules directory in %APPDATA%, performing hash checks to avoid redundant writes.
		
		.DESCRIPTION
			This function handles the deployment of module files (e.g., .psm1, .dll, .ico) from their source location or embedded Base64 representation
			to the application's 'modules' directory under %APPDATA% (defined in $global:DashboardConfig.Paths.Modules).
			
			Key operations:
			1. Ensures the target 'modules' directory exists, attempting to create it if necessary.
			2. Retrieves the module content as a byte array, either by reading the source file specified by the -Content parameter or by decoding the Base64 string provided via -ContentBase64.
			3. If the target file already exists in the 'modules' directory:
			a. Compares the file size of the existing file with the size of the new content. If different, an update is needed.
			b. If sizes match, calculates the SHA256 hash of both the existing file and the new content in memory.
			c. If the hashes match, the function logs that no update is needed and returns the path to the existing file, avoiding an unnecessary write operation.
			d. If hashes differ, an update is needed.
			4. If the target file does not exist or an update is required (sizes/hashes differ), the function attempts to write the new content (byte array) to the target path.
			5. Includes a simple retry mechanism (up to 5 seconds) with short delays (100ms) specifically for System.IO.IOException errors during the write attempt, which often indicate temporary file locks.
		
		.PARAMETER ModuleName
			[string] The destination filename for the module in the target directory (e.g., 'ui.psm1', 'ftool.dll', 'icon.ico'). (Mandatory)
		
		.PARAMETER Content
			[string] Used in the 'FilePath' parameter set. The full path to the source file containing the module content to be copied. (Mandatory, ParameterSetName='FilePath')
		
		.PARAMETER ContentBase64
			[string] Used in the 'Base64Content' parameter set. A Base64 encoded string containing the module content to be decoded and written. (Mandatory, ParameterSetName='Base64Content')
		
		.OUTPUTS
			[string] Returns the full path to the successfully written (or verified existing and matching) module file in the target 'modules' directory.
			Returns $null if any critical operation fails (e.g., directory creation, source file reading, Base64 decoding, final write attempt after retries).
		
		.NOTES
			- Uses SHA256 hash comparison for efficient and reliable detection of unchanged files.
			- Error handling is implemented for directory creation, file reading, Base64 decoding, hash calculation, and file writing.
			- The write retry loop is basic and may not handle all concurrent access scenarios perfectly but addresses common temporary locks.
			- Uses [System.IO.File]::ReadAllBytes and ::WriteAllBytes for potentially better performance with binary files (.dll, .ico) compared to Get-Content/Set-Content.
		#>
		[CmdletBinding(DefaultParameterSetName = 'FilePath')] # Default to FilePath if only unnamed inputs are used.
		[OutputType([string])]
		param (
			[Parameter(Mandatory = $true, Position = 0)]
			[string]$ModuleName, # e.g., 'ui.psm1'
		
			[Parameter(Mandatory = $true, ParameterSetName = 'FilePath', Position = 1)]
			[ValidateScript({ Test-Path $_ -PathType Leaf })] # Basic check: make sure path exists and is a file.
			[string]$Content, # Source file path, e.g., 'C:\path\to\source\ui.psm1'
		
			[Parameter(Mandatory = $true, ParameterSetName = 'Base64Content')]
			[string]$ContentBase64 # Base64 encoded content text
		)
		
		# Get the destination folder path from the main config.
		# $modulesDir - Text, destination folder for modules.
		[string]$modulesDir = $global:DashboardConfig.Paths.Modules
		# Build the full path for the destination file.
		# $finalPath - Text, full destination path for the module file.
		[string]$finalPath = Join-Path -Path $modulesDir -ChildPath $ModuleName
		
		Write-Verbose "Executing Write-Module for '$ModuleName' to '$finalPath'" -ForegroundColor Cyan
		try
		{
			#region Step: Ensure Target Directory Exists
				# Check if the destination folder exists; try creating it if not.
				if (-not (Test-Path -Path $modulesDir -PathType Container))
				{
					Write-Verbose "Target module directory not found, attempting creation: '$modulesDir'" -ForegroundColor DarkGray
					try
					{
						$null = New-Item -Path $modulesDir -ItemType Directory -Force -ErrorAction Stop
						Write-Verbose "Target module directory created successfully: '$modulesDir'" -ForegroundColor Green
					}
					catch
					{
						# Major error if folder cannot be created.
						Write-Verbose "Failed to create target module directory '$modulesDir': $($_.Exception.Message)" -ForegroundColor Red
						return $null # Cannot continue.
					}
				}
			#endregion Step: Ensure Target Directory Exists
			
			#region Step: Get Content Bytes from Source (File or Base64)
				# $bytes - Array of bytes that will hold the module content.
				[byte[]]$bytes = $null
				Write-Verbose "  ParameterSetName: $($PSCmdlet.ParameterSetName)" -ForegroundColor DarkGray
				
				# Handle Base64 input
				if ($PSCmdlet.ParameterSetName -eq 'Base64Content')
				{
					if ([string]::IsNullOrEmpty($ContentBase64))
					{
						Write-Verbose "  ModuleName '$ModuleName': ContentBase64 parameter was provided but is empty." -ForegroundColor Yellow
						return $null
					}
					try
					{
						$bytes = [System.Convert]::FromBase64String($ContentBase64)
						Write-Verbose "  Decoded Base64 content for '$ModuleName' ($($bytes.Length) bytes)." -ForegroundColor DarkGray
					}
					catch
					{
						# Major error if Base64 decoding fails.
						Write-Verbose "  Failed to decode Base64 content for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
						return $null
					}
				}
				# Handle FilePath input
				elseif ($PSCmdlet.ParameterSetName -eq 'FilePath')
				{
					# File existence already checked by ValidateScript, but double-check path is valid.
					if ([string]::IsNullOrEmpty($Content) -or -not ([System.IO.File]::Exists($Content)) )
					{
						Write-Verbose "  ModuleName '$ModuleName': Source file path '$Content' is invalid or does not exist." -ForegroundColor Red
						return $null # Shouldn't happen with ValidateScript, but good safety check.
					}
					try
					{
						$bytes = [System.IO.File]::ReadAllBytes($Content)
						Write-Verbose "  Read source file content for '$ModuleName' from '$Content' ($($bytes.Length) bytes)." -ForegroundColor DarkGray
					}
					catch
					{
						# Major error if source file cannot be read.
						Write-Verbose "  Failed to read source file '$Content' for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
						return $null
					}
				}
				else # Shouldn't get here because of parameter sets
				{
					Write-Verbose "  ModuleName '$ModuleName': Invalid parameter combination or missing content." -ForegroundColor Red
					return $null
				}
				
				# Final check if the byte array got filled.
				if ($null -eq $bytes)
				{
					Write-Verbose "  Failed to obtain content bytes for '$ModuleName'. Source data might be empty or invalid." -ForegroundColor Red
					return $null
				}
			#endregion Step: Get Content Bytes from Source (File or Base64)
			
			#region Step: Check if File Needs Updating (Size and Hash Comparison)
				# $updateNeeded - Flag ($true/$false), decides if the file needs writing.
				[bool]$updateNeeded = $true
				if (Test-Path -Path $finalPath -PathType Leaf) # Check if the destination file exists.
				{
					Write-Verbose "  Target file exists: '$finalPath'. Comparing size and hash..." -ForegroundColor DarkGray
					try
					{
						# Get info about the existing file.
						# $fileInfo - File info object for the existing file.
						$fileInfo = Get-Item -LiteralPath $finalPath -Force -ErrorAction Stop
						
						# 1. Compare file sizes first (quick check).
						if ($fileInfo.Length -eq $bytes.Length)
						{
							Write-Verbose "  File sizes match ($($bytes.Length) bytes). Comparing SHA256 hashes..." -ForegroundColor DarkGray
							# 2. If sizes match, compare SHA256 hashes.
							# $existingHash - Text, SHA256 hash of the file on disk.
							[string]$existingHash = (Get-FileHash -LiteralPath $finalPath -Algorithm SHA256 -ErrorAction Stop).Hash
							
							# Calculate hash of the new content (bytes) in memory.
							# $memStream - Memory stream to feed bytes to Get-FileHash. 'Using' cleans it up.
							$newHash = try
							{
								$memStream = New-Object System.IO.MemoryStream(,$bytes)
								(Get-FileHash -InputStream $memStream -Algorithm SHA256 -ErrorAction Stop).Hash
							}
							finally
							{
								if ($memStream)
								{
									$memStream.Dispose() 
								}
							}
							
							Write-Verbose " - Existing Hash: $existingHash" -ForegroundColor DarkGray
							Write-Verbose " - New Hash:    - $newHash" -ForegroundColor DarkGray
							
							# If hashes match, no update needed.
							if ($existingHash -eq $newHash)
							{
								Write-Verbose "  Hashes match for '$ModuleName'. No update needed." -ForegroundColor DarkGray
								$updateNeeded = $false
								# Return path to the existing, checked file.
								return $finalPath
							}
							else
							{
								Write-Verbose "  Hashes differ for '$ModuleName'. Update required." -ForegroundColor Yellow 
							}
						}
						else
						{
							Write-Verbose "  File sizes differ (Existing: $($fileInfo.Length), New: $($bytes.Length)). Update required." -ForegroundColor Yellow 
						}
					}
					catch
					{
						# Handle errors during size/hash compare (like file locked, permissions).
						# Log a warning and assume an update is needed.
						Write-Verbose "  Could not compare size/hash for '$ModuleName' (Path: '$finalPath'). Will attempt to overwrite. Error: $($_.Exception.Message)" -ForegroundColor Yellow
						$updateNeeded = $true
					}
				}
				else
				{
					Write-Verbose "  Target file does not exist: '$finalPath'. Writing new file." -ForegroundColor DarkGray 
					$updateNeeded = $true
				}
			#endregion Step: Check if File Needs Updating (Size and Hash Comparison)
			
			#region Step: Write File to Target Path (with Retry on IO Exception)
				if ($updateNeeded)
				{
					# Set up retry settings.
					# $timeoutMilliseconds - Number, max time (ms) to spend retrying the write.
					[int]$timeoutMilliseconds = 5000  # 5 seconds total retry time.
					# $retryDelayMilliseconds - Number, delay (ms) between retries.
					[int]$retryDelayMilliseconds = 100 # Wait 100ms before trying again.
					# $startTime - DateTime, when the retry loop started.
					[datetime]$startTime = Get-Date
					# $fileWritten - Flag ($true/$false) if file was written okay within the time limit.
					[bool]$fileWritten = $false
					# $attempts - Number, counts how many times we tried writing.
					[int]$attempts = 0
					
					Write-Verbose "  Attempting to write file: '$finalPath'" -ForegroundColor DarkGray
					while (((Get-Date) - $startTime).TotalMilliseconds -lt $timeoutMilliseconds)
					{
						$attempts++
						try
						{
							# Try writing all bytes to the final path using a .NET method.
							[System.IO.File]::WriteAllBytes($finalPath, $bytes)
							$fileWritten = $true
							Write-Verbose "  Successfully wrote '$ModuleName' to '$finalPath' on attempt $attempts." -ForegroundColor Green
							break # Exit the retry loop if write worked.
						}
						catch [System.IO.IOException]
						{
							# Catch IO errors specifically (probably file lock). Log warning and retry after delay.
							Write-Verbose "  Attempt $($attempts): IO Error writing '$finalPath' (Retrying in $retryDelayMilliseconds ms): $($_.Exception.Message)" -ForegroundColor Red
							# Check if time is almost up before waiting.
							if (((Get-Date) - $startTime).TotalMilliseconds + $retryDelayMilliseconds -ge $timeoutMilliseconds)
							{
								Write-Verbose "  Timeout nearing, breaking retry loop for '$finalPath'." -ForegroundColor Yellow
								break # Don't wait longer than the timeout.
							}
							Start-Sleep -Milliseconds $retryDelayMilliseconds
						}
						catch
						{
							# Catch other surprise, non-retryable errors during write. Log error and stop loop.
							Write-Verbose "  Attempt $($attempts): Non-IO Error writing '$finalPath': $($_.Exception.Message)" -ForegroundColor Red
							$fileWritten = $false # Make sure flag is false.
							break # Exit loop on non-retryable error.
						}
					} # End of while retry loop
					
					# Check if the file was written okay after the loop.
					if (-not $fileWritten)
					{
						Write-Verbose "  Failed to write module '$ModuleName' to '$finalPath' after $attempts attempts within $timeoutMilliseconds ms timeout." -ForegroundColor Red
						return $null # Return null to show it failed.
					}
				} # End if($updateNeeded)
			#endregion Step: Write File to Target Path (with Retry on IO Exception)
			
			# If we get here, the file exists and is current, or it was just written successfully.
			return $finalPath
		}
		catch
		{
			# Catch any surprise errors in the main function part (like input check failed earlier).
			Write-Verbose "  An unexpected error occurred in Write-Module for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
			return $null
		}
	}
#endregion Function: Write-Module


#region Function: Import-ModuleUsingReflection
	# ... (Keep Import-ModuleUsingReflection function as it was) ...
	function Import-ModuleUsingReflection
	{
		<#
		.SYNOPSIS
			(Alternative Method) Imports a PowerShell module by reading, modifying (adding no-op Export-ModuleMember), and executing its content directly in the global scope via Invoke-Command.

		.DESCRIPTION
			This function offers another non-standard way to load a .psm1 module, aiming to address issues where `Import-Module` or `InvokeScript` fail due to `$using:` variables.
			Its process involves:
			1. Reading the entire content of the specified .psm1 file into a string.
			2. Storing the original content in $global:DashboardConfig.Resources.LoadedModuleContent.
			3. Prepending a simple, no-operation `Export-ModuleMember` function definition to the beginning of the content string.
			4. Creating a single `ScriptBlock` object from this modified content string.
			5. Executing this `ScriptBlock` directly in the current (global) execution context using `Invoke-Command -ScriptBlock $scriptBlock`. This method is chosen specifically because `Invoke-Command` executed locally *can* resolve `$using:` variables against the caller's scope.

		.PARAMETER Path
			[string] The full path to the .psm1 module file to be imported using this method. (Mandatory)

		.PARAMETER ModuleName
			[string] The logical name of the module being imported (e.g., 'ui.psm1'), used primarily for logging. (Mandatory)

		.OUTPUTS
			[bool] Returns $true if the `Invoke-Command` execution completes without throwing a terminating error.
			Returns $false if a fatal error occurs (e.g., file not found, terminating error during script execution).
			*Note: Returning $true indicates execution finished, but doesn't guarantee the module loaded correctly or that all its functions are available/working.*

		.NOTES
			- Global Scope Pollution: This method directly defines all functions, variables, and aliases from the module into the global scope.
			- Use Case: Fallback specifically intended to handle modules containing `$using:` variables that cause standard import/InvokeScript methods to fail.
			- Error Handling: Relies on catching terminating errors from `Invoke-Command`. Non-terminating errors within the module code will be logged by PowerShell but won't cause this function to return $false unless `-ErrorAction Stop` was used inside the module code itself.
		#>
		[CmdletBinding()]
		[OutputType([bool])]
		param(
			[Parameter(Mandatory = $true)]
			[ValidateScript({ Test-Path $_ -PathType Leaf })] # Make sure path exists and is a file.
			[string]$Path,

			[Parameter(Mandatory = $true)]
			[string]$ModuleName
		)

		Write-Verbose "Attempting reflection-style import (InvokeCommand in global scope) for '$ModuleName'." -ForegroundColor Cyan

		try
		{
			#region Step: Check File Existence (Redundant with ValidateScript but safe)
				if (-not (Test-Path -Path $Path -PathType Leaf))
				{
					Write-Verbose "Import-ModuleUsingReflection: Module file not found or is not a file: '$Path'" -ForegroundColor Red
					return $false
				}
			#endregion Step: Check File Existence

			#region Step: Read and Store Original Module Content
				[string]$moduleContent = [System.IO.File]::ReadAllText($Path)
				if ($null -eq $moduleContent)
				{
					if (Test-Path -Path $Path -PathType Leaf)
					{
						Write-Verbose "Import-ModuleUsingReflection: Module file '$Path' is empty. Considering import successful (no-op)." -ForegroundColor Yellow
						$global:DashboardConfig.Resources.LoadedModuleContent[$ModuleName] = ''
						return $true
					}
					else
					{
						Write-Verbose "Import-ModuleUsingReflection: Failed to read module file '$Path'." -ForegroundColor Red
						return $false
					}
				}
				# Ensure Resources hashtable exists before storing
				if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('Resources')) {
					$global:DashboardConfig['Resources'] = @{}
				}
				# Ensure LoadedModuleContent hashtable exists
				 if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and -not $global:DashboardConfig.Resources.ContainsKey('LoadedModuleContent')) {
					$global:DashboardConfig.Resources['LoadedModuleContent'] = @{}
				}
				$global:DashboardConfig.Resources.LoadedModuleContent[$ModuleName] = $moduleContent
				Write-Verbose "Read and stored original content for '$ModuleName'." -ForegroundColor DarkGray
			#endregion Step: Read and Store Original Module Content

			#region Step: Prepend No-Op Export-ModuleMember to Content
				# Define a simple Export-ModuleMember to potentially satisfy calls within the script
				# It does NOT actually export anything in the module sense.
				[string]$noOpExportFunc = @"
function Export-ModuleMember { 
param(
[string]`$Function, 
[string]`$Variable, 
[string]`$Alias, 
[string]`$Cmdlet
)
}
"@
				[string]$modifiedContent = @"
$noOpExportFunc

# --- Original Module Content Start ---
$moduleContent
# --- Original Module Content End ---
"@
			#endregion Step: Prepend No-Op Export-ModuleMember to Content

			#region Step: Create ScriptBlock and Execute Globally via Invoke-Command
				Write-Verbose "Creating ScriptBlock and executing modified content globally via Invoke-Command for '$ModuleName'..." -ForegroundColor DarkGray
				[scriptblock]$scriptBlock = [ScriptBlock]::Create($modifiedContent)
				try
				{
					# Execute the script block in the current scope using Invoke-Command
					# This method allows $using: variables to resolve against the caller's scope locally
					$null = Invoke-Command -ScriptBlock $scriptBlock
					
					# Check the automatic variable $? to see if any *non-terminating* errors occurred during execution
					if (-not $?)
					{
						# Log if non-terminating errors happened, but execution still finished
						Write-Verbose "Execution of '$ModuleName' content via Invoke-Command completed, but non-terminating errors occurred within the script (check logs above)." -ForegroundColor Yellow
						# We still return $true here as execution technically finished, but the caller (Import-DashboardModules)
						# should perform additional checks (like Get-Command) to verify function availability.
					}
					else
					{
						# Log successful completion of the Invoke-Command call
						Write-Verbose "Successfully finished executing modified script block for '$ModuleName' via Invoke-Command." -ForegroundColor Green
					}
					# Return true indicating Invoke-Command completed without *terminating* errors.
					# Does NOT guarantee functions are correctly defined globally.
					return $true 
				}
				catch # Catch only *terminating* errors from Invoke-Command itself
				{
					Write-Verbose "Terminating error occurred during Invoke-Command execution for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
					Write-Verbose "Stack Trace: $($_.ScriptStackTrace)"
					# Return false indicating a fatal error during execution.
					return $false 
				}
			#endregion Step: Create ScriptBlock and Execute Globally via Invoke-Command
		}
		catch # Catch errors during setup (read file, create scriptblock etc.)
		{
			Write-Verbose "FATAL error during reflection-style import (InvokeCommand) setup for '$ModuleName': $($_.Exception.Message)" -ForegroundColor Red
			return $false # Return false indicating setup failure
		}
	}
#endregion Function: Import-ModuleUsingReflection


#region Function: Import-DashboardModules
	function Import-DashboardModules
	{
		<#
		.SYNOPSIS
			Loads all defined dashboard modules according to priority, dependencies, and execution context (Script vs EXE).
		
		.DESCRIPTION
			This crucial function orchestrates the loading of all modules specified in '$global:DashboardConfig.Modules'.
			It performs the following steps:
			1. Initializes tracking variables for loaded and failed modules.
			2. Determines if the script is running as a compiled EXE or a standard .ps1 script, storing the result in '$global:DashboardConfig.State.IsRunningAsExe'. This influences the import strategy.
			3. Sorts the modules based on the 'Order' property defined in their metadata to ensure correct loading sequence.
			4. Iterates through the sorted modules:
			a. Checks if all dependencies listed for the current module are already present in '$global:DashboardConfig.LoadedModules'. If not, skips the module and records the failure. Critical module dependency failures trigger a critical failure flag.
			b. Calls 'Write-Module' to ensure the module file (or resource like .dll, .ico) exists in the %APPDATA%\modules directory, handling source file paths or Base64 content, and using hash checks for efficiency. If Write-Module fails, records the failure. Critical module write failures trigger the critical failure flag.
			c. If Write-Module succeeds, adds the module name and its written path to '$global:DashboardConfig.LoadedModules'. This satisfies dependency checks for subsequent modules, including non-PSM1 files like DLLs or icons.
			d. If the module is a PowerShell module (.psm1):
			i. Attempts multiple import strategies in sequence until one succeeds:
			- Attempt 1 (Preferred): Standard `Import-Module`. If running as EXE, it first modifies the content in memory to prepend a no-op `Export-ModuleMember`, writes this to a temporary file, imports the temp file, and then deletes it. If running as a script, it imports the written module path directly. Success is verified by checking `Get-Module`.
			- Attempt 2 (Alternative): Calls `Import-ModuleUsingReflection` function (InvokeCommand in global scope). **Crucially, after this attempt returns true, this function now performs an additional verification step using `Get-Command` for key functions expected from the module.** If key functions are missing, Attempt 2 is marked as failed, and the process proceeds to Attempt 3.
			- Attempt 3 (Last Resort): Uses `Invoke-Expression` on the module content after attempting to remove/comment out `Export-ModuleMember` calls using string replacement. This attempt includes its own verification and global re-definition of functions. **(Security Risk)**
			ii. If all import attempts fail for a .psm1 module, records the failure, removes the module from '$global:DashboardConfig.LoadedModules' (as it was written but not imported), and triggers the critical failure flag if the module was critical.
			5. After processing all modules, checks the critical failure flag. If set, returns a status object indicating failure.
			6. Logs warnings for any 'Important' modules that failed and informational messages for 'Optional' module failures.
			7. If no critical failures occurred, returns a status object indicating overall success (though non-critical modules may have failed).
		
		.OUTPUTS
			[PSCustomObject] Returns an object with the following properties:
			- Status [bool]: $true if all 'Critical' modules were successfully written and (if applicable) imported without fatal errors. $false if any 'Critical' module failed or if an unhandled exception occurred.
			- LoadedModules [hashtable]: A hashtable containing {ModuleName = Path} entries for all modules that were successfully written to the AppData directory by Write-Module (includes .psm1, .dll, .ico, etc.). Note that for .psm1, inclusion here doesn't guarantee successful *import*, only successful writing/verification. Check FailedModules for import status.
			- FailedModules [hashtable]: A hashtable containing {ModuleName = ErrorMessage} entries for modules that failed during dependency check, writing (Write-Module), or importing (for .psm1 files).
			- CriticalFailure [bool]: $true if a module marked with Priority='Critical' failed at any stage (dependency, write, or import). $false otherwise.
			- Exception [string]: (Optional) Included only if an unexpected, unhandled exception occurred within the Import-DashboardModules function itself. Contains the exception message.
		
		.NOTES
			- The multi-attempt import strategy for .psm1 files adds complexity but aims for robustness, especially in potentially problematic EXE execution environments.
			- Attempt 2 now includes verification. If it passes, Attempt 3 (Invoke-Expression) is skipped.
			- The use of `Invoke-Expression` (Attempt 3) remains a significant security risk and should ideally be avoided by refactoring modules to work with Attempt 1 or a reliable Attempt 2.
			- Dependency checking relies on modules being added to `$global:DashboardConfig.LoadedModules` *after* successful execution of `Write-Module`.
			- Error reporting distinguishes between Critical, Important, and Optional module failures. Only Critical failures halt the application startup process.
		#>
		[CmdletBinding()]
		[OutputType([PSCustomObject])]
		param()
		
		Write-Verbose "Initializing module import process..." -ForegroundColor Cyan
		
		# Set up the return object structure and internal tracking variables.
		# $result - PSCustomObject to return. Start with default failure state.
		$result = [PSCustomObject]@{
			Status          = $false # Default to failure until proven successful.
			LoadedModules   = $global:DashboardConfig.LoadedModules # Use global directly, shows state during the run.
			FailedModules   = @{}    # List to store {ModuleName = ErrorMessage}.
			CriticalFailure = $false # Flag for critical module failures.
			Exception       = $null  # Placeholder for errors we didn't handle.
		}
		# $failedModules - Local reference to the list inside the result object for easier updates.
		[hashtable]$failedModules = $result.FailedModules
		
		try
		{
			#region Step: Determine Execution Context (EXE vs. Script)
				# Get info about the current running process.
				# $currentProcess - Process object for the current PowerShell instance.
				$currentProcess = Get-Process -Id $PID -ErrorAction Stop # Use Get-Process instead of GetCurrentProcess() for consistent MainModule access.

				# $processPath - Text, the full path of the program file for the current process. Use Path property.
				[string]$processPath = $currentProcess.Path # Use Path property, usually more reliable

				# Check if the process path ends with .exe and is NOT a normal PowerShell program.
				# $isRunningAsExe - Flag ($true/$false).
				[bool]$isRunningAsExe = $processPath -like '*.exe' -and ($processPath -notlike '*powershell.exe' -and $processPath -notlike '*pwsh.exe')
				
				# Ensure State exists before setting IsRunningAsExe
				if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('State')) {
					$global:DashboardConfig['State'] = @{}
				}
				if ($global:DashboardConfig -and $global:DashboardConfig.State) {
					$global:DashboardConfig.State.IsRunningAsExe = $isRunningAsExe # Store globally.
				}
				Write-Verbose "  Execution context detected: $(if($isRunningAsExe){'Compiled EXE'} else {'PowerShell Script'}) (Process Path: '$processPath')" -ForegroundColor DarkGray
			#endregion Step: Determine Execution Context (EXE vs. Script)
			
			#region Step: Sort Modules by Defined 'Order' Property
				Write-Verbose "  Sorting modules based on 'Order' property..." -ForegroundColor DarkGray
				# $sortedModules - A list of module entries (Key/Value pairs) sorted by the 'Order' value in the module's info.
				# Need to handle errors if module config is messed up.
				$sortedModules = $global:DashboardConfig.Modules.GetEnumerator() |
				Where-Object {
					# Basic check: Make sure key exists and value is a hashtable with an 'Order' property.
					$_.Value -is [hashtable] -and $_.Value.ContainsKey('Order') -and $_.Value.Order -is [int]
				} |
				Sort-Object { $_.Value.Order } -ErrorAction SilentlyContinue # Sort based on the number 'Order' value.
				
				if (-not $sortedModules -or $sortedModules.Count -ne $global:DashboardConfig.Modules.Count)
				{
					# Check if sorting failed or if some modules were skipped due to bad structure.
					$invalidModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { -not ($_.Value -is [hashtable] -and $_.Value.ContainsKey('Order') -and $_.Value.Order -is [int]) }
					$errorMessage = "  Failed to sort modules or found invalid module configurations. Check structure in `$global:DashboardConfig.Modules."
					if ($invalidModules)
					{
						$errorMessage += " Invalid modules: $($invalidModules.Key -join ', ')"
					}
					Write-Verbose $errorMessage -ForegroundColor Red
					$result.Status = $false
					$result.CriticalFailure = $true # Treat sorting/config errors as critical.
					$failedModules['Module Sorting/Validation'] = $errorMessage
					return $result # Return failure right away.
				}
				Write-Verbose "  Processing $($sortedModules.Count) modules in defined order." -ForegroundColor DarkGray
			#endregion Step: Sort Modules by Defined 'Order' Property
			
			#region Step: Process Each Module in Sorted Order
				foreach ($entry in $sortedModules)
				{
					# $moduleName - Text, the key/filename of the module (e.g., 'ui.psm1').
					[string]$moduleName = $entry.Key
					# $moduleInfo - Hashtable holding info for this module (Priority, Order, Dependencies, FilePath/Base64Content).
					$moduleInfo = $entry.Value # Already checked as a hashtable during sorting.
					
					Write-Verbose "Processing Module: '$moduleName' (Priority: $($moduleInfo.Priority), Order: $($moduleInfo.Order))" -ForegroundColor Cyan
					
					#region SubStep: Check Dependencies
						Write-Verbose "- Checking dependencies..." -ForegroundColor DarkGray
						# $dependenciesMet - Flag ($true/$false), assume true until a missing dependency found.
						[bool]$dependenciesMet = $true
						# Check if Dependencies key exists, is an array, and has items.
						if ($moduleInfo.Dependencies -and $moduleInfo.Dependencies -is [array] -and $moduleInfo.Dependencies.Count -gt 0)
						{
							Write-Verbose "  - Required: $($moduleInfo.Dependencies -join ', ')" -ForegroundColor DarkGray
							foreach ($dependency in $moduleInfo.Dependencies)
							{
								# Check if the dependency is a key in the *global* loaded modules list.
								if (-not $global:DashboardConfig.LoadedModules.ContainsKey($dependency))
								{
									$errorMessage = "- Dependency NOT MET: Module '$dependency' must be loaded before '$moduleName'."
									Write-Verbose "- $errorMessage" -ForegroundColor Yellow
									$failedModules[$moduleName] = $errorMessage
									$dependenciesMet = $false
									# Check if this failure is critical.
									if ($moduleInfo.Priority -eq 'Critical')
									{
										Write-Verbose "- CRITICAL FAILURE: Critical module '$moduleName' cannot load due to missing dependency '$dependency'." -ForegroundColor Red
										$result.CriticalFailure = $true
									}
									break # No need to check more dependencies for this module.
								}
								else
								{
									Write-Verbose "  - Dependency satisfied: '$dependency' is loaded." -ForegroundColor DarkGray
								}
							}
						}
						else
						{
							Write-Verbose "  - No dependencies listed for '$moduleName'." -ForegroundColor DarkGray
						}
						
						# If dependencies aren't met, skip the rest of this module.
						if (-not $dependenciesMet)
						{
							continue
						} # Go to the next module in the loop.
					
					#endregion SubStep: Check Dependencies
					
					#region SubStep: Write Module to AppData Directory (Using Write-Module)
						# $modulePath - Text, path where module was written/checked. $null on failure.
						[string]$modulePath = $null
						Write-Verbose "- Ensuring module file exists in AppData via Write-Module for '$moduleName'..." -ForegroundColor DarkGray
						
						# Call Write-Module, giving inputs based on module's config (FilePath or Base64Content).
						try
						{
							if ($moduleInfo.ContainsKey('FilePath'))
							{
								[string]$sourceFilePath = $moduleInfo.FilePath
								# --- Add check for source file path ---
								if (-not (Test-Path $sourceFilePath -PathType Leaf)) {
									throw "Source FilePath specified in config does not exist or is not a file: '$sourceFilePath'"
								}
								Write-Verbose "Calling Write-Module with source FilePath: '$sourceFilePath'" -ForegroundColor Cyan
								$modulePath = Write-Module -ModuleName $moduleName -Content $sourceFilePath -ErrorAction Stop # Use Stop to catch errors here.
							}
							elseif ($moduleInfo.ContainsKey('Base64Content'))
							{
								[string]$base64Content = $moduleInfo.Base64Content
								Write-Verbose "Calling Write-Module with Base64Content (Length: $($base64Content.Length))" -ForegroundColor Cyan
								# Make sure content isn't null/empty before passing
								if ([string]::IsNullOrEmpty($base64Content))
								{
									throw "Base64Content for module '$moduleName' is empty."
								}
								$modulePath = Write-Module -ModuleName $moduleName -ContentBase64 $base64Content -ErrorAction Stop
							}
							else
							{
								# Shouldn't get here if sorting check worked.
								throw "Invalid module configuration format for '$moduleName' - missing FilePath or Base64Content."
							}
								
							# Check if Write-Module returned a valid path.
							if ([string]::IsNullOrEmpty($modulePath))
							{
								# Write-Module should ideally error out on failure with ErrorAction Stop, but double-check.
								throw "Write-Module returned null or empty path for '$moduleName', indicating write failure."
							}
								
							Write-Verbose "- [OK] Module file ready/verified: '$modulePath'" -ForegroundColor Green
							# Add/Update path in global loaded modules list. Happens for ALL written files (.psm1, .dll, .ico).
							# This is key for checking dependencies of non-PSM1 files.
							# Ensure LoadedModules hashtable exists
							if ($global:DashboardConfig -and -not $global:DashboardConfig.ContainsKey('LoadedModules')) {
								$global:DashboardConfig['LoadedModules'] = @{}
							}
							if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules) {
								$global:DashboardConfig.LoadedModules[$moduleName] = $modulePath
							}
								
						}
						catch
						{
							# Catch errors from Write-Module call or the code block above.
							$errorMessage = "- Failed to write or verify module file for '$moduleName'. Error: $($_.Exception.Message)"
							Write-Verbose "- $errorMessage" -ForegroundColor Red
							$failedModules[$moduleName] = $errorMessage
							# Check if this failure is critical.
							if ($moduleInfo.Priority -eq 'Critical')
							{
								Write-Verbose "- CRITICAL FAILURE: Failed to write critical module '$moduleName'." -ForegroundColor Red
								$result.CriticalFailure = $true
							}
							continue # Go to the next module.
						}
					#endregion SubStep: Write Module to AppData Directory (Using Write-Module)
						
					#region SubStep: Import PowerShell Modules (.psm1)
						# Only try PowerShell import steps if the module is a .psm1 file.
						if ($moduleName -like '*.psm1')
						{
							Write-Verbose "Attempting to import PowerShell module '$moduleName' from '$modulePath'..." -ForegroundColor Cyan
							# $importSuccess - Flag ($true/$false) for successful import of this specific PSM1 module.
							[bool]$importSuccess = $false
							# $importErrorDetails - Text to store failure details if all tries fail.
							[string]$importErrorDetails = 'All import attempts failed.'
							[string]$moduleBaseName = [System.IO.Path]::GetFileNameWithoutExtension($moduleName)

							# --- Import Try 1: Standard Import-Module (with EXE changes if needed) ---
							if (-not $importSuccess)
							{
								Write-Verbose "- Attempt 1: Using standard Import-Module..." -ForegroundColor Cyan
								try
								{
									# $effectiveModulePath - Path for Import-Module (might be temp path for EXE).
									[string]$effectiveModulePath = $modulePath
									# $tempModulePath - Path to temp changed file if running as EXE.
									[string]$tempModulePath = $null
										
									if ($isRunningAsExe)
									{
										Write-Verbose "  - (Running as EXE: Prepending no-op Export-ModuleMember to temporary file for import)" -ForegroundColor DarkGray
										# Create a unique temporary file path.
										$tempModulePath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), ('{0}_{1}.psm1' -f $moduleBaseName, [System.Guid]::NewGuid().ToString('N')))
										Write-Verbose "  - Temp file path: $tempModulePath" -ForegroundColor DarkGray
											
										# Read original content (already in global config or re-read to be safe).
										# $originalContent - Text, content of the module.
										# Ensure Resources and LoadedModuleContent exist
										[string]$originalContent = $null
										if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.LoadedModuleContent -and $global:DashboardConfig.Resources.LoadedModuleContent.ContainsKey($moduleName)) {
											$originalContent = $global:DashboardConfig.Resources.LoadedModuleContent[$moduleName]
										}
										if ($null -eq $originalContent)
										{
											$originalContent = [System.IO.File]::ReadAllText($modulePath)
										} # Re-read if not found
											
										# Define the dummy function text.
										$noOpExportFunc = "function Export-ModuleMember { param([Parameter(ValueFromPipeline=`$true)][string[]]`$Function, [string[]]`$Variable, [string[]]`$Alias, [string[]]`$Cmdlet) { Write-Verbose ""Ignoring Export-ModuleMember (EXE Mode Import for '$($using:moduleName)')"" -ForegroundColor Cyan} }"
										# Add to beginning and write to temp file using UTF8 encoding.
										Set-Content -Path $tempModulePath -Value "$noOpExportFunc`n`n# --- Original module content ($moduleName) follows ---`n$originalContent" -Encoding UTF8 -Force -ErrorAction Stop
										$effectiveModulePath = $tempModulePath # Use the temp path for import.
									}
										
									# Run Import-Module. -Force re-imports if already loaded (good for dev/debug).
									Import-Module -Name $effectiveModulePath -Force -ErrorAction Stop
										
									# Check module loaded okay by using Get-Module with the base name.
									if (Get-Module -Name $moduleBaseName -ErrorAction SilentlyContinue)
									{
										$importSuccess = $true
										Write-Verbose "- [OK] Attempt 1: SUCCESS (Standard Import-Module verified for '$moduleBaseName')." -ForegroundColor Green
									}
									else
									{
										# This might happen if Import-Module finishes but the module somehow doesn't show up right.
										Write-Verbose "- Attempt 1: FAILED (Standard Import-Module) - Module '$moduleBaseName' not found via Get-Module after import call." -ForegroundColor Yellow
										$importErrorDetails = "Standard Import-Module completed but module '$moduleBaseName' could not be verified via Get-Module."
										# If import failed, make sure any existing module state is removed before trying next way.
										Remove-Module -Name $moduleBaseName -Force -ErrorAction SilentlyContinue
									}
										
								}
								catch
								{
									Write-Verbose "- Attempt 1: FAILED (Standard Import-Module Error): $($_.Exception.Message)" -ForegroundColor Yellow
									$importErrorDetails = "Standard Import-Module Error: $($_.Exception.Message)"
									# Make sure any partial/failed module state is removed.
									Remove-Module -Name $moduleBaseName -Force -ErrorAction SilentlyContinue
								}
								finally
								{
									# Clean up temp file if one was made for EXE mode.
									if ($tempModulePath -and (Test-Path $tempModulePath))
									{
										Write-Verbose "  - Cleaning up temporary file: $tempModulePath" -ForegroundColor DarkGray
										Remove-Item -Path $tempModulePath -Force -ErrorAction SilentlyContinue
									}
								}
							} # End Try 1
																
							# --- Import Try 2: Import-ModuleUsingReflection (WITH VERIFICATION) ---
							if (-not $importSuccess)
							{
								# Check if the alternative function exists.
								if (Get-Command Import-ModuleUsingReflection -ErrorAction SilentlyContinue)
								{
									Write-Verbose "- Attempt 2: Using alternative Import-ModuleUsingReflection (InvokeCommand)..." -ForegroundColor Yellow
									try
									{
										# Call the reflection import function
										if (Import-ModuleUsingReflection -Path $modulePath -ModuleName $moduleName -ErrorAction Stop)
										{
											# --- Verification Step Added ---
											Write-Verbose "  - Attempt 2: InvokeCommand finished. Verifying key functions globally for '$moduleName'..." -ForegroundColor Magenta

											# Get the list of expected functions for this module (reuse from Attempt 3 logic)
											$keyFunctionsToVerify = @()
											if ($moduleName -eq 'ini.psm1')       { $keyFunctionsToVerify = @('Initialize-IniConfig', 'Get-IniFileContent', 'Read-Config', 'Write-Config', 'Copy-OrderedDictionary', 'LoadDefaultConfigOnError') }
											elseif ($moduleName -eq 'ui.psm1') { $keyFunctionsToVerify = @('Initialize-UI', 'Set-UIElement', 'Show-SettingsForm', 'Hide-SettingsForm', 'Sync-ConfigToUI', 'Sync-UIToConfig', 'Register-UIEventHandlers') }
											elseif ($moduleName -eq 'datagrid.psm1') { $keyFunctionsToVerify = @('Test-ValidParameters', 'Get-ProcessList', 'Remove-TerminatedProcesses', 'New-RowLookupDictionary', 'Update-ExistingRow', 'UpdateRowIndices', 'Add-NewProcessRow', 'Start-WindowStateCheck', 'Find-TargetRow', 'Clear-OldProcessCache', 'Update-DataGrid', 'Start-DataGridUpdateTimer' ) }
											elseif ($moduleName -eq 'launch.psm1')   { $keyFunctionsToVerify = @('Start-ClientLaunch', 'Stop-ClientLaunch') }
											elseif ($moduleName -eq 'login.psm1')    { $keyFunctionsToVerify = @('Restore-Window', 'Set-WindowForeground', 'Test-UserMouseIntervention', 'Wait-ForResponsive', 'Wait-ForFileAccess', 'Write-LogWithRetry', 'Invoke-MouseClick', 'Invoke-KeyPress', 'LoginSelectedRow') }
											elseif ($moduleName -eq 'ftool.psm1')    { $keyFunctionsToVerify = @('LoadFtoolSettings', 'FindOrCreateProfile', 'InitializeExtensionTracking', 'GetNextExtensionNumber', 'FindExtensionKeyByControl', 'LoadExtensionSettings', 'UpdateSettings', 'CreatePositionTimer', 'RepositionExtensions', 'CreateSpammerTimer', 'ToggleButtonState', 'CheckRateLimit', 'AddFormCleanupHandler', 'CleanupInstanceResources', 'Stop-FtoolForm', 'RemoveExtension', 'FtoolSelectedRow', 'CreateFtoolForm', 'AddFtoolEventHandlers', 'CreateExtensionPanel', 'AddExtensionEventHandlers', 'Get-VirtualKeyMappings', 'Show-KeyCaptureDialog') }
											
											[bool]$attempt2VerificationPassed = $true # Assume success until proven otherwise
											[string]$missingFunction = $null

											if ($keyFunctionsToVerify.Count -gt 0) {
												foreach ($funcName in $keyFunctionsToVerify) {
													if (-not (Get-Command -Name $funcName -CommandType Function -ErrorAction SilentlyContinue)) {
														$attempt2VerificationPassed = $false
														$missingFunction = $funcName
														Write-Verbose "  - Attempt 2: VERIFICATION FAILED. Function '$funcName' not found globally after InvokeCommand." -ForegroundColor Red
														$importErrorDetails = "Attempt 2 (InvokeCommand) completed but verification failed: Function '$funcName' not found globally."
														break # Stop checking if one is missing
													}
												}
											} else {
												Write-Verbose "  - Attempt 2: No specific key functions listed for verification for '$moduleName'. Assuming success based on InvokeCommand completion." -ForegroundColor DarkGray
												# If no functions to verify, trust the $true return from Import-ModuleUsingReflection
												$attempt2VerificationPassed = $true 
											}

											# Set final import success based on verification
											if ($attempt2VerificationPassed) {
												Write-Verbose "- [OK] Attempt 2: SUCCESS (InvokeCommand completed AND key functions verified for '$moduleName')." -ForegroundColor Green
												$importSuccess = $true
											} else {
												# Failure already logged above
												$importSuccess = $false
											}
											# --- End Verification Step ---
										}
										else # Import-ModuleUsingReflection returned false (fatal error during its execution)
										{
											Write-Verbose "- Attempt 2: FAILED (Import-ModuleUsingReflection returned false)." -ForegroundColor Yellow
											$importErrorDetails = 'Import-ModuleUsingReflection returned false (fatal execution error).'
											$importSuccess = $false # Ensure flag is false
										}
									}
									catch # Catch errors *calling* Import-ModuleUsingReflection
									{
										Write-Verbose "- Attempt 2: FAILED (Error calling Import-ModuleUsingReflection): $($_.Exception.Message)" -ForegroundColor Yellow
										$importErrorDetails = "Error calling Import-ModuleUsingReflection: $($_.Exception.Message)"
										$importSuccess = $false # Ensure flag is false
									}
								}
								else # Import-ModuleUsingReflection command not found
								{
									Write-Verbose "- Attempt 2: SKIPPED (Import-ModuleUsingReflection function not found)." -ForegroundColor Yellow
								}
							} # End Try 2
								
							# --- Import Try 3: Direct Invoke-Expression (Last Resort - Security Risk!) ---
							# This only runs if $importSuccess is still $false after Attempt 1 and Attempt 2 (including verification)
							if (-not $importSuccess)
							{
								Write-Verbose "- Attempt 3: Using LAST RESORT Invoke-Expression (Security Risk!)..." -ForegroundColor Yellow
								# === Add a variable to track functions caught just in *this* try ===
								$functionsCapturedInThisAttempt = @{}
								try
								{
									# Read module content (might be saved in global config).
									[string]$invokeContent = $null
									if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.LoadedModuleContent -and $global:DashboardConfig.Resources.LoadedModuleContent.ContainsKey($moduleName)) {
										$invokeContent = $global:DashboardConfig.Resources.LoadedModuleContent[$moduleName]
									}
									if ($null -eq $invokeContent)
									{
										$invokeContent = [System.IO.File]::ReadAllText($modulePath)
									} # Re-read if needed.

									# Basic try to disable Export-ModuleMember calls using multi-line regex replace.
									$invokeContent = $invokeContent -replace '(?m)^\s*Export-ModuleMember.*', "# Export-ModuleMember call disabled by Invoke-Expression wrapper for $moduleName"

									# Run the (maybe changed) content directly in the global space.
									Invoke-Expression -Command $invokeContent -ErrorAction Stop

									# First check if IEX finished without MAJOR error
									$iexCompletedWithoutTerminatingError = $?

									# Check key functions right away AND grab them if found
									$keyFunctionsToCapture = @()
									# --- LIST ALL EXPECTED EXPORTED/USED FUNCTIONS FOR EACH MODULE ---
									if ($moduleName -eq 'ini.psm1')       { $keyFunctionsToCapture = @('Initialize-IniConfig', 'Get-IniFileContent', 'Read-Config', 'Write-Config', 'Copy-OrderedDictionary', 'LoadDefaultConfigOnError') }
									elseif ($moduleName -eq 'ui.psm1') { $keyFunctionsToCapture = @('Initialize-UI', 'Set-UIElement', 'Show-SettingsForm', 'Hide-SettingsForm', 'Sync-ConfigToUI', 'Sync-UIToConfig', 'Register-UIEventHandlers') }
									elseif ($moduleName -eq 'datagrid.psm1') { $keyFunctionsToCapture = @('Test-ValidParameters', 'Get-ProcessList', 'Remove-TerminatedProcesses', 'New-RowLookupDictionary', 'Update-ExistingRow', 'UpdateRowIndices', 'Add-NewProcessRow', 'Start-WindowStateCheck', 'Find-TargetRow', 'Clear-OldProcessCache', 'Update-DataGrid', 'Start-DataGridUpdateTimer' ) }
									elseif ($moduleName -eq 'launch.psm1')   { $keyFunctionsToCapture = @('Start-ClientLaunch', 'Stop-ClientLaunch') }
									elseif ($moduleName -eq 'login.psm1')    { $keyFunctionsToCapture = @('Restore-Window', 'Set-WindowForeground', 'Test-UserMouseIntervention', 'Wait-ForResponsive', 'Wait-ForFileAccess', 'Write-LogWithRetry', 'Invoke-MouseClick', 'Invoke-KeyPress', 'LoginSelectedRow') }
									elseif ($moduleName -eq 'ftool.psm1')    { $keyFunctionsToCapture = @('LoadFtoolSettings', 'FindOrCreateProfile', 'InitializeExtensionTracking', 'GetNextExtensionNumber', 'FindExtensionKeyByControl', 'LoadExtensionSettings', 'UpdateSettings', 'CreatePositionTimer', 'RepositionExtensions', 'CreateSpammerTimer', 'ToggleButtonState', 'CheckRateLimit', 'AddFormCleanupHandler', 'CleanupInstanceResources', 'Stop-FtoolForm', 'RemoveExtension', 'FtoolSelectedRow', 'CreateFtoolForm', 'AddFtoolEventHandlers', 'CreateExtensionPanel', 'AddExtensionEventHandlers', 'Get-VirtualKeyMappings', 'Show-KeyCaptureDialog') }

									# Create captured functions storage if it doesn't exist
									if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and -not $global:DashboardConfig.Resources.ContainsKey('CapturedFunctions')) {
										$global:DashboardConfig.Resources['CapturedFunctions'] = @{}
									}

									$captureSuccess = $true # Assume capture worked at first
									$criticalFunctionMissing = $false

									if ($keyFunctionsToCapture.Count -gt 0) {
										Write-Verbose "- Attempt 3: Verifying and capturing key functions for '$moduleName' immediately after IEX..." -ForegroundColor Magenta
										foreach ($funcName in $keyFunctionsToCapture) {
											$funcInfo = Get-Command -Name $funcName -CommandType Function -ErrorAction SilentlyContinue
											if ($funcInfo) {
												$capturedScriptBlock = $funcInfo.ScriptBlock
												Write-Verbose "  - Found and capturing ScriptBlock for '$funcName'." -ForegroundColor Magenta
												# Store globally for possible later use (though direct global definition is main now)
												if ($global:DashboardConfig -and $global:DashboardConfig.Resources -and $global:DashboardConfig.Resources.CapturedFunctions) {
													$global:DashboardConfig.Resources.CapturedFunctions[$funcName] = $capturedScriptBlock
												}
												# === Store locally for immediate global definition ===
												$functionsCapturedInThisAttempt[$funcName] = $capturedScriptBlock
											} else {
												Write-Verbose "  - WARNING: Could not find/capture function '$funcName' immediately after IEX for '$moduleName'." -ForegroundColor Yellow
												$captureSuccess = $false
												# Check if the missing function is critical FOR STARTUP
												# --- Adjusted Critical Function Check ---
												$isCriticalModule = $moduleInfo.Priority -eq 'Critical' 
												# Consider a function critical if it's in a Critical module AND in the key function list
												if ($isCriticalModule) { 
													$criticalFunctionMissing = $true
													$importErrorDetails += "; Critical function '$funcName' not found after IEX in Critical module '$moduleName'"
													Write-Verbose "    - Missing function '$funcName' is considered critical for module '$moduleName'." -ForegroundColor Red
												} else {
													 $importErrorDetails += "; Non-critical function '$funcName' not found after IEX for module '$moduleName'"
												}
												# --- End Adjusted Critical Function Check ---
											}
										}
									}

									# Decide overall success for Try 3
									# Success means IEX didn't have non-terminating errors ($?),
									# capture succeeded, AND no *critical* functions were missing.
									if ($iexCompletedWithoutTerminatingError -and $captureSuccess -and (-not $criticalFunctionMissing)) {
										Write-Verbose "  - Attempt 3: IEX completed and key functions captured/verified for '$moduleName'." -ForegroundColor DarkGreen

										# === Define captured functions globally RIGHT AWAY ===
										Write-Verbose "  - Defining captured functions globally for '$moduleName'..." -ForegroundColor Magenta
										$definitionSuccess = $true # Track success of this small step
										foreach ($kvp in $functionsCapturedInThisAttempt.GetEnumerator()) {
											$funcNameToDefine = $kvp.Key
											$scriptBlockToDefine = $kvp.Value
											try {
												# Define in global function space
												Set-Item -Path "Function:\global:$funcNameToDefine" -Value $scriptBlockToDefine -Force -ErrorAction Stop
												Write-Verbose "    - Defined Function:\global:$funcNameToDefine" -ForegroundColor DarkMagenta
											} catch {
												Write-Verbose "    - FAILED to define Function:\global:$funcNameToDefine globally: $($_.Exception.Message)" -ForegroundColor Red
												$definitionSuccess = $false
												$importErrorDetails += "; Failed to define captured function '$funcNameToDefine' globally."
												# If defining a critical function fails, mark critical failure for the whole import process
												# --- Adjusted Critical Function Check ---
												if ($moduleInfo.Priority -eq 'Critical') {
													$result.CriticalFailure = $true
													Write-Verbose "    - Defining critical function '$funcNameToDefine' failed. Marking import as critical failure." -ForegroundColor Red
												}
												 # --- End Adjusted Critical Function Check ---
												break # Stop trying to define others for this module if one fails
											}
										}

										# Only mark the whole import successful if definitions also worked
										if ($definitionSuccess) {
											$importSuccess = $true
											Write-Verbose "- [OK] Attempt 3: SUCCESS (Invoke-Expression completed, key functions captured AND globally defined for $moduleName)." -ForegroundColor Green
										} else {
											$importSuccess = $false # Failed during definition
											Write-Verbose "- Attempt 3: FAILED during global definition phase for $moduleName." -ForegroundColor Red
										}

									} else { # IEX failed, capture failed, or critical function missing
										Write-Verbose "- Attempt 3: FAILED (IEX completed=$iexCompletedWithoutTerminatingError, CaptureSuccess=$captureSuccess, CriticalMissing=$criticalFunctionMissing) for $moduleName." -ForegroundColor Red
										if (-not $iexCompletedWithoutTerminatingError) { $importErrorDetails += "; IEX failed with non-terminating error detected by `$?."}
										if ($criticalFunctionMissing) { $importErrorDetails += "; Critical function missing prevented Attempt 3 success." }
										if (-not $captureSuccess) { $importErrorDetails += "; Function capture failed during Attempt 3." }
										$importSuccess = $false # Make sure import is marked as failed
									}
								}
								catch # Catch MAJOR errors from Invoke-Expression itself
								{
									Write-Verbose "- Attempt 3: FAILED (Invoke-Expression Error): $($_.Exception.Message)" -ForegroundColor Red
									$importErrorDetails = "Invoke-Expression Error: $($_.Exception.Message)"
									$importSuccess = $false # Make sure success is false if IEX throws major error
								}
							} # End Try 3

							# --- Final Check for PSM1 Import Success --- 
							if ($importSuccess)
							{
								Write-Verbose "- [OK] Successfully imported PSM1 module: '$moduleName'." -ForegroundColor Green
								# Module already added to $global:DashboardConfig.LoadedModules after Write-Module step.
							}
							else
							{
								$errorMessage = "All import methods FAILED for PSM1 module: '$moduleName'. Last error detail: $importErrorDetails"
								Write-Verbose "- $errorMessage" -ForegroundColor Red
								$failedModules[$moduleName] = $errorMessage
								# Critical: Remove from LoadedModules list if import failed after writing okay, as it's not really usable.
								if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules -and $global:DashboardConfig.LoadedModules.ContainsKey($moduleName))
								{
									Write-Verbose "- Removing '$moduleName' from LoadedModules list due to import failure." -ForegroundColor Yellow
									$global:DashboardConfig.LoadedModules.Remove($moduleName)
								}
								# Check if this failure is critical.
								if ($moduleInfo.Priority -eq 'Critical')
								{
									Write-Verbose "- CRITICAL FAILURE: Failed to import critical PSM1 module '$moduleName'." -ForegroundColor Red
									$result.CriticalFailure = $true
								}
							}
						}
					#endregion SubStep: Import PowerShell Modules (.psm1)
				} # End foreach ($entry in $sortedModules)
			#endregion Step: Process Each Module in Sorted Order
				
			#region Step: Final Status Check and Result Construction
				Write-Verbose "Module import check..." -ForegroundColor Cyan
					
				# Check for Critical Failures gathered during the loop.
				if ($result.CriticalFailure)
				{
					Write-Verbose "  CRITICAL FAILURE: One or more critical modules failed to load or write. Application cannot continue." -ForegroundColor Red
					# Find which critical modules exactly failed.
					$criticalModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Critical' }
					$failedCritical = $criticalModules | Where-Object { $failedModules.ContainsKey($_.Key) }
					if ($failedCritical)
					{
						Write-Verbose "  Failed critical modules: $($failedCritical.Key -join ', ')" -ForegroundColor Red
						$failedCritical | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor Red } 
					}
					$result.Status = $false # Make sure status is false.
					# Return the result object showing critical failure.
					return $result
				}
					
				# Report Important Module Failures (as Warnings).
				$importantModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Important' }
				$failedImportant = $importantModules | Where-Object { $failedModules.ContainsKey($_.Key) }
				if ($failedImportant.Count -gt 0)
				{
					Write-Verbose "  IMPORTANT module failures detected: $($failedImportant.Key -join ', '). Application may have limited functionality." -ForegroundColor Yellow
					# Log details of failures for important modules.
					$failedImportant | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor Yellow } 
				}
					
				# Report Optional Module Failures (as Info/DarkYellow).
				$optionalModules = $global:DashboardConfig.Modules.GetEnumerator() | Where-Object { $_.Value.Priority -eq 'Optional' }
				$failedOptional = $optionalModules | Where-Object { $failedModules.ContainsKey($_.Key) }
				if ($failedOptional.Count -gt 0)
				{
					Write-Verbose "  Optional module failures detected: $($failedOptional.Key -join ', '). Non-essential features might be unavailable." -ForegroundColor DarkYellow
					# Log details.
					$failedOptional | ForEach-Object { Write-Verbose "  - $($_.Key): $($failedModules[$_.Key])" -ForegroundColor DarkGray }
				}
					
				# If no critical failures happened, the whole process is seen as successful for startup.
				$successCount = 0
				if ($global:DashboardConfig -and $global:DashboardConfig.LoadedModules) {
					$successCount = $global:DashboardConfig.LoadedModules.Count
				}
				$failCount = $failedModules.Count
				Write-Verbose "  Module loading phase complete. Modules written/verified: $successCount. Failures (any type): $failCount." -ForegroundColor DarkGray
				if ($successCount -gt 0)
				{
					Write-Verbose "  Successfully written/verified modules: $($global:DashboardConfig.LoadedModules.Keys -join ', ')" -ForegroundColor DarkGray
				}
				if ($failCount -gt 0)
				{
					Write-Verbose "  Failed modules logged above." -ForegroundColor Yellow
				}
					
				# Set final status to true as no critical failures happened.
				$result.Status = $true
				$result.CriticalFailure = $false # Explicitly set false.
				# Return the final result object.
				return $result
			#endregion Step: Final Status Check and Result Construction
		}
		catch
		{
			# Catch surprise, unhandled errors within the main Import-DashboardModules function body.
			$errorMessage = "  FATAL UNHANDLED EXCEPTION in Import-DashboardModules: $($_.Exception.Message)"
			Write-Verbose $errorMessage -ForegroundColor Red
			Write-Verbose "  Stack trace: $($_.ScriptStackTrace)" -ForegroundColor Red
			# Fill and return the result object showing critical failure due to the error.
			$result.Status = $false
			$result.CriticalFailure = $true
			$result.Exception = $_.Exception.Message # Store error message.
			$failedModules['Unhandled Exception'] = $errorMessage # Add to failed modules list.
			return $result
		}
	}
#endregion Function: Import-DashboardModules

#endregion Module Handling Functions

#region UI and Application Lifecycle Functions

#region Function: Start-Dashboard
	function Start-Dashboard
	{
		<#
			.SYNOPSIS
				Initializes and displays the main dashboard user interface (UI) form.
			
			.DESCRIPTION
				This function orchestrates the startup of the application's graphical user interface. It performs these actions:
				1. Checks if the 'Initialize-UI' function, expected to be loaded from the 'ui.psm1' module, exists using `Get-Command`. If not found, it throws a terminating error as the UI cannot be built.
				2. Calls the `Initialize-UI` function. It assumes this function is responsible for creating all UI elements (forms, controls) and populating the '$global:DashboardConfig.UI' hashtable, including setting '$global:DashboardConfig.UI.MainForm'.
				3. Checks the return value of `Initialize-UI`. If it returns $false or null (interpreted as failure), it throws a terminating error.
				4. Verifies that '$global:DashboardConfig.UI.MainForm' exists and is a valid '[System.Windows.Forms.Form]' object after `Initialize-UI` returns successfully. If not, it throws a terminating error.
				5. If the MainForm is valid, it calls the `.Show()` method to make the main window visible and `.Activate()` to bring it to the foreground.
				6. Sets the global state flag '$global:DashboardConfig.State.UIInitialized' to $true.
			
			.OUTPUTS
				[bool] Returns $true if the UI is successfully initialized, the main form is found, shown, and activated.
				Returns $false if any step fails (missing function, initialization failure, missing main form), typically after throwing an error that gets caught by the main execution block.
			
			.NOTES
				- This function has a strong dependency on the 'ui.psm1' module being loaded correctly and functioning as expected (defining `Initialize-UI` and creating `MainForm`).
				- Errors encountered during this process are considered fatal for the application and are thrown to be caught by the main script's try/catch block, which should then display an error using `Show-ErrorDialog`.
		#>
		[CmdletBinding()]
		[OutputType([bool])]
		param()

		Write-Verbose "Starting Dashboard User Interface..." -ForegroundColor Cyan
		try
		{
			#region Step: Check for and Call Initialize-UI Function
				Write-Verbose "- Checking for required Initialize-UI function (from ui.psm1)..." -ForegroundColor DarkGray
				# Check that the Initialize-UI command (function) is available now.
				if (-not (Get-Command Initialize-UI -ErrorAction SilentlyContinue))
				{
					# Throw a major error if the function is missing.
					throw "FATAL: Initialize-UI function not found. Ensure 'ui.psm1' module loaded correctly and defines this function."
				}

				Write-Verbose "- Calling Initialize-UI function..." -ForegroundColor DarkGray
				# Run the UI setup function. Save its return value.
				Initialize-UI # Call directly now

				Write-Verbose "- [OK] Initialize-UI function executed successfully." -ForegroundColor Green
			#endregion Step: Check for and Call Initialize-UI Function

			#region Step: Verify, Show, and Activate Main Form
				Write-Verbose "- Verifying presence and type of UI.MainForm object..." -ForegroundColor DarkGray
				# Check if MainForm property exists in UI config and is a valid Form object.
				if ($null -eq $global:DashboardConfig.UI.MainForm -or -not ($global:DashboardConfig.UI.MainForm -is [System.Windows.Forms.Form]))
				{
					# Throw a major error if main form is missing or invalid after successful Initialize-UI call.
					throw 'FATAL: UI.MainForm object not found or is not a valid System.Windows.Forms.Form in $global:DashboardConfig after successful Initialize-UI call.'
				}

				Write-Verbose "- [OK] UI.MainForm found and is valid. Showing and activating window..." -ForegroundColor Green
				# Make the main app window visible.
				$global:DashboardConfig.UI.MainForm.Show() 
				
				# Update the global state flag to show the UI is now set up and running.
				$global:DashboardConfig.State.UIInitialized = $true
				Write-Verbose "  Dashboard UI started successfully." -ForegroundColor Green
			#endregion Step: Verify, Show, and Activate Main Form

			# Return true showing successful UI startup.
			return $true
		}
		catch
		{
			$errorMsg = "  FATAL: Failed to start dashboard UI. Error: $($_.Exception.Message)"
			Write-Verbose $errorMsg -ForegroundColor Red
			# Throw the error again to send it up to the main run block's catch.
			throw $_ # Use throw $_ to keep original error details.
		}
	}
#endregion Function: Start-Dashboard
	
#region Function: Start-MessageLoop
	function Start-MessageLoop
	{
		<#
			.SYNOPSIS
				Runs the Windows Forms message loop to keep the UI responsive until the main form is closed.
			
			.DESCRIPTION
				This function implements the core message processing loop required for a Windows Forms application. It keeps the UI alive and responsive to user interactions, window events, and timer ticks.
				
				The function first performs pre-checks:
				1. Verifies that the UI has been initialized (`$global:DashboardConfig.State.UIInitialized`).
				2. Verifies that the main form object (`$global:DashboardConfig.UI.MainForm`) exists, is a valid Form, and is not already disposed.
				
				If checks pass, it determines the loop method:
				- Preferred Native Loop: If the 'Native' class (expected from 'classes.psm1') and its required P/Invoke methods (`AsyncExecution`, `PeekMessage`, `TranslateMessage`, `DispatchMessage`) are detected, it uses an efficient loop based on `MsgWaitForMultipleObjectsEx` (wrapped in `AsyncExecution`). This waits for messages or a timeout, processing messages only when they arrive, thus minimizing CPU usage when idle.
				- Fallback DoEvents Loop: If the Native methods are unavailable, it falls back to a loop using `[System.Windows.Forms.Application]::DoEvents()`. This processes all pending messages but does not wait efficiently, potentially consuming more CPU. A short `Start-Sleep` (e.g., 20ms) is added within this loop to prevent 100% CPU usage.
				
				The chosen loop runs continuously as long as the main form (`$global:DashboardConfig.UI.MainForm`) is visible and not disposed.
			
			.OUTPUTS
				[void] This function runs synchronously and blocks execution until the main UI form is closed or disposed. It does not return a value.
			
			.NOTES
				- Requires the main UI form (`$global:DashboardConfig.UI.MainForm`) to be successfully initialized and shown by `Start-Dashboard` before being called.
				- The efficiency of the UI heavily depends on the availability and correctness of the 'Native' class methods from 'classes.psm1'. The `DoEvents` fallback is less performant.
				- Includes basic error handling within the loop itself and a final `DoEvents` fallback attempt if the primary loop method encounters an unhandled exception.
				- Logs the chosen loop method and status messages during execution and upon exit.
		#>
		[CmdletBinding()]
		[OutputType([void])]
		param()
			
		Write-Verbose "`Starting UI message loop..." -ForegroundColor Cyan
			
		#region Step: Pre-Loop Checks for UI State and Main Form Validity
			Write-Verbose "  Checking UI state before starting message loop..." -ForegroundColor DarkGray
			# Check if UI setup flag is set.
			if (-not $global:DashboardConfig.State.UIInitialized)
			{
				Write-Verbose "  UI not marked as initialized ($global:DashboardConfig.State.UIInitialized is $false). Skipping message loop." -ForegroundColor Yellow
				return # Exit function if UI isn't ready.
			}
			# Check if MainForm object exists and is a valid, non-disposed Form.
			$mainForm = $global:DashboardConfig.UI.MainForm # Local variable to make things easier.
			if ($null -eq $mainForm -or -not ($mainForm -is [System.Windows.Forms.Form]))
			{
				Write-Verbose "  MainForm object ($global:DashboardConfig.UI.MainForm) is missing or not a valid Form object. Cannot start message loop." -ForegroundColor Yellow
				return # Exit function if MainForm is invalid.
			}
			if ($mainForm.IsDisposed)
			{
				Write-Verbose "  MainForm ($global:DashboardConfig.UI.MainForm) is already disposed. Cannot start message loop." -ForegroundColor Yellow
				return # Exit function if MainForm is already disposed (cleaned up).
			}
			Write-Verbose "  Pre-loop checks passed. MainForm is valid and UI is initialized." -ForegroundColor Green
		#endregion Step: Pre-Loop Checks for UI State and Main Form Validity
			
		# $loopMethod - Text showing which loop type is used ('Native' or 'DoEvents').
		[string]$loopMethod = 'Unknown'
		try
		{
			#region Step: Determine Loop Method (Efficient Native P/Invoke vs. Fallback DoEvents)
				# $useNativeLoop - Flag ($true/$false), $true if Native methods seem available.
				[bool]$useNativeLoop = $false
				Write-Verbose "Detecting availability of Native methods for efficient loop..." -ForegroundColor Cyan
				try
				{
					# Check if the 'Native' type exists and has the key methods we need.
					# Use GetType() which errors if type not found, unlike PSTypeName.
					$nativeType = [type]'Native' # Errors if 'Native' class not loaded.
					if (($nativeType.GetMethod('AsyncExecution')) -and
						($nativeType.GetMethod('PeekMessage')) -and
						($nativeType.GetMethod('TranslateMessage')) -and
						($nativeType.GetMethod('DispatchMessage')))
					{
						Write-Verbose "- [OK] Native P/Invoke methods found (requires 'classes.psm1'). Using efficient message loop." -ForegroundColor Green
						$useNativeLoop = $true
						$loopMethod = 'Native'
					}
					else
					{
						Write-Verbose "- Native class found, but required methods (AsyncExecution, PeekMessage, etc.) are missing. Falling back to DoEvents loop." -ForegroundColor Yellow
						$loopMethod = 'DoEvents'
					}
				}
				catch [System.Management.Automation.RuntimeException]
				{
					# Catch specific error for type not found.
					Write-Verbose "- Native class not found. Falling back to less efficient Application.DoEvents() loop." -ForegroundColor Red
					$loopMethod = 'DoEvents'
				}
				catch
				{
					Write-Verbose "- Error checking for Native methods: $($_.Exception.Message). Falling back to DoEvents loop." -ForegroundColor Red
					$loopMethod = 'DoEvents'
				}
					
				# Make sure WinForms part is loaded if using DoEvents backup.
				if (-not $useNativeLoop)
				{
					Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue # Load if not already loaded.
				}
			#endregion Step: Determine Loop Method (Efficient Native P/Invoke vs. Fallback DoEvents)
				
			#region Step: Run the Chosen Message Loop
				Write-Verbose "Entering message loop (Method: $loopMethod). Loop runs until main form is closed..." -ForegroundColor Cyan
				# Loop keeps going as long as MainForm is valid, visible, and not disposed.
				# Re-check $mainForm validity inside the loop to be safe.
				while ($mainForm -and $mainForm.Visible -and -not $mainForm.IsDisposed)
				{
					if ($useNativeLoop)
					{
						# --- Efficient Native P/Invoke Loop ---
						try
						{
							# Wait efficiently for window messages (QS_ALLINPUT) or a timeout (like 50ms).
							# $result - Return value from AsyncExecution (based on MsgWaitForMultipleObjectsEx).
							# WAIT_OBJECT_0 (0) means a message arrived. WAIT_TIMEOUT (0x102) means timeout.
							$result = [Native]::AsyncExecution(0, [IntPtr[]]@(), $false, 50, [Native]::QS_ALLINPUT) # Timeout 50ms
								
							# If a message arrived (result is not WAIT_TIMEOUT).
							if ($result -ne 0x102) # Compare with decimal value of WAIT_TIMEOUT.
							{
								# Handle all waiting messages currently in the queue.
								# $msg - Structure to hold message details (Native+MSG).
								$msg = New-Object Native+MSG
								# PeekMessage with PM_REMOVE gets and removes message. Loop while messages exist.
								while ([Native]::PeekMessage([ref]$msg, [IntPtr]::Zero, 0, 0, [Native]::PM_REMOVE))
								{
									# Turn virtual-key messages into character messages.
									$null = [Native]::TranslateMessage([ref]$msg)
									# Send the message to the right window handler.
									$null = [Native]::DispatchMessage([ref]$msg)
								}
							}
							# If it was a timeout ($result -eq 0x102), the loop just continues and waits again. Nothing needed.
						}
						catch
						{
							# Catch errors *inside* the native loop run (e.g., P/Invoke call failed).
							Write-Verbose "  Error during Native message loop iteration: $($_.Exception.Message). Attempting to fall back to DoEvents..." -ForegroundColor Red
							$useNativeLoop = $false # Switch to DoEvents for the next loops.
							$loopMethod = 'DoEvents'
							Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue # Make sure assembly loaded for backup.
							Start-Sleep -Milliseconds 50 # Add a small pause before maybe starting DoEvents loop next time.
						}
					}
					else # Use Backup DoEvents Loop
					{
						# --- Backup Application.DoEvents() Loop ---
						try
						{
							# Handle all messages currently in the queue. Less efficient as it does everything even if idle.
							[System.Windows.Forms.Application]::DoEvents()
							# Add a small pause to stop this backup loop from using 100% CPU if no messages.
							Start-Sleep -Milliseconds 20 # 20ms pause balances responsiveness and CPU use.
						}
						catch
						{
							# Catch errors during DoEvents() or Start-Sleep.
							Write-Verbose "  Error during DoEvents fallback loop iteration: $($_.Exception.Message). Loop may become unresponsive." -ForegroundColor Red
							# Maybe add longer pause or break if errors keep happening? For now, just log and continue loop.
							Start-Sleep -Milliseconds 100
						}
					}
				} # End while ($mainForm.Visible -and -not $mainForm.IsDisposed)
			#endregion Step: Run the Chosen Message Loop
		}
		catch
		{
			# Catch surprise errors setting up or during the main loop logic (outside the inner try/catch).
			Write-Verbose "  FATAL Error occurred within the UI message loop setup or main structure: $($_.Exception.Message)" -ForegroundColor Red
			# Try a very basic DoEvents loop as a last resort if the main loop structure failed.
			Write-Verbose "  Attempting basic DoEvents fallback loop after critical error..." -ForegroundColor Cyan
			try
			{
				if ($mainForm -and -not $mainForm.IsDisposed)
				{
					Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue 
				}
					
				while ($mainForm -and $mainForm.Visible -and -not $mainForm.IsDisposed)
				{
					[System.Windows.Forms.Application]::DoEvents()
					Start-Sleep -Milliseconds 50 # Slightly longer pause in emergency backup.
				}
			}
			catch
			{
				Write-Verbose "  Emergency fallback DoEvents loop also failed: $($_.Exception.Message)" -ForegroundColor Red
				[System.Windows.Forms.Application]::Run($mainForm)
			}
		}
		finally
		{
			# This block runs when the message loop stops, either normally (window closed) or due to an error caught above.
			# Log the final state of the main form. Use $? to check if $mainForm variable exists before using its properties.
			if ($mainForm -and ($mainForm -is [System.Windows.Forms.Form]))
			{
				Write-Verbose "UI message loop exited (Method: $loopMethod). Final Form State -> Visible: $($mainForm.Visible), Disposed: $($mainForm.IsDisposed)" -ForegroundColor Cyan
			}
			else
			{
				Write-Verbose "UI message loop exited (Method: $loopMethod). MainForm object appears invalid or null upon exit." -ForegroundColor Yellow
			}
			# Mark UI as not initialized anymore *after* the loop finishes.
			$global:DashboardConfig.State.UIInitialized = $false
		}
	}
#endregion Function: Start-MessageLoop
	
#region Function: Stop-Dashboard
	function Stop-Dashboard
	{
		<#
			.SYNOPSIS
				Performs comprehensive cleanup of application resources during shutdown.
			
			.DESCRIPTION
				This function is responsible for gracefully stopping and releasing all resources allocated by the application
				and its modules. It's designed to be called within the main script's `finally` block to ensure cleanup
				happens reliably, even if errors occurred during execution.
				
				Cleanup is performed in a specific order to minimize dependency issues and errors:
				1.  **Ftool Forms:** If the optional 'ftool.psm1' module was loaded and created forms (tracked in `$global:DashboardConfig.Resources.FtoolForms`), it attempts to close and dispose of them. It preferably calls a `Stop-FtoolForm` function (if defined by ftool.psm1) for module-specific cleanup before falling back to basic `.Close()` and `.Dispose()` calls.
				2.  **Timers:** Stops and disposes of all `System.Windows.Forms.Timer` objects registered in `$global:DashboardConfig.Resources.Timers`. Handles nested collections if necessary.
				3.  **Main UI Form:** Disposes of the main application window (`$global:DashboardConfig.UI.MainForm`) if it exists and isn't already disposed.
				4.  **Runspaces & Module Cleanup:**
				*   Disposes of known background runspaces (e.g., `$global:DashboardConfig.Resources.LaunchResources` if used by 'launch.psm1').
				*   Calls specific cleanup functions (e.g., `Stop-ClientLaunch`, `CleanupLogin`, `CleanupFtool`) if they exist (assumed to be defined by the respective modules). These functions are expected to handle module-specific resource release (e.g., closing handles, stopping threads).
				5.  **Application State:** Resets global state flags (`UIInitialized`, `LoginActive`, `LaunchActive`) to $false.
			
			.OUTPUTS
				[bool] Returns $true if all cleanup steps attempted completed without throwing *new* errors during the cleanup process itself.
				Returns $false if any cleanup step encountered an error (logged as a warning). The function attempts to continue subsequent cleanup steps even if one fails.
			
			.NOTES
				- Uses individual `try/catch` blocks around major cleanup sections (Ftool forms, Timers, Main Form, Runspaces/Modules) to ensure robustness. An error in one section should not prevent others from running.
				- Errors encountered *during cleanup* are logged using `Write-Verbose` and cause the function to return $false, but they do not typically halt the entire cleanup process.
				- Relies on modules potentially defining specific cleanup functions (`Cleanup<ModuleName>`) or resources (like `$global:DashboardConfig.Resources.LaunchResources`). These need to be implemented correctly within the modules themselves.
				- The order of operations is important (e.g., dispose child forms before main form, stop timers before disposing forms they might interact with).
			#>
		[CmdletBinding()]
		[OutputType([bool])]
		param()
			
		Write-Verbose "Stopping Dashboard and Cleaning Up Application Resources..." -ForegroundColor Cyan
		# $cleanupOverallSuccess - Flag ($true/$false) to track if *any* cleanup step had an error. Default to true.
		[bool]$cleanupOverallSuccess = $true

		#region Step 0: Clean Up launch recources
		Write-Verbose "Step 0: Cleaning up Launch..." -ForegroundColor Cyan
		Stop-ClientLaunch
		#endregion Step 0: Clean Up launch recources
			
		#region Step 1: Clean Up Ftool Forms (if Ftool module was loaded/used)
			Write-Verbose "Step 1: Cleaning up Ftool forms..." -ForegroundColor Cyan
			try
			{
				# Check if the FtoolForms list exists and has items. Use .PSObject.Properties to check safely.
				$ftoolForms = $global:DashboardConfig.Resources.FtoolForms
				if ($ftoolForms -and $ftoolForms.Count -gt 0)
				{
					# Check if the special cleanup function from ftool.psm1 exists.
					# $stopFtoolFormCmd - FunctionInfo object or null.
					$stopFtoolFormCmd = Get-Command -Name Stop-FtoolForm -ErrorAction SilentlyContinue
					# Make a copy of the keys to loop over, as we change the list during the loop.
					# $formKeys - List of text (form names).
					[string[]]$formKeys = @($ftoolForms.Keys)
					Write-Verbose "- Found $($formKeys.Count) Ftool form(s) registered. Attempting cleanup..." -ForegroundColor DarkGray
						
					foreach ($key in $formKeys)
					{
						# Get the form object safely.
						# $form - The Ftool form object, maybe null or disposed.
						$form = $ftoolForms[$key]
						# Check if it's a valid, non-disposed Windows Form.
						if ($form -and $form -is [System.Windows.Forms.Form] -and -not $form.IsDisposed)
						{
							$formText = try
							{
								$form.Text 
							}
							catch
							{
								'(Error getting text)' 
							} # Get form text safely.
							Write-Verbose "  - Stopping Ftool form '$formText' (Key: $key)." -ForegroundColor Cyan
							try
							{
								# Use the module's special cleanup function if available.
								if ($stopFtoolFormCmd)
								{
									Write-Verbose "  - Using Stop-FtoolForm function..." -ForegroundColor Cyan
									Stop-FtoolForm -Form $form -ErrorAction Stop # Call specific cleanup.
								}
								else # Basic backup cleanup.
								{
									Write-Verbose "  - Stop-FtoolForm command not found. Performing basic Close() for form '$formText'." -ForegroundColor Yellow
									# Ask the form to close nicely. This triggers FormClosing/FormClosed events.
									$form.Close()
									# Give a tiny moment for events to process, maybe not needed but can help sometimes.
									Start-Sleep -Milliseconds 20
								}
							}
							catch # Catch errors specifically from Stop-FtoolForm or Close().
							{
								Write-Verbose "  - Error during Stop-FtoolForm or Close() for form '$formText': $($_.Exception.Message)" -ForegroundColor Red
								# Mark overall cleanup as possibly failed, but continue to make sure Dispose() is called.
								$cleanupOverallSuccess = $false
							}
							finally # Always try to dispose the form directly, whether Close() worked or not.
							{
								Write-Verbose "  - Ensuring Dispose() is called for form '$formText'." -ForegroundColor Cyan
								try
								{
									if (-not $form.IsDisposed)
									{
										$form.Dispose() 
									}
								}
								catch
								{
									Write-Verbose "  - Error during final Dispose() for form '$formText': $($_.Exception.Message)" -ForegroundColor Red
									$cleanupOverallSuccess = $false
								}
							}
						}
						elseif ($form -and $form -is [System.Windows.Forms.Form] -and $form.IsDisposed)
						{
							Write-Verbose "  - Ftool form with Key '$key' was already disposed." -ForegroundColor DarkGray
						}
						else
						{
							Write-Verbose "  - Ftool form entry with Key '$key' is null or not a valid Form object." -ForegroundColor Yellow
							$cleanupOverallSuccess = $false
						}
							
						# Remove the entry from the tracking list after trying cleanup.
						$ftoolForms.Remove($key) | Out-Null
					} # End foreach form key
					Write-Verbose "- Finished Ftool form cleanup." -ForegroundColor Green
				}
				else
				{
					Write-Verbose "  No active Ftool forms found in configuration to clean up." -ForegroundColor DarkGray 
				}
			}
			catch # Catch errors in the Ftool cleanup part setup (e.g., accessing FtoolForms).
			{
				Write-Verbose "Error during Ftool form cleanup phase setup: $($_.Exception.Message)" -ForegroundColor Red
				$cleanupOverallSuccess = $false
			}
		#endregion Step 1: Clean Up Ftool Forms (if Ftool module was loaded/used)
			
		#region Step 2: Clean Up Application Timers
			Write-Verbose "Step 2: Cleaning up application timers..." -ForegroundColor Cyan
			try
			{
				# Check if the Timers list exists and has items.
				$timersCollection = $global:DashboardConfig.Resources.Timers
				if ($timersCollection -and $timersCollection.Count -gt 0)
				{
					Write-Verbose "- Found $($timersCollection.Count) timer registration(s). Stopping and disposing..." -ForegroundColor Cyan
					# Use a temporary list to gather all unique timer objects, handling possible nesting or duplicates.
					# $uniqueTimers - List of separate timer objects.
					[System.Collections.Generic.List[System.Windows.Forms.Timer]]$uniqueTimers = New-Object System.Collections.Generic.List[System.Windows.Forms.Timer]
						
					# Go through the registered items in the Timers list.
					# Items could be single timers, or nested lists (like hashtables) of timers.
					foreach ($item in $timersCollection.Values)
					{
						if ($item -is [System.Windows.Forms.Timer])
						{
							if (-not $uniqueTimers.Contains($item))
							{
								$uniqueTimers.Add($item) 
							}
						}
						elseif ($item -is [System.Collections.IDictionary])
						{
							# If item is another list, go through its values.
							$item.Values | Where-Object { $_ -is [System.Windows.Forms.Timer] } | ForEach-Object {
								if (-not $uniqueTimers.Contains($_))
								{
									$uniqueTimers.Add($_) 
								}
							}
						}
						# Add checks for other possible list types if used (like ArrayList).
					}
					Write-Verbose "- Found $($uniqueTimers.Count) unique System.Windows.Forms.Timer object(s) to dispose." -ForegroundColor Cyan
						
					# Go through the unique timer objects.
					foreach ($timer in $uniqueTimers)
					{
						try
						{
							# Check if timer object is valid and not already disposed.
							if ($timer -and -not $timer.IsDisposed) # Check IsDisposed before accessing properties like Enabled.
							{
								Write-Verbose "  - Disposing timer (Was Enabled: $($timer.Enabled))." -ForegroundColor Green
								# Stop the timer first if it's running now.
								if ($timer.Enabled)
								{
									$timer.Stop() 
								}
								# Dispose of the timer object to free up resources.
								$timer.Dispose()
							}
							else
							{
								Write-Verbose "  - Skipping already disposed or invalid timer object." -ForegroundColor DarkGray
							}
						}
						catch # Catch errors during individual timer Stop() or Dispose().
						{
							Write-Verbose "  - Error stopping or disposing a timer: $($_.Exception.Message)" -ForegroundColor Red
							$cleanupOverallSuccess = $false # Mark overall cleanup as possibly incomplete.
						}
					} # End foreach timer
						
					# Clear the main timer list in the global config after trying disposal.
					Write-Verbose "- Clearing global timer registration collection." -ForegroundColor Cyan
					$timersCollection.Clear()
					Write-Verbose "- Finished timer cleanup." -ForegroundColor Green
				}
				else
				{
					Write-Verbose "- No active timers found in configuration to clean up." -ForegroundColor DarkGray 
				}
			}
			catch # Catch errors in the timer cleanup part setup.
			{
				Write-Verbose "Error during timer cleanup phase setup: $($_.Exception.Message)" -ForegroundColor Red
				$cleanupOverallSuccess = $false
			}
		#endregion Step 2: Clean Up Application Timers
			
		#region Step 3: Clean Up Main UI Form
			Write-Verbose "Step 3: Cleaning up main UI form..." -ForegroundColor Cyan
			try
			{
				# Check if the main form object exists, is a Form, and is not already disposed.
				$mainForm = $global:DashboardConfig.UI.PSObject.Properties['MainForm']
				if ($mainForm -and $mainForm.Value -is [System.Windows.Forms.Form] -and -not $mainForm.Value.IsDisposed)
				{
					Write-Verbose "- Disposing MainForm object..." -ForegroundColor DarkGray
					# Dispose of the main form object. Should trigger its FormClosed event if not already closed.
					$mainForm.Value.Dispose()
					Write-Verbose "- [OK] MainForm disposed." -ForegroundColor Green
				}
				elseif ($mainForm -and $mainForm.Value -is [System.Windows.Forms.Form] -and $mainForm.Value.IsDisposed)
				{
					Write-Verbose "- MainForm was already disposed." -ForegroundColor Yellow
				}
				else
				{
					Write-Verbose "- MainForm object not found or invalid in configuration." -ForegroundColor Yellow
				}
			}
			catch # Catch errors during main form disposal.
			{
				Write-Verbose "Error disposing main UI form: $($_.Exception.Message)" -ForegroundColor Red
				$cleanupOverallSuccess = $false
			}
		#endregion Step 3: Clean Up Main UI Form
			
		#region Step 4: Reset Application State Flags
			Write-Verbose "Step 5: Resetting application state flags..." -ForegroundColor Cyan
			try
			{
				# Reset flags to show the app is no longer active/set up.
				$global:DashboardConfig.State.UIInitialized = $null
				$global:DashboardConfig.State.LoginActive = $null
				$global:DashboardConfig.State.LaunchActive = $null
				$global:DashboardConfig.State.ConfigInitialized = $null
				$global:DashboardConfig.LoadedModules = $null
				Write-Verbose "- State flags reset." -ForegroundColor Green
			}
			catch # Catch errors during state flag resetting.
			{
				Write-Verbose "  Error resetting global state flags: $($_.Exception.Message)" -ForegroundColor Red
				# Continue cleanup even with this small issue.
				$cleanupOverallSuccess = $false
			}
		#endregion Step 4: Reset Application State Flags
				
		#region Step 5: Final Log Message for Cleanup Status
			# Set log color based on overall cleanup success flag.
			# $finalColor - Text, 'Green' for success, 'Yellow' for partial success/warnings.
			[string]$finalColor = if ($cleanupOverallSuccess)
			{
				'Green' 
			}
			else
			{
				'Yellow' 
			}
			Write-Verbose "--- Dashboard Cleanup Finished. Overall Success: $cleanupOverallSuccess ---" -ForegroundColor $finalColor
		#endregion Step 5: Final Log Message
			
		# Return the overall success status of the cleanup actions.
		return $cleanupOverallSuccess
	}
#endregion Function: Stop-Dashboard

#endregion UI and Application Lifecycle Functions

#region Main Execution Block

# This is the main start point and control flow of the script.
Write-Verbose "=========================================" -ForegroundColor Cyan
Write-Verbose "=== Initializing Entropia Dashboard ===" -ForegroundColor Cyan
Write-Verbose "=== Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ===" -ForegroundColor Cyan
Write-Verbose "=========================================" -ForegroundColor Cyan
	
# Main try/catch/finally block to manage the app life cycle and ensure cleanup.
try
{
	#region Step 1: Ensure Correct Execution Environment (Admin, 32-bit, Bypass Policy)
		Write-Verbose "--- Step 1: Ensuring Correct Execution Environment ---" -ForegroundColor Cyan
		# Request-Elevation checks and might restart the script. If it restarts, this one exits here.
		Request-Elevation
		# If script continues, Request-Elevation decided no restart needed OR restart failed (error shown, exited).
		# Initialize-ScriptEnvironment does final checks *after* possible restart.
		if (-not (Initialize-ScriptEnvironment))
		{
			# If checks fail even after possible restart try, throw a major error. Show-ErrorDialog was probably called inside.
			throw 'Environment verification failed (Admin/32-bit/Bypass). Cannot continue.'
		}
		Write-Verbose "[OK] Environment verified successfully." -ForegroundColor Green
	#endregion Step 1: Ensure Correct Execution Environment (Admin, 32-bit, Bypass Policy)
		
	#region Step 2: Initialize Base Configuration (AppData Paths)
		Write-Verbose "--- Step 2: Initializing Base Configuration (AppData Paths) ---" -ForegroundColor Cyan
		if (-not (Initialize-BaseConfig))
		{
			# If essential paths can't be made/checked writable, throw major error. Show-ErrorDialog probably called inside.
			throw 'Failed to initialize base application paths in %APPDATA%. Cannot continue.'
		}
		Write-Verbose "[OK] Base configuration paths initialized successfully." -ForegroundColor Green
	#endregion Step 2: Initialize Base Configuration (AppData Paths)
		
	#region Step 3: Load Dashboard Modules (Write to AppData & Import)
		Write-Verbose "--- Step 3: Loading Dashboard Modules ---" -ForegroundColor Cyan
		# $importResult - PSCustomObject holding Status, LoadedModules, FailedModules, CriticalFailure.
		$importResult = Import-DashboardModules
		# $global:DashboardConfig.LoadedModules is updated directly inside Import-DashboardModules.
			
		# Check if the import process reported overall failure (specifically critical failure).
		if (-not $importResult.Status) # Status is false if CriticalFailure is true or an unhandled error happened.
		{
			# If critical modules failed, throw major error. Error details logged inside Import-DashboardModules.
			throw 'Critical module loading failed. Cannot continue.'
		}
		# Non-critical failures were logged as warnings/info inside Import-DashboardModules.
		Write-Verbose "[OK] Core modules loaded successfully (Non-critical failures may exist, see logs)." -ForegroundColor Green
	#endregion Step 3: Load Dashboard Modules (Write to AppData & Import)
		
	#region Step 4: Load INI Configuration File
		Write-Verbose "--- Step 4: Loading INI Configuration ---" -ForegroundColor Cyan
		# Check if the Initialize-IniConfig function (expected from ini.psm1) is available.
		if (Get-Command Initialize-IniConfig -ErrorAction SilentlyContinue) # Just use Get-Command
		{
			Write-Verbose "Calling Initialize-IniConfig..." -ForegroundColor Cyan
			try
			{
				# Run the INI loading function. Assuming it returns true/false or handles errors itself.
				[bool]$iniLoadSuccess = Initialize-IniConfig -ErrorAction Stop # Call directly
				if (-not $iniLoadSuccess)
				{
					# Log a warning if INI loading fails (as function reported), but continue with defaults.
					Write-Verbose "  Initialize-IniConfig reported failure. Default configuration values may be used." -ForegroundColor Yellow
				}
				else
				{
					Write-Verbose "[OK] INI configuration loaded successfully." -ForegroundColor Green 
				}
			}
			catch
			{
				Write-Verbose "  Error occurred during Initialize-IniConfig execution: $($_.Exception.Message). Default configuration values may be used." -ForegroundColor Yellow
			}
		}
		else
		{
			# Log a warning if the function is missing
			Write-Verbose "  Initialize-IniConfig function not found. Skipping INI load, defaults will be used." -ForegroundColor Yellow
		}
	#endregion Step 4: Load INI Configuration File
		
	#region Step 5: Start Dashboard User Interface
		Write-Verbose "--- Step 5: Starting Dashboard UI ---" -ForegroundColor Cyan
		# Start-Dashboard sets up and shows the main window. It errors out on failure.
		if (-not (Start-Dashboard)) # This check is a bit extra as Start-Dashboard errors on failure, but safe.
		{
			# Error should have been thrown by Start-Dashboard and caught by outer catch block.
			# This throw might not be reached but makes sure script stops if Start-Dashboard somehow returned false without erroring.
			throw 'Start-Dashboard returned failure. Cannot continue.'
		}
		Write-Verbose "[OK] Dashboard UI started successfully." -ForegroundColor Green
	#endregion Step 5: Start Dashboard User Interface
		
	#region Step 6: Run UI Message Loop

		Write-Verbose "Attempting to bring MainForm to foreground using SetForegroundWindow..." -ForegroundColor Cyan
		$mainForm = $global:DashboardConfig.UI.MainForm
		$handle = $mainForm.Handle
		
		if ($handle -ne [IntPtr]::Zero) {
			# Give the window a moment to finish initializing after Show()
			Start-Sleep -Milliseconds 200 # Slightly longer delay might help
		
			# 1. Ensure the window is not minimized
			if ([Native]::IsWindowMinimized($handle)) {
				Write-Verbose "Window is minimized, restoring..." -ForegroundColor DarkGray
				[Native]::ShowWindow($handle, [Native]::SW_RESTORE) | Out-Null
				Start-Sleep -Milliseconds 150 # Extra delay after restore
			}
		
			# 2. Initial SetForegroundWindow attempt
			$success = [Native]::SetForegroundWindow($handle)
			Write-Verbose "Initial SetForegroundWindow result: $success" -ForegroundColor DarkGray
		
			# 3. If initial attempt failed, try the Alt-key simulation workaround
			if (-not $success) {
				Write-Verbose "Initial SetForegroundWindow failed. Attempting Alt-key simulation..." -ForegroundColor Yellow
				try {
					# Simulate Alt key press and release
					[Native]::keybd_event([Native]::VK_MENU, 0, [Native]::KEYEVENTF_EXTENDEDKEY, [UIntPtr]::Zero)
					Start-Sleep -Milliseconds 50
					[Native]::keybd_event([Native]::VK_MENU, 0, ([Native]::KEYEVENTF_EXTENDEDKEY -bor [Native]::KEYEVENTF_KEYUP), [UIntPtr]::Zero)
					Start-Sleep -Milliseconds 100 # Slightly longer pause after Alt release
		
					# Retry SetForegroundWindow - this is the crucial attempt
					$success = [Native]::SetForegroundWindow($handle)
					Write-Verbose "SetForegroundWindow result after Alt-key simulation: $success" -ForegroundColor DarkGray
		
				} catch {
					Write-Verbose "Error during Alt-key simulation or second SetForegroundWindow: $_" -ForegroundColor Red
					$success = $false
				}
			}
		
			# 4. Final Fallback: Use WinForms Activate if all else failed
			if (-not $success) {
				Write-Verbose "All SetForegroundWindow attempts failed. Using Activate() as fallback..." -ForegroundColor Yellow
				try {
					$mainForm.Activate()
					Write-Verbose "Activate() called." -ForegroundColor DarkGray
				} catch {
					Write-Verbose "Error calling Activate(): $_" -ForegroundColor Red
				}
			}
		} else {
			Write-Verbose "MainForm handle is zero, cannot force focus." -ForegroundColor Yellow
		}
		Write-Verbose "--- Step 6: Running UI Message Loop ---" -ForegroundColor Cyan
		# Start-MessageLoop pauses execution here until the main UI window is closed by user or code.
		# It handles UI responsiveness.
		Start-MessageLoop
		# Execution continues here only *after* the UI message loop has stopped (main window closed/disposed).
		Write-Verbose "UI Message loop finished. Proceeding to final cleanup..." -ForegroundColor Green
	#endregion Step 6: Run UI Message Loop
}
catch
{
	# --- Main Catch Block ---
	# Catches any unhandled major errors from the main setup or run steps (Steps 1-6).
	$errorMessage = "`nFATAL UNHANDLED ERROR during application lifecycle: $($_.Exception.Message)"
	Write-Verbose $errorMessage -ForegroundColor Red
		
	# Try showing the critical error in a pop-up box for the user to see.
	try
	{
		Show-ErrorDialog ($errorMessage + "`n`nPlease check console logs for details.`n`nStack Trace:`n" + $($_.ScriptStackTrace))
	}
	catch
	{
		# If even the error pop-up fails, log that failure to the error output.
		Write-Verbose "  Failed to show final error dialog. The critical error was: $errorMessage" -ForegroundColor Red
	}
	# App will then go to the 'finally' block for cleanup.
}
finally
{
	# --- Main Finally Block ---
	# This block *always* runs, whether the 'try' block finished okay,
	# threw an error caught by 'catch', or quit early via 'exit' (though cleanup after 'exit' can be iffy).
	# Very important to make sure resource cleanup happens.
	#region Step 7: Final Application Cleanup
		Write-Verbose "--- Step 7: Entering Final Application Cleanup ---" -ForegroundColor Cyan
		# Make sure Stop-Dashboard function exists before calling it.
		if (Get-Command Stop-Dashboard -ErrorAction SilentlyContinue)
		{
			# Call the main cleanup function.
			$cleanupStatus = Stop-Dashboard # Save return status (true/false) if needed.
			Write-Verbose "[OK] Stop-Dashboard execution completed (Overall Success: $cleanupStatus)." -ForegroundColor Green
		}
		else
		{
			# Log a warning if the main cleanup function is missing (shouldn't happen if modules loaded).
			Write-Verbose "  Stop-Dashboard function not found! Full resource cleanup may not occur." -ForegroundColor Yellow
			# Try minimal essential backup cleanup if possible (like dispose main form).
			Write-Verbose "  Attempting basic MainForm dispose as fallback..." -ForegroundColor Cyan
			try
			{
				$finalMainForm = $global:DashboardConfig.UI.PSObject.Properties['MainForm']
				if ($finalMainForm -and $finalMainForm.Value -is [System.Windows.Forms.Form] -and -not $finalMainForm.Value.IsDisposed)
				{
					$finalMainForm.Value.Dispose()
					Write-Verbose "  Fallback MainForm dispose successful." -ForegroundColor Red
				}
				else
				{
					Write-Verbose "  Fallback MainForm dispose skipped (form null, invalid, or already disposed)."  -ForegroundColor Red
				}
			}
			catch
			{
				Write-Verbose "  Fallback MainForm dispose attempt failed: $($_.Exception.Message)"  -ForegroundColor Red
			}
		}
			
		# Optional: Explicitly exit the Windows Forms app context if it was used.
		# Check if the assembly is loaded before calling Application static methods.
		if ([System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms'))
		{
			Write-Verbose "Requesting Windows Forms application context exit..." -ForegroundColor Cyan
			try
			{
				[System.Windows.Forms.Application]::ExitThread() 
			}
			catch
			{
				Write-Verbose "  Error calling Application.ExitThread(): $($_.Exception.Message)" -ForegroundColor Red
			} # ExitThread is often better in PS scripts than Exit().
			# try { [System.Windows.Forms.Application]::Exit() } catch { Write-Verbose "Error calling Application.Exit(): $($_.Exception.Message)"} -ForegroundColor Red
		}
			
		Write-Verbose "=========================================" -ForegroundColor Cyan
		Write-Verbose "=== Entropia Dashboard Exited ===" -ForegroundColor Cyan
		Write-Verbose "=== Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ===" -ForegroundColor Cyan
		Write-Verbose "=========================================" -ForegroundColor Cyan
	#endregion Step 7: Final Application Cleanup
}

#endregion Main Execution Block